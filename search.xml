<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS 起步</title>
    <url>/2022/01/17/aws-get-started/</url>
    <content><![CDATA[<p>🌈 AWS 在部署容器时提供了很多选项。但是知道哪种服务能做什么，即使是经验丰富的专业人士也会感到头痛。</p>
<span id="more"></span>
<h2 id="了解每个服务的角色"><a href="#了解每个服务的角色" class="headerlink" title="了解每个服务的角色"></a>了解每个服务的角色</h2><p>本质上，每个服务都是编排层（管理容器）或宿主层（运行容器）的一部分：</p>
<ul>
<li>ECS、EK 和 Kuberneretes 是编排层的一部分；</li>
<li>EC2 和 Fargate 是宿主层的一部分；</li>
</ul>
<h2 id="EKS-vs-ECS-vs-Kuberneretes-编排层"><a href="#EKS-vs-ECS-vs-Kuberneretes-编排层" class="headerlink" title="EKS vs ECS vs Kuberneretes - 编排层"></a>EKS vs ECS vs Kuberneretes - 编排层</h2><p><img src="https://prof.justaftermidnight247.com/wp-content/uploads/2021/03/2-768x512.png" alt="aws-eks-ecs"></p>
<p>容器编排服务自动化管理容器的手动工作。编排的主要好处是：</p>
<ul>
<li>Simplifying Operations - 自动部署和创建新容器；</li>
<li>Adding Resilience - 自动管理故障和容器生命周期；</li>
<li>Adding Security - 消除由于用户错误而造成的违规行为，并自动化安全最佳实践；</li>
</ul>
<h3 id="ECS-Elastic-Container-Service"><a href="#ECS-Elastic-Container-Service" class="headerlink" title="ECS - Elastic Container Service"></a>ECS - Elastic Container Service</h3><p>AWS 自己的容器服务。它在集群中管理容器，被称为 ECS 集群。</p>
<h3 id="EKS-Elastic-Kuberneretes-Service"><a href="#EKS-Elastic-Kuberneretes-Service" class="headerlink" title="EKS - Elastic Kuberneretes Service"></a>EKS - Elastic Kuberneretes Service</h3><p>EKS 是一种 AWS 容器服务，它与 ECS 的不同之处在于它用于管理 AWS 基础设施上的 Kubernetes 集群。还可以将现有的 Kubernetes 工作负载迁移到 EKS 上。</p>
<h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>Kubernetes 是开源的容器编排服务，非常流行，但要在 AWS 上部署 Kubernetes，可以说必须使用 EKS 来实现。</p>
<h3 id="ECS-vs-EKS"><a href="#ECS-vs-EKS" class="headerlink" title="ECS vs EKS"></a>ECS vs EKS</h3><h4 id="ECS-pros"><a href="#ECS-pros" class="headerlink" title="ECS pros"></a>ECS pros</h4><ul>
<li>ECS 是 AWS 自己的容器服务，因此它与 AWS 生态系统，包括 CloudTrail，CloudWatch 和 Amazon ECR（弹性容器注册）进行了更好的集成，以实现对 Docker 映像的无缝管理；</li>
<li>ECS 控制面板完全自由，而 EKS 需要充值；</li>
</ul>
<h4 id="EKS-pros"><a href="#EKS-pros" class="headerlink" title="EKS pros"></a>EKS pros</h4><ul>
<li>由于 EKS 使用 Kubernetes，所以它更加灵活，这意味着可以比 ECS 更轻松地将工作迁移到另一个平台，使其更适合复杂的多云工作负载；</li>
<li>EKS 更适合复杂的应用；</li>
<li>EKS 最终提供了比 ECS 更多的控制（对集群的管理和调度）；</li>
</ul>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>如果需要一个更简单的应用程序，并且希望合并许多 AWS 服务，ECS 可能是比较好的选择。如果有一个更复杂的项目，特别是如果想要使用多云方法，EKS 是正确的选择——显然，如果想要使用 Kubernetes 时。</p>
<h2 id="Fargate-vs-EC2-–-宿主层"><a href="#Fargate-vs-EC2-–-宿主层" class="headerlink" title="Fargate vs EC2 – 宿主层"></a>Fargate vs EC2 – 宿主层</h2><p><img src="https://prof.justaftermidnight247.com/wp-content/uploads/2021/03/1-768x512.png" alt="aws-fargate-ec2"></p>
<p>容器部署的宿主层表示容器将实际运行的虚拟机（或承载的虚拟机，因此得名）。</p>
<h3 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h3><blockquote>
<p>Deploy and manage your own cluster of EC2 instances for running the containers.</p>
</blockquote>
<p>EC2 是部署容器的传统方式。在 EC2 中，通过实际的 VM 进行运行。</p>
<h3 id="Fargate"><a href="#Fargate" class="headerlink" title="Fargate"></a>Fargate</h3><blockquote>
<p>Run containers directly, without any EC2 instances.</p>
</blockquote>
<p>Fargate 带来了一种无服务器的方式，Fargate 不是自己配置服务器，而是根据每个请求自动为容器配置基础设施。</p>
<h3 id="EC2-vs-Fargate"><a href="#EC2-vs-Fargate" class="headerlink" title="EC2 vs Fargate"></a>EC2 vs Fargate</h3><h4 id="EC2-pros"><a href="#EC2-pros" class="headerlink" title="EC2 pros"></a>EC2 pros</h4><ul>
<li>EC2 意味着更多的手工工作，但是有更多的控制力和透明度（因为你自己需要配置基础设施）；</li>
<li>需要熟悉 EC2；</li>
</ul>
<h4 id="Fargate-pros"><a href="#Fargate-pros" class="headerlink" title="Fargate pros"></a>Fargate pros</h4><ul>
<li>Fargate 意味着更少的工作，通常成本更低（需要你为消耗的资源付费），对应的控制力和透明度更低；</li>
<li>Fargate 是无服务器的，这种方式是以后的常态；</li>
</ul>
<h4 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h4><p>如果有时间和预算，并且需要额外的监督和控制，EC2 是更好的选择。如果想要降低成本和减轻负担，Fargate 是个不错的选择。</p>
<h2 id="Benefits-of-infrastructure-as-code"><a href="#Benefits-of-infrastructure-as-code" class="headerlink" title="Benefits of infrastructure as code"></a>Benefits of infrastructure as code</h2><blockquote>
<p>以下摘自 AWS 官网。</p>
</blockquote>
<ul>
<li><strong>Visibility</strong>: An infrastructure as code template serves as a very clear reference of what resources are on your account, and what their settings are. You don’t have to navigate to the web console to check the parameters.</li>
<li><strong>Stability</strong>: If you accidentally change the wrong setting or delete the wrong resource in the web console you can break things. Infrastructure as code helps solve this, especially when it is combined with version control, such as Git.</li>
<li><strong>Scalability</strong>: With infrastructure as code you can write it once and then reuse it many times. This means that one well written template can be used as the basis for multiple services, in multiple regions around the world, making it much easier to horizontally scale.</li>
<li><strong>Security</strong>: Once again infrastructure as code gives you a unified template for how to deploy your architecture. If you create one well secured architecture you can reuse it multiple times, and know that each deployed version is following the same settings.</li>
<li><strong>Transactional</strong>: CloudFormation not only creates resources on your AWS account but also waits for them to stabilize while they start. It verifies that provisioning was successful, and if there is a failure it can gracefully roll the infrastructure back to a past known good state.</li>
</ul>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 RESTful API</title>
    <url>/2018/04/22/basic-restful-api/</url>
    <content><![CDATA[<h1 id="什么是-RESTful"><a href="#什么是-RESTful" class="headerlink" title="什么是 RESTful"></a>什么是 RESTful</h1><blockquote>
<ul>
<li><a href="https://github.com/aisuhua/restful-api-design-references">RESTful API 设计参考文献列表</a></li>
<li><a href="http://www.restapitutorial.com/lessons/whatisrest.html">What Is REST?</a></li>
</ul>
</blockquote>
<p><code>RESTful</code> 是一种软件设计风格，由 <a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Thomas Fielding</a> 在他 <code>2000</code> 年的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">论文</a>中提出，<code>Fielding</code> 将他对互联网软件的架构原则，定名为 <code>REST</code>，即 <code>Representational State Transfer</code> 的缩写，译为表现层状态转化，也可理解为用 <code>URL</code> 定位资源，用 <code>HTTP</code> 方法描述操作。</p>
<p><code>REST</code> 的核心是可编辑的资源及其集合，用符合 <code>Atom</code> 文档标准的 <code>Feed</code> 和 <code>Entry</code> 表示。每个资源或者集合有一个惟一的 <code>URI</code>。系统以资源为中心，构建并提供一系列的 <code>Web</code> 服务。<code>REST</code> 的基本概念和原则包括：系统上的所有事物都被抽象为资源；每个资源对应唯一的资源标识；对资源的操作不会改变资源标识本身；所有的操作都是无状态的；等等。</p>
<h1 id="为何要用-RESTful"><a href="#为何要用-RESTful" class="headerlink" title="为何要用 RESTful"></a>为何要用 RESTful</h1><p>按照 <code>RESTful</code> 架构可以充分的利用 <code>HTTP</code> 协议带给我们的各种功能，算是对 <code>HTTP</code> 协议使用的最佳实践，还有一点就是可以使软件架构设计更加清晰，可维护性更好</p>
<h1 id="如何做-RESTful"><a href="#如何做-RESTful" class="headerlink" title="如何做 RESTful"></a>如何做 RESTful</h1><h2 id="RESTful-架构"><a href="#RESTful-架构" class="headerlink" title="RESTful 架构"></a>RESTful 架构</h2><p>如果一个架构符合 <code>REST</code> 原则，就称它为 <code>RESTful</code> 架构</p>
<p>从以下三个方面理解 <code>RESTful</code> 架构：</p>
<ul>
<li>资源 - <code>Resources</code>：所谓资源，就是网络上的一个实体，或者说是网络上的一个具体信息</li>
<li>表现层 - <code>Representation</code>：资源是一种信息实体，它可以有多种外在表现形式。我们把『资源』具体呈现出来的形式，叫做它的『表现层』</li>
<li>状态转化 - <code>State Transfer</code>：互联网通信协议 <code>HTTP协议</code>，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生『状态转化 - <code>State Transfer</code>』。而这种转化是建立在表现层之上的，所以就是『表现层状态转化』</li>
</ul>
<p>也主就是说，遵循 <code>REST</code> 原则，设计出来的一个架构就称为 <code>RESTful</code> 架构，比如：<code>GitHub API</code> 就是一个典型的 <code>RESTful</code> 架构</p>
<h2 id="RESTful-API-设计"><a href="#RESTful-API-设计" class="headerlink" title="RESTful API 设计"></a>RESTful API 设计</h2><h3 id="使用-URL-定位资源"><a href="#使用-URL-定位资源" class="headerlink" title="使用 URL 定位资源"></a>使用 URL 定位资源</h3><blockquote>
<p><a href="https://developer.github.com/v3/">GitHub REST API v3</a></p>
</blockquote>
<p>很大程度上，定义的 <code>API</code> 地址要对程序员友好，并且能在浏览器地址栏容易输入。是的，这两个指标也能检验出那些合格的 <code>API</code> 设计者，我就是这样认为的</p>
<ul>
<li>应该将 <code>API</code> 部署在专用域名之下，比如：<code>api.example.com</code></li>
<li>不用大写</li>
<li>用中杠 <code>-</code> 而不是 <code>_</code></li>
<li>参数列表要 <code>encode</code></li>
<li><code>URI</code> 中尽量使用名词而不是动词</li>
<li><code>URI</code> 中的名词表示资源集合，使用复数形式</li>
<li>虽然 <code>/</code> 在 <code>URI</code> 中表达层级，但是避免为了追求 <code>REST</code> 导致层级过深，适当使用参数表示，比如：<code>GET /animals?zoo=1&amp;area=3&amp;page=1</code></li>
</ul>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul>
<li>将版本号直接加入 <code>URL</code> 中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://api.example.com/v1</span><br><span class="line">https://api.example.com/v2</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>HTTP</code> 请求头的 <code>Accept</code> 字段进行区分</li>
</ul>
<p>在这种方式中，客户端在 <code>Accept Header</code> 中存放 <code>Accept: application/vnd.example.v1+json</code>，服务器自定义 <code>Header</code> 返回当前版本信息 <code>X-Example-Media-Type: example.v3; format=json</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://api.example.com/</span><br><span class="line">    Accept: application/vnd.example.v1+json</span><br><span class="line">    Accept: application/vnd.example.v2+json</span><br></pre></td></tr></table></figure>
<p>请求 <code>GitHub</code> 查看头中自定义的 <code>X-GitHub-Media-Type</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -i https://api.github.com/users/octocat/orgs</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sun, 22 Apr 2018 03:43:57 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 5</span><br><span class="line">Server: GitHub.com</span><br><span class="line">Status: 200 OK</span><br><span class="line">X-RateLimit-Limit: 60 <span class="comment"># 最大访问次数</span></span><br><span class="line">X-RateLimit-Remaining: 50 <span class="comment"># 剩余的访问次数</span></span><br><span class="line">X-RateLimit-Reset: 1524369179 <span class="comment"># 到该时间点，访问次数会重置为 X-RateLimit-Limit</span></span><br><span class="line">Cache-Control: public, max-age=60, s-maxage=60</span><br><span class="line">Vary: Accept</span><br><span class="line">ETag: <span class="string">&quot;98f0c1b396a4e5d54f4d5fe561d54b44&quot;</span></span><br><span class="line">X-GitHub-Media-Type: github.v3; format=json <span class="comment"># GitHub 服务端自定义 Header 返回当前版本信息</span></span><br><span class="line">Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Strict-Transport-Security: max-age=31536000; includeSubdomains; preload</span><br><span class="line">X-Frame-Options: deny</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin</span><br><span class="line">Content-Security-Policy: default-src <span class="string">&#x27;none&#x27;</span></span><br><span class="line">X-Runtime-rack: 0.010912</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-GitHub-Request-Id: E5BC:17C8:C2B264:1064F09:5ADC04FD</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>请求 <code>GitHub</code> 接口超过限制次数后的响应</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 当请求到第 61 次时的响应结果</span><br><span class="line">$ <span class="keyword">for</span> (( i=0; i&lt;61; i=i+1 )); <span class="keyword">do</span> curl -i https://api.github.com/users/octocat/orgs; <span class="keyword">done</span></span><br><span class="line">HTTP/1.1 403 Forbidden <span class="comment"># 服务器拒绝了</span></span><br><span class="line">Date: Sun, 22 Apr 2018 04:04:15 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 258</span><br><span class="line">Server: GitHub.com</span><br><span class="line">Status: 403 Forbidden <span class="comment"># 返回的状态码</span></span><br><span class="line">X-RateLimit-Limit: 60</span><br><span class="line">X-RateLimit-Remaining: 0 <span class="comment"># 剩余次数为 0 了</span></span><br><span class="line">X-RateLimit-Reset: 1524372880</span><br><span class="line">X-GitHub-Media-Type: github.v3; format=json</span><br><span class="line">Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Strict-Transport-Security: max-age=31536000; includeSubdomains; preload</span><br><span class="line">X-Frame-Options: deny</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin</span><br><span class="line">Content-Security-Policy: default-src <span class="string">&#x27;none&#x27;</span></span><br><span class="line">X-Runtime-rack: 0.012239</span><br><span class="line">X-GitHub-Request-Id: E756:2E0E:75FBFF:A0DA73:5ADC09BF</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;API rate limit exceeded for 221.223.47.129. (But here&#x27;s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)&quot;</span>,</span><br><span class="line">  <span class="string">&quot;documentation_url&quot;</span>: <span class="string">&quot;https://developer.github.com/v3/#rate-limiting&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义 <code>Header</code> 头</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">X-Api-Version: 1</span><br></pre></td></tr></table></figure>
<h3 id="使用-HTTP-方法"><a href="#使用-HTTP-方法" class="headerlink" title="使用 HTTP 方法"></a>使用 HTTP 方法</h3><div class="note info">
            <ul><li>安全性：不会改变资源状态，可以理解为只读的</li><li>幂等性：执行 <code>1</code> 次和执行 <code>N</code> 次，对资源状态改变的效果是等价的，也就是说无论你执行多少次重复的操作都不会给资源造成变更</li></ul>
          </div>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>是否安全</th>
<th>是否幂等</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GET</code></td>
<td>获取资源，单个或多个</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td><code>POST</code></td>
<td>创建资源</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td><code>PUT</code></td>
<td>更新资源，客户端提供完整的资源数据</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td><code>PATCH</code></td>
<td>更新资源，客户端提供部分的资源数据</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td><code>DELETE</code></td>
<td>删除资源</td>
<td>否</td>
<td>是</td>
</tr>
</tbody>
</table>
<h3 id="使用-HTTP-响应代码"><a href="#使用-HTTP-响应代码" class="headerlink" title="使用 HTTP 响应代码"></a>使用 HTTP 响应代码</h3><h4 id="请求成功"><a href="#请求成功" class="headerlink" title="请求成功"></a>请求成功</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>200 OK</code></td>
<td>已创建，请求成功且服务器已创建了新的资源，也可以被用在不创建新资源的 <code>POST</code> 操作上</td>
</tr>
<tr>
<td><code>201 Created</code></td>
<td>对象创建成功并返回相应资源数据，如：<code>POST</code> 成功；创建完成后响应头中应该携带头标 <code>Location</code>，指向新建资源的地址</td>
</tr>
<tr>
<td><code>202 Accepted</code></td>
<td>服务器接受了请求，但是还未处理，响应中应该包含相应的指示信息，告诉客户端该去哪里查询关于本次请求的信息</td>
</tr>
<tr>
<td><code>204 No Content</code></td>
<td>请求执行成功，不返回相应资源数据，如：<code>PATCH</code>、<code>DELETE</code> 成功</td>
</tr>
</tbody>
</table>
<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>301 Moved Permanently</code></td>
<td>被请求的资源已永久移动到新位置</td>
</tr>
<tr>
<td><code>302 Found</code></td>
<td>请求的资源现在临时从不同的 <code>URI</code> 响应请求</td>
</tr>
<tr>
<td><code>303 See Other</code></td>
<td>对应当前请求的响应可以在另一个 <code>URI</code> 上被找到，客户端应该使用 <code>GET</code> 方法进行请求。比如在创建已经被创建的资源时，可以返回 <code>303</code></td>
</tr>
<tr>
<td><code>307 Temporary Redirect</code></td>
<td>对应当前请求的响应可以在另一个 <code>URI</code> 上被找到，客户端应该保持原有的请求方法进行请求</td>
</tr>
</tbody>
</table>
<h4 id="条件请求"><a href="#条件请求" class="headerlink" title="条件请求"></a>条件请求</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>304 Not Modified</code></td>
<td>资源自从上次请求后没有再次发生变化，主要使用场景在于实现数据缓存</td>
</tr>
<tr>
<td><code>409 Conflict</code></td>
<td>请求操作和资源的当前状态存在冲突。主要使用场景在于实现并发控制</td>
</tr>
<tr>
<td><code>412 Precondition Failed</code></td>
<td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。主要使用场景在于实现并发控制</td>
</tr>
</tbody>
</table>
<h4 id="客户端错误"><a href="#客户端错误" class="headerlink" title="客户端错误"></a>客户端错误</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>400 Bad Request</code></td>
<td>求体包含语法错误</td>
</tr>
<tr>
<td><code>401 Unauthorized</code></td>
<td>未授权，请求要求进行身份验证，如果服务器就算是身份验证后也不允许客户访问资源，应该响应 <code>403 Forbidden</code>。如果请求里有 <code>Authorization</code> 头，那么必须返回一个 <a href="https://tools.ietf.org/html/rfc7235#section-4.1"><code>WWW-Authenticate</code></a> 头</td>
</tr>
<tr>
<td><code>403 Forbidden</code></td>
<td>已禁止，服务器拒绝请求</td>
</tr>
<tr>
<td><code>404 Not Found</code></td>
<td>未找到，请求一个不存在的资源</td>
</tr>
<tr>
<td><code>405 Method Not Allowed</code></td>
<td>方法禁用，禁用请求中所指定的方法</td>
</tr>
<tr>
<td><code>406 Not Acceptable</code></td>
<td>服务器不支持客户端请求的内容格式，但响应里会包含服务端能够给出的格式的数据，并在 <code>Content-Type</code> 中声明格式名称</td>
</tr>
<tr>
<td><code>410 Gone</code></td>
<td>已删除，如果请求的资源已被永久删除，那么，服务器会返回此响应</td>
</tr>
<tr>
<td><code>413 Payload Too Large</code></td>
<td><code>POST</code> 或者 <code>PUT</code> 请求的消息实体过大</td>
</tr>
<tr>
<td><code>415 Unsupported Media Type</code></td>
<td>服务器不支持请求中提交的数据的格式</td>
</tr>
<tr>
<td><code>422 Unprocessable Entity</code></td>
<td>请求格式正确，但是由于含有语义错误，无法响应</td>
</tr>
<tr>
<td><code>428 Precondition Required</code></td>
<td>要求先决条件，如果想要请求能成功必须满足一些预设的条件</td>
</tr>
<tr>
<td><code>429 Too Many Requests</code></td>
<td>由于请求频次达到上限而被拒绝访问</td>
</tr>
</tbody>
</table>
<h4 id="服务端错误"><a href="#服务端错误" class="headerlink" title="服务端错误"></a>服务端错误</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>500 Internal Server Error</code></td>
<td>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理</td>
</tr>
<tr>
<td><code>501 Not Implemented</code></td>
<td>服务器不支持当前请求所需要的某个功能</td>
</tr>
<tr>
<td><code>502 Bad Gateway</code></td>
<td>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应</td>
</tr>
<tr>
<td><code>503 Service Unavailable</code></td>
<td>由于临时的服务器维护或者过载，服务器当前无法处理请求</td>
</tr>
</tbody>
</table>
<h3 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h3><blockquote>
<p><a href="https://www.zhihu.com/question/25636060">为什么都反对 XML 而支持使用 JSON？</a></p>
</blockquote>
<blockquote>
<p>当然轮子哥是这样说的『在我长时间使用 <code>XML</code> 和 <code>JSON</code> 的过程中我发现，其实他们是不可互相替代的。我们只能说如今大部分适合 <code>XML</code> 的程序要么都写完了要么都不时髦了，现在需要 <code>JSON</code> 的还没写的程序多一点』</p>
</blockquote>
<p><code>GitHub</code> 是在请求的 <code>body</code> 体中使用 <code>JSON</code> 格式来返回数据的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -i https://api.github.com -u foo:bar</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Bad credentials&quot;</span>,</span><br><span class="line">  <span class="string">&quot;documentation_url&quot;</span>: <span class="string">&quot;https://developer.github.com/v3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写文档"><a href="#编写文档" class="headerlink" title="编写文档"></a>编写文档</h3><p>一个好的文档也反应出接口开发者的素养（当然那些赶项目进度的除外，笔者确实也经历过这种场景，项目急吼吼的上，就感觉明天做不出来，后天公司就要倒闭的这种，不要说写文档，就自己写的代码 <code>Review</code> 一下都是浪费时间。如果条件允许，我个人还是愿意把程序和文档都写好的）。当然，通过这些，你也看到了我的素养确实也不高，找了一个赶进度的借口不写文档，你愿意这么理解我也就不说什么了</p>
<p>文档的一些原则</p>
<ul>
<li>每一个接口的请求参数，每个参数的类型限制，是否必填，可选的值等都进行明确</li>
<li>响应结果集中的每个参数都有明确的解释</li>
<li>对于特定场景和专门适配的接口，提供详细的说明，怎么的场景下调用之类等等</li>
</ul>
<p>显然，这么宏大的标题可不是写一篇文章就能搞定的，以上这些就是我对 <code>RESTful API</code> 的一些理解和总结，后期会补充和完善</p>
<p>未完待续…</p>
]]></content>
      <categories>
        <category>basic</category>
      </categories>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP 的三次握手</title>
    <url>/2018/05/12/basic-tcp-three-handshake/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h2><p>传输控制协议 - <code>Transmission Control Protocol</code>，缩写为 <code>TCP</code>，是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 <code>IETF</code> 的 <code>RFC 793</code> 定义。在简化的计算机网络 <code>OSI</code> 模型中，它完成第四层传输层所指定的功能，用户数据包协议 <code>UDP</code> 是同一层内另一个重要的传输协议。</p>
<h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><p><code>TCP</code> 协议的运行可划分为三个阶段：连接创建（<code>connection establishment</code>）、数据传送（<code>data transfer</code>）和连接终止<code>connection termination</code>。操作系统将 <code>TCP</code> 连接抽象为套接字表示的本地端点（<code>local end-point</code>），作为编程接口给程序使用。在 <code>TCP</code> 连接的生命期内，本地端点要经历一系列的状态改变。</p>
<h2 id="TCP-特性"><a href="#TCP-特性" class="headerlink" title="TCP 特性"></a>TCP 特性</h2><ul>
<li><code>TCP</code> 提供一种面向连接的、可靠的字节流服务</li>
<li>在一个 <code>TCP</code> 连接中，仅有两方进行彼此通信。广播和多播不能用于 <code>TCP</code></li>
<li><code>TCP</code> 使用校验和，确认和重传机制来保证可靠传输</li>
<li><code>TCP</code> 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复</li>
<li><code>TCP</code> 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li>
</ul>
<div class="note danger">
            <p><code>TCP</code> 并不能保证数据一定会被对方接收到。<code>TCP</code> 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 <code>TCP</code> 也不是 <code>100%</code> 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p>
          </div>
<h2 id="OSI-模型"><a href="#OSI-模型" class="headerlink" title="OSI` 模型"></a>OSI` 模型</h2><p>开放式系统互联通信参考模型 - <code>Open System Interconnection Reference Model</code>，缩写为 <code>OSI</code>。一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于 <code>ISO/IEC 7498-1</code></p>
<table>
<thead>
<tr>
<th>OSI 层（从上到下）</th>
<th>功能</th>
<th>协议</th>
</tr>
</thead>
<tbody>
<tr>
<td>应用层 - <code>Application Layer</code></td>
<td>提供为应用软件而设的接口，以设置与另一应用软件之间的通信</td>
<td><code>HTTP(S)</code>、<code>FTP</code>、<br><code>TELNET</code>、<code>SSH</code>、<br><code>SMTP</code>、<code>POP3</code>、<br><code>NFS</code></td>
</tr>
<tr>
<td>表示层 - <code>Presentation Layer</code></td>
<td>把数据转换为能与接收者的系统格式兼容并适合传输的格式，以确保以一个系统应用层发送的信息可以被另一个系统应用层识别，即定义数据格式及加密</td>
<td>无</td>
</tr>
<tr>
<td>会话层 - <code>Session Layer</code></td>
<td>负责在数据传输中设置和维护电脑网络中两台电脑之间的通信连接，建立、管理和终止表示层与实体之间的通信会话</td>
<td>无</td>
</tr>
<tr>
<td>传输层 - <code>Transport Layer</code></td>
<td>提供可靠的端到端的网络数据流服务</td>
<td><code>TCP</code>、<code>UDP</code></td>
</tr>
<tr>
<td>网络层 - <code>Network Layer</code></td>
<td>决定数据的路径选择和转寄，将网络表头（<code>NH</code>）加至数据包，以形成分组。在源和终点之间建立连接</td>
<td><code>IPv4</code>、<code>IPv6</code></td>
</tr>
<tr>
<td>数据链路层 - <code>Data Link Layer</code></td>
<td>不同的数据链路层定义了不同的网络和协议，包括网络寻址、错误侦测和改错。分为逻辑链路控制和介质访问控制两个子层</td>
<td><code>ARP</code>、<code>RARP</code></td>
</tr>
<tr>
<td>物理层 - <code>Physical Layer</code></td>
<td>局部局域网上传送数据帧。将信息编码成电流脉冲或其它信号用于网上传输</td>
<td><code>IEEE 802</code>、<br><code>IEEE 802.2</code></td>
</tr>
</tbody>
</table>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/network/201812/basic-osi-model.gif" alt="basic-osi-model.gif"></p>
<h1 id="TCP-报文格式"><a href="#TCP-报文格式" class="headerlink" title="TCP 报文格式"></a>TCP 报文格式</h1><h2 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h2><p>序号 - <code>Sequence Number</code>：<code>Seq</code> 序号，占 <code>32</code> 位，用来标识从 <code>TCP</code> 源端向目的端发送的字节流，发起方发送数据时对此进行标记。</p>
<h2 id="确认序号"><a href="#确认序号" class="headerlink" title="确认序号"></a>确认序号</h2><p>确认序号，也称应答号 - <code>Acknowledgment Number</code>：<code>Ack</code> 序号，占 <code>32</code> 位，只有 <code>ACK</code> 标志位为 <code>1</code> 时，确认序号字段才有效，<code>Ack=Seq+1</code></p>
<h2 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h2><ul>
<li><code>SYN</code> - <code>Synchronize Sequence Numbers</code>，同步标志：发起一起新连接，该标志仅在三次握手建立 <code>TCP</code> 连接时有效</li>
<li><code>ACK</code> - <code>Acknowledgement Number</code>，确认标志：确认序号有效</li>
<li><code>RST</code> - <code>Reset</code>，复位标志：重置连接</li>
<li><code>URG</code> - <code>Urgent Pointer</code>，紧急指针标志：紧急指针有效</li>
<li><code>PSH</code> - <code>Push</code>，推标志：接收方应该尽快将这个报文交给应用层</li>
<li><code>FIN</code> - <code>Finish</code>，结束标志：释放一个连接</li>
</ul>
<h1 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h1><blockquote>
<p><a href="https://www.wireshark.org/#download"><code>Wireshark</code></a></p>
</blockquote>
<h2 id="封包详细信息"><a href="#封包详细信息" class="headerlink" title="封包详细信息"></a>封包详细信息</h2><ul>
<li><code>Frame</code>：物理层的数据帧概况</li>
<li><code>Ethernet II</code>：数据链路层以太网帧头部信息</li>
<li><code>Internet Protocol Version 4</code>：互联网层 <code>IP</code> 包头部信息</li>
<li><code>Transmission Control Protocol</code>：传输层T的数据段头部信息，此处是 <code>TCP</code></li>
<li><code>Hypertext Transfer Protocol</code>：应用层的信息，此处是 <code>HTTP</code></li>
</ul>
<h2 id="Wireshark-与对应的-OSI-模型"><a href="#Wireshark-与对应的-OSI-模型" class="headerlink" title="Wireshark 与对应的 OSI 模型"></a>Wireshark 与对应的 OSI 模型</h2><table>
<thead>
<tr>
<th><code>Wireshark</code></th>
<th><code>OSI</code></th>
<th><code>Protocol</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Hypertext Transfer Protocol</code></td>
<td>应用层 - <code>Application Layer</code></td>
<td><code>HTTP</code>、<code>FTP</code>、<br><code>TFTP</code>、<code>SMTP</code>、<br><code>SNMP</code>、<code>DNS</code></td>
</tr>
<tr>
<td><code>Transmission Control Protocol</code></td>
<td>传输层 - <code>Transport Layer</code></td>
<td><code>TCP</code>、<code>UDP</code>，<br>数据包一旦离开网卡即进入网络传输层</td>
</tr>
<tr>
<td><code>Internet Protocol Version 4</code></td>
<td>网络层 - <code>Network Layer</code></td>
<td><code>ICMP</code>、<code>IGMP</code>、<br><code>IPv4/IPv6</code>、<br><code>ARP</code>、<code>RARP</code></td>
</tr>
<tr>
<td><code>Ethernet II</code></td>
<td>数据链路层 - <code>Data Link Layer</code></td>
<td></td>
</tr>
<tr>
<td><code>Frame</code></td>
<td>物理层 - <code>Physical Layer</code></td>
<td><br></td>
</tr>
</tbody>
</table>
<h1 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h1><blockquote>
<ul>
<li><a href="https://www.zhihu.com/question/24853633">TCP 为什么是三次握手，而不是两次或四次？</a></li>
<li>不要将确认序号 <code>Ack</code> 与标志位中的 <code>ACK</code> 搞混了</li>
<li>确认方 <code>Ack</code> 等于发起方 <code>Seq+1</code>，两端配对</li>
</ul>
</blockquote>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/network/201812/basic-tcp-handshake.gif" alt="建立 TCP 需要三次握手才能建立，而断开连接则需要四次握手"></p>
<h2 id="过滤请求"><a href="#过滤请求" class="headerlink" title="过滤请求"></a>过滤请求</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/network/201812/basic-wireshark-filter.jpg" alt="basic-wireshark-filter.jpg"></p>
<h2 id="定位到三次握手的-TCP-流"><a href="#定位到三次握手的-TCP-流" class="headerlink" title="定位到三次握手的 TCP 流"></a>定位到三次握手的 TCP 流</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/network/201812/basic-wireshark-three-handshake.jpg" alt="basic-wireshark-three-handshake.jpg"></p>
<h2 id="三次握手详情"><a href="#三次握手详情" class="headerlink" title="三次握手详情"></a>三次握手详情</h2><h3 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h3><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/network/201812/basic-wireshark-first.jpg" alt="basic-wireshark-first.jpg"></p>
<p><code>Client</code> 将标志位 <code>SYN</code> 置为 <code>1</code>，随机产生一个值 <code>Seq=X</code>，并将该数据包发送给 <code>Server</code>，<code>Client</code> 进入 <code>SYN_SENT</code> 状态，等待 <code>Server</code> 确认</p>
<h3 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h3><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/network/201812/basic-wireshark-second.jpg" alt="basic-wireshark-second.jpg"></p>
<p><code>Server</code> 收到数据包后由标志位 <code>SYN</code> 为 <code>1</code> 知道 <code>Client</code> 请求建立连接，<code>Server</code> 将标志位 <code>SYN</code> 和 <code>ACK</code> 都置为 <code>1</code>，<code>Ack=X+1</code>，随机产生一个值 <code>Seq=Y</code>，并将该数据包发送给 <code>Client</code> 以确认连接请求，<code>Server</code> 进入 <code>SYN_RCVD</code> 状态</p>
<h3 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h3><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/network/201812/basic-wireshark-third.jpg" alt="basic-wireshark-third.jpg"></p>
<p><code>Client</code> 收到确认后，检查 <code>Ack</code> 是否为 <code>X+1</code>，<code>ACK</code> 是否置为 <code>1</code>，如果正确则将标志位 <code>ACK</code> 置为 <code>1</code>，<code>Ack=Y+1</code>，并将数据包发送给 <code>Server</code>，<code>Server</code> 检查 <code>Ack</code> 是否为 <code>Y+1</code>，<code>ACK</code> 是否为 <code>1</code>，如果正确则连接建立成功，<code>Client</code> 和 <code>Server</code> 进入 <code>ESTABLISHED</code> 状态，完成三次握手，随后 <code>Client</code> 与 <code>Server</code> 之间可以开始传输数据了</p>
<h1 id="SYN-攻击"><a href="#SYN-攻击" class="headerlink" title="SYN 攻击"></a>SYN 攻击</h1><p>在三次握手过程中，<code>Server</code> 发送 <code>SYN-ACK</code> 之后，收到 <code>Client</code> 的 <code>ACK</code> 之前的 <code>TCP</code> 连接称为半连接（<code>half-open connect</code>），此时 <code>Server</code> 处于 <code>SYN_RCVD</code> 状态，当收到 <code>ACK</code> 后，<code>Server</code> 转入 <code>ESTABLISHED</code> 状态. <code>SYN</code> 攻击就是 <code>Client</code> 在短时间内伪造大量不存在的 <code>IP</code> 地址，并向 <code>Server</code> 不断地发送 <code>SYN</code> 包，<code>Server</code> 回复确认包，并等待 <code>Client</code> 的确认，由于源地址是不存在的，因此，<code>Server</code> 需要不断重发直至超时，这些伪造的 <code>SYN</code> 包将长时间占用未连接队列，导致正常的 <code>SYN</code> 请求因为队列满而被丢弃，从而引起网络堵塞甚至系统瘫痪. <code>SYN</code> 攻击时一种典型的 <code>DDOS</code> 攻击，检测 <code>SYN</code> 攻击的方式非常简单，即当 <code>Server</code> 上有大量半连接状态且源 <code>IP</code> 地址是随机的，则可以断定遭到 <code>SYN</code> 攻击了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看 SYN_RECV 状态</span><br><span class="line">$ netstat -nap | grep SYN_RECV</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>basic</category>
      </categories>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Satis 搭建 Composer 私有源</title>
    <url>/2019/06/22/composer-satis-private-source/</url>
    <content><![CDATA[<p><img src="/images/2019/201906221121.jpg" alt="201906221121.jpg"></p>
<p>有时候我们不想公开业务开发中封装的一些工具或者开发包，想通过搭建自己专属的 Composer 源来安装这些包，那么就得使用 Satis 这种工具搭建 Composer 私有源，当然，Satis 并不是唯一的方式。</p>
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Satis 是一个静态的 Composer 库生成器。它有点像 packagist 的超轻量级、基于静态文件的版本，可以用来托管公司的私有包或自己的包的元数据。它基本上是一个微型容器。可以从 <a href="https://github.com/composer/satis">GitHub</a> 获取它，或者通过命令行界面安装。</p>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h3><p>本文中以托管到 <a href="https://gitee.com/">码云</a> 上的项目为例（相关配置本文暂略）。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 切换指定目录</span><br><span class="line">$ <span class="built_in">cd</span> ~/Codes/laravel</span><br><span class="line"></span><br><span class="line">// 生成项目骨架</span><br><span class="line">$ composer create-project composer/satis package.test --stability=dev --keep-vcs</span><br><span class="line">Installing composer/satis (dev-master 735f6d4e0d933e3bd0263f96865a0e50b80f4257)</span><br><span class="line">  - Installing composer/satis (dev-master 735f6d4): Cloning 735f6d4e0d from cache</span><br><span class="line">Created project <span class="keyword">in</span> package.test</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Installing dependencies (including require-dev) from lock file</span><br><span class="line">Package operations: 55 installs, 0 updates, 0 removals</span><br><span class="line">  - Installing symfony/process (v4.2.7): Loading from cache</span><br><span class="line">  - Installing symfony/finder (v4.2.7): Loading from cache</span><br><span class="line">  - Installing symfony/polyfill-ctype (v1.11.0): Loading from cache</span><br><span class="line">  - Installing symfony/filesystem (v4.2.7): Loading from cache</span><br><span class="line">  - Installing symfony/polyfill-mbstring (v1.11.0): Loading from cache</span><br><span class="line">  - Installing symfony/contracts (v1.0.2): Loading from cache</span><br><span class="line">  - Installing symfony/console (v4.2.7): Loading from cache</span><br><span class="line">  - Installing seld/phar-utils (1.0.1): Loading from cache</span><br><span class="line">  - Installing seld/jsonlint (1.7.1): Loading from cache</span><br><span class="line">  - Installing psr/<span class="built_in">log</span> (1.1.0): Loading from cache</span><br><span class="line">  - Installing justinrainbow/json-schema (5.2.8): Loading from cache</span><br><span class="line">  - Installing composer/xdebug-handler (1.3.2): Loading from cache</span><br><span class="line">  - Installing composer/spdx-licenses (1.5.1): Loading from cache</span><br><span class="line">  - Installing composer/semver (1.5.0): Loading from cache</span><br><span class="line">  - Installing composer/ca-bundle (1.1.4): Loading from cache</span><br><span class="line">  - Installing composer/composer (1.8.5): Loading from cache</span><br><span class="line">  - Installing twig/twig (v2.8.1): Loading from cache</span><br><span class="line">  - Installing doctrine/lexer (v1.0.1): Loading from cache</span><br><span class="line">  - Installing symfony/stopwatch (v4.2.7): Loading from cache</span><br><span class="line">  - Installing symfony/polyfill-php72 (v1.11.0): Loading from cache</span><br><span class="line">  - Installing paragonie/random_compat (v9.99.99): Loading from cache</span><br><span class="line">  - Installing symfony/polyfill-php70 (v1.11.0): Loading from cache</span><br><span class="line">  - Installing symfony/options-resolver (v4.2.7): Loading from cache</span><br><span class="line">  - Installing symfony/event-dispatcher (v4.2.7): Loading from cache</span><br><span class="line">  - Installing php-cs-fixer/diff (v1.3.0): Loading from cache</span><br><span class="line">  - Installing doctrine/annotations (v1.6.1): Loading from cache</span><br><span class="line">  - Installing friendsofphp/php-cs-fixer (v2.14.2): Loading from cache</span><br><span class="line">  - Installing mikey179/vfsstream (v1.6.6): Loading from cache</span><br><span class="line">  - Installing webmozart/assert (1.4.0): Loading from cache</span><br><span class="line">  - Installing phpdocumentor/reflection-common (1.0.1): Loading from cache</span><br><span class="line">  - Installing phpdocumentor/type-resolver (0.4.0): Loading from cache</span><br><span class="line">  - Installing phpdocumentor/reflection-docblock (4.3.0): Loading from cache</span><br><span class="line">  - Installing phpunit/php-token-stream (3.0.1): Loading from cache</span><br><span class="line">  - Installing sebastian/version (2.0.1): Loading from cache</span><br><span class="line">  - Installing sebastian/resource-operations (2.0.1): Loading from cache</span><br><span class="line">  - Installing sebastian/recursion-context (3.0.0): Loading from cache</span><br><span class="line">  - Installing sebastian/object-reflector (1.1.1): Loading from cache</span><br><span class="line">  - Installing sebastian/object-enumerator (3.0.3): Loading from cache</span><br><span class="line">  - Installing sebastian/global-state (3.0.0): Loading from cache</span><br><span class="line">  - Installing sebastian/exporter (3.1.0): Loading from cache</span><br><span class="line">  - Installing sebastian/environment (4.2.0): Loading from cache</span><br><span class="line">  - Installing sebastian/diff (3.0.2): Loading from cache</span><br><span class="line">  - Installing sebastian/comparator (3.0.2): Loading from cache</span><br><span class="line">  - Installing phpunit/php-timer (2.1.1): Loading from cache</span><br><span class="line">  - Installing phpunit/php-text-template (1.2.1): Loading from cache</span><br><span class="line">  - Installing phpunit/php-file-iterator (2.0.2): Loading from cache</span><br><span class="line">  - Installing theseer/tokenizer (1.1.2): Loading from cache</span><br><span class="line">  - Installing sebastian/code-unit-reverse-lookup (1.0.1): Loading from cache</span><br><span class="line">  - Installing phpunit/php-code-coverage (7.0.3): Loading from cache</span><br><span class="line">  - Installing doctrine/instantiator (1.2.0): Loading from cache</span><br><span class="line">  - Installing phpspec/prophecy (1.8.0): Loading from cache</span><br><span class="line">  - Installing phar-io/version (2.0.1): Loading from cache</span><br><span class="line">  - Installing phar-io/manifest (1.0.3): Loading from cache</span><br><span class="line">  - Installing myclabs/deep-copy (1.9.1): Loading from cache</span><br><span class="line">  - Installing phpunit/phpunit (8.1.3): Loading from cache</span><br><span class="line">symfony/contracts suggests installing psr/cache (When using the Cache contracts)</span><br><span class="line">symfony/contracts suggests installing psr/container (When using the Service contracts)</span><br><span class="line">symfony/contracts suggests installing symfony/cache-contracts-implementation</span><br><span class="line">symfony/contracts suggests installing symfony/service-contracts-implementation</span><br><span class="line">symfony/contracts suggests installing symfony/translation-contracts-implementation</span><br><span class="line">symfony/console suggests installing symfony/lock</span><br><span class="line">paragonie/random_compat suggests installing ext-libsodium (Provides a modern crypto API that can be used to generate random bytes.)</span><br><span class="line">symfony/event-dispatcher suggests installing symfony/dependency-injection</span><br><span class="line">symfony/event-dispatcher suggests installing symfony/http-kernel</span><br><span class="line">friendsofphp/php-cs-fixer suggests installing php-cs-fixer/phpunit-constraint-isidenticalstring (For IsIdenticalString constraint.)</span><br><span class="line">friendsofphp/php-cs-fixer suggests installing php-cs-fixer/phpunit-constraint-xmlmatchesxsd (For XmlMatchesXsd constraint.)</span><br><span class="line">sebastian/global-state suggests installing ext-uopz (*)</span><br><span class="line">phpunit/phpunit suggests installing phpunit/php-invoker (^2.0)</span><br><span class="line">Generating <span class="built_in">autoload</span> files</span><br></pre></td></tr></table></figure>
<h3 id="私有源项目配置"><a href="#私有源项目配置" class="headerlink" title="私有源项目配置"></a>私有源项目配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 切换到项目目录</span><br><span class="line">$ <span class="built_in">cd</span> ~/Codes/laravel/package.test</span><br><span class="line"></span><br><span class="line">// 创建 satis.json 文件，并填入以下内容</span><br><span class="line">$ touch satis.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaohe/packages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Xiaohe PHP Development Package&quot;</span>,</span><br><span class="line">    <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;http://package.test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;vcs&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;git@gitee.com:xiaoheinc/laravel-sms.git&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;repositories-dep&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;output-dir&quot;</span>: <span class="string">&quot;public&quot;</span>,</span><br><span class="line">    <span class="string">&quot;require-all&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;require&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;xiaohe/laravel-sms&quot;</span>: <span class="string">&quot;dev-master&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;require-dependencies&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;require-dev-dependencies&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;output-html&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;secure-http&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="私有源生成"><a href="#私有源生成" class="headerlink" title="私有源生成"></a>私有源生成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php -c ./php-cli.ini bin/satis build -vv --skip-errors satis.json public/</span><br><span class="line">Scanning packages</span><br><span class="line">Reading composer.json of xiaohe/laravel-sms (master)</span><br><span class="line">Importing branch master (dev-master)</span><br><span class="line">Selected xiaohe/laravel-sms (dev-master)</span><br><span class="line">wrote packages to public//include/all<span class="variable">$979ee73568f8982cf167859ee4a0d1d7e8679915</span>.json</span><br><span class="line">Writing packages.json</span><br><span class="line">Pruning include directories</span><br><span class="line">Deleted public//include/all<span class="variable">$ab346115d9b4c32b0da1504f27e7ed1ec29bbf73</span>.json</span><br><span class="line">Writing web view</span><br></pre></td></tr></table></figure>
<h3 id="让私有源项目可访问"><a href="#让私有源项目可访问" class="headerlink" title="让私有源项目可访问"></a>让私有源项目可访问</h3><p>配置私有源项目，并重启 Nginx 服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For https</span></span><br><span class="line">    <span class="comment"># listen 443 ssl;</span></span><br><span class="line">    <span class="comment"># listen [::]:443 ssl ipv6only=on;</span></span><br><span class="line">    <span class="comment"># ssl_certificate /etc/nginx/ssl/default.crt;</span></span><br><span class="line">    <span class="comment"># ssl_certificate_key /etc/nginx/ssl/default.key;</span></span><br><span class="line"></span><br><span class="line">    server_name package.test;</span><br><span class="line">    root /var/www/package.test/public;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php =404;</span><br><span class="line">        fastcgi_pass php-upstream;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_buffers 16 16k;</span><br><span class="line">        fastcgi_buffer_size 32k;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="comment"># fixes timeouts</span></span><br><span class="line">        fastcgi_read_timeout 600;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_log /var/<span class="built_in">log</span>/nginx/package-error.log;</span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/package-access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问私有源项目：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201906/composer-package.jpg" alt="composer-package.jpg"></p>
<h2 id="私有源使用"><a href="#私有源使用" class="headerlink" title="私有源使用"></a>私有源使用</h2><h3 id="项目中配置"><a href="#项目中配置" class="headerlink" title="项目中配置"></a>项目中配置</h3><blockquote>
<p>此处以 Laravel 项目为例。</p>
</blockquote>
<p>将以下内容添加到项目的 <code>composer.json</code> 文件中：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">&quot;repositories&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;composer&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://package.test/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer require xiaohe/laravel-sms</span><br><span class="line">Warning: Accessing package.test over http <span class="built_in">which</span> is an insecure protocol.</span><br><span class="line">    1/3:        https://packagist.laravel-china.org/p/provider-latest<span class="variable">$dfdf6692476db7cc6ba617894e2d61d7b41970cc0e5e2aa0d79f14e5c0c0b526</span>.json</span><br><span class="line">    2/3:        https://packagist.laravel-china.org/p/provider-2018-10<span class="variable">$4bfb9a1a71d8062fdf36b1dd4d35635da47e70cf04f2d8978668127e70c43dcf</span>.json</span><br><span class="line">    3/3:        https://packagist.laravel-china.org/p/provider-2019-04<span class="variable">$e201694c08014f9b374db1cbcfc61a971eb80d8965069a87a7d557efb338aaf6</span>.json</span><br><span class="line">    Finished: success: 3, skipped: 0, failure: 0, total: 3</span><br><span class="line">Using version dev-master <span class="keyword">for</span> xiaohe/laravel-sms</span><br><span class="line">./composer.json has been updated</span><br><span class="line">Warning: Accessing package.test over http <span class="built_in">which</span> is an insecure protocol.</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)</span><br><span class="line">Package operations: 1 install, 0 updates, 0 removals</span><br><span class="line">  - Installing xiaohe/laravel-sms (dev-master 9fdc80d): Cloning 9fdc80d63d from cache</span><br><span class="line">Writing lock file</span><br><span class="line">Generating optimized <span class="built_in">autoload</span> files</span><br><span class="line">&gt; Illuminate\Foundation\ComposerScripts::postAutoloadDump</span><br><span class="line">&gt; @php artisan package:discover --ansi</span><br><span class="line">Discovered Package: barryvdh/laravel-ide-helper</span><br><span class="line">Discovered Package: beyondcode/laravel-dump-server</span><br><span class="line">Discovered Package: dingo/api</span><br><span class="line">Discovered Package: fideloper/proxy</span><br><span class="line">Discovered Package: intervention/image</span><br><span class="line">Discovered Package: jenssegers/mongodb</span><br><span class="line">Discovered Package: laravel/horizon</span><br><span class="line">Discovered Package: laravel/slack-notification-channel</span><br><span class="line">Discovered Package: laravel/tinker</span><br><span class="line">Discovered Package: liyu/dingo-serializer-switch</span><br><span class="line">Discovered Package: mews/captcha</span><br><span class="line">Discovered Package: nesbot/carbon</span><br><span class="line">Discovered Package: nunomaduro/collision</span><br><span class="line">Discovered Package: nunomaduro/larastan</span><br><span class="line">Discovered Package: nunomaduro/phpinsights</span><br><span class="line">Discovered Package: nwidart/laravel-modules</span><br><span class="line">Discovered Package: tymon/jwt-auth</span><br><span class="line">Discovered Package: xiaohe/laravel-sms</span><br><span class="line">Package manifest generated successfully.</span><br><span class="line">ocramius/package-versions:  Generating version class...</span><br><span class="line">ocramius/package-versions: ...<span class="keyword">done</span> generating version class</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md">Handling private packages</a></li>
<li><a href="https://composer.github.io/satis/">For full private Composer repo use Private Packagist</a></li>
</ul>
]]></content>
      <categories>
        <category>composer</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>技术术语知多少</title>
    <url>/2019/12/05/basic-technical-terms/</url>
    <content><![CDATA[<p><img src="/images/2019/201912051818.jpeg" alt="201912051818.jpeg"></p>
<p>🧸 你是否和我一样在看一些技术文章时，作者通篇把一些技术名词缩写化，碰到这种要么查阅要么跳过。高频出现的可能还能猜个大概，但是总有那么一些是猜不着，记不住，没见过的，正如很多 Linux 命令或者 Git 命令一样，需要弄个印有命令大全的桌面或者鼠标垫以备不时之需。如果大脑是一块内存，我当然需要一块很大的硬盘去记录内存装载不了的东西，譬如，把这些记不住的东西记录起来。</p>
<span id="more"></span>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><table>
<thead>
<tr>
<th>简称</th>
<th>全称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ANSI</code></td>
<td><code>American National Standards Institute</code></td>
<td>美国国家标准学会</td>
</tr>
<tr>
<td><code>ASCII</code></td>
<td><code>American Standard Code for Information Interchange</code></td>
<td>美国信息交换标准代码</td>
</tr>
<tr>
<td><code>CPU</code></td>
<td><code>Central Processing Unit</code></td>
<td>中央处理器</td>
</tr>
<tr>
<td><code>EBCDIC</code></td>
<td><code>Extended Binary Coded Decimal Interchange Code</code></td>
<td>扩增二进式十进交换码</td>
</tr>
<tr>
<td><code>RAM</code></td>
<td><code>Random Access Memory</code></td>
<td>随机存取存储器</td>
</tr>
<tr>
<td><code>ROM</code></td>
<td><code>Read Only Memory</code></td>
<td>只读存储器</td>
</tr>
<tr>
<td><code>FAQ</code></td>
<td><code>Frequently Asked Questions</code></td>
<td>常见问题集</td>
</tr>
<tr>
<td><code>FDD</code></td>
<td><code>Floppy Disk Drive</code></td>
<td>软盘驱动器</td>
</tr>
<tr>
<td><code>GIF</code></td>
<td><code>Graphics Interchange Format</code></td>
<td>图像互换格式，一种位图图形文件格式</td>
</tr>
<tr>
<td><code>GUID</code></td>
<td><code>Globally Unique Identifier</code></td>
<td>全局唯一标识符</td>
</tr>
<tr>
<td><code>GUI</code></td>
<td><code>Graphical User Interface</code></td>
<td>图形用户界面</td>
</tr>
<tr>
<td><code>GDI</code></td>
<td><code>Graphics Device Interface</code></td>
<td>图形设备接口</td>
</tr>
<tr>
<td><code>HDD</code></td>
<td><code>Hard Disk Drive</code></td>
<td>硬盘驱动器</td>
</tr>
<tr>
<td><code>JPEG</code></td>
<td><code>Joint Photographic Experts Group</code></td>
<td>联合图像专家小组，一种针对照片影像而广泛使用的有损压缩标准方法</td>
</tr>
<tr>
<td><code>LSP</code></td>
<td><code>Liskov Substitution Principle</code></td>
<td>里氏替换原则</td>
</tr>
<tr>
<td><code>RESTful</code></td>
<td><code>Representational State Transfer</code></td>
<td>一种架构规约，符合就称其 RESTful 架构</td>
</tr>
<tr>
<td><code>OS</code></td>
<td><code>Operating System</code></td>
<td>操作系统</td>
</tr>
<tr>
<td><code>OOA</code></td>
<td><code>Object Oriented Analysis</code></td>
<td>面向对象分析方法</td>
</tr>
<tr>
<td><code>OOD</code></td>
<td><code>Object Oriented Design</code></td>
<td>面向对象设计</td>
</tr>
<tr>
<td><code>OOP</code></td>
<td><code>Object Oriented Programming</code></td>
<td>面向对象程序设计</td>
</tr>
<tr>
<td><code>PDF</code></td>
<td><code>Portable Document Format</code></td>
<td>便携式文档格式</td>
</tr>
<tr>
<td><code>PC</code></td>
<td><code>Personal Computer</code></td>
<td>个人计算机</td>
</tr>
<tr>
<td><code>PC</code></td>
<td><code>Program Counter</code></td>
<td>程序计数器</td>
</tr>
<tr>
<td><code>PNG</code></td>
<td><code>Portable Network Graphics</code></td>
<td>便携式网络图形，一种无损压缩的位图图形格式</td>
</tr>
<tr>
<td><code>SVG</code></td>
<td><code>Scalable Vector Graphics</code></td>
<td>可缩放矢量图形</td>
</tr>
<tr>
<td><code>SRP</code></td>
<td><code>Single Responsibility Principle</code></td>
<td>单一职责原则</td>
</tr>
<tr>
<td><code>I/O</code></td>
<td><code>Input/Output</code></td>
<td>输入输出</td>
</tr>
<tr>
<td><code>IT</code></td>
<td><code>Internet Technology</code></td>
<td>信息技术或互联网技术</td>
</tr>
<tr>
<td><code>IETF</code></td>
<td><code>Internet Engineering Task Force</code></td>
<td>互联网工程任务组</td>
</tr>
<tr>
<td><code>REST</code></td>
<td><code>Representational State Transfer</code></td>
<td>表述性状态传递</td>
</tr>
<tr>
<td><code>UTF-8</code></td>
<td><code>8-bit Unicode Transformation Format</code></td>
<td>一种针对 Unicode 的可变长度字符编码，也是一种前缀码</td>
</tr>
<tr>
<td><code>VM</code></td>
<td><code>Virtual Machine</code></td>
<td>虚拟机</td>
</tr>
<tr>
<td><code>W3C</code></td>
<td><code>Word Wide Web Consortium</code></td>
<td>万维网协会</td>
</tr>
</tbody>
</table>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><table>
<thead>
<tr>
<th>简称</th>
<th>全称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>IP</code></td>
<td><code>Internet Protocol</code></td>
<td>网际互连协议</td>
</tr>
<tr>
<td><code>WWW</code></td>
<td><code>World Wide Web</code></td>
<td>万维网</td>
</tr>
<tr>
<td><code>DNS</code></td>
<td><code>Domain Name Server</code></td>
<td>域名服务器</td>
</tr>
<tr>
<td><code>CDN</code></td>
<td><code>Content Delivery Network</code></td>
<td>内容分发网络</td>
</tr>
<tr>
<td><code>ISP</code></td>
<td><code>Internet Service Provider</code></td>
<td>因特网服务提供商</td>
</tr>
<tr>
<td><code>NAT</code></td>
<td><code>Network Address Translation</code></td>
<td>网络地址转换</td>
</tr>
<tr>
<td><code>ARP</code></td>
<td><code>Address Resolution Protoco</code></td>
<td>地址解析协议</td>
</tr>
<tr>
<td><code>IPS</code></td>
<td><code>Internet Protocol Suite</code></td>
<td>互联网协议族</td>
</tr>
<tr>
<td><code>PS</code></td>
<td><code>Packet Switching</code></td>
<td>分组交换</td>
</tr>
<tr>
<td><code>IPv4</code></td>
<td><code>Internet Protocol version 4</code></td>
<td>互联网通信协议第四版</td>
</tr>
<tr>
<td><code>IPv6</code></td>
<td><code>Internet Protocol version 6</code></td>
<td>互联网通信协议第六版</td>
</tr>
<tr>
<td><code>ICMPv6</code></td>
<td><code>Internet Control Message Protocol Version 6</code></td>
<td>互联网控制消息协议第六版</td>
</tr>
<tr>
<td><code>HTTP</code></td>
<td><code>HyperText Transfer Protocol</code></td>
<td>超文本传输协议</td>
</tr>
<tr>
<td><code>HTTPS</code></td>
<td><code>Hyper Text Transfer Protocol over SecureSocket Layer</code></td>
<td>超文本传输安全协议</td>
</tr>
<tr>
<td><code>TCP</code></td>
<td><code>Transmission Control Protocol</code></td>
<td>传输控制协议</td>
</tr>
<tr>
<td><code>UDP</code></td>
<td><code>User Datagram Protocol</code></td>
<td>用户数据报协议</td>
</tr>
<tr>
<td><code>FTP</code></td>
<td><code>File Transfer Protocol</code></td>
<td>文件传输协议</td>
</tr>
<tr>
<td><code>NDP</code></td>
<td><code>Neighbor Discovery Protocol</code></td>
<td>邻居发现协议</td>
</tr>
<tr>
<td><code>ICMP</code></td>
<td><code>Internet Control Message Protocol</code></td>
<td>互联网控制消息协议</td>
</tr>
<tr>
<td><code>OSI</code></td>
<td><code>Open System Interconnection</code></td>
<td>开放式系统互联</td>
</tr>
<tr>
<td><code>SSL</code></td>
<td><code>Secure Sockets Layer</code></td>
<td>安全套接层</td>
</tr>
<tr>
<td><code>TLS</code></td>
<td><code>Transport Layer Security</code></td>
<td>传输层安全性协议</td>
</tr>
<tr>
<td><code>IoT</code></td>
<td><code>Internet of Things</code></td>
<td>物联网</td>
</tr>
<tr>
<td><code>GPS</code></td>
<td><code>Global Positioning System</code></td>
<td>全球定位系统</td>
</tr>
<tr>
<td><code>GNU</code></td>
<td><code>GNU is Not Unix</code></td>
<td>一个自由的操作系统，其内容软件完全以 GPL 方式发布</td>
</tr>
<tr>
<td><code>SNS</code></td>
<td><code>Social Networking Services</code></td>
<td>社交网络服务</td>
</tr>
<tr>
<td><code>SMS</code></td>
<td><code>Short Message Service</code></td>
<td>短信息服务</td>
</tr>
<tr>
<td><code>RFC</code></td>
<td><code>Request For Comments</code></td>
<td>请求评论，即一系列以编号排定的文件</td>
</tr>
<tr>
<td><code>CAS</code></td>
<td><code>Central Authentication Service</code></td>
<td>中央认证服务</td>
</tr>
<tr>
<td><code>DAU</code></td>
<td><code>Daily Active User</code></td>
<td>日活跃用户数</td>
</tr>
<tr>
<td><code>MAU</code></td>
<td><code>Monthly Active Users</code></td>
<td>月活跃用户数</td>
</tr>
<tr>
<td><code>CTR</code></td>
<td><code>Click Through Rate</code></td>
<td>点击通过率</td>
</tr>
<tr>
<td><code>PV</code></td>
<td><code>Page View</code></td>
<td>网站被浏览总次数</td>
</tr>
<tr>
<td><code>URL</code></td>
<td><code>Uniform Resource Locator</code></td>
<td>统一资源定位符</td>
</tr>
<tr>
<td><code>URI</code></td>
<td><code>Uniform Resource Identifier</code></td>
<td>统一资源标识符</td>
</tr>
<tr>
<td><code>UV</code></td>
<td><code>Unique Visitor</code></td>
<td>独立访客，唯一身份访问网站的数字</td>
</tr>
<tr>
<td><code>TP</code></td>
<td><code>Time On Page</code></td>
<td>页面停留时间</td>
</tr>
<tr>
<td><code>LBS</code></td>
<td><code>Location Based Services</code></td>
<td>基于位置的服务</td>
</tr>
<tr>
<td><code>LVS</code></td>
<td><code>Linux Virtual Server</code></td>
<td>Linux 虚拟服务器</td>
</tr>
<tr>
<td><code>VPN</code></td>
<td><code>Virtual Private Network</code></td>
<td>虛拟私有网络</td>
</tr>
<tr>
<td><code>VIP</code></td>
<td><code>Virtual Private Network</code></td>
<td>虛拟私有网络</td>
</tr>
</tbody>
</table>
<h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><table>
<thead>
<tr>
<th>简称</th>
<th>全称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>API</code></td>
<td><code>Application Programming Interface</code></td>
<td>应用程序接口</td>
</tr>
<tr>
<td><code>COM</code></td>
<td><code>Component Object Model</code></td>
<td>组件对象模型</td>
</tr>
<tr>
<td><code>JVM</code></td>
<td><code>Java Virtual Machine</code></td>
<td>Java 虚拟机</td>
</tr>
<tr>
<td><code>JIT</code></td>
<td><code>Just In Time (Compiler)</code></td>
<td>即时编译</td>
</tr>
<tr>
<td><code>JDK</code></td>
<td><code>Java Development Kit</code></td>
<td>Java 语言的软件开发工具包</td>
</tr>
<tr>
<td><code>JRE</code></td>
<td><code>Java Runtime Environment</code></td>
<td>Java 运行时环境</td>
</tr>
<tr>
<td><code>GC</code></td>
<td><code>Gabage Collection</code></td>
<td>垃圾回收器</td>
</tr>
<tr>
<td><code>JS</code></td>
<td><code>JavaScript</code></td>
<td>JavaScript 编程语言</td>
</tr>
<tr>
<td><code>PHP</code></td>
<td><code>Hypertext Preprocessor</code></td>
<td>PHP 编程语言</td>
</tr>
<tr>
<td><code>CAS</code></td>
<td><code>Compare and Swap</code></td>
<td>比较并交换</td>
</tr>
<tr>
<td><code>JSON</code></td>
<td><code>JavaScript Object Notation</code></td>
<td>JavaScript 对象简谱，即一种轻量级的数据交换格式</td>
</tr>
<tr>
<td><code>ECMAScript</code></td>
<td><code>European Computer Manufacturers Association Script</code></td>
<td>Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言</td>
</tr>
<tr>
<td><code>XML</code></td>
<td><code>Extensible Markup Language</code></td>
<td>可扩展标记语言</td>
</tr>
<tr>
<td><code>SGML</code></td>
<td><code>Standard Generalized Markup Language</code></td>
<td>标准通用标记语言</td>
</tr>
<tr>
<td><code>HTML</code></td>
<td><code>HyperText Markup Language</code></td>
<td>超级文本标记语言</td>
</tr>
<tr>
<td><code>AJAX</code></td>
<td><code>Asynchronous Javascript And XML</code></td>
<td>异步 JavaScript 和 XML</td>
</tr>
<tr>
<td><code>JWT</code></td>
<td><code>JSON Web Token</code></td>
<td>实现 Token 技术的一种解决方案</td>
</tr>
<tr>
<td><code>DP</code></td>
<td><code>Dynamic Programming</code></td>
<td>动态规划</td>
</tr>
<tr>
<td><code>MVC</code></td>
<td><code>Model View Controller</code></td>
<td>软件工程中的一种软件架构模式</td>
</tr>
<tr>
<td><code>MVVM</code></td>
<td><code>Model View View Model</code></td>
<td>软件工程中的一种软件架构模式</td>
</tr>
</tbody>
</table>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><table>
<thead>
<tr>
<th>简称</th>
<th>全称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>DB</code></td>
<td><code>Database</code></td>
<td>数据库</td>
</tr>
<tr>
<td><code>SQL</code></td>
<td><code>Structured Query Language</code></td>
<td>结构化查询语言</td>
</tr>
<tr>
<td><code>DDL</code></td>
<td><code>Data Definition Language</code></td>
<td>数据定义语言</td>
</tr>
<tr>
<td><code>DML</code></td>
<td><code>Data Manipulation Language</code></td>
<td>数据操纵语言</td>
</tr>
<tr>
<td><code>DD</code></td>
<td><code>Data Dictionary</code></td>
<td>数据字典</td>
</tr>
<tr>
<td><code>DBMS</code></td>
<td><code>Database Management System</code></td>
<td>数据库管理系统</td>
</tr>
<tr>
<td><code>RDBMS</code></td>
<td><code>Relational Database Management System</code></td>
<td>关系型数据库管理系统</td>
</tr>
<tr>
<td><code>NoSQL</code></td>
<td><code>Not Only SQL</code></td>
<td>非关系型的数据库</td>
</tr>
<tr>
<td><code>ACID</code></td>
<td><code>Atomicity, Consistency, Isolation, Durability</code></td>
<td>数据库事务正确执行的四个基本要素</td>
</tr>
<tr>
<td><code>WAL</code></td>
<td><code>Write Ahead Logging</code></td>
<td>预写日志系统</td>
</tr>
<tr>
<td><code>ID</code></td>
<td><code>Identity Document</code></td>
<td>身份标识号</td>
</tr>
<tr>
<td><code>ODBC</code></td>
<td><code>Open Database Connectivity</code></td>
<td>开放数据库互连</td>
</tr>
<tr>
<td><code>JDBC</code></td>
<td><code>Java Database Connectivity</code></td>
<td>Java 数据库连接</td>
</tr>
<tr>
<td><code>CAP</code></td>
<td><code>Consistency, Availability, Partition tolerance</code></td>
<td>一致性、可用性、分区容错性</td>
</tr>
<tr>
<td><code>1NF</code></td>
<td><code>First Normal Form</code></td>
<td>第一范式</td>
</tr>
<tr>
<td><code>2NF</code></td>
<td><code>Second Normal Form</code></td>
<td>第二范式</td>
</tr>
<tr>
<td><code>3NF</code></td>
<td><code>Third Normal Form</code></td>
<td>第三范式</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>basic</category>
      </categories>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 分支</title>
    <url>/2018/01/25/git-branch/</url>
    <content><![CDATA[<p>🧬 分支几乎是 git 的必杀技，倒不是说其他的版本控制没有分支这个特性，而是 git 分支早已把其它的版本控制系统分支功能甩了好几条街。这么说不是夸张，因为 git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息，将来要合并分支时，寻找恰当的合并基础的工作其实已经很显然的摆在那里，所以实现起来非常容易。git 鼓励开发者频繁使用分支，正是仗着这些特性作保障。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2018/01/22/git-started/"><code>Git 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/23/git-basic/"><code>Git 基本操作</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/24/git-log/"><code>Git 查看日志</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/25/git-branch/"><strong>Git 分支</strong></a></li>
<li><a href="https://imajinyun.xyz/2018/01/27/git-multiple-accounts/"><code>Git 中一个客户端设置多个账号</code></a></li>
<li><a href="https://imajinyun.xyz/2018/05/01/git-workflow/"><code>Git Workflow</code></a></li>
<li><a href="https://imajinyun.xyz/2020/09/07/git-collection-command/"><code>Git 命令大全</code></a></li>
</ul>
<h1 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支"></a>本地分支</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建一个名称为 develop 的分支</span><br><span class="line">$ git checkout -b develop</span><br><span class="line">Switched to a new branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">等价于</span><br><span class="line">$ git branch develop</span><br><span class="line">$ git checkout develop</span><br></pre></td></tr></table></figure>
<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 删除一个已经有提交记录但还没有合并到 master 的分支</span><br><span class="line">$ git branch -d develop</span><br><span class="line">error: The branch <span class="string">&#x27;develop&#x27;</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">&#x27;git branch -D develop&#x27;</span>.</span><br><span class="line"></span><br><span class="line">// 确定不合并 develop 分支的任何提交并删除此分支</span><br><span class="line">$ git branch -D develop</span><br><span class="line">Deleted branch develop (was 833b688).</span><br></pre></td></tr></table></figure>
<h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看分支列表</span><br><span class="line">$ git branch</span><br><span class="line">* develop</span><br><span class="line">  feature</span><br><span class="line">  master</span><br><span class="line"></span><br><span class="line">// 查看每一个分支的最后一次提交</span><br><span class="line">$ git branch -v</span><br><span class="line">* develop 9ad35ee Add index.js</span><br><span class="line">  feature 992122d Add .editorconfig</span><br><span class="line">  master  23a0a9e Rename index.php to index.html</span><br><span class="line"></span><br><span class="line">// 查看哪些分支已经合并到当前分支</span><br><span class="line">$ git branch --merged</span><br><span class="line">  develop</span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line">// 查看所有包含未合并工作的分支</span><br><span class="line">$ git branch --no-merged</span><br><span class="line">  feature</span><br></pre></td></tr></table></figure>
<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge --no-ff develop</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<h2 id="分支变基"><a href="#分支变基" class="headerlink" title="分支变基"></a>分支变基</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 切换到要变基的分支</span><br><span class="line">$ git checkout feature</span><br><span class="line">Switched to branch <span class="string">&#x27;feature&#x27;</span></span><br><span class="line"></span><br><span class="line">// 进行变基</span><br><span class="line">$ git rebase master</span><br><span class="line">$ git rebase master</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: Add .editorconfig</span><br><span class="line">Applying: Add releases link</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M  README.md</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">error: Failed to merge <span class="keyword">in</span> the changes.</span><br><span class="line">Patch failed at 0002 Add releases link</span><br><span class="line">Use <span class="string">&#x27;git am --show-current-patch&#x27;</span> to see the failed patch</span><br><span class="line"></span><br><span class="line">Resolve all conflicts manually, mark them as resolved with</span><br><span class="line"><span class="string">&quot;git add/rm &lt;conflicted_files&gt;&quot;</span>, <span class="keyword">then</span> run <span class="string">&quot;git rebase --continue&quot;</span>.</span><br><span class="line">You can instead skip this commit: run <span class="string">&quot;git rebase --skip&quot;</span>.</span><br><span class="line">To abort and get back to the state before <span class="string">&quot;git rebase&quot;</span>, run <span class="string">&quot;git rebase --abort&quot;</span>.</span><br><span class="line"></span><br><span class="line">// 查看当前的补丁</span><br><span class="line">$ git am --show-current-patch</span><br><span class="line">commit 15539736e18fe133f5916a55e8f38ce7b734113a (feature)</span><br><span class="line">Author: imajinyun &lt;imajinyun@gmail.com&gt;</span><br><span class="line">Date:   Mon Dec 31 21:24:59 2018 +0800</span><br><span class="line"></span><br><span class="line">    Add releases link</span><br><span class="line"></span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index d467b4f..8ec2025 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -2,3 +2,4 @@</span><br><span class="line"> [2]: https://symfony.com/projects</span><br><span class="line"> [3]: https://symfony.com/doc/current/reference/requirements.html</span><br><span class="line"> [4]: https://symfony.com/doc/current/setup.html</span><br><span class="line">+[5]: https://symfony.com/doc/current/contributing/community/releases.html</span><br><span class="line"></span><br><span class="line">// 解决冲突完成变基</span><br><span class="line">$ vim README.md</span><br><span class="line">冲突的文件内容：</span><br><span class="line">[1]: https://symfony.com</span><br><span class="line">[2]: https://symfony.com/projects</span><br><span class="line">[3]: https://symfony.com/doc/current/reference/requirements.html</span><br><span class="line">[4]: https://symfony.com/doc/current/setup.html</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">[5]: http://semver.org</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">[5]: https://symfony.com/doc/current/contributing/community/releases.html</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Add releases link</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">修复后的文件内容：</span></span><br><span class="line"><span class="string">[1]: https://symfony.com</span></span><br><span class="line"><span class="string">[2]: https://symfony.com/projects</span></span><br><span class="line"><span class="string">[3]: https://symfony.com/doc/current/reference/requirements.html</span></span><br><span class="line"><span class="string">[4]: https://symfony.com/doc/current/setup.html</span></span><br><span class="line"><span class="string">[5]: http://semver.org</span></span><br><span class="line"><span class="string">[6]: https://symfony.com/doc/current/contributing/community/releases.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 查看仓库状态</span></span><br><span class="line"><span class="string">$ git status</span></span><br><span class="line"><span class="string">rebase in progress; onto 4830059</span></span><br><span class="line"><span class="string">You are currently rebasing branch &#x27;feature&#x27; on &#x27;4830059&#x27;.</span></span><br><span class="line"><span class="string">  (fix conflicts and then run &quot;git rebase --continue&quot;)</span></span><br><span class="line"><span class="string">  (use &quot;git rebase --skip&quot; to skip this patch)</span></span><br><span class="line"><span class="string">  (use &quot;git rebase --abort&quot; to check out the original branch)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Unmerged paths:</span></span><br><span class="line"><span class="string">  (use &quot;git reset HEAD</span> &lt;file&gt;...<span class="string">&quot; to unstage)</span></span><br><span class="line"><span class="string">  (use &quot;</span>git add &lt;file&gt;...<span class="string">&quot; to mark resolution)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    both modified:   README.md</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">no changes added to commit (use &quot;</span>git add<span class="string">&quot; and/or &quot;</span>git commit -a<span class="string">&quot;)</span></span><br><span class="line"><span class="string">$ git add README.md</span></span><br><span class="line"><span class="string">$ git rebase --continue</span></span><br><span class="line"><span class="string">Applying: Add releases link</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 合并此分支代码到 master 分支</span></span><br><span class="line"><span class="string">$ git checkout master</span></span><br><span class="line"><span class="string">$ git merge --no-ff feature</span></span><br><span class="line"><span class="string">Merge made by the &#x27;recursive&#x27; strategy.</span></span><br><span class="line"><span class="string"> .editorconfig | 0</span></span><br><span class="line"><span class="string"> README.md     | 1 +</span></span><br><span class="line"><span class="string"> 2 files changed, 1 insertion(+)</span></span><br><span class="line"><span class="string"> create mode 100644 .editorconfig</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 变基后的历史记录，可以看到变基使得提交历史更加整洁，日志就像是串行一样</span></span><br><span class="line"><span class="string">$ git log --oneline --graph</span></span><br><span class="line"><span class="string">*   f686948 (HEAD -&gt; master) Merge branch &#x27;feature&#x27; to master</span></span><br><span class="line"><span class="string">|\</span></span><br><span class="line"><span class="string">| * 78a6bfc (feature) Add releases link</span></span><br><span class="line"><span class="string">| * 34f8649 Add .editorconfig</span></span><br><span class="line"><span class="string">|/</span></span><br><span class="line"><span class="string">*   4830059 (develop) Merge branch &#x27;develop&#x27; to master</span></span><br><span class="line"><span class="string">|\</span></span><br><span class="line"><span class="string">| * 04a75c1 Add semver link</span></span><br><span class="line"><span class="string">* |   3bdd3fc Merge branch &#x27;develop&#x27; to master</span></span><br><span class="line"><span class="string">|\ \</span></span><br><span class="line"><span class="string">| |/</span></span><br><span class="line"><span class="string">| * d48ea11 Add setup link</span></span><br><span class="line"><span class="string">|/</span></span><br><span class="line"><span class="string">*   3513802 Merge branch &#x27;develop&#x27; to master</span></span><br><span class="line"><span class="string">|\</span></span><br><span class="line"><span class="string">| * 9ad35ee Add index.js</span></span><br><span class="line"><span class="string">| * 0bc04c2 Add index.css</span></span><br><span class="line"><span class="string">|/</span></span><br><span class="line"><span class="string">* 23a0a9e Rename index.php to index.html</span></span><br><span class="line"><span class="string">* da3c74c Add index.php</span></span><br><span class="line"><span class="string">* 7778db8 Add projects and requirements link</span></span><br><span class="line"><span class="string">* facc111 Add symfony website link</span></span><br><span class="line"><span class="string">* a384a2b Add README.md</span></span><br></pre></td></tr></table></figure>
<h1 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h1><h2 id="整合连续多次提交"><a href="#整合连续多次提交" class="headerlink" title="整合连续多次提交"></a>整合连续多次提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看提交日志</span><br><span class="line">$ git <span class="built_in">log</span> --oneline --graph --all</span><br><span class="line">*   f686948 (HEAD -&gt; master) Merge branch <span class="string">&#x27;feature&#x27;</span> to master</span><br><span class="line">|\</span><br><span class="line">| * 78a6bfc (feature) Add releases link</span><br><span class="line">| * 34f8649 Add .editorconfig</span><br><span class="line">|/</span><br><span class="line">*   4830059 (develop) Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\</span><br><span class="line">| * 04a75c1 Add semver link</span><br><span class="line">* |   3bdd3fc Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\ \</span><br><span class="line">| |/</span><br><span class="line">| * d48ea11 Add setup link</span><br><span class="line">|/</span><br><span class="line">*   3513802 Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\</span><br><span class="line">| * 9ad35ee Add index.js</span><br><span class="line">| * 0bc04c2 Add index.css</span><br><span class="line">|/</span><br><span class="line">* 23a0a9e Rename index.php to index.html</span><br><span class="line">* da3c74c Add index.php</span><br><span class="line">* 7778db8 Add projects and requirements link</span><br><span class="line">* facc111 Add symfony website link</span><br><span class="line">* a384a2b Add README.md</span><br><span class="line"></span><br><span class="line">// 整合最近提交的 2 次记录，commit-id 使用第二次之前的</span><br><span class="line">$ git rebase -i 4830059</span><br><span class="line">弹出的编辑界面内容为：</span><br><span class="line">pick 34f8649 Add .editorconfig</span><br><span class="line">s 78a6bfc Add releases link <span class="comment"># 修改 pick 为 squash 或者 s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 4830059..f686948 onto 4830059 (2 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br><span class="line">保存后会弹出另一个编辑界面，内容为：</span><br><span class="line"><span class="comment"># This is a combination of 2 commits.</span></span><br><span class="line"></span><br><span class="line">Integrating submission logs <span class="comment"># 添加本次的提交日志信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">Add .editorconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">Add releases link</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Mon Dec 31 20:39:09 2018 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 4830059</span></span><br><span class="line"><span class="comment"># Last commands done (2 commands done):</span></span><br><span class="line"><span class="comment">#    pick 34f8649 Add .editorconfig</span></span><br><span class="line"><span class="comment">#    squash 78a6bfc Add releases link</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch &#x27;master&#x27; on &#x27;4830059&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#    new file:   .editorconfig</span></span><br><span class="line"><span class="comment">#    modified:   README.md</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[detached HEAD f9fa04a] Integrating submission logs</span><br><span class="line"> Date: Mon Dec 31 20:39:09 2018 +0800</span><br><span class="line"> 2 files changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 .editorconfig</span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br><span class="line"></span><br><span class="line">// 查看提交日志</span><br><span class="line">* f9fa04a (HEAD -&gt; master) Integrating submission logs</span><br><span class="line">*   4830059 (develop) Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\</span><br><span class="line">| * 04a75c1 Add semver link</span><br><span class="line">* |   3bdd3fc Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\ \</span><br><span class="line">| |/</span><br><span class="line">| * d48ea11 Add setup link</span><br><span class="line">|/</span><br><span class="line">*   3513802 Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\</span><br><span class="line">| * 9ad35ee Add index.js</span><br><span class="line">| * 0bc04c2 Add index.css</span><br><span class="line">|/</span><br><span class="line">* 23a0a9e Rename index.php to index.html</span><br><span class="line">* da3c74c Add index.php</span><br><span class="line">* 7778db8 Add projects and requirements link</span><br><span class="line">* facc111 Add symfony website link</span><br><span class="line">* a384a2b Add README.md</span><br></pre></td></tr></table></figure>
<h2 id="整合间歇多次提交"><a href="#整合间歇多次提交" class="headerlink" title="整合间歇多次提交"></a>整合间歇多次提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --graph</span><br><span class="line">* f9fa04a (HEAD -&gt; master) Integrating submission logs</span><br><span class="line">*   4830059 (develop) Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\</span><br><span class="line">| * 04a75c1 Add semver link</span><br><span class="line">* |   3bdd3fc Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\ \</span><br><span class="line">| |/</span><br><span class="line">| * d48ea11 Add setup link</span><br><span class="line">|/</span><br><span class="line">*   3513802 Merge branch <span class="string">&#x27;develop&#x27;</span> to master</span><br><span class="line">|\</span><br><span class="line">| * 9ad35ee Add index.js</span><br><span class="line">| * 0bc04c2 Add index.css</span><br><span class="line">|/</span><br><span class="line">* 23a0a9e Rename index.php to index.html</span><br><span class="line">* da3c74c Add index.php</span><br><span class="line">* 7778db8 Add projects and requirements link</span><br><span class="line">* facc111 Add symfony website link</span><br><span class="line">* a384a2b Add README.md</span><br><span class="line"></span><br><span class="line">// 变基</span><br><span class="line">$ git rebase -i 23a0a9e</span><br><span class="line">弹出的编辑界面内容为：</span><br><span class="line">pick 23a0a9e</span><br><span class="line">s 0bc04c2 Add index.css <span class="comment"># 修改 pick 为 squash 或 s</span></span><br><span class="line">s 9ad35ee Add index.js <span class="comment"># 修改 pick 为 squash 或 s</span></span><br><span class="line">s d48ea11 Add setup link <span class="comment"># 修改 pick 为 squash 或 s</span></span><br><span class="line">s 04a75c1 Add semver link <span class="comment"># 修改 pick 为 squash 或 s</span></span><br><span class="line">pick f9fa04a Integrating submission logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 23a0a9e..f9fa04a onto 23a0a9e (5 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br><span class="line">正常情况下会提示成功，否则会出现如下情况：</span><br><span class="line">The previous cherry-pick is now empty, possibly due to conflict resolution.</span><br><span class="line">If you wish to commit it anyway, use:</span><br><span class="line"></span><br><span class="line">    git commit --allow-empty</span><br><span class="line"></span><br><span class="line">Otherwise, please use <span class="string">&#x27;git reset&#x27;</span></span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 23a0a9e</span><br><span class="line">Last <span class="built_in">command</span> <span class="keyword">done</span> (1 <span class="built_in">command</span> <span class="keyword">done</span>):</span><br><span class="line">   pick 23a0a9e Add links and static file</span><br><span class="line">Next commands to <span class="keyword">do</span> (5 remaining commands):</span><br><span class="line">   squash 0bc04c2 Add index.css</span><br><span class="line">   squash 9ad35ee Add index.js</span><br><span class="line">You are currently rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;23a0a9e&#x27;</span>.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">Could not apply 23a0a9e... Add links and static file</span><br><span class="line"></span><br><span class="line">// 查看状态</span><br><span class="line">$ git status</span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 23a0a9e</span><br><span class="line">Last <span class="built_in">command</span> <span class="keyword">done</span> (1 <span class="built_in">command</span> <span class="keyword">done</span>):</span><br><span class="line">   pick 23a0a9e</span><br><span class="line">Next commands to <span class="keyword">do</span> (8 remaining commands):</span><br><span class="line">   squash 04a75c1 Add semver link</span><br><span class="line">   squash d48ea11 Add setup link</span><br><span class="line">   squash 9ad35ee Add index.js</span><br><span class="line">   squash 0bc04c2 Add index.css</span><br><span class="line">  (use <span class="string">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class="line">You are currently editing a commit <span class="keyword">while</span> rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;23a0a9e&#x27;</span>.</span><br><span class="line">  (use <span class="string">&quot;git commit --amend&quot;</span> to amend the current commit)</span><br><span class="line">  (use <span class="string">&quot;git rebase --continue&quot;</span> once you are satisfied with your changes)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">// 继续变基</span><br><span class="line">$ git rebase --<span class="built_in">continue</span></span><br><span class="line">继续后弹出的编辑界面内容：</span><br><span class="line"><span class="comment"># This is a combination of 5 commits.</span></span><br><span class="line">Add links and static file <span class="comment"># 添加一行日志信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">Rename index.php to index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">Add index.css</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line"></span><br><span class="line">Add index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #4:</span></span><br><span class="line"></span><br><span class="line">Add setup link</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #5:</span></span><br><span class="line"></span><br><span class="line">Add semver link</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Mon Dec 31 20:05:25 2018 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 23a0a9e</span></span><br><span class="line"><span class="comment"># Last commands done (5 commands done):</span></span><br><span class="line"><span class="comment">#    squash d48ea11 Add setup link</span></span><br><span class="line"><span class="comment">#    squash 04a75c1 Add semver link</span></span><br><span class="line"><span class="comment"># Next command to do (1 remaining command):</span></span><br><span class="line"><span class="comment">#    pick f9fa04a Integrating submission logs</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch &#x27;master&#x27; on &#x27;23a0a9e&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#    modified:   README.md</span></span><br><span class="line"><span class="comment">#    renamed:    index.php -&gt; index.css</span></span><br><span class="line"><span class="comment">#    new file:   index.html</span></span><br><span class="line"><span class="comment">#    new file:   index.js</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[detached HEAD 688088f] Add links and static file</span><br><span class="line"> Date: Mon Dec 31 20:05:25 2018 +0800</span><br><span class="line"> 4 files changed, 2 insertions(+)</span><br><span class="line"> rename index.php =&gt; index.css (100%)</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 index.js</span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br><span class="line"></span><br><span class="line">// 查看日志信息</span><br><span class="line">$ git <span class="built_in">log</span> --oneline --graph</span><br><span class="line">* fe3b3cf (HEAD -&gt; master) Integrating submission logs</span><br><span class="line">* 688088f Add links and static file</span><br><span class="line">* da3c74c Add index.php</span><br><span class="line">* 7778db8 Add projects and requirements link</span><br><span class="line">* facc111 Add symfony website link</span><br><span class="line">* a384a2b Add README.md</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 命令大全</title>
    <url>/2020/09/07/git-collection-command/</url>
    <content><![CDATA[<p><img src="/images/2020/202009071423.png" alt="202009071423.png"></p>
<p>🗳 通往 Git 的路上并不总是那么一帆风顺，你是否和我一样总是为了那么一条应景的命令抓狂，貌似记得大概是这么操作的，但总是敲不对头，在披荆斩棘的千钧一发利刃竟然还没出鞘，真特么气人，为了解燃眉之急，我垫了一块超大的 Git 命令大全，但那是别人家的，我要的是自己收集整理的这种，还好，我整理了一份，总算是出了口恶气。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2018/01/22/git-started/"><code>Git 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/23/git-basic/"><code>Git 基本操作</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/24/git-log/"><code>Git 查看日志</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/25/git-branch/"><code>Git 分支</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/27/git-multiple-accounts/"><code>Git 中一个客户端设置多个账号</code></a></li>
<li><a href="https://imajinyun.xyz/2018/05/01/git-workflow/"><code>Git Workflow</code></a></li>
<li><a href="https://imajinyun.xyz/2020/09/07/git-collection-command/"><strong>Git 命令大全</strong></a></li>
</ul>
<h2 id="Git-命令分类"><a href="#Git-命令分类" class="headerlink" title="Git 命令分类"></a>Git 命令分类</h2><ul>
<li>配置操作；</li>
<li>基本操作；</li>
<li>分支操作；</li>
<li>合并操作；</li>
<li>标签操作；</li>
<li>回滚操作；</li>
<li>日志操作；</li>
<li>远程操作；</li>
<li>统计操作；</li>
</ul>
<h2 id="git-filter-repo"><a href="#git-filter-repo" class="headerlink" title="git filter-repo"></a>git filter-repo</h2><ul>
<li><a href="https://github.com/newren/git-filter-repo">Quickly rewrite git repository history</a></li>
<li><a href="https://htmlpreview.github.io/?https://github.com/newren/git-filter-repo/blob/docs/html/git-filter-repo.html">git-filter-repo manual page</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 git-filter-repo</span><br><span class="line">$ brew install git-filter-repo</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 将用户名 tony 替换为 pony</span><br><span class="line">$ git-filter-repo --name-callback <span class="string">&#x27;return name.replace(b&quot;tony&quot;, b&quot;pony&quot;)&#x27;</span> --force</span><br><span class="line"></span><br><span class="line">// 将邮箱 foo@gmail.com 替换为 bar@gmail.com</span><br><span class="line">$ git-filter-repo --email-callback <span class="string">&#x27;return email.replace(b&quot;foo@gmail.com&quot;, b&quot;bar@gmail.com&quot;)&#x27;</span> --force</span><br></pre></td></tr></table></figure>
<h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查找指定文件的第 40-60 行的历史信息</span><br><span class="line">$ git blame -L 40,60 /path/to/file.txt</span><br></pre></td></tr></table></figure>
<iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:525px; height:245px;" src="https://www.processon.com/embed/5b630fa4e4b0edb750f75076"></iframe>

<p>另外，这一篇写的太水了，见谅。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式六大原则</title>
    <url>/2018/01/31/basic-design-pattern-principle/</url>
    <content><![CDATA[<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>单一职责原则 - <code>SRP: Single Responsibility Principle</code></p>
<blockquote>
<p>实现类要职责单一。</p>
</blockquote>
<h3 id="单一职责定义"><a href="#单一职责定义" class="headerlink" title="单一职责定义"></a>单一职责定义</h3><p>不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。</p>
<h3 id="单一职责问题由来"><a href="#单一职责问题由来" class="headerlink" title="单一职责问题由来"></a>单一职责问题由来</h3><p>类 <code>T</code> 负责两个不同的职责：职责 <code>P1</code>，职责 <code>P2</code>。当由于职责 <code>P1</code> 需求发生改变而需要修改类 <code>T</code> 时，有可能会导致原本运行正常的职责 <code>P2</code> 功能发生故障。</p>
<h3 id="单一职责注意点"><a href="#单一职责注意点" class="headerlink" title="单一职责注意点"></a>单一职责注意点</h3><ul>
<li>可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多</li>
<li>提高类的可读性，提高系统的可维护性</li>
<li>变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响</li>
</ul>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>里氏替换原则 - <code>LSP: Liskov Substitution Principle</code></p>
<blockquote>
<p>不要破坏继承体系。</p>
</blockquote>
<h3 id="里氏替换定义"><a href="#里氏替换定义" class="headerlink" title="里氏替换定义"></a>里氏替换定义</h3><p>所有引用基类的地方必须能透明地使用其子类的对象。</p>
<h3 id="里氏替换问题由来"><a href="#里氏替换问题由来" class="headerlink" title="里氏替换问题由来"></a>里氏替换问题由来</h3><p>有一功能 <code>P1</code>，由类 <code>A</code> 完成。现需要将功能 <code>P1</code> 进行扩展，扩展后的功能为 <code>P</code>，其中 <code>P</code> 由原有功能 <code>P1</code> 与新功能 <code>P2</code> 组成。新功能 <code>P</code> 由类 <code>A</code> 的子类 <code>B</code> 来完成，则子类 <code>B</code> 在完成新功能 <code>P2</code> 的同时，有可能会导致原有功能 <code>P1</code> 发生故障。</p>
<h3 id="里氏替换注意点"><a href="#里氏替换注意点" class="headerlink" title="里氏替换注意点"></a>里氏替换注意点</h3><blockquote>
<p>里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。</p>
</blockquote>
<ul>
<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li>
<li>子类中可以增加自己特有的方法</li>
<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松</li>
<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格</li>
</ul>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>依赖倒置原则 - <code>DIP: Dependence Inversion Principle</code></p>
<blockquote>
<p>面向接口编程。</p>
</blockquote>
<h3 id="依赖倒置定义"><a href="#依赖倒置定义" class="headerlink" title="依赖倒置定义"></a>依赖倒置定义</h3><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p>
<h3 id="依赖倒置问题由来"><a href="#依赖倒置问题由来" class="headerlink" title="依赖倒置问题由来"></a>依赖倒置问题由来</h3><p>类 <code>A</code> 直接依赖类 <code>B</code>，假如要将类 <code>A</code> 改为依赖类 <code>C</code>，则必须通过修改类 <code>A</code> 的代码来达成。这种场景下，类 <code>A</code> 一般是高层模块，负责复杂的业务逻辑；类 <code>B</code> 和类 <code>C</code> 是低层模块，负责基本的原子操作；假如修改类 <code>A</code>，会给程序带来不必要的风险。</p>
<h3 id="依赖倒置注意点"><a href="#依赖倒置注意点" class="headerlink" title="依赖倒置注意点"></a>依赖倒置注意点</h3><ul>
<li>低层模块尽量都要有抽象类或接口，或者两者都有</li>
<li>变量的声明类型尽量是抽象类或接口</li>
<li>使用继承时遵循里氏替换原则</li>
</ul>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>接口隔离原则 - <code>ISP: Interface Segregation Principle</code></p>
<blockquote>
<ul>
<li>设计接口的时候要精简单一</li>
<li>多用组合，少用继承，<code>Has</code> 关系组合，<code>Is</code> 关系继承</li>
</ul>
</blockquote>
<h3 id="接口隔离定义"><a href="#接口隔离定义" class="headerlink" title="接口隔离定义"></a>接口隔离定义</h3><p>客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。</p>
<h3 id="接口隔离问题由来"><a href="#接口隔离问题由来" class="headerlink" title="接口隔离问题由来"></a>接口隔离问题由来</h3><p>类 <code>A</code> 通过接口 <code>I</code> 依赖类 <code>B</code>，类 <code>C</code> 通过接口 <code>I</code> 依赖类 <code>D</code>，如果接口 <code>I</code> 对于类 <code>A</code> 和类 <code>B</code> 来说不是最小接口，则类 <code>B</code> 和类 <code>D</code> 必须去实现他们不需要的方法。</p>
<p>将臃肿的接口 <code>I</code> 拆分为独立的几个接口，类 <code>A</code> 和类 <code>C</code> 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。</p>
<h3 id="接口隔离注意点"><a href="#接口隔离注意点" class="headerlink" title="接口隔离注意点"></a>接口隔离注意点</h3><ul>
<li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不争的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度</li>
<li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系</li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情</li>
</ul>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>迪米特法则 - <code>LKP: Least Knowledge Principle</code></p>
<blockquote>
<p>降低耦合只与直接的朋友通信。</p>
</blockquote>
<h3 id="迪米特法则定义"><a href="#迪米特法则定义" class="headerlink" title="迪米特法则定义"></a>迪米特法则定义</h3><p>一个对象应该对其他对象保持最少的了解。</p>
<h3 id="迪米特法则问题由来"><a href="#迪米特法则问题由来" class="headerlink" title="迪米特法则问题由来"></a>迪米特法则问题由来</h3><p>类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</p>
<p>尽量降低类与类之间的耦合。</p>
<h3 id="迪米特法则注意点"><a href="#迪米特法则注意点" class="headerlink" title="迪米特法则注意点"></a>迪米特法则注意点</h3><ul>
<li>过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大</li>
<li>在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合</li>
</ul>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>开闭原则 - <code>OCP: Open Closed Principle</code></p>
<blockquote>
<p>扩展开放，对修改关闭。</p>
</blockquote>
<h3 id="开闭原则定义"><a href="#开闭原则定义" class="headerlink" title="开闭原则定义"></a>开闭原则定义</h3><p>一个软件实体如类 / 模块和函数应该对扩展开放，对修改关闭。</p>
<h3 id="开闭原则问题由来"><a href="#开闭原则问题由来" class="headerlink" title="开闭原则问题由来"></a>开闭原则问题由来</h3><p>在软件的生命周期内，因为变化 / 升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。</p>
<p>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p>
<h3 id="开闭原则注意点"><a href="#开闭原则注意点" class="headerlink" title="开闭原则注意点"></a>开闭原则注意点</h3><ul>
<li>用抽象构建框架，用实现扩展细节</li>
<li>抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定</li>
<li>而软件中易变的细节，我们用从抽象派生的实现类来进行扩展，当软件需要发生变化时，我们只需要根据需求重新派生一个实现类来扩展就可以了</li>
</ul>
]]></content>
      <categories>
        <category>basic</category>
      </categories>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 查看日志</title>
    <url>/2018/01/24/git-log/</url>
    <content><![CDATA[<p>😇 在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 git log 命令查看。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2018/01/22/git-started/"><code>Git 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/23/git-basic/"><code>Git 基本操作</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/24/git-log/"><strong>Git 查看日志</strong></a></li>
<li><a href="https://imajinyun.xyz/2018/01/25/git-branch/"><code>Git 分支</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/27/git-multiple-accounts/"><code>Git 中一个客户端设置多个账号</code></a></li>
<li><a href="https://imajinyun.xyz/2018/05/01/git-workflow/"><code>Git Workflow</code></a></li>
<li><a href="https://imajinyun.xyz/2020/09/07/git-collection-command/"><code>Git 命令大全</code></a></li>
</ul>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-p</code></td>
<td>按补丁格式显示每个更新之间的差异</td>
</tr>
<tr>
<td><code>--word-diff</code></td>
<td>按 <code>word diff</code> 格式显示差异</td>
</tr>
<tr>
<td><code>--stat</code></td>
<td>显示每次更新的文件修改统计信息</td>
</tr>
<tr>
<td><code>--shortstat</code></td>
<td>只显示 <code>--stat</code> 中最后的行数修改添加移除统计</td>
</tr>
<tr>
<td><code>--name-only</code></td>
<td>仅在提交信息后显示已修改的文件清单</td>
</tr>
<tr>
<td><code>--name-status</code></td>
<td>显示新增、修改、删除的文件清单</td>
</tr>
<tr>
<td><code>--abbrev-commit</code></td>
<td>仅显示 <code>SHA-1</code> 的前几个字符，而非所有的 <code>40</code> 个字符</td>
</tr>
<tr>
<td><code>--relative-date</code></td>
<td>使用较短的相对时间显示（比如：<code>2 weeks ago</code>）</td>
</tr>
<tr>
<td><code>--graph</code></td>
<td>显示 <code>ASCII</code> 图形表示的分支合并历史</td>
</tr>
<tr>
<td><code>--pretty</code></td>
<td>使用其他格式显示历史提交信息。可用的选项包括 <code>oneline, short, full, fuller</code> 和 <code>format</code>（后跟指定格式）</td>
</tr>
<tr>
<td><code>--oneline</code></td>
<td><code>--pretty=oneline --abbrev-commit</code> 的简化用法</td>
</tr>
</tbody>
</table>
<h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 此处以 vue 做演示</span><br><span class="line">$ <span class="built_in">cd</span> ~/Desktop/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/vuejs/vue.git</span><br><span class="line">Cloning into <span class="string">&#x27;vue&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 89, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (89/89), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (64/64), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 53631 (delta 38), reused 51 (delta 25), pack-reused 53542</span><br><span class="line">Receiving objects: 100% (53631/53631), 25.20 MiB | 1.76 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (37410/37410), <span class="keyword">done</span>.</span><br><span class="line">$ <span class="built_in">cd</span> vue</span><br></pre></td></tr></table></figure>
<h1 id="普通格式查看"><a href="#普通格式查看" class="headerlink" title="普通格式查看"></a>普通格式查看</h1><h2 id="查看当前分支的所有简略日志"><a href="#查看当前分支的所有简略日志" class="headerlink" title="查看当前分支的所有简略日志"></a>查看当前分支的所有简略日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit 38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:45 2018 +0000</span><br><span class="line"></span><br><span class="line">    refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line"></span><br><span class="line">commit af9e2b3f0f4156fd52ed4444b96e2b8c0932c658</span><br><span class="line">Author: Nick Hall &lt;iamssb@gmail.com&gt;</span><br><span class="line">Date:   Thu Dec 13 01:41:36 2018 +0900</span><br><span class="line"></span><br><span class="line">    chore: minor comment cleanup (<span class="comment">#9191)</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h2 id="查看所有分支的所有简略日志"><a href="#查看所有分支的所有简略日志" class="headerlink" title="查看所有分支的所有简略日志"></a>查看所有分支的所有简略日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --all</span><br><span class="line">commit ce35159d6d6e9c3607bd3232e386b5b994d0ec49 (origin/2.6)</span><br><span class="line">Author: Evan You &lt;yyx990803@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 26 17:22:32 2018 -0500</span><br><span class="line"></span><br><span class="line">    chore: fix types</span><br><span class="line"></span><br><span class="line">commit c7c13c2a156269d29fd9c9f8f6a3e53a2f2cac3d</span><br><span class="line">Author: Evan You &lt;yyx990803@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 26 17:17:30 2018 -0500</span><br><span class="line"></span><br><span class="line">    fix(scoped-slots): ensure <span class="variable">$scopedSlots</span> calls always <span class="built_in">return</span> Arrays</span><br><span class="line"></span><br><span class="line">    Also allow render <span class="built_in">functions</span> to <span class="built_in">return</span> an Array of a single element.</span><br><span class="line">    Close <span class="comment">#8056</span></span><br><span class="line"></span><br><span class="line">commit d747469e1ae26190d364e5cc9c8112d3d865a0b9</span><br><span class="line">Author: Evan You &lt;yyx990803@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 26 16:02:50 2018 -0500</span><br><span class="line"></span><br><span class="line">    <span class="built_in">test</span>: <span class="built_in">test</span> <span class="keyword">case</span> <span class="keyword">for</span> v-for native collection support</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h2 id="查看某个文件变动的具体日志信息"><a href="#查看某个文件变动的具体日志信息" class="headerlink" title="查看某个文件变动的具体日志信息"></a>查看某个文件变动的具体日志信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -- src/core/index.js</span><br><span class="line">commit 9b22d86ab315a3c6061a6a4776eab1964304f92e</span><br><span class="line">Author: Evan You &lt;yyx990803@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 8 09:51:03 2018 -0500</span><br><span class="line"></span><br><span class="line">    fix: install ssr helpers <span class="keyword">for</span> functional context during SSR</span><br><span class="line"></span><br><span class="line">    close <span class="comment">#7443, ref nuxt/nuxt.js#2565</span></span><br><span class="line"></span><br><span class="line">commit 55816543c46e75aa53481ac95a89ff6f87a2d704</span><br><span class="line">Author: JK &lt;jingkai.zhao@foxmail.com&gt;</span><br><span class="line">Date:   Thu Jun 29 12:37:03 2017 +0800</span><br><span class="line"></span><br><span class="line">    fix(ssr): reference error when create <span class="variable">$ssrContext</span> <span class="keyword">for</span> root component (<span class="comment">#5981)</span></span><br><span class="line"></span><br><span class="line">    fix <span class="comment">#5941</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h2 id="查看某个文件变动的具体日志信息和文件内容"><a href="#查看某个文件变动的具体日志信息和文件内容" class="headerlink" title="查看某个文件变动的具体日志信息和文件内容"></a>查看某个文件变动的具体日志信息和文件内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --follow -p -- src/core/index.js</span><br><span class="line">commit 9b22d86ab315a3c6061a6a4776eab1964304f92e</span><br><span class="line">Author: Evan You &lt;yyx990803@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 8 09:51:03 2018 -0500</span><br><span class="line"></span><br><span class="line">    fix: install ssr helpers <span class="keyword">for</span> functional context during SSR</span><br><span class="line"></span><br><span class="line">    close <span class="comment">#7443, ref nuxt/nuxt.js#2565</span></span><br><span class="line"></span><br><span class="line">diff --git a/src/core/index.js b/src/core/index.js</span><br><span class="line">index b2a0cb8c..daf6203b 100644</span><br><span class="line">--- a/src/core/index.js</span><br><span class="line">+++ b/src/core/index.js</span><br><span class="line">@@ -1,6 +1,7 @@</span><br><span class="line"> import Vue from <span class="string">&#x27;./instance/index&#x27;</span></span><br><span class="line"> import &#123; initGlobalAPI &#125; from <span class="string">&#x27;./global-api/index&#x27;</span></span><br><span class="line"> import &#123; isServerRendering &#125; from <span class="string">&#x27;core/util/env&#x27;</span></span><br><span class="line">+import &#123; FunctionalRenderContext &#125; from <span class="string">&#x27;core/vdom/create-functional-component&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="查看最近两次更新的内容差异"><a href="#查看最近两次更新的内容差异" class="headerlink" title="查看最近两次更新的内容差异"></a>查看最近两次更新的内容差异</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p -2</span><br><span class="line">commit 38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:45 2018 +0000</span><br><span class="line"></span><br><span class="line">    refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line"></span><br><span class="line">diff --git a/src/core/instance/events.js b/src/core/instance/events.js</span><br><span class="line">index 8225bdec..bb07a96b 100644</span><br><span class="line">--- a/src/core/instance/events.js</span><br><span class="line">+++ b/src/core/instance/events.js</span><br><span class="line">@@ -102,16 +102,14 @@ <span class="built_in">export</span> <span class="keyword">function</span> eventsMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">       vm._events[event] = null</span><br><span class="line">       <span class="built_in">return</span> vm</span><br><span class="line">     &#125;</span><br><span class="line">-    <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">-      // specific handler</span><br><span class="line">-      <span class="built_in">let</span> cb</span><br><span class="line">-      <span class="built_in">let</span> i = cbs.length</span><br><span class="line">-      <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">-        cb = cbs[i]</span><br><span class="line">-        <span class="keyword">if</span> (cb === fn || cb.fn === fn) &#123;</span><br><span class="line">-          cbs.splice(i, 1)</span><br><span class="line">-          <span class="built_in">break</span></span><br><span class="line">-        &#125;</span><br><span class="line">+    // specific handler</span><br><span class="line">+    <span class="built_in">let</span> cb</span><br><span class="line">+    <span class="built_in">let</span> i = cbs.length</span><br><span class="line">+    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">+      cb = cbs[i]</span><br><span class="line">+      <span class="keyword">if</span> (cb === fn || cb.fn === fn) &#123;</span><br><span class="line">+        cbs.splice(i, 1)</span><br><span class="line">+        <span class="built_in">break</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">return</span> vm</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="查看最近的三条的简略日志"><a href="#查看最近的三条的简略日志" class="headerlink" title="查看最近的三条的简略日志"></a>查看最近的三条的简略日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline -n3</span><br><span class="line">38e967b8 (HEAD -&gt; dev, origin/dev, origin/HEAD) refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line">af9e2b3f chore: minor comment cleanup (<span class="comment">#9191)</span></span><br><span class="line">b06c784b fix(ssr): support rendering comment (<span class="comment">#9128)</span></span><br></pre></td></tr></table></figure>
<h2 id="显示简要的增改行数统计"><a href="#显示简要的增改行数统计" class="headerlink" title="显示简要的增改行数统计"></a>显示简要的增改行数统计</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line">commit 38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:45 2018 +0000</span><br><span class="line"></span><br><span class="line">    refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line"></span><br><span class="line"> src/core/instance/events.js           | 18 ++++++++----------</span><br><span class="line"> src/core/util/debug.js                |  2 +-</span><br><span class="line"> src/server/template-renderer/index.js |  2 +-</span><br><span class="line"> 3 files changed, 10 insertions(+), 12 deletions(-)</span><br><span class="line"></span><br><span class="line">commit af9e2b3f0f4156fd52ed4444b96e2b8c0932c658</span><br><span class="line">Author: Nick Hall &lt;iamssb@gmail.com&gt;</span><br><span class="line">Date:   Thu Dec 13 01:41:36 2018 +0900</span><br><span class="line"></span><br><span class="line">    chore: minor comment cleanup (<span class="comment">#9191)</span></span><br><span class="line"></span><br><span class="line"> src/core/observer/dep.js | 6 +++---</span><br><span class="line"> 1 file changed, 3 insertions(+), 3 deletions(-)</span><br><span class="line"></span><br><span class="line">commit b06c784b81a244e1bc2d028216fcd2ab873730b9</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:08 2018 +0000</span><br><span class="line"></span><br><span class="line">    fix(ssr): support rendering comment (<span class="comment">#9128)</span></span><br><span class="line"></span><br><span class="line"> src/server/optimizing-compiler/codegen.js                  |  6 +++++-</span><br><span class="line"> <span class="built_in">test</span>/unit/modules/server-compiler/compiler-options.spec.js | 13 +++++++++++++</span><br><span class="line"> 2 files changed, 18 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>
<h2 id="显示最后一次提交信息"><a href="#显示最后一次提交信息" class="headerlink" title="显示最后一次提交信息"></a>显示最后一次提交信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1 HEAD</span><br><span class="line"> commit 38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:45 2018 +0000</span><br><span class="line"></span><br><span class="line">    refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br></pre></td></tr></table></figure>
<h2 id="查看文件改变信息"><a href="#查看文件改变信息" class="headerlink" title="查看文件改变信息"></a>查看文件改变信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --name-status</span><br><span class="line">commit 38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:45 2018 +0000</span><br><span class="line"></span><br><span class="line">    refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line"></span><br><span class="line">M       src/core/instance/events.js</span><br><span class="line">M       src/core/util/debug.js</span><br><span class="line">M       src/server/template-renderer/index.js</span><br><span class="line"></span><br><span class="line">commit af9e2b3f0f4156fd52ed4444b96e2b8c0932c658</span><br><span class="line">Author: Nick Hall &lt;iamssb@gmail.com&gt;</span><br><span class="line">Date:   Thu Dec 13 01:41:36 2018 +0900</span><br><span class="line"></span><br><span class="line">    chore: minor comment cleanup (<span class="comment">#9191)</span></span><br><span class="line"></span><br><span class="line">M       src/core/observer/dep.js</span><br><span class="line"></span><br><span class="line">commit b06c784b81a244e1bc2d028216fcd2ab873730b9</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:08 2018 +0000</span><br><span class="line"></span><br><span class="line">    fix(ssr): support rendering comment (<span class="comment">#9128)</span></span><br><span class="line"></span><br><span class="line">M       src/server/optimizing-compiler/codegen.js</span><br><span class="line">A       <span class="built_in">test</span>/unit/modules/server-compiler/compiler-options.spec.js</span><br></pre></td></tr></table></figure>
<h1 id="指定格式查看"><a href="#指定格式查看" class="headerlink" title="指定格式查看"></a>指定格式查看</h1><p><code>git log --pretty=format</code> 常用的选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%H</code></td>
<td>提交对象（<code>commit</code>）的完整哈希字串</td>
</tr>
<tr>
<td><code>%h</code></td>
<td>提交对象的简短哈希字串</td>
</tr>
<tr>
<td><code>%T</code></td>
<td>树对象（tree）的完整哈希字串</td>
</tr>
<tr>
<td><code>%t</code></td>
<td>树对象的简短哈希字串</td>
</tr>
<tr>
<td><code>%P</code></td>
<td>父对象（parent）的完整哈希字串</td>
</tr>
<tr>
<td><code>%p</code></td>
<td>父对象的简短哈希字串</td>
</tr>
<tr>
<td><code>%an</code></td>
<td>作者（author）的名字</td>
</tr>
<tr>
<td><code>%ae</code></td>
<td>作者的电子邮件地址</td>
</tr>
<tr>
<td><code>%ad</code></td>
<td>作者修订日期（可以用 <code>-date=</code> 选项定制格式）</td>
</tr>
<tr>
<td><code>%ar</code></td>
<td>作者修订日期，按多久以前的方式显示</td>
</tr>
<tr>
<td><code>%cn</code></td>
<td>提交者（committer）的名字</td>
</tr>
<tr>
<td><code>%ce</code></td>
<td>提交者的电子邮件地址</td>
</tr>
<tr>
<td><code>%cd</code></td>
<td>提交日期</td>
</tr>
<tr>
<td><code>%cr</code></td>
<td>提交日期，按多久以前的方式显示</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>提交说明</td>
</tr>
</tbody>
</table>
<p><code>git log</code> 输出的选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-(n)</code></td>
<td>仅显示最近的 n 条提交</td>
</tr>
<tr>
<td><code>--since, --after</code></td>
<td>仅显示指定时间之后的提交</td>
</tr>
<tr>
<td><code>--until, --before</code></td>
<td>仅显示指定时间之前的提交</td>
</tr>
<tr>
<td><code>--author</code></td>
<td>仅显示指定作者相关的提交</td>
</tr>
<tr>
<td><code>--committer</code></td>
<td>仅显示指定提交者相关的提交</td>
</tr>
<tr>
<td><code>--grep</code></td>
<td>仅显示含指定关键字的提交</td>
</tr>
<tr>
<td><code>-S</code></td>
<td>仅显示添加或移除了某个关键字的提交</td>
</tr>
</tbody>
</table>
<h2 id="用-oneline-将每个提交放在一行显示"><a href="#用-oneline-将每个提交放在一行显示" class="headerlink" title="用 oneline 将每个提交放在一行显示"></a>用 oneline 将每个提交放在一行显示</h2><blockquote>
<p>这在提交数很大时非常有用。另外还有 <code>short</code>，<code>full</code> 和 <code>fuller</code> 可选。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD) refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line">af9e2b3f0f4156fd52ed4444b96e2b8c0932c658 chore: minor comment cleanup (<span class="comment">#9191)</span></span><br><span class="line">b06c784b81a244e1bc2d028216fcd2ab873730b9 fix(ssr): support rendering comment (<span class="comment">#9128)</span></span><br><span class="line">70754084ec2d84e44effeb8f82efda3397a08b0d (tag: v2.5.21) build: release 2.5.21</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="自定义格式查看日志"><a href="#自定义格式查看日志" class="headerlink" title="自定义格式查看日志"></a>自定义格式查看日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%h - %an, %ar : %s&quot;</span></span><br><span class="line">38e967b8 - Xin Du (Clark), 3 weeks ago : refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line">af9e2b3f - Nick Hall, 3 weeks ago : chore: minor comment cleanup (<span class="comment">#9191)</span></span><br><span class="line">b06c784b - Xi   n Du (Clark), 3 weeks ago : fix(ssr): support rendering comment (<span class="comment">#9128)</span></span><br><span class="line">70754084 - Evan You, 3 weeks ago : build: release 2.5.21</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;</span> --abbrev-commit</span><br><span class="line">* 38e967b8 - (HEAD -&gt; dev, origin/dev, origin/HEAD) refactor: tiny cleanup changes (<span class="comment">#9193) (3 weeks ago) &lt;Xin Du (Clark)&gt;</span></span><br><span class="line">* af9e2b3f - chore: minor comment cleanup (<span class="comment">#9191) (3 weeks ago) &lt;Nick Hall&gt;</span></span><br><span class="line">* b06c784b - fix(ssr): support rendering comment (<span class="comment">#9128) (3 weeks ago) &lt;Xin Du (Clark)&gt;</span></span><br><span class="line">* 70754084 - (tag: v2.5.21) build: release 2.5.21 (3 weeks ago) &lt;Evan You&gt;</span><br><span class="line">* b449e17e - build: build 2.5.21 (3 weeks ago) &lt;Evan You&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图文格式查看"><a href="#图文格式查看" class="headerlink" title="图文格式查看"></a>图文格式查看</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline --graph --abbrev-commit</span><br><span class="line">*   5f737e836e (HEAD -&gt; master, origin/master, origin/HEAD) feature <span class="comment">#29613 [VarDumper] Use hyperlinks in CliDescriptor (ogizanagi)</span></span><br><span class="line">|\</span><br><span class="line">| * e54e21933a [VarDumper] Use hyperlinks <span class="keyword">in</span> CliDescriptor</span><br><span class="line">* |   55113775c0 Merge branch <span class="string">&#x27;4.2&#x27;</span></span><br><span class="line">|\ \</span><br><span class="line">| * | 9ade0a7605 [Cache] fix <span class="built_in">test</span></span><br><span class="line">* | |   96285882cf Merge branch <span class="string">&#x27;4.2&#x27;</span></span><br><span class="line">|\ \ \</span><br><span class="line">| |/ /</span><br><span class="line">| * |   43dfbe2df9 bug <span class="comment">#29648 [Cache] fix Simple\Psr6Cache proxying of metadata (nicolas-grekas)</span></span><br><span class="line">| |\ \</span><br><span class="line">| | * | 02edc9b049 [Cache] fix Simple\Psr6Cache proxying of metadata</span><br><span class="line">| |/ /</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%h %s&quot;</span> --graph</span><br><span class="line">*   5f737e836e feature <span class="comment">#29613 [VarDumper] Use hyperlinks in CliDescriptor (ogizanagi)</span></span><br><span class="line">|\</span><br><span class="line">| * e54e21933a [VarDumper] Use hyperlinks <span class="keyword">in</span> CliDescriptor</span><br><span class="line">* |   55113775c0 Merge branch <span class="string">&#x27;4.2&#x27;</span></span><br><span class="line">|\ \</span><br><span class="line">| * | 9ade0a7605 [Cache] fix <span class="built_in">test</span></span><br><span class="line">* | |   96285882cf Merge branch <span class="string">&#x27;4.2&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过-ASCII-树形结构来展示所有的分支"><a href="#通过-ASCII-树形结构来展示所有的分支" class="headerlink" title="通过 ASCII 树形结构来展示所有的分支"></a>通过 ASCII 树形结构来展示所有的分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --oneline --decorate --all</span><br><span class="line">* 17d7a5f6 chore: update sponsors</span><br><span class="line">| * c8139015 (origin/feat-scoped-slot-passdown) <span class="built_in">test</span>: add slot <span class="built_in">test</span> <span class="keyword">case</span> (<span class="comment">#8344)</span></span><br><span class="line">| * bb06c75e feat(core): support passing down scopedSlots with v-bind</span><br><span class="line">| | * 636c9b4e (tag: v2.5.17, origin/hotfix) build: release 2.5.17</span><br><span class="line">| | * 7e75b79b build: build 2.5.17</span><br><span class="line">| | * b3c5e642 chore: minor tweaks</span><br><span class="line">| | * c28f7929 fix: fix potential xss vulnerability <span class="keyword">in</span> ssr</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br><span class="line">* | 25342194 (tag: v2.5.16) build: release 2.5.16</span><br><span class="line">* | 90891709 build: build 2.5.16</span><br><span class="line">* | 62a922e8 fix: fix wrongly matched named slots <span class="keyword">in</span> functional components</span><br><span class="line">| | * 0f4e6a9a (origin/fix-component-insert-order) fix: invoke component node create hooks before insertion</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br><span class="line">| | * 531cea58 (origin/perf-computed) perf: avoid unnecessary re-renders when computed property value did not change</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br><span class="line">| | * ca2e6a74 (origin/fix-beforeupdate) fix: beforeUpdate should be called before render and allow state mutation</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br></pre></td></tr></table></figure>
<h1 id="限制格式输出"><a href="#限制格式输出" class="headerlink" title="限制格式输出"></a>限制格式输出</h1><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-(n)</code></td>
<td>仅显示最近的 <code>n</code> 条提交</td>
</tr>
<tr>
<td><code>--since, --after</code></td>
<td>仅显示指定时间之后的提交</td>
</tr>
<tr>
<td><code>--until, --before</code></td>
<td>仅显示指定时间之前的提交</td>
</tr>
<tr>
<td><code>--author</code></td>
<td><code>仅显示指定作者相关的提交</code></td>
</tr>
<tr>
<td><code>--committer</code></td>
<td><code>仅显示指定提交者相关的提交</code></td>
</tr>
</tbody>
</table>
<h2 id="显示三周之后的提交"><a href="#显示三周之后的提交" class="headerlink" title="显示三周之后的提交"></a>显示三周之后的提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --after=3.weeks</span><br><span class="line">commit 38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:45 2018 +0000</span><br><span class="line"></span><br><span class="line">    refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line"></span><br><span class="line">commit af9e2b3f0f4156fd52ed4444b96e2b8c0932c658</span><br><span class="line">Author: Nick Hall &lt;iamssb@gmail.com&gt;</span><br><span class="line">Date:   Thu Dec 13 01:41:36 2018 +0900</span><br><span class="line"></span><br><span class="line">    chore: minor comment cleanup (<span class="comment">#9191)</span></span><br></pre></td></tr></table></figure>
<h2 id="显示两周之前的提交"><a href="#显示两周之前的提交" class="headerlink" title="显示两周之前的提交"></a>显示两周之前的提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --before=2.weeks</span><br><span class="line">commit 38e967b8067441ff37cb3b923200023a6b842759 (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Xin Du (Clark) &lt;clark.duxin@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 12 16:41:45 2018 +0000</span><br><span class="line"></span><br><span class="line">    refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line"></span><br><span class="line">commit af9e2b3f0f4156fd52ed4444b96e2b8c0932c658</span><br><span class="line">Author: Nick Hall &lt;iamssb@gmail.com&gt;</span><br><span class="line">Date:   Thu Dec 13 01:41:36 2018 +0900</span><br><span class="line"></span><br><span class="line">    chore: minor comment cleanup (<span class="comment">#9191)</span></span><br></pre></td></tr></table></figure>
<h2 id="显示指定人提交日志"><a href="#显示指定人提交日志" class="headerlink" title="显示指定人提交日志"></a>显示指定人提交日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看 2018 年元月期间，Evan You 提交的但未合并的位于项目 ./src 目录下的代码</span><br><span class="line">$ git <span class="built_in">log</span> --pretty=<span class="string">&quot;%h - %s&quot;</span> --author=<span class="string">&#x27;Evan You&#x27;</span> --after=<span class="string">&quot;2018-12-01&quot;</span> \</span><br><span class="line">--before=<span class="string">&quot;2018-12-31&quot;</span> --no-merges -- ./src</span><br><span class="line">847e4937 - fix: fix single v-for child optimization</span><br><span class="line">4074104f - perf: skip normalization on single child element v-for</span><br><span class="line">47487607 - fix: fix v-for component with undefined value</span><br><span class="line">0d4b35f5 - fix(vdom): remove unnecessary sameVnode condition</span><br><span class="line">5d721a42 - revert: fix(sfc): avoid deindent when pad option is specified (<span class="comment">#7647)</span></span><br><span class="line">780dac56 - fix(ssr): should not warn <span class="keyword">for</span> custom directives that <span class="keyword">do</span> not have ssr implementation</span><br><span class="line">8a2dbf50 - fix(transition-group): fix activeInstance regression</span><br><span class="line">f077ed17 - fix(ssr): fix ssr template publicPath generation</span><br><span class="line">1b4a8a0c - fix(compiler): fix codegen <span class="keyword">for</span> v-for component inside template</span><br><span class="line">e4b1b57f - fix(ssr): adjust call stack size defer threshold</span><br><span class="line">530ca1b2 - fix(core): properly handle reused vnodes</span><br><span class="line">097f6229 - fix(core): avoid mutating original children when cloning vnode</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --before=&#123;2,weeks,ago&#125; --after=&#123;2018-11-30&#125; --oneline</span><br><span class="line">38e967b8 (HEAD -&gt; dev, origin/dev, origin/HEAD) refactor: tiny cleanup changes (<span class="comment">#9193)</span></span><br><span class="line">af9e2b3f chore: minor comment cleanup (<span class="comment">#9191)</span></span><br><span class="line">b06c784b fix(ssr): support rendering comment (<span class="comment">#9128)</span></span><br><span class="line">70754084 (tag: v2.5.21) build: release 2.5.21</span><br><span class="line">b449e17e build: build 2.5.21</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 基本操作</title>
    <url>/2018/01/23/git-basic/</url>
    <content><![CDATA[<p>😭 通过一顿操作来熟悉 Git 是不二法门。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2018/01/22/git-started/"><code>Git 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/23/git-basic/"><strong>Git 基本操作</strong></a></li>
<li><a href="https://imajinyun.xyz/2018/01/24/git-log/"><code>Git 查看日志</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/25/git-branch/"><code>Git 分支</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/27/git-multiple-accounts/"><code>Git 中一个客户端设置多个账号</code></a></li>
<li><a href="https://imajinyun.xyz/2018/05/01/git-workflow/"><code>Git Workflow</code></a></li>
<li><a href="https://imajinyun.xyz/2020/09/07/git-collection-command/"><code>Git 命令大全</code></a></li>
</ul>
<h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><blockquote>
<p>请自行准备好 <code>git</code> 环境。</p>
</blockquote>
<h2 id="创建服务器裸仓库"><a href="#创建服务器裸仓库" class="headerlink" title="创建服务器裸仓库"></a>创建服务器裸仓库</h2><blockquote>
<ul>
<li><code>git init</code>: 将当前的目录转换成一个 <code>git</code> 仓库</li>
<li><code>git init &lt;directory&gt;</code>: 在指定目录创建一个空的 <code>git</code> 仓库</li>
<li><code>git init --bare &lt;project-name&gt;.git</code>: 裸库往往被创建用于作为大家一起工作的共享库，每一个人都可以往里面 <code>push</code> 自己的本地修改。服务器上 <code>bare</code> 创建的仓库，主要用来连接，同步，协调。记录每个人本地仓库的记录，而不存放项目源代码。而每个开发人员自己电脑上分别有个小仓库，存放源代码及自己的改动</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 登录远程服务器</span><br><span class="line">$ ssh &lt;user&gt;@&lt;host&gt;</span><br><span class="line"></span><br><span class="line">// 进入操作目录</span><br><span class="line">$ <span class="built_in">cd</span> /path/to/repository</span><br><span class="line"></span><br><span class="line">// 创建祼仓库</span><br><span class="line">$ git init --bare &lt;project-name&gt;.git</span><br><span class="line"></span><br><span class="line">// 退出远程服务器，进入本地终端</span><br><span class="line">$ git init &lt;directory&gt;</span><br><span class="line">$ touch README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">$ git remote add origin &lt;user&gt;@&lt;host&gt;:/path/to/repository/&lt;project-name&gt;.git</span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br><span class="line">// 其它成员克隆仓库</span><br><span class="line">$ git <span class="built_in">clone</span> &lt;user&gt;@&lt;host&gt;:/path/to/repository/&lt;project-name&gt;.git</span><br></pre></td></tr></table></figure>
<h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><h3 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建本地仓库</span><br><span class="line">$ mkdir example</span><br><span class="line">$ <span class="built_in">cd</span> example</span><br><span class="line">$ git init</span><br><span class="line">$ touch README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h3><blockquote>
<p>关联多个仓库需要给不同的远程仓库起一个别名，请自行在 gitee 和 github 上创建空仓库。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add gitee git@gitee.com:user/project.git</span><br><span class="line">$ git push -u gitee master</span><br><span class="line">或</span><br><span class="line">$ git remote add github https://github.com/user/project.git</span><br><span class="line">$ git push -u github master</span><br></pre></td></tr></table></figure>
<h3 id="分支跟踪远程分支"><a href="#分支跟踪远程分支" class="headerlink" title="分支跟踪远程分支"></a>分支跟踪远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置让本地某个分支跟踪远程的某个分支</span><br><span class="line">$ git branch --set-upstream-to=origin/&lt;branch&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;user&gt;@&lt;host&gt;:/path/to/repository/&lt;project&gt;.git</span><br><span class="line">或</span><br><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/user/&lt;project&gt;.git</span><br></pre></td></tr></table></figure>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Desktop &amp;&amp; mkdir example &amp;&amp; <span class="built_in">cd</span> example</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/majinyun/Desktop/example/.git/</span><br></pre></td></tr></table></figure>
<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>GitHub 官方提供的 <strong><a href="https://github.com/github/gitignore">忽略文件模版</a></strong></p>
<p><code>.gitignore</code> 文件格式：</p>
<ul>
<li>所有空行或者以注释符号 <code>#</code> 开头的行都会被 <code>git</code> 忽略</li>
<li>可以使用标准的 <code>glob</code> 模式匹配</li>
<li>匹配模式最后跟反斜杠 <code>/</code> 说明要忽略的是目录</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号 <code>!</code> 取反</li>
</ul>
<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><blockquote>
<p>空目录是不能提交到仓库中的，至少要保证目录中有一个文件。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建一个 README.md 文件</span><br><span class="line">$ touch README.md</span><br><span class="line"></span><br><span class="line">// 查看仓库状态</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">    README.md</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line">// 如果这个阶段你发现文件创建错误了（本不应该放置在此目录中或不需要此文件或者其它任何原因），直接删除掉即可，否则继续以下操作</span><br><span class="line">$ rm -f README.md</span><br><span class="line"></span><br><span class="line">// 添加 README.md 文件到暂存区</span><br><span class="line">$ git add README.md</span><br><span class="line"></span><br><span class="line">// 查看仓库状态</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README.md</span><br><span class="line"></span><br><span class="line">// 如果这个阶段你发现此文件不应该被添加到暂存区，请不要粗暴的 rm 掉，而是使用 git rm 命令干掉它</span><br><span class="line">$ git rm --cached README.md</span><br></pre></td></tr></table></figure>
<h2 id="仓库状态"><a href="#仓库状态" class="headerlink" title="仓库状态"></a>仓库状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<h2 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 将暂存区的文件提交到仓库，正常情况下会如下面的操作一样，显示文件已经被加入到版本库中，但也有不正常的情况</span><br><span class="line">$ git commit -m <span class="string">&quot;Add README.md&quot;</span></span><br><span class="line">[master (root-commit) a384a2b] Add README.md</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"></span><br><span class="line">// 这个就是提交时的不正常情况，什么意思呢？第一种说法的意思是需要你配置一下仓库的用户名称和邮箱地址，这个小意思，我们直接来个全局配置和局部配置就搞定了。第二种说法的意思是你在完成上面的操作之后，可以修复用于此提交的标识，说白了就是你提交到仓库后还可以进行编辑提交记录的注释信息（就是就对万一将本次提交记录的注释信息写错的情况），它会弹出你所配置的编辑器让你修改提交记录的注释信息，很遗憾这个只修改最后一个提交记录的注释信息，那么问题来了，怎么修改前 N 次的的某个提交记录的注释信息呢，这里暂时先不探究，这个涉及到 rebase 操作，足以让我再折腾一篇来专门说这种情况</span><br><span class="line">$ git commit -m <span class="string">&quot;Add README.md&quot;</span></span><br><span class="line">[master (root-commit) a384a2b] Add README.md</span><br><span class="line"> Committer: user &lt;user@user.com&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used <span class="keyword">for</span> this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"></span><br><span class="line">// 配置用户和邮箱交提交到仓库，将用户和邮箱换成你自己的，这个时间代码已经被提交到仓库</span><br><span class="line">$ git config user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;yourname@email.com&quot;</span></span><br><span class="line"></span><br><span class="line">// 查看仓库状态</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<h2 id="修改最后一次提交日志信息"><a href="#修改最后一次提交日志信息" class="headerlink" title="修改最后一次提交日志信息"></a>修改最后一次提交日志信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim README.md</span><br><span class="line">[1]: https://symfony.com</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Add symfony link&quot;</span></span><br><span class="line">[master 98a19c3] Add symfony link</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">$ git commit --amend</span><br><span class="line">Add symfony website link <span class="comment"># 编辑此信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Sun Dec 30 19:22:08 2018 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#  modified:   README.md</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[master abe0281] Add symfony website link</span><br><span class="line"> Date: Sun Dec 30 19:22:08 2018 +0800</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<h2 id="修改最后一次提交记录时的用户信息"><a href="#修改最后一次提交记录时的用户信息" class="headerlink" title="修改最后一次提交记录时的用户信息"></a>修改最后一次提交记录时的用户信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --amend --author=<span class="string">&quot;peter &lt;peter@dot.org&gt;&quot;</span></span><br><span class="line">[master facc111] Add symfony website link</span><br><span class="line"> Author: peter &lt;peter@dot.org&gt;</span><br><span class="line"> Date: Sun Dec 30 19:22:08 2018 +0800</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<h2 id="撤销对文件内容的更改"><a href="#撤销对文件内容的更改" class="headerlink" title="撤销对文件内容的更改"></a>撤销对文件内容的更改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim README.md</span><br><span class="line">[1]: https://symfony.com</span><br><span class="line">[2]: https://symfony.com/projects</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">    modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git checkout -- README.md</span><br></pre></td></tr></table></figure>
<h2 id="提交文件变更到仓库"><a href="#提交文件变更到仓库" class="headerlink" title="提交文件变更到仓库"></a>提交文件变更到仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim README.md</span><br><span class="line">[1]: https://symfony.com</span><br><span class="line">[2]: https://symfony.com/projects</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">    modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Add projects link&quot;</span></span><br><span class="line">[master 7d8fcb9] Add projects link</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<h2 id="回滚仓库到某个提交"><a href="#回滚仓库到某个提交" class="headerlink" title="回滚仓库到某个提交"></a>回滚仓库到某个提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">7d8fcb9 (HEAD -&gt; master) Add projects link</span><br><span class="line">facc111 Add symfony website link</span><br><span class="line">a384a2b Add README.md</span><br><span class="line">$ git reset --hard facc111</span><br><span class="line">HEAD is now at facc111 Add symfony website link</span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">facc111 (HEAD -&gt; master) Add symfony website link</span><br><span class="line">a384a2b Add README.md</span><br></pre></td></tr></table></figure>
<h2 id="撤销工作区和暂存区"><a href="#撤销工作区和暂存区" class="headerlink" title="撤销工作区和暂存区"></a>撤销工作区和暂存区</h2><blockquote>
<ul>
<li><code>--soft</code>：当前分支重置到指定 commit 记录位置，索引和工作树不变</li>
<li><code>--mixed</code>：当前分支重置到指定 commit 记录位置，索引被更新，工作树不变</li>
<li><code>--hard</code>：当前分支重置到指定 commit 记录位置，索引和工作树都更新</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ touch index.&#123;html,js,css&#125;</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">    index.css</span><br><span class="line">    index.html</span><br><span class="line">    index.js</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line">$ $ git add .</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   index.css</span><br><span class="line">    new file:   index.html</span><br><span class="line">    new file:   index.js</span><br><span class="line"></span><br><span class="line">// 只撤销暂存区</span><br><span class="line">$ git reset HEAD</span><br><span class="line"></span><br><span class="line">// 全部撤销</span><br><span class="line">$ git reset --hard HEAD</span><br><span class="line">HEAD is now at facc111 Add symfony website lin</span><br></pre></td></tr></table></figure>
<h2 id="查看已暂存和未暂存的更新"><a href="#查看已暂存和未暂存的更新" class="headerlink" title="查看已暂存和未暂存的更新"></a>查看已暂存和未暂存的更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim README.md</span><br><span class="line">[1]: https://symfony.com</span><br><span class="line">[2]: https://symfony.com/projects</span><br><span class="line">$ git add README.md</span><br><span class="line">$ vim README.md</span><br><span class="line">[1]: https://symfony.com</span><br><span class="line">[2]: https://symfony.com/projects</span><br><span class="line">[3]: https://symfony.com/doc/current/reference/requirements.html</span><br><span class="line"></span><br><span class="line">// 比较工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index 56737ed..4a93303 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> [1]: https://symfony.com</span><br><span class="line"> [2]: https://symfony.com/projects</span><br><span class="line">+[3]: https://symfony.com/doc/current/reference/requirements.html</span><br><span class="line"></span><br><span class="line">// 查看已经暂存起来的文件和上次提交时的快照之间的差异</span><br><span class="line">$ git diff --cached</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index 55c6709..56737ed 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> [1]: https://symfony.com</span><br><span class="line">+[2]: https://symfony.com/projects</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">// 查看已经暂存起来的文件和上次提交时的快照之间的差异</span><br><span class="line">$ git diff --staged</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index 55c6709..56737ed 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> [1]: https://symfony.com</span><br><span class="line">+[2]: https://symfony.com/projects</span><br><span class="line"></span><br><span class="line">// 跳过使用暂存区域，git 会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">    modified:   README.md</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">    modified:   README.md</span><br><span class="line">$ git commit -am <span class="string">&quot;Add projects and requirements link&quot;</span></span><br><span class="line">[master 7778db8] Add projects and requirements link</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<h2 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201901/git-remove-file.webp" alt="git-remove-file.webp"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 误删了文件，期望不产生提交记录就把文件干掉（此文件从来没提交到仓库中），通过以下的操作就可以看到此文件恢复到之前创建时的状态，此时你可以考虑删除或者做其它更改</span><br><span class="line">$ touch index.html &amp;&amp; git add index.html &amp;&amp; rm index.html</span><br><span class="line">remove index.html? y</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   index.html</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">    deleted:    index.html</span><br><span class="line">$ git checkout -- index.html</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   index.html</span><br><span class="line">$ git reset HEAD index.html</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">    index.html</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line">// 把文件从暂存区域移除，但仍然希望保留在当前工作区</span><br><span class="line">$ git add index.html</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   index.html</span><br><span class="line">$ git rm --cached index.html</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">  index.html</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line">// 将未加入暂存区的文件全部清理掉，即将工作区的变更全部清理掉，需要谨慎操作</span><br><span class="line">$ git clean -df</span><br><span class="line">Removing index.html</span><br></pre></td></tr></table></figure>
<h2 id="移动或者重命名文件"><a href="#移动或者重命名文件" class="headerlink" title="移动或者重命名文件"></a>移动或者重命名文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ touch index.php</span><br><span class="line">$ git add index.php</span><br><span class="line">$ git commit -m <span class="string">&quot;Add index.php&quot;</span></span><br><span class="line">[master da3c74c] Add index.php</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 index.php</span><br><span class="line">$ git mv index.php index.html</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">  renamed:    index.php -&gt; index.html</span><br></pre></td></tr></table></figure>
<h2 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 比较两个分支的所有差异</span><br><span class="line">$ git diff master develop</span><br><span class="line">diff --git a/.editorconfig b/.editorconfig</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index e69de29..0000000</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index f6f24a8..c0cd272 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -3,4 +3,3 @@</span><br><span class="line"> [3]: https://symfony.com/doc/current/reference/requirements.html</span><br><span class="line"> [4]: https://symfony.com/doc/current/setup.html</span><br><span class="line"> [5]: http://semver.org</span><br><span class="line">-[6]: https://symfony.com/doc/current/contributing/community/releases.html</span><br><span class="line"></span><br><span class="line">// 比较两个提交记录的所有差异</span><br><span class="line">$ git diff fe3b3cf 688088f</span><br><span class="line">diff --git a/.editorconfig b/.editorconfig</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index e69de29..0000000</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index f6f24a8..c0cd272 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -3,4 +3,3 @@</span><br><span class="line"> [3]: https://symfony.com/doc/current/reference/requirements.html</span><br><span class="line"> [4]: https://symfony.com/doc/current/setup.html</span><br><span class="line"> [5]: http://semver.org</span><br><span class="line">-[6]: https://symfony.com/doc/current/contributing/community/releases.html</span><br><span class="line"></span><br><span class="line">// 比较两个提交中的某个文件的差异</span><br><span class="line">$ git diff fe3b3cf 688088f -- README.md</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index f6f24a8..c0cd272 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -3,4 +3,3 @@</span><br><span class="line"> [3]: https://symfony.com/doc/current/reference/requirements.html</span><br><span class="line"> [4]: https://symfony.com/doc/current/setup.html</span><br><span class="line"> [5]: http://semver.org</span><br><span class="line">-[6]: https://symfony.com/doc/current/contributing/community/releases.html</span><br></pre></td></tr></table></figure>
<h2 id="储藏"><a href="#储藏" class="headerlink" title="储藏"></a>储藏</h2><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。<code>git stash</code> 就是解决这种问题的。</p>
<h3 id="储藏任务"><a href="#储藏任务" class="headerlink" title="储藏任务"></a>储藏任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 假设目前工作进行了一段时间后，仓库的目前的状态</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">  modified:   index.css</span><br><span class="line">  modified:   index.html</span><br><span class="line">  modified:   index.js</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   index.html</span><br><span class="line"></span><br><span class="line">// 此时由于紧急的任务或者 bug 需要解决，暂时将之前做的任务暂存起来</span><br><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on master: fe3b3cf Integrating submission logs</span><br><span class="line"></span><br><span class="line">// 获取一个干净的工作目录</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<h3 id="查看储藏任务列表"><a href="#查看储藏任务列表" class="headerlink" title="查看储藏任务列表"></a>查看储藏任务列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: fe3b3cf Integrating submission logs</span><br><span class="line">stash@&#123;1&#125;: WIP on master: fe3b3cf Integrating submission logs</span><br></pre></td></tr></table></figure>
<h3 id="应用最近的储藏"><a href="#应用最近的储藏" class="headerlink" title="应用最近的储藏"></a>应用最近的储藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// apply 选项并不会删除储藏</span><br><span class="line">$ git stash apply</span><br><span class="line">或</span><br><span class="line">$ git stash apply stash@&#123;0&#125;</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">// 此时应用储藏时与之前储藏时的文件状态不一致</span><br><span class="line">$ git stash apply stash@&#123;1&#125;</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   index.css</span><br><span class="line">  modified:   index.html <span class="comment"># 看这个文件之前储藏时的状态</span></span><br><span class="line">  modified:   index.js</span><br><span class="line"></span><br><span class="line">// 带上一个 --index 的选项来告诉命令重新应用被暂存的变更</span><br><span class="line">$ git stash apply stash@&#123;0&#125; --index</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">  modified:   index.css</span><br><span class="line">  modified:   index.html</span><br><span class="line">  modified:   index.js</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   index.html <span class="comment"># 文件暂存状态恢复了</span></span><br><span class="line"></span><br><span class="line">// 应用储藏后立即删除储藏</span><br><span class="line">$ git stash pop --index</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">  modified:   index.css</span><br><span class="line">  modified:   index.html</span><br><span class="line">  modified:   index.js</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   index.html</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (5c5c3fe5374020b5d4a1b0d5303b0cb932227134)</span><br></pre></td></tr></table></figure>
<h3 id="删除储藏"><a href="#删除储藏" class="headerlink" title="删除储藏"></a>删除储藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash drop stash@&#123;0&#125;</span><br><span class="line">Dropped stash@&#123;0&#125; (e2ffa6a2b49d31703266cf6668f2b51f94e9d62f)</span><br></pre></td></tr></table></figure>
<h3 id="取消储藏"><a href="#取消储藏" class="headerlink" title="取消储藏"></a>取消储藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   index.html</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on master: fe3b3cf Integrating submission logs</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: fe3b3cf Integrating submission logs</span><br><span class="line">$ git stash apply stash@&#123;0&#125; --index</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   index.html</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">// 取消应用的储藏，没有指定默认为最近一次储藏</span><br><span class="line">$ git stash show -p stash@&#123;0&#125; | git apply -R</span><br><span class="line">或</span><br><span class="line">$ git stash show -p | git apply -R</span><br></pre></td></tr></table></figure>
<h3 id="从储藏中创建分支"><a href="#从储藏中创建分支" class="headerlink" title="从储藏中创建分支"></a>从储藏中创建分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash branch testchanges</span><br><span class="line">Switched to a new branch <span class="string">&#x27;testchanges&#x27;</span></span><br><span class="line">On branch testchanges</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">  modified:   index.css</span><br><span class="line">  modified:   index.html</span><br><span class="line">  modified:   index.js</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">  modified:   index.html</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (9d514109f5cf6c23c75297af595189d5af839693)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 中一个客户端设置多个账号</title>
    <url>/2018/01/27/git-multiple-accounts/</url>
    <content><![CDATA[<p>😢 最近遇到这样的需求，需要在一台电脑上同时使用两个 <code>github</code> 账号，负责不同的用途，比如：一个用来写个人项目，一个用来写公司的项目。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2018/01/22/git-started/"><code>Git 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/23/git-basic/"><code>Git 基本操作</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/24/git-log/"><code>Git 查看日志</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/25/git-branch/"><code>Git 分支</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/27/git-multiple-accounts/"><strong>Git 中一个客户端设置多个账号</strong></a></li>
<li><a href="https://imajinyun.xyz/2018/05/01/git-workflow/"><code>Git Workflow</code></a></li>
<li><a href="https://imajinyun.xyz/2020/09/07/git-collection-command/"><code>Git 命令大全</code></a></li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="注册两个-git-账号"><a href="#注册两个-git-账号" class="headerlink" title="注册两个 git 账号"></a>注册两个 git 账号</h2><blockquote>
<p>选择一个平台注册两个账号即可。</p>
</blockquote>
<ul>
<li><a href="https://github.com/"><code>GitHub</code></a></li>
<li><a href="https://gitee.com/"><code>Gitee</code></a></li>
<li><a href="https://coding.net/"><code>Coding</code></a></li>
<li><a href="https://bitbucket.org/"><code>Bitbucket</code></a></li>
<li><a href="https://gitlab.com/explore"><code>GitLab</code></a></li>
</ul>
<h2 id="取消全局设置的用户名和邮箱"><a href="#取消全局设置的用户名和邮箱" class="headerlink" title="取消全局设置的用户名和邮箱"></a>取消全局设置的用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 取消全局用户名和邮箱</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure>
<h1 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><h2 id="生成私钥和公钥"><a href="#生成私钥和公钥" class="headerlink" title="生成私钥和公钥"></a>生成私钥和公钥</h2><blockquote>
<p>如果用户家目录下没有 <code>.ssh</code> 目录，请自行创建<br>由于我注册多家平台的 <code>git</code> 账号，所以对其进行了一个文件目录分类</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -pv ~/.ssh/github <span class="comment"># gitee|coding|bitbucket|gitlab</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;myfirst@gmail.com&quot;</span> <span class="comment"># 在回车提示中输入完整路径，如：/path/to/user/.ssh/github/id_myfirst_rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/path/to/user/.ssh/id_rsa):/path/to/user/.ssh/github/id_myfirst_rsa</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;mysecond@gmail.com&quot;</span> <span class="comment"># 在回车提示中输入完整路径，如：/path/to/user/.ssh/github/id_mysecond_rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/path/to/user/.ssh/id_rsa):/path/to/user/.ssh/github/id_mysecond_rsa</span><br></pre></td></tr></table></figure>
<h2 id="分别配置两个账号的-SSH-and-GPG-keys"><a href="#分别配置两个账号的-SSH-and-GPG-keys" class="headerlink" title="分别配置两个账号的 SSH and GPG keys"></a>分别配置两个账号的 SSH and GPG keys</h2><p>在 <code>Settings</code> 控制面板中找到 <code>SSH and GPG keys</code>，点击 <code>New SSH Key</code> 进行添加，<code>Title</code> 请自行决定。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201901/github-new-ssh-key.jpg" alt="github-new-ssh-key.jpg"></p>
<h2 id="将密钥添加到-ssh-agent-的会话中"><a href="#将密钥添加到-ssh-agent-的会话中" class="headerlink" title="将密钥添加到 ssh-agent 的会话中"></a>将密钥添加到 ssh-agent 的会话中</h2><blockquote>
<p>如果执行 <code>ssh-add</code> 时显示错误 <code>Could not open a connection to your authentication agent.</code> 那么执行 <code>eval ssh-agent -s</code>。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-add -K ~/.ssh/github/id_myfirst_rsa</span><br><span class="line">Identity added: /path/to/.ssh/github/id_myfirst_rsa (/path/to/.ssh/github/id_myfirst_rsa)</span><br><span class="line">$ ssh-add -K ~/.ssh/github/id_mysecond_rsa</span><br><span class="line">Identity added: /path/to/.ssh/github/id_mysecond_rsa (/path/to/.ssh/github/id_mysecond_rsa)</span><br></pre></td></tr></table></figure>
<h2 id="查看-ssh-key-的设置"><a href="#查看-ssh-key-的设置" class="headerlink" title="查看 ssh key 的设置"></a>查看 ssh key 的设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line">2048 SHA256:ai3jRoAfkqgB2LYtJuQR8QZN1F5XXXXXXXXXXXXXXXX /path/to/.ssh/github/id_myfirst_rsa (RSA)</span><br><span class="line">2048 SHA256:AL2jRoAfkqgB2LYtJuQR8QZN1F5XXXXXXXXXXXXXXXX /path/to/.ssh/github/id_mysecond_rsa (RSA)</span><br></pre></td></tr></table></figure>
<h2 id="修改-ssh-config-文件"><a href="#修改-ssh-config-文件" class="headerlink" title="修改 ssh config 文件"></a>修改 ssh config 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line">Host *</span><br><span class="line">    KexAlgorithms +diffie-hellman-group1-sha1</span><br><span class="line"><span class="comment"># default: myfirst</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User myfirst</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/github/id_myfirst_rsa</span><br><span class="line"><span class="comment"># mysecond</span></span><br><span class="line">Host mysecond.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User mysecond</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/github/id_mysecond_rsa</span><br></pre></td></tr></table></figure>
<h2 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h2><blockquote>
<p><code>mysecond.github.com</code> 需要配置 <code>GitHub</code> 的 <code>Host</code>。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 测试默认用户 myfirst 的连接性</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi myfirst! You\<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 测试另一个用户 mysecond 的连接性</span></span><br><span class="line"><span class="string">$ ssh -T git@mysecond.github.com</span></span><br><span class="line"><span class="string">Hi mysecond! You\&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<h1 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h1><h2 id="创建两个项目目录"><a href="#创建两个项目目录" class="headerlink" title="创建两个项目目录"></a>创建两个项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/ &amp;&amp; mkdir -pv &#123;a,b&#125;</span><br></pre></td></tr></table></figure>
<h2 id="初始化项目-a"><a href="#初始化项目-a" class="headerlink" title="初始化项目 a"></a>初始化项目 a</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/a</span><br><span class="line">$ git init</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;myfirst&quot;</span> &gt; README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git config user.name <span class="string">&quot;myfirst&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;myfirst@gmail.com&quot;</span></span><br><span class="line">$ git remote add github git@github.com:myfirst/test.git</span><br><span class="line">$ git push -u github master</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 213 bytes | 213.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:myfirst/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from github.</span><br></pre></td></tr></table></figure>
<h2 id="初始化项目-b"><a href="#初始化项目-b" class="headerlink" title="初始化项目 b"></a>初始化项目 b</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/b</span><br><span class="line">$ git init</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;mysecond&quot;</span> &gt; README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git config user.name <span class="string">&quot;mysecond&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;mysecond@gmail.com&quot;</span></span><br><span class="line">$ git remote add github git@mysecond.github.com:mysecond/test.git</span><br><span class="line">$ git push -u github master</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 218 bytes | 218.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To mysecond.github.com:mysecond/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from github.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 起步</title>
    <url>/2018/01/22/git-started/</url>
    <content><![CDATA[<p>🍯 Git 是一种在全球范围都广受欢迎的版本控制系统。在开发过程中，为了跟踪代码，文档，项目等信息中的变化，版本控制变得前所未有的重要。但跟踪变化远远不能满足现代软件开发行业的协同需求，基于 Git 的 Workflow 满足了合作编程的需求，让开发从此变得更加高效和有趣。相比集中式版本控制系统如 SVN ，分布式版本控制系统 Git 拥有更强大的分支管理与合并能力，支持离线开发，并良好地保留了提交过程，让您和您的团队在开发过程中如虎添翼。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2018/01/22/git-started/"><strong>Git 起步</strong></a></li>
<li><a href="https://imajinyun.xyz/2018/01/23/git-basic/"><code>Git 基本操作</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/24/git-log/"><code>Git 查看日志</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/25/git-branch/"><code>Git 分支</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/27/git-multiple-accounts/"><code>Git 中一个客户端设置多个账号</code></a></li>
<li><a href="https://imajinyun.xyz/2018/05/01/git-workflow/"><code>Git Workflow</code></a></li>
<li><a href="https://imajinyun.xyz/2020/09/07/git-collection-command/"><code>Git 命令大全</code></a></li>
</ul>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="设计初衷"><a href="#设计初衷" class="headerlink" title="设计初衷"></a>设计初衷</h2><ul>
<li>为速度而生</li>
<li>简单的设计</li>
<li>对非线性开发模式的强力支持（允许上千个并行开发的分支）</li>
<li>完全分布式</li>
<li>有能力高效管理类似 <code>Linux</code> 内核一样的超大规模的项目（速度和数量）</li>
</ul>
<h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><ul>
<li>优越的存储能力</li>
<li>直接记录快照，而非差异比较</li>
<li>离线操作，几乎所有操作都是本地执行</li>
<li>时刻保持数据完整性</li>
<li>多数操作仅添加数据</li>
<li>开源</li>
</ul>
<p><code>git</code> 中文件的三种状态：工作目录，暂存区域和本地仓库：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/git-three-status.png" alt="git-three-status.png"></p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul>
<li>在工作目录中修改某些文件</li>
<li>对修改后的文件进行快照，然后保存到暂存区域</li>
<li>提交更新，将保存在暂存区域的文件快照永久转储到 <code>git</code> 目录中</li>
</ul>
<h1 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h1><h2 id="集中化的版本控制系统"><a href="#集中化的版本控制系统" class="headerlink" title="集中化的版本控制系统"></a>集中化的版本控制系统</h2><p><code>CVCS - Centralized Version Control Systems</code></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/centralized-vcs.png" alt="centralized-vcs.png"></p>
<h2 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h2><p><code>DVCS - Distributed Version Control System</code></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/distributed-vcs.png" alt="distributed-vcs.png"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// CentOS</span><br><span class="line">$ sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">// Ubuntu</span><br><span class="line">$ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev</span><br></pre></td></tr></table></figure>
<h3 id="手动编译安装"><a href="#手动编译安装" class="headerlink" title="手动编译安装"></a>手动编译安装</h3><blockquote>
<p><a href="https://github.com/git/git/releases">去这里下载 <code>git</code></a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 解压后进行编译安装</span><br><span class="line">$ tar -zxf v2.16.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> v2.16.1</span><br><span class="line">$ make prefix=/usr/<span class="built_in">local</span> all</span><br><span class="line">$ sudo make prefix=/usr/<span class="built_in">local</span> install</span><br></pre></td></tr></table></figure>
<h3 id="包管理器安装"><a href="#包管理器安装" class="headerlink" title="包管理器安装"></a>包管理器安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// CentOS</span><br><span class="line">$ yum install git-core</span><br><span class="line"></span><br><span class="line">// Ubuntu</span><br><span class="line">$ apt-get install git</span><br></pre></td></tr></table></figure>
<h2 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 使用 brew 安装 git</span><br><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>
<h2 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h2><blockquote>
<p><a href="http://gitforwindows.org/"><code>We bring the awesome Git SCM to Windows</code></a></p>
</blockquote>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="三种配置"><a href="#三种配置" class="headerlink" title="三种配置"></a>三种配置</h2><ul>
<li>全局配置：当前用户的所有仓库有效，存储配置的文件为 <code>~/.gitconfig</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看全局配置</span><br><span class="line">$ git config --global -l</span><br><span class="line">或</span><br><span class="line">$ git config --list --global</span><br></pre></td></tr></table></figure>
<ul>
<li>局部配置：当前用户的某个仓库有效，存储配置的文件为 <code>.git/config</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看局部配置</span><br><span class="line">$ git config --<span class="built_in">local</span> -l</span><br><span class="line">或</span><br><span class="line">$ git config --list --<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<ul>
<li>系统配置：系统所有用户有效，存储配置的文件为 <code>/etc/gitconfig</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看系统配置</span><br><span class="line">$ git config --system -l</span><br><span class="line">或</span><br><span class="line">$ git config --list --system</span><br></pre></td></tr></table></figure>
<h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 配置全局的用户名称</span><br><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">// 配置全局的邮箱地址</span><br><span class="line">$ git config --global user.email <span class="string">&quot;Your Email&quot;</span></span><br><span class="line"></span><br><span class="line">// 取消全局配置的用户名称</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line"></span><br><span class="line">// 取消全局配置的邮箱地址</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"></span><br><span class="line">// 配置某个仓库的用户名称</span><br><span class="line">$ git config --<span class="built_in">local</span> user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">// 配置某个仓库的邮箱地址</span><br><span class="line">$ git config --<span class="built_in">local</span> user.email <span class="string">&quot;Your Email&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><blockquote>
<p><a href="https://github.com/VundleVim/Vundle.vim/issues/167"><code>Git Commit Problem: &quot;error: There was a problem with the editor &#39;vi&#39;&quot;</code></a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 配置 vim 为 git 默认的编辑器，为满足在 git 中输入一些额外消息的时候，自动调用一个外部文本编辑器的需要</span><br><span class="line">$ git config --global core.editor $(<span class="built_in">which</span> vim)</span><br></pre></td></tr></table></figure>
<h2 id="差异分析工具"><a href="#差异分析工具" class="headerlink" title="差异分析工具"></a>差异分析工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 配置解决合并冲突时使用哪种差异分析工具</span><br><span class="line">$ git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure>
<h2 id="换行符配置"><a href="#换行符配置" class="headerlink" title="换行符配置"></a>换行符配置</h2><blockquote>
<p>操作系统对回车 <code>CR</code> 和换行 <code>LF</code> 定义是有差异的。</p>
</blockquote>
<h3 id="AutoCRLF"><a href="#AutoCRLF" class="headerlink" title="AutoCRLF"></a>AutoCRLF</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 提交时转换为 LF，检出时转换为 CRLF</span><br><span class="line">$ git config --global core.autocrlf <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// 提交时转换为 LF，检出时不转换</span><br><span class="line">$ git config --global core.autocrlf input</span><br><span class="line"></span><br><span class="line">// 提交检出均不转换</span><br><span class="line">$ git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="SafeCRLF"><a href="#SafeCRLF" class="headerlink" title="SafeCRLF"></a>SafeCRLF</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 拒绝提交包含混合换行符的文件</span><br><span class="line">$ git config --global core.safecrlf <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// 允许提交包含混合换行符的文件</span><br><span class="line">$ git config --global core.safecrlf <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">// 提交包含混合换行符的文件时给出警告</span><br><span class="line">$ git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure>
<h2 id="修正空白符"><a href="#修正空白符" class="headerlink" title="修正空白符"></a>修正空白符</h2><p><code>git</code> 预先设置了一些选项来探测和修正空白问题</p>
<blockquote>
<ul>
<li>默认打开的 <code>2</code> 个选项是 <code>trailing-space</code> 和 <code>space-before-tab</code>，<code>trailing-space</code> 会查找每行结尾的空格，<code>space-before-tab</code> 会查找每行开头的制表符前的空格</li>
<li>默认关闭的 <code>2</code> 个选项是 <code>indent-with-non-tab</code> 和 <code>cr-at-eol</code>，<code>indent-with-non-tab</code> 会查找 <code>8</code> 个以上空格（非制表符）开头的行，<code>cr-at-eol</code> 让 <code>git</code> 知道行尾回车符是合法的</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 全局配置修正空白符</span><br><span class="line">$ git config --global core.whitespace trailing-space,space-before-tab</span><br></pre></td></tr></table></figure>
<h2 id="配置快捷操作"><a href="#配置快捷操作" class="headerlink" title="配置快捷操作"></a>配置快捷操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 为 git 命令创建一个快捷方式</span><br><span class="line">$ git config --global <span class="built_in">alias</span>.&lt;alias-name&gt; &lt;git-command&gt;</span><br><span class="line"></span><br><span class="line">// 检出快捷方式设置</span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line"></span><br><span class="line">// 提交快捷方式设置</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line"></span><br><span class="line">// 状态快捷方式设置</span><br><span class="line">$ git config --global alias.st status</span><br><span class="line"></span><br><span class="line">// 分支快捷方式设置</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure>
<h2 id="配置在-Windows-下-ASCII-字符的文件名正确显示"><a href="#配置在-Windows-下-ASCII-字符的文件名正确显示" class="headerlink" title="配置在 Windows 下 ASCII 字符的文件名正确显示"></a>配置在 Windows 下 ASCII 字符的文件名正确显示</h2><p><a href="https://blog.zengrong.net/post/1249.html">git 乱码解决方案汇总</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 一个显示乱码的实例</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">&#x27;gitee/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">  (commit or discard the untracked or modified content <span class="keyword">in</span> submodules)</span><br><span class="line"></span><br><span class="line">   deleted:    <span class="string">&quot;xxx-\345\210\235\350\257\206.xx&quot;</span> // 中文文件名显示不正常</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">// 全局配置以解决 Windows Git Bash、Linux 下的中文转码问题</span><br><span class="line">$ git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="配置对大小写敏感"><a href="#配置对大小写敏感" class="headerlink" title="配置对大小写敏感"></a>配置对大小写敏感</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 全局配置对大小写敏感，保持 Mac/Win/Linux 一致性</span><br><span class="line">$ git config --global core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="配置菜色显示"><a href="#配置菜色显示" class="headerlink" title="配置菜色显示"></a>配置菜色显示</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 全局配置菜色显示</span><br><span class="line">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure>
<h2 id="以-https-方式进行连接时，记住密码"><a href="#以-https-方式进行连接时，记住密码" class="headerlink" title="以 https 方式进行连接时，记住密码"></a>以 https 方式进行连接时，记住密码</h2><blockquote>
<p>为当前仓库设置记住密码，设置后，只要在推送一次，以后就不需要用户名和密码了</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置保存密码到硬盘，如果是 macOS，选项可以改为 osxkeychain</span><br><span class="line">$ git config credential.helper store</span><br><span class="line"></span><br><span class="line">// 设置保存密码的超时时间</span><br><span class="line">$ git config credential.helper <span class="string">&#x27;cache --timeout=36000&#x27;</span></span><br><span class="line"></span><br><span class="line">// 查看密码文件（以明文的方式保存的）</span><br><span class="line">$ cat ~/.git-credentials</span><br></pre></td></tr></table></figure>
<h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">或</span><br><span class="line">$ git config -l</span><br></pre></td></tr></table></figure>
<h2 id="解决目录卡顿问题"><a href="#解决目录卡顿问题" class="headerlink" title="解决目录卡顿问题"></a>解决目录卡顿问题</h2><p>主要解决在 <code>zsh</code> 下，在 <code>git</code> 版本控制的目录输入命令执行缓慢的问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 不读取文件变化信息（针对当前用户当前项目）</span><br><span class="line">$ git config --add oh-my-zsh.hide-dirty 1</span><br></pre></td></tr></table></figure>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/git-zsh-dirty.png" alt="git-zsh-dirty.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 不读取任何 git 信息（针对当前用户所有项目）</span><br><span class="line">$ git config --global --add oh-my-zsh.hide-status 1</span><br></pre></td></tr></table></figure>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/git-zsh-status.png" alt="git-zsh-status.png"></p>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">或</span><br><span class="line">$ git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line">或</span><br><span class="line">$ man git</span><br><span class="line"></span><br><span class="line">// 查看帮助命令</span><br><span class="line">$ git --<span class="built_in">help</span></span><br><span class="line">usage: git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">These are common Git commands used <span class="keyword">in</span> various situations:</span><br><span class="line"></span><br><span class="line">start a working area (see also: git <span class="built_in">help</span> tutorial)</span><br><span class="line">   <span class="built_in">clone</span>      Clone a repository into a new directory</span><br><span class="line">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class="line"></span><br><span class="line">work on the current change (see also: git <span class="built_in">help</span> everyday)</span><br><span class="line">   add        Add file contents to the index</span><br><span class="line">   mv         Move or rename a file, a directory, or a symlink</span><br><span class="line">   reset      Reset current HEAD to the specified state</span><br><span class="line">   rm         Remove files from the working tree and from the index</span><br><span class="line"></span><br><span class="line">examine the <span class="built_in">history</span> and state (see also: git <span class="built_in">help</span> revisions)</span><br><span class="line">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class="line">   grep       Print lines matching a pattern</span><br><span class="line">   <span class="built_in">log</span>        Show commit logs</span><br><span class="line">   show       Show various types of objects</span><br><span class="line">   status     Show the working tree status</span><br><span class="line"></span><br><span class="line">grow, mark and tweak your common <span class="built_in">history</span></span><br><span class="line">   branch     List, create, or delete branches</span><br><span class="line">   checkout   Switch branches or restore working tree files</span><br><span class="line">   commit     Record changes to the repository</span><br><span class="line">   diff       Show changes between commits, commit and working tree, etc</span><br><span class="line">   merge      Join two or more development histories together</span><br><span class="line">   rebase     Reapply commits on top of another base tip</span><br><span class="line">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class="line"></span><br><span class="line">collaborate (see also: git <span class="built_in">help</span> workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a <span class="built_in">local</span> branch</span><br><span class="line">   push       Update remote refs along with associated objects</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;git help -a&#x27;</span> and <span class="string">&#x27;git help -g&#x27;</span> list available subcommands and some</span><br><span class="line">concept guides. See <span class="string">&#x27;git help &lt;command&gt;&#x27;</span> or <span class="string">&#x27;git help &lt;concept&gt;&#x27;</span></span><br><span class="line">to <span class="built_in">read</span> about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Workflow</title>
    <url>/2018/05/01/git-workflow/</url>
    <content><![CDATA[<p>🎢 工作流 - <code>Workflow</code>：是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则，在计算机中以恰当的模型表达并对其实施计算。工作流要解决的主要问题是：为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2018/01/22/git-started/"><code>Git 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/23/git-basic/"><code>Git 基本操作</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/24/git-log/"><code>Git 查看日志</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/25/git-branch/"><code>Git 分支</code></a></li>
<li><a href="https://imajinyun.xyz/2018/01/27/git-multiple-accounts/"><code>Git 中一个客户端设置多个账号</code></a></li>
<li><a href="https://imajinyun.xyz/2018/05/01/git-workflow/"><strong>Git Workflow</strong></a></li>
<li><a href="https://imajinyun.xyz/2020/09/07/git-collection-command/"><code>Git 命令大全</code></a></li>
</ul>
<h1 id="Git-Workflow"><a href="#Git-Workflow" class="headerlink" title="Git Workflow"></a>Git Workflow</h1><p>为了让大家有效地合作，使得项目井井有条地发展下去而抽象出来的一系列 <code>git</code> 操作步骤及流程，没错，是针对 <code>git</code> 的操作使用流程。</p>
<h1 id="常见的工作流"><a href="#常见的工作流" class="headerlink" title="常见的工作流"></a>常见的工作流</h1><h2 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h2><blockquote>
<p><a href="https://www.atlassian.com/git/tutorials/comparing-workflows#centralized-workflow">集中式工作流 - <code>Centralized Workflow</code></a></p>
</blockquote>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1006-centralized-workflow.svg" alt="1006-centralized-workflow.svg"></p>
<h3 id="创建中央仓库"><a href="#创建中央仓库" class="headerlink" title="创建中央仓库"></a>创建中央仓库</h3><p>假定 <code>git</code> 创建了一个裸仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh git@host</span><br><span class="line">$ <span class="built_in">cd</span> ~ &amp;&amp; mkdir -pv repository</span><br><span class="line"></span><br><span class="line">// 创建一个裸仓库，按照约定，加上 .git 扩展名</span><br><span class="line">$ git init --bare /home/git/repository/repo.git</span><br></pre></td></tr></table></figure>
<h3 id="开发人员介入"><a href="#开发人员介入" class="headerlink" title="开发人员介入"></a>开发人员介入</h3><h4 id="第一阶段：本地自嗨"><a href="#第一阶段：本地自嗨" class="headerlink" title="第一阶段：本地自嗨"></a>第一阶段：本地自嗨</h4><div class="note info">
            <p>这一阶段，<code>qwert</code> 可以按自己需求反复操作多次，而不用担心中央仓库上有了什么操作，同样的情况也适用于 <code>poiuy</code></p>
          </div>
<p>开发者 <code>qwert</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 拉取代码</span><br><span class="line">$ <span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> ssh://git@host/home/git/repository/repo.git</span><br><span class="line"></span><br><span class="line">// 查看状态</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">// 创建 README.md 文件</span><br><span class="line">$ touch README.md</span><br><span class="line"></span><br><span class="line">// 将 README.md 文件加入暂存区</span><br><span class="line">$ git add README.md</span><br><span class="line"></span><br><span class="line">// 设置用户名和邮箱</span><br><span class="line">$ git config user.email <span class="string">&quot;qwert@example.com&quot;</span></span><br><span class="line">$ git config user.name <span class="string">&quot;qwert&quot;</span></span><br><span class="line"></span><br><span class="line">// 提交代码到本地仓库</span><br><span class="line">$ git commit -m <span class="string">&quot;Add README.md&quot;</span></span><br></pre></td></tr></table></figure>
<p>开发者 <code>poiuy</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 拉取代码</span><br><span class="line">$ <span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> ssh://git@host/home/git/repository/repo.git</span><br><span class="line"></span><br><span class="line">// 查看状态</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">// 创建 README.md 文件</span><br><span class="line">$ touch README.md</span><br><span class="line"></span><br><span class="line">// 将 README.md 文件加入暂存区</span><br><span class="line">$ git add README.md</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the first commit.</span><br><span class="line"></span><br><span class="line">// 设置用户名和邮箱</span><br><span class="line">$ git config user.email <span class="string">&quot;poiuy@example.com&quot;</span></span><br><span class="line">$ git config user.name <span class="string">&quot;poiuy&quot;</span></span><br><span class="line"></span><br><span class="line">// 提交代码到本地仓库</span><br><span class="line">$ git commit -m <span class="string">&quot;Add README.md&quot;</span></span><br></pre></td></tr></table></figure>
<p>直到这时两个人都相安无事，在各自的本地仓库玩的尽心。但事情不会就这样了结了，否则，我就没法往下写了。</p>
<h4 id="第二阶段：远程混战"><a href="#第二阶段：远程混战" class="headerlink" title="第二阶段：远程混战"></a>第二阶段：远程混战</h4><p>这时起，情况就变的有些复杂了，还好局面可控。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 提交代码到远程仓库</span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line">// 接下来，poiuy 也将代码提交到远程仓库，这时真正的悲剧产生了</span><br><span class="line">$ git push origin master</span><br><span class="line">To ssh://git@host/home/git/repository/repo.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;ssh://git@host/home/git/repository/repo.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first merge the remote changes (e.g.,</span><br><span class="line">hint: <span class="string">&#x27;git pull&#x27;</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">// 也就是说，poiuy 得先拉一下远程仓库的代码到本地，再进行提交，因为你在人家 push 后面进行 push 的，这不怪你</span><br><span class="line">$ git pull --rebase origin master</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From ssh://host/home/git/repository/repo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: Add README.md</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging README.md</span><br></pre></td></tr></table></figure>
<div class="note danger">
            <p><code>--rebase</code>：这个选项就是告诉 <code>Git</code> 把 <code>poiuy</code> 的提交移到同步了中央仓库修改后的 <code>master</code> 分支的顶部。如果你忘加了这个选项，<code>pull</code> 操作仍然可以完成，但每次 <code>pull</code> 操作要同步中央仓库中别人修改时，提交历史会以一个多余的『合并提交』结尾。对于集中式工作流，最好是使用 <code>rebase</code> 而不是生成一个合并提交。</p>
          </div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 续续编辑文件 README.md 并提交推送到远程</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit. <span class="comment"># 只将单词 first 改为 second</span></span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line">// poiuy 使用 git pull 同步远程代码到本地，这将产生一个冲突</span><br><span class="line">$ git pull origin master</span><br><span class="line">remote: Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From ssh://host/home/git/repository/repo</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"></span><br><span class="line">// poiuy 使用 git pull --rebase 同步远程代码到本地，托 --rebase 的福没有产生冲突</span><br><span class="line">$ git pull --rebase origin master</span><br><span class="line">From ssh://host/home/git/repository/repo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Fast-forwarded master to 3a24fcf204956f97a7499393fbca68e3a77df040.</span><br><span class="line"></span><br><span class="line">// poiuy 继续编辑 README.md</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy <span class="comment"># 新增一行</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line">// qwert 继续编辑 README.md</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. qwert <span class="comment"># 新增一行</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line">$ git push origin master <span class="comment"># 这时远程仓库拒绝 qwert 的提交，因为 poiuy 已经将最新改动提交到远程了，qwert 必须将远程同步到本地</span></span><br><span class="line">To ssh://git@host/home/git/repository/repo.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;ssh://git@host/home/git/repository/repo.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first merge the remote changes (e.g.,</span><br><span class="line">hint: <span class="string">&#x27;git pull&#x27;</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details.</span><br><span class="line">$ git pull --rebase origin master <span class="comment"># 不是说拉取的姿势不对，而是两者都对同一行内容进行编辑，冲突无疑呀</span></span><br><span class="line">remote: Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From ssh://host/home/git/repository/repo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: Update README.md</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M  README.md</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Failed to merge <span class="keyword">in</span> the changes.</span><br><span class="line">Patch failed at 0001 Update README.md</span><br><span class="line">The copy of the patch that failed is found <span class="keyword">in</span>:</span><br><span class="line">   /home/qwert/repo/.git/rebase-apply/patch</span><br><span class="line"></span><br><span class="line">When you have resolved this problem, run <span class="string">&quot;git rebase --continue&quot;</span>.</span><br><span class="line">If you prefer to skip this patch, run <span class="string">&quot;git rebase --skip&quot;</span> instead.</span><br><span class="line">To check out the original branch and stop rebasing, run <span class="string">&quot;git rebase --abort&quot;</span>.</span><br><span class="line"></span><br><span class="line">// qwert 解决冲突，解决一个冲突</span><br><span class="line">$ git add &lt;conflict-to-resolve-file&gt;</span><br><span class="line">$ git rebase --<span class="built_in">continue</span> <span class="comment"># 直到出现 No rebase in progress?</span></span><br><span class="line"></span><br><span class="line">// qwert 在解决冲突的过程中，发现有些搞不定，弄乱了，还可以撤销</span><br><span class="line">$ git rebase --abort</span><br><span class="line"></span><br><span class="line">// 如果 qwert 顺利解决了所有冲突，就愉快地发布他的修改</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>正如引用文章中提到的，仅使用几个 <code>Git</code> 命令我们就可以模拟出传统 <code>Subversion</code> 开发环境。对于要从 <code>SVN</code> 迁移过来的团队来说这太好了，但没有发挥出 <code>Git</code> 分布式本质的优势。</p>
<p>集中式工作流的使用场景：</p>
<ul>
<li>团队人数少</li>
<li>开发不是很频繁</li>
<li>团队沟通方便</li>
<li>不需同时维护多个版本</li>
</ul>
<h2 id="Gitflow-工作流"><a href="#Gitflow-工作流" class="headerlink" title="Gitflow 工作流"></a>Gitflow 工作流</h2><blockquote>
<p><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">Gitflow 工作流 - <code>Gitflow Workflow</code></a></p>
</blockquote>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1007-gitflow-workflow.png" alt="1007-gitflow-workflow.png"></p>
<h3 id="拉取远程仓库"><a href="#拉取远程仓库" class="headerlink" title="拉取远程仓库"></a>拉取远程仓库</h3><p><code>Gitflow</code> 工作流仍然用中央仓库作为所有开发者的交互中心。这里我沿用集中式工作流中创建的仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 工作准备</span><br><span class="line">$ ssh qwert@host &amp;&amp; <span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> ssh://git@host/home/git/repository/repo.git</span><br><span class="line">$ git config user.name <span class="string">&quot;qwert&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;qwert@example.com&quot;</span></span><br><span class="line"></span><br><span class="line">// poiuy 工作准备</span><br><span class="line">$ ssh poiuy@host &amp;&amp; <span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> ssh://git@host/home/git/repository/repo.git</span><br><span class="line">$ git config user.name <span class="string">&quot;poiuy&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;poiuy@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Gitflow-工具安装"><a href="#Gitflow-工具安装" class="headerlink" title="Gitflow 工具安装"></a>Gitflow 工具安装</h3><blockquote>
<ul>
<li><a href="https://github.com/petervanderdoes/gitflow-avh/wiki/Installation">AVH Edition 安装说明</a></li>
<li><a href="https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">git-flow 备忘清单</a></li>
</ul>
</blockquote>
<p>Gitflow 两个长期分支：</p>
<ul>
<li>主分支 <code>master</code></li>
<li>开发分支 <code>develop</code></li>
</ul>
<p>Gitflow 三个短期分支：</p>
<ul>
<li>功能分支 <code>feature branch</code></li>
<li>补丁分支 <code>hotfix branch</code></li>
<li>预发分支 <code>release branch</code></li>
</ul>
<p>关于 <code>git-flow</code> 这篇 <a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow">Learn Version Control with Git</a> 说的非常到位。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Linux 下安装</span><br><span class="line">$ curl --insecure --silent --location  https://raw.githubusercontent.com/petervanderdoes/gitflow-avh/develop/contrib/gitflow-installer.sh --output ./gitflow-installer.sh</span><br><span class="line">$ chmod +x ./gitflow-installer.sh</span><br><span class="line">$ sudo ./gitflow-installer.sh install stable</span><br></pre></td></tr></table></figure>
<h3 id="Gitflow-初始化"><a href="#Gitflow-初始化" class="headerlink" title="Gitflow 初始化"></a>Gitflow 初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 用户初始化 git-flow</span><br><span class="line">$ git flow init</span><br><span class="line"></span><br><span class="line">Which branch should be used <span class="keyword">for</span> bringing forth production releases?</span><br><span class="line">   - master</span><br><span class="line">Branch name <span class="keyword">for</span> production releases: [master]</span><br><span class="line">Branch name <span class="keyword">for</span> <span class="string">&quot;next release&quot;</span> development: [develop]</span><br><span class="line"></span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/]</span><br><span class="line">Bugfix branches? [bugfix/]</span><br><span class="line">Release branches? [release/]</span><br><span class="line">Hotfix branches? [hotfix/]</span><br><span class="line">Support branches? [support/]</span><br><span class="line">Version tag prefix? []</span><br><span class="line">Hooks and filters directory? [/home/qwert/repo/.git/hooks]</span><br><span class="line">$ git push -u origin develop <span class="comment"># 将 develop 分支提交到远程仓库</span></span><br><span class="line"></span><br><span class="line">// poiuy 用户初始化 git-flow</span><br><span class="line">$ git flow init</span><br><span class="line"></span><br><span class="line">Which branch should be used <span class="keyword">for</span> bringing forth production releases?</span><br><span class="line">   - master</span><br><span class="line">Branch name <span class="keyword">for</span> production releases: [master]</span><br><span class="line">Branch name <span class="keyword">for</span> <span class="string">&quot;next release&quot;</span> development: [develop]</span><br><span class="line"></span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/]</span><br><span class="line">Bugfix branches? [bugfix/]</span><br><span class="line">Release branches? [release/]</span><br><span class="line">Hotfix branches? [hotfix/]</span><br><span class="line">Support branches? [support/]</span><br><span class="line">Version tag prefix? []</span><br><span class="line">Hooks and filters directory? [/home/poiuy/repo/.git/hooks]</span><br></pre></td></tr></table></figure>
<h3 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h3><p>开发者 <code>qwert</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 开启一个功能分支，进行项目某个功能开发</span><br><span class="line">$ git flow feature start feature-qwert</span><br><span class="line">Switched to a new branch <span class="string">&#x27;feature/feature-qwert&#x27;</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">&#x27;feature/feature-qwert&#x27;</span> was created, based on <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- You are now on branch <span class="string">&#x27;feature/feature-qwert&#x27;</span></span><br><span class="line"></span><br><span class="line">Now, start committing on your feature. When <span class="keyword">done</span>, use:</span><br><span class="line"></span><br><span class="line">     git flow feature finish feature-qwert</span><br><span class="line"></span><br><span class="line">// qwert 操作</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy</span><br><span class="line">3. qwert</span><br><span class="line">4. qwert feature start.</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line">$ git flow feature finish feature-qwert <span class="comment"># 此时 qwert 将完成开发结束任务，feature-qwert 分支的使命就此完结</span></span><br><span class="line">Switched to branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">Updating d62035e..ced573c</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">Deleted branch feature/feature-qwert (was ced573c).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- The feature branch <span class="string">&#x27;feature/feature-qwert&#x27;</span> was merged into <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- Feature branch <span class="string">&#x27;feature/feature-qwert&#x27;</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">$ git push origin develop <span class="comment"># 将 develop 分支提交到远程仓库</span></span><br></pre></td></tr></table></figure>
<p>开发者 <code>poiuy</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// poiuy 开启一个功能分支，进行项目另一个功能开发</span><br><span class="line">$ git flow feature start feature-poiuy</span><br><span class="line">Switched to a new branch <span class="string">&#x27;feature/feature-poiuy&#x27;</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">&#x27;feature/feature-poiuy&#x27;</span> was created, based on <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- You are now on branch <span class="string">&#x27;feature/feature-poiuy&#x27;</span></span><br><span class="line"></span><br><span class="line">Now, start committing on your feature. When <span class="keyword">done</span>, use:</span><br><span class="line"></span><br><span class="line">     git flow feature finish feature-poiuy</span><br><span class="line"></span><br><span class="line">// poiuy 操作</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy</span><br><span class="line">3. qwert</span><br><span class="line">4. poiuy feature start.</span><br><span class="line">$ git README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line">$ git flow feature finish feature-poiuy <span class="comment"># 此时 poiuy 将完成开发结束任务，feature-poiuy 分支的使命就此完结</span></span><br><span class="line"></span><br><span class="line">// poiuy 跟踪远程分支</span><br><span class="line">$ git branch --set-upstream-to=origin/develop develop</span><br><span class="line">Branch develop <span class="built_in">set</span> up to track remote branch develop from origin.</span><br><span class="line">$ git push origin develop <span class="comment"># poiuy 将开发好的功能推送到远程，但抱歉的时，此时远程 develop 已经向前滚动，因为不只是你一个人在开发</span></span><br><span class="line">To ssh://git@host/home/git/repository/repo.git</span><br><span class="line"> ! [rejected]        develop -&gt; develop (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;ssh://git@host/home/git/repository/repo.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Merge the remote changes (e.g. <span class="string">&#x27;git pull&#x27;</span>)</span><br><span class="line">hint: before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details.</span><br><span class="line">$ git pull origin develop <span class="comment"># 那就先拉取一下，这时如果和其它人对同一块内容做过改动，冲突是没有悬念的</span></span><br><span class="line">From ssh://host/home/git/repository/repo</span><br><span class="line"> * branch            develop    -&gt; FETCH_HEAD</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">$ git push origin develop <span class="comment"># poiuy 只能吭哧吭哧解决完冲突，再推送到远程</span></span><br></pre></td></tr></table></figure>
<p>这时，开发者 <code>qwert</code> 又开发完一个新的功能，准备要发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在开启新的功能分支之前，先从 develop 分支拉取最新的代码</span><br><span class="line">$ git pull origin develop</span><br><span class="line"></span><br><span class="line">// 开启新的功能分支</span><br><span class="line">$ git flow feature start feature-something</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy</span><br><span class="line">3. qwert</span><br><span class="line">4. qwert feature start.</span><br><span class="line">5. poiuy feature start.</span><br><span class="line">6. qwert another feature start.</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line"></span><br><span class="line">// 将开发完的新功能分支发布到远程仓库，这个分支可以发布到测试或者仿真环境进行测试</span><br><span class="line">$ git flow feature publish feature-something</span><br><span class="line">Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 303 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">To ssh://git@host/home/git/repository/repo.git</span><br><span class="line"> * [new branch]      feature/feature-something -&gt; feature/feature-something</span><br><span class="line">Branch feature/feature-something <span class="built_in">set</span> up to track remote branch feature/feature-something from origin.</span><br><span class="line">Already on <span class="string">&#x27;feature/feature-something&#x27;</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- The remote branch <span class="string">&#x27;feature/feature-something&#x27;</span> was created or updated</span><br><span class="line">- The <span class="built_in">local</span> branch <span class="string">&#x27;feature/feature-something&#x27;</span> was configured to track the remote branch</span><br><span class="line">- You are now on branch <span class="string">&#x27;feature/feature-something&#x27;</span></span><br><span class="line"></span><br><span class="line">// 如果这个功能有多个人员参与，那么其它人可以拉取这个新功能分支进行相关的开发</span><br><span class="line">$ git flow feature pull origin feature-something</span><br><span class="line"></span><br><span class="line">// 也可以跟踪在 origin 上的新功能分支</span><br><span class="line">$ git flow feature track feature-something</span><br><span class="line"></span><br><span class="line">// 经过测试发现这个新功能分支没什么大的问题，开发者将完成的新功能合并到 develop 分支并删除新功能分支</span><br><span class="line">$ git flow feature finish feature-something</span><br><span class="line"></span><br><span class="line">// 开始从 develop 准备 release 版本</span><br><span class="line">$ git flow release start v1.0</span><br><span class="line"></span><br><span class="line">// 创建之后可以立即发布允许其它用户向这个 release 分支提交内容，将这个 release 发布出去，允许更新提交，确保新功能正常，万一新功能有隐患的 bug，可以就近修复</span><br><span class="line">$ git flow release publish v1.0</span><br><span class="line"></span><br><span class="line">// poiuy 可以通过 track 命令签出 release 版本的远程变更</span><br><span class="line">$ git flow release track v1.0</span><br><span class="line">$ vim README.md <span class="comment"># poiuy 跟踪 release v1.0 版本后，又进行了一些提交</span></span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy</span><br><span class="line">3. qwert</span><br><span class="line">4. qwert feature start.</span><br><span class="line">5. poiuy feature start.</span><br><span class="line">6. qwert another feature start.</span><br><span class="line">7. poiuy tract release v1.0</span><br><span class="line"></span><br><span class="line">// 经过灰度的测试后，发布的 release 符合上线的要求，qwert 拉取 release v1.0 的更新，完成 release 版本。至此新功能才能算是上线了</span><br><span class="line">$ git flow release finish v1.0</span><br><span class="line">Branches <span class="string">&#x27;develop&#x27;</span> and <span class="string">&#x27;origin/develop&#x27;</span> have diverged.</span><br><span class="line">And <span class="built_in">local</span> branch <span class="string">&#x27;develop&#x27;</span> is ahead of <span class="string">&#x27;origin/develop&#x27;</span>.</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> README.md | 4 ++++</span><br><span class="line"> 1 file changed, 4 insertions(+)</span><br><span class="line">Already on <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">Switched to branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/develop&#x27;</span> by 1 commit.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">To ssh://git@host/home/git/repository/repo.git</span><br><span class="line"> - [deleted]         release/v1.0</span><br><span class="line">Deleted branch release/v1.0 (was 77da54a).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- Release branch <span class="string">&#x27;release/v1.0&#x27;</span> has been merged into <span class="string">&#x27;master&#x27;</span></span><br><span class="line">- The release was tagged <span class="string">&#x27;v1.0&#x27;</span></span><br><span class="line">- Release tag <span class="string">&#x27;v1.0&#x27;</span> has been back-merged into <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- Release branch <span class="string">&#x27;release/v1.0&#x27;</span> has been locally deleted; it has been remotely deleted from <span class="string">&#x27;origin&#x27;</span></span><br><span class="line">- You are now on branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line"></span><br><span class="line">// 将 tag 推送到远程仓库</span><br><span class="line">$ git push origin --tags</span><br><span class="line"></span><br><span class="line">// 没过多久，生产环境出现了一个致命的 bug 需要紧急修复，qwert 开启一个修复分支</span><br><span class="line">$ git flow hotfix start issue-1</span><br><span class="line">Branches <span class="string">&#x27;master&#x27;</span> and <span class="string">&#x27;origin/master&#x27;</span> have diverged.</span><br><span class="line">And <span class="built_in">local</span> branch <span class="string">&#x27;master&#x27;</span> is ahead of <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line">Switched to a new branch <span class="string">&#x27;hotfix/issue-1&#x27;</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">&#x27;hotfix/issue-1&#x27;</span> was created, based on <span class="string">&#x27;master&#x27;</span></span><br><span class="line">- You are now on branch <span class="string">&#x27;hotfix/issue-1&#x27;</span></span><br><span class="line"></span><br><span class="line">Follow-up actions:</span><br><span class="line">- Start committing your hot fixes</span><br><span class="line">- Bump the version number now!</span><br><span class="line">- When <span class="keyword">done</span>, run:</span><br><span class="line"></span><br><span class="line">     git flow hotfix finish <span class="string">&#x27;issue-1&#x27;</span></span><br><span class="line"></span><br><span class="line">// qwert 开始修复 bug，完成后结束 hotfix 分支</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy</span><br><span class="line">3. qwert</span><br><span class="line">4. qwert feature start.</span><br><span class="line">5. poiuy feature start.</span><br><span class="line">6. qwert another feature start.</span><br><span class="line">7. poiuy tract release v1.0</span><br><span class="line">8. qwert hotfix start.</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line">$ git flow hotfix finish <span class="string">&#x27;issue-1&#x27;</span> <span class="comment"># 结束 hotfix 分支的 bug 修复</span></span><br><span class="line">Branches <span class="string">&#x27;master&#x27;</span> and <span class="string">&#x27;origin/master&#x27;</span> have diverged.</span><br><span class="line">And <span class="built_in">local</span> branch <span class="string">&#x27;master&#x27;</span> is ahead of <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line">Branches <span class="string">&#x27;develop&#x27;</span> and <span class="string">&#x27;origin/develop&#x27;</span> have diverged.</span><br><span class="line">And <span class="built_in">local</span> branch <span class="string">&#x27;develop&#x27;</span> is ahead of <span class="string">&#x27;origin/develop&#x27;</span>.</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">Switched to branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/develop&#x27;</span> by 3 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">Deleted branch hotfix/issue-1 (was e4ac4c3).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- Hotfix branch <span class="string">&#x27;hotfix/issue-1&#x27;</span> has been merged into <span class="string">&#x27;master&#x27;</span></span><br><span class="line">- The hotfix was tagged <span class="string">&#x27;issue-1&#x27;</span></span><br><span class="line">- Hotfix tag <span class="string">&#x27;issue-1&#x27;</span> has been back-merged into <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- Hotfix branch <span class="string">&#x27;hotfix/issue-1&#x27;</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line"></span><br><span class="line">// 提交修复的代码到远程 develop 分支</span><br><span class="line">$ git push origin develop</span><br><span class="line"></span><br><span class="line">// 将修复后的 tag 提交到远程仓库，这样生产环境就可以拉取 issue-1 标签修复之前的 bug</span><br><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure>
<p>以下的这副图就是对 <code>git flow</code> 重要命令的诠释：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1008-gitflow-commands.png" alt="1008-gitflow-commands.png"></p>
<p>通过这些操作，我们看到 <code>Gitflow</code> 工作流自始至终一直维护 <code>master</code> 和 <code>develop</code> 分支，而 <code>feature</code> 和 <code>hotfix</code> 分支只是短暂的出现，待功能完成后合并到 <code>develop</code> 分支，修复完成后，同时合并到 <code>master</code> 和 <code>develop</code> 分支。同时我们也看到新功能提交从不直接与 <code>master</code> 分支交互，所有的功能分支都基于 <code>develop</code> 分支，当 <code>feature</code> 达到上线的要求后，才结束 <code>feature</code>，并将 <code>feature</code> 分支合并回 <code>master</code> 和 <code>develop</code> 分支，释放出一个版本供生产发布。这样明晰的功能分支提供了一个健壮的用于管理大型项目的框架。当然，要长期维护两个分支也比较麻烦，大多数管理工具都将 <code>master</code> 当作默认分支，可是开发是在 <code>develop</code> 分支进行的，这导致经常要切换分支，稍不注意就弄错分支，非常恼人，也说明了这种工作流程终究是不合适小团队的中小型项目。</p>
<p><code>Gitflow</code> 工作流的使用场景：</p>
<ul>
<li>认为额外学习 <code>Gitflow</code> 不是什么问题的</li>
<li>有专门的代码仓库管理员的</li>
<li>开发团队相对固定，而且有一定规模</li>
<li>常常有并行开发需求</li>
<li>团队对于 <code>Release</code>、<code>Bug</code>、<code>Feature</code> 这些概念有统一定义标准的</li>
</ul>
<h2 id="Forking-工作流"><a href="#Forking-工作流" class="headerlink" title="Forking 工作流"></a>Forking 工作流</h2><blockquote>
<p><a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-forking.md">Forking Workflow</a></p>
</blockquote>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1009-git-forking-workflow.png" alt="1009-git-forking-workflow.png"></p>
<p>为了演示 <code>Forking Workflow</code> 的工作流程，我准备了三个 <code>github</code> 账号，假设为维护者 <code>git</code>、开发者 <code>qwert</code> 和 <code>poiuy</code>。</p>
<h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>维护者 <code>git</code> 创建一个公开的远程仓库：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1010-git-forking-create.jpg" alt="1010-git-forking-create.jpg"></p>
<p>开发者 <code>qwert</code> 去 <code>Fork</code> 维护者 <code>git</code> 创建的项目，当然，开发者 <code>poiuy</code> 也和 <code>qwert</code> 一样去 <code>Fork</code> 仓库：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1011-git-forking-repo.jpg" alt="1011-git-forking-repo.jpg"></p>
<p>完成之后，<code>qwert</code> 和 <code>poiuy</code> 相当于把远程 <code>git</code> 创建的项目克隆到各自的远程仓库</p>
<h3 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 拉取远程仓库代码到本地</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/qwert/repo.git</span><br><span class="line">$ git config user.name <span class="string">&quot;qwert&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;qwert@example.com&quot;</span></span><br><span class="line">$ vim README.md</span><br><span class="line"><span class="comment"># repo</span></span><br><span class="line">This is a forking workflow\<span class="string">&#x27;s demo.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Develop Feature</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. this is written by Quert.</span></span><br><span class="line"><span class="string">$ git add README.md</span></span><br><span class="line"><span class="string">$ git commit -m &quot;Update README.md&quot;</span></span><br><span class="line"><span class="string">$ git push -u origin master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// poiuy 拉取远程仓库代码到本地</span></span><br><span class="line"><span class="string">$ git clone https://github.com/poiuy/repo.git</span></span><br><span class="line"><span class="string">$ git config user.name &quot;poiuy&quot;</span></span><br><span class="line"><span class="string">$ git config user.email &quot;poiuy@example.com&quot;</span></span><br><span class="line"><span class="string">$ vim README.md</span></span><br><span class="line"><span class="string"># repo</span></span><br><span class="line"><span class="string">This is a forking workflow\&#x27;</span>s demo.</span><br><span class="line"></span><br><span class="line"><span class="comment">## Develop Feature</span></span><br><span class="line"></span><br><span class="line">1. this is written by Poiuy.</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="发起-Pull-Request"><a href="#发起-Pull-Request" class="headerlink" title="发起 Pull Request"></a>发起 Pull Request</h3><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1012-git-forking-pr-create.jpg" alt="1012-git-forking-pr-create.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1013-git-forking-pr-open.jpg" alt="1013-git-forking-pr-open.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1014-git-forking-pr-show.jpg" alt="1014-git-forking-pr-show.jpg"></p>
<p>可以看到开发者 <code>qwert</code> 没有权限合并代码，此时只有维护者 <code>git</code> 才能合并代码，维护者 <code>git</code> 去合并代码：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1015-git-forking-merged.jpg" alt="1015-git-forking-merged.jpg"></p>
<p>开发者 <code>poiuy</code> 也采取和 <code>qwert</code> 一样的流程，但是当他申请合并时，出现了冲突，这是预科中的事，因为两人同时对一个文件相同的区域进行了编辑：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1016-git-forking-conflicts.jpg" alt="1016-git-forking-conflicts.jpg"></p>
<p><code>poiuy</code> 去解决冲突：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1017-git-forking-resolved-conflicts.jpg" alt="1017-git-forking-resolved-conflicts.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1018-git-forking-mark-resolved.jpg" alt="1018-git-forking-mark-resolved.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1019-git-forking-resolved-conflicts-merged.jpg" alt="1019-git-forking-resolved-conflicts-merged.jpg"></p>
<p>可以看到开发者 <code>poiuy</code> 也没有权限合并代码，此时也只有维护者 <code>git</code> 才能合并代码：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1020-forking-feature-merged.jpg" alt="1020-git-forking-feature-merged.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1021-forking-close-merged.jpg" alt="1021-forking-close-merged.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1022-forking-feature.jpg" alt="1022-forking-feature.jpg"></p>
<p>至此，<code>qwert</code> 和 <code>poiuy</code> 开发的新功能都合并到远程维护者的 <code>master</code> 分支，这一阶段的开发告一段落。</p>
<p><code>Forking</code> 工作流的使用场景：</p>
<ul>
<li>常用于开源软件</li>
<li>开发者有需要衍生出自己的衍生版的</li>
<li>开发者不固定，可能是任意一个远程工作者</li>
</ul>
<h2 id="Feature-branching-工作流"><a href="#Feature-branching-工作流" class="headerlink" title="Feature branching 工作流"></a>Feature branching 工作流</h2><blockquote>
<p><a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-feature-branch.md">Feature Branching Workflow</a></p>
</blockquote>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1023-feature-branch-workflow.png" alt="1023-feature-branch-workflow.png"></p>
<p>这个流程大概算是 <code>Gitflow</code> 的简化版，不再需要安装额外 <code>Git</code> 插件，这个流程配合一些代码托管平台可以玩的风生水起。</p>
<h3 id="特性分支下拉取远程仓库"><a href="#特性分支下拉取远程仓库" class="headerlink" title="特性分支下拉取远程仓库"></a>特性分支下拉取远程仓库</h3><p>功能分支工作流中我们仍然使用之前创建的中央仓库，并且 <code>master</code> 分支还是代表了正式项目的历史。这种工作流不是直接提交本地历史到各自的本地 <code>master</code> 分支，开发者每次在开始新功能前先基于 <code>master</code> 创建一个新分支，给分支起一个描述性的名称，这样分支用途就比较明显。</p>
<p>准备工作还是老套路</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 工作准备</span><br><span class="line">$ ssh qwert@host &amp;&amp; <span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> ssh://git@host/home/git/repository/repo.git</span><br><span class="line">$ git config user.name <span class="string">&quot;qwert&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;qwert@example.com&quot;</span></span><br><span class="line"></span><br><span class="line">// poiuy 工作准备</span><br><span class="line">$ ssh poiuy@host &amp;&amp; <span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> ssh://git@host/home/git/repository/repo.git</span><br><span class="line">$ git config user.name <span class="string">&quot;poiuy&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;poiuy@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="功性分支下开发阶段"><a href="#功性分支下开发阶段" class="headerlink" title="功性分支下开发阶段"></a>功性分支下开发阶段</h3><p>开发者 <code>qwert</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建功能分支</span><br><span class="line">$ git checkout -b dev-user-menu</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy</span><br><span class="line">3. qwert</span><br><span class="line">4. qwert feature start.</span><br><span class="line">5. poiuy feature start.</span><br><span class="line">6. qwert another feature start.</span><br><span class="line">7. poiuy tract release v1.0</span><br><span class="line">8. qwert hotfix start.</span><br><span class="line">9. qwert develop user menu.</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Develop user menu.&quot;</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<p>开发者 <code>poiuy</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建功能分支</span><br><span class="line">$ git checkout -b dev-user-auth</span><br><span class="line">$ vim README.md</span><br><span class="line">1. this is the second commit.</span><br><span class="line">2. poiuy</span><br><span class="line">3. qwert</span><br><span class="line">4. qwert feature start.</span><br><span class="line">5. poiuy feature start.</span><br><span class="line">6. qwert another feature start.</span><br><span class="line">7. poiuy tract release v1.0</span><br><span class="line">8. qwert hotfix start.</span><br><span class="line">9. poiuy develop user auth.</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Develop user auth&quot;</span></span><br><span class="line">$ git push -u origin dev-user-auth</span><br></pre></td></tr></table></figure>
<p>一段时间以后，<code>qwert</code> 和 <code>poiuy</code> 都声称把各个负责的功能开发完成，并提交到远程仓库了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 发布开发者 qwert 的功能到测试环境测试，测试通过后合并到 master 分支</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git pull <span class="comment"># 拉取其它开发者的更新</span></span><br><span class="line">remote: Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From ssh://host/home/git/repository/repo</span><br><span class="line"> * [new branch]      dev-user-auth -&gt; origin/dev-user-auth</span><br><span class="line">Already up-to-date.</span><br><span class="line">$ git checkout dev-user-menu</span><br><span class="line">$ git rebase master <span class="comment"># 用 rebase 合并主干的修改，如果有冲突在此时解决</span></span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line">// 将 qwert 新开发的功能合并到 master 分支</span><br><span class="line">$ git merge dev-user-menu</span><br><span class="line">Updating 40e19f1..4f92cff</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">$ git push origin master <span class="comment"># 将合并后的提交到远程 master 分支</span></span><br><span class="line"></span><br><span class="line">// 开发者 poiuy 的也通过测试，需要将代码合并到 master 分支</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is behind <span class="string">&#x27;origin/master&#x27;</span> by 1 commit, and can be fast-forwarded.</span><br><span class="line">  (use <span class="string">&quot;git pull&quot;</span> to update your <span class="built_in">local</span> branch)</span><br><span class="line">$ git pull</span><br><span class="line">From ssh://host/home/git/repository/repo</span><br><span class="line">   40e19f1..4f92cff  master     -&gt; origin/master</span><br><span class="line">Updating 40e19f1..4f92cff</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">// 切换到功能分支，用 rebase 合并主干的修改，之前由于 qwert 和 poiuy 编辑同一个区域，无疑会产生冲突</span><br><span class="line">$ git checkout dev-user-auth</span><br><span class="line">$ git rebase master <span class="comment"># 用 rebase 合并主干的修改，如果有冲突在此时解决</span></span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: Develop user auth</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M  README.md</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Failed to merge <span class="keyword">in</span> the changes.</span><br><span class="line">Patch failed at 0001 Develop user auth</span><br><span class="line">The copy of the patch that failed is found <span class="keyword">in</span>:</span><br><span class="line">   /home/poiuy/repo/.git/rebase-apply/patch</span><br><span class="line"></span><br><span class="line">When you have resolved this problem, run <span class="string">&quot;git rebase --continue&quot;</span>.</span><br><span class="line">If you prefer to skip this patch, run <span class="string">&quot;git rebase --skip&quot;</span> instead.</span><br><span class="line">To check out the original branch and stop rebasing, run <span class="string">&quot;git rebase --abort&quot;</span>.</span><br><span class="line">$ git rebase --<span class="built_in">continue</span> <span class="comment"># 动用 rebase --continue 命令逐个修复冲突文件，直到 No rebase in progress? 为止</span></span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Conflict resolution&quot;</span></span><br><span class="line">$ git push origin dev-user-auth</span><br><span class="line">Counting objects: 10, <span class="keyword">done</span>.</span><br><span class="line">Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 679 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 1), reused 0 (delta 0)</span><br><span class="line">To ssh://git@host/home/git/repository/repo.git</span><br><span class="line">   ccbab61..f0aea38  dev-user-auth -&gt; dev-user-auth</span><br><span class="line"></span><br><span class="line">// 开发者 poiuy 切换到 master 分支，将冲突后的修复合并回 master</span><br><span class="line">$ git checkou master</span><br><span class="line">$ git merge dev-user-auth</span><br><span class="line">Updating 4f92cff..f0aea38</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 5 +++++</span><br><span class="line"> 1 file changed, 5 insertions(+)</span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line">// 此时 qwert 再切换到 master 进行拉取，至此两个开发者的各个功能都合并到 master 分支了，可以发布 release 了</span><br><span class="line">$ git checkou master</span><br><span class="line">$ git pull</span><br><span class="line">remote: Counting objects: 10, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 6 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">From ssh://localhost/home/git/repository/repo</span><br><span class="line">   4f92cff..f0aea38  master     -&gt; origin/master</span><br><span class="line">   ccbab61..f0aea38  dev-user-auth -&gt; origin/dev-user-auth</span><br><span class="line">Updating 4f92cff..f0aea38</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 5 +++++</span><br><span class="line"> 1 file changed, 5 insertions(+)</span><br></pre></td></tr></table></figure>
<p>显而易见，这个分支只需要维护 <code>master</code> 分支就可以了，也就是说，在合并到 <code>master</code> 分支之前，需要确保对功能进行充分的测试，因为 <code>master</code> 分支是可以随时 <code>release</code> 的，而发布和相关的补丁都基于 <code>master</code> 分支，所以在分支达到生产要求后，就要立即合并到 <code>master</code> 分支，删除功能分支，再基于 <code>master</code> 分支创建新的分支进行新一轮的开发。当然，这个流程有个弊端就是，当我们 <code>Code Review</code> 之后，准备在 <code>master</code> 释放 <code>release</code> 时，又有人向 <code>master</code> 分支提交了新的完成功能，或者有些公司指定日期时间发布，等到指定的那个时间，<code>master</code> 分支已经有了新的合并而打乱最初的发布意图。因为这个时候，我们的本意是把上一个功能完全发布后再进行下一个版本的发布。为了应付这种情况，就需要在 <code>master</code> 分支以外，新建一个 <code>production</code> 分支来跟踪线上版本，也就是说，在 <code>git</code> 这儿没有什么是一个分支搞不定的，如果有，哪就再创建一个分支。</p>
<p>功能分支工作流的使用场景：</p>
<ul>
<li>开发团队相对固定，而且有一定规模</li>
<li>常常有多个功能，多个问题并行开发</li>
<li>对代码审查有较高要求</li>
<li>更注重团队效率</li>
</ul>
<h3 id="通过-Pull-Requests-讨论"><a href="#通过-Pull-Requests-讨论" class="headerlink" title="通过 Pull Requests 讨论"></a>通过 Pull Requests 讨论</h3><blockquote>
<p>一旦某个开发者完成一个功能，不是立即合并到 <code>master</code>，而是 <code>push</code> 到远程仓库的功能分支上并发起一个 <code>Pull Request</code> 请求去合并修改到 <code>master</code>。在修改成为主干代码前，这让其它的开发者有机会先去 <code>Review</code> 变更。</p>
</blockquote>
<p><code>Pull Request</code> 可以和 <code>feature</code> 分支工作流、<code>Gitflow</code> 工作流或者 <code>Forking</code> 工作流一起使用。但 <code>Pull Request</code> 需要两个不同的分支或是两个不同的仓库，因此它们不能和中心化的工作流一起使用。在不同的工作流中使用 <code>Pull Request</code> 有些不同，但大致的流程如下：</p>
<ul>
<li>开发者在他们的本地仓库中为某个功能创建一个专门的分支</li>
<li>开发者将分支推送到公共的 <code>GitHub</code> 仓库</li>
<li>开发者用 <code>GitHub</code> 发起一个 <code>Pull Request</code></li>
<li>其余的团队成员审查代码，讨论并且做出修改</li>
<li>项目维护者将这个功能并入官方的仓库，然后关闭这个 <code>Pull Request</code></li>
</ul>
<p>为了演示这个功能，我注册了两个 <code>GitHub</code> 来说明这个情况，假设 <code>qwert</code> 和 <code>poiuy</code> 是两个 <code>GitHub</code> 用户，并且已经注册</p>
<ul>
<li>创建项目</li>
</ul>
<p><code>qwert</code> 创建一个项目</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1024-fb-pr-pro-create.jpg" alt="1024-fb-pr-pro-create.jpg"></p>
<p>随后 <code>qwert</code> 邀请 <code>poiuy</code> 加入</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1025-fb-pr-collaborator.jpg" alt="1025-fb-pr-collaborator.jpg"></p>
<p><code>poiuy</code> 接受邀请</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1026-fb-pr-invitation.jpg" alt="1026-fb-pr-invitation.jpg"></p>
<ul>
<li>拉取项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 拉取项目</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/imajinyun/test.git</span><br><span class="line"></span><br><span class="line">// qwert 设置用户名邮箱</span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">$ git config user.name <span class="string">&quot;qwert&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;qwert@example.com&quot;</span></span><br><span class="line"></span><br><span class="line">// qwert 初始化项目</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1. initialize project.&quot;</span> &gt;&gt; README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;Add README.md&quot;</span></span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br><span class="line">// poiuy 拉取项目</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/imajinyun/test.git</span><br><span class="line"></span><br><span class="line">// poiuy 设置用户名邮箱</span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">$ git config user.name <span class="string">&quot;poiuy&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;poiuy@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能开发</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// qwert 开发某个功能</span><br><span class="line">$ git pull</span><br><span class="line">$ git checkou -b dev-user-menu</span><br><span class="line">$ vim README.md</span><br><span class="line">1. initialize project.</span><br><span class="line">2. qwert develop user menu.</span><br><span class="line">$ git commit -m <span class="string">&quot;Develop user menu.&quot;</span></span><br><span class="line">$ git push -u origin dev-user-menu</span><br><span class="line"></span><br><span class="line">// poiuy 开发某个功能</span><br><span class="line">$ git pull</span><br><span class="line">$ git checkou -b dev-user-auth</span><br><span class="line">$ vim README.md</span><br><span class="line">1. initialize project.</span><br><span class="line">2. poiuy develop user auth.</span><br><span class="line">$ git commit -m <span class="string">&quot;Develop user auth.&quot;</span></span><br><span class="line">$ git push -u origin dev-user-auth</span><br></pre></td></tr></table></figure>
<ul>
<li>各自发起 <code>Pull Request</code></li>
</ul>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1027-fb-pr-new.jpg" alt="1027-fb-pr-new.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1028-fb-pr-finish.jpg" alt="1028-fb-pr-finish.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1029-fb-pr-open.jpg" alt="1029-fb-pr-open.jpg"></p>
<ul>
<li><code>qwert</code> 对发起的 <code>Pull Request</code> 进行合并</li>
</ul>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1030-fb-pr-merged-by-qwert.jpg" alt="1030-fb-pr-merged-by-qwert.jpg"></p>
<ul>
<li><code>poiuy</code> 对发起的 <code>Pull Request</code> 进行合并</li>
</ul>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1031-fb-pr-resolved-by-poiuy.jpg" alt="1031-fb-pr-resolved-by-poiuy.jpg"></p>
<p>这时我们发现冲突了，需要先解决冲突再合并：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1032-fb-pr-mark-resolved.jpg" alt="1032-fb-pr-mark-resolved.jpg"></p>
<p><code>poiuy</code> 解决完冲突进行合并：</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1033-fb-pr-resolved-conflicts.jpg" alt="1033-fb-pr-resolved-conflicts.jpg"></p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1034-fb-pr-resolved-conflicts-merged.jpg" alt="1034-fb-pr-resolved-conflicts-merged.jpg"></p>
<p>终于两个功能都合并到 <code>master</code> 分支了。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/git/201812/1035-fb-pr-master.jpg" alt="1035-fb-pr-master.jpg"></p>
<p>至此 <code>Pull Request</code> 算是完结了，至于其它两个工作流程上都差不多，就不再赘述了。</p>
<p>用一篇文章说清楚 <code>Git Workflow</code> 是不太现实的，我吭哧吭哧的写了一堆，仅代表我对 <code>Git Workflow</code> 的理解和使用方法。如果你有更好的方式，咱们留言区见。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 连接字符串</title>
    <url>/2021/07/25/go-concat-string/</url>
    <content><![CDATA[<p>🍹 Go 中连接字符串的方法有很多种，其实掌握一两种较为高效的方法就足够了，其它权当看热闹。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/">Go 起步</a></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/">Go 数据类型</a></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/">Go 日期时间</a></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/">Go 随机数</a></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/">Go 单元测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/">Go 基准测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/">Go 其它测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/">Go 正确姿势</a></li>
<li><strong>Go 连接字符串</strong></li>
</ul>
<h2 id="几种连接方式"><a href="#几种连接方式" class="headerlink" title="几种连接方式"></a>几种连接方式</h2><h3 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringConcat</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:20: Hello World!</span></span><br><span class="line"><span class="comment">--- PASS: TestStringConcat (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.014s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringConcat</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;Hello &quot;</span></span><br><span class="line">  s += <span class="string">&quot;World!&quot;</span></span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Sprintf"><a href="#Sprintf" class="headerlink" title="Sprintf"></a>Sprintf</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringSprintf</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18: Hello World!</span></span><br><span class="line"><span class="comment">--- PASS: TestStringSprintf (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.010s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringSprintf</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;Hello &quot;</span></span><br><span class="line">  s = fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, s, <span class="string">&quot;World!&quot;</span>)</span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringJoin</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18: Hello World!</span></span><br><span class="line"><span class="comment">--- PASS: TestStringJoin (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.008s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringJoin</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;Hello &quot;</span></span><br><span class="line">  s = strings.Join([]<span class="keyword">string</span>&#123;s, <span class="string">&quot;World!&quot;</span>&#125;, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Buffer-Write"><a href="#Buffer-Write" class="headerlink" title="Buffer Write"></a>Buffer Write</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;bytes&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestBufferWrite</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:20: Hello World!</span></span><br><span class="line"><span class="comment">--- PASS: TestBufferWrite (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.010s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBufferWrite</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">  buf.WriteString(<span class="string">&quot;Hello &quot;</span>)</span><br><span class="line">  buf.WriteString(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">  s := buf.String()</span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bytes-Append"><a href="#Bytes-Append" class="headerlink" title="Bytes Append"></a>Bytes Append</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestBytesAppend</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18: Hello</span></span><br><span class="line"><span class="comment">--- PASS: TestBytesAppend (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBytesAppend</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> b []<span class="keyword">byte</span></span><br><span class="line">  s := <span class="string">&quot;Hello &quot;</span></span><br><span class="line">  b = <span class="built_in">append</span>(b, <span class="string">&quot;World!&quot;</span>...)</span><br><span class="line">  t.Log(<span class="keyword">string</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringCopy</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18: Hello World!</span></span><br><span class="line"><span class="comment">--- PASS: TestStringCopy (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	(cached)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringCopy</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>)</span><br><span class="line">  b = mycopy(b, <span class="string">&quot;Hello &quot;</span>)</span><br><span class="line">  b = mycopy(b, <span class="string">&quot;World!&quot;</span>)</span><br><span class="line">  t.Log(<span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mycopy</span><span class="params">(b []<span class="keyword">byte</span>, s <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">  n := <span class="built_in">len</span>(b)</span><br><span class="line">  <span class="keyword">if</span> n+<span class="built_in">len</span>(s) &gt; <span class="built_in">cap</span>(b) &#123;</span><br><span class="line">    t := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>*<span class="built_in">cap</span>(b)+<span class="built_in">len</span>(s))</span><br><span class="line">    <span class="built_in">copy</span>(t, b)</span><br><span class="line">    b = t</span><br><span class="line">  &#125;</span><br><span class="line">  b = b[<span class="number">0</span> : n+<span class="built_in">len</span>(s)]</span><br><span class="line">  <span class="built_in">copy</span>(b[n:], s)</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="String-Builder"><a href="#String-Builder" class="headerlink" title="String Builder"></a>String Builder</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringBuilder</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:20: Hello World!</span></span><br><span class="line"><span class="comment">--- PASS: TestStringBuilder (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.013s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringBuilder</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> builder strings.Builder</span><br><span class="line">  builder.WriteString(<span class="string">&quot;Hello &quot;</span>)</span><br><span class="line">  builder.WriteString(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">  s := builder.String()</span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;bytes&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  src = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">  cnt = <span class="number">10000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expected = strings.Repeat(src, cnt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mycopy</span><span class="params">(b []<span class="keyword">byte</span>, s <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">  n := <span class="built_in">len</span>(b)</span><br><span class="line">  <span class="keyword">if</span> n+<span class="built_in">len</span>(s) &gt; <span class="built_in">cap</span>(b) &#123;</span><br><span class="line">    t := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>*<span class="built_in">cap</span>(b)+<span class="built_in">len</span>(s))</span><br><span class="line">    <span class="built_in">copy</span>(t, b)</span><br><span class="line">    b = t</span><br><span class="line">  &#125;</span><br><span class="line">  b = b[<span class="number">0</span> : n+<span class="built_in">len</span>(s)]</span><br><span class="line">  <span class="built_in">copy</span>(b[n:], s)</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkStringConcat</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      str += src</span><br><span class="line">    &#125;</span><br><span class="line">    res = str</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">    b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, <span class="keyword">string</span>(res), expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkStringSprintf</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      str = fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, str, src)</span><br><span class="line">    &#125;</span><br><span class="line">    res = str</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">    b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, <span class="keyword">string</span>(res), expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkStringJoin</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      str = strings.Join([]<span class="keyword">string</span>&#123;str, src&#125;, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res = str</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">    b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, res, expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBufferWrite</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      buf.WriteString(src)</span><br><span class="line">    &#125;</span><br><span class="line">    res = buf.String()</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">    b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, <span class="keyword">string</span>(res), expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBytesAppend</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    <span class="keyword">var</span> bytes []<span class="keyword">byte</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      bytes = <span class="built_in">append</span>(bytes, src...)</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="keyword">string</span>(bytes)</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">    b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, <span class="keyword">string</span>(res), expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkStringCopy</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="number">64</span>) <span class="comment">// same size as bootstrap array of bytes.Buffer</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      data = mycopy(data, src)</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="keyword">string</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">      b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, <span class="keyword">string</span>(res), expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkStringCopy2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="number">64</span>) <span class="comment">// same size as bootstrap array of bytes.Buffer</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      l := <span class="built_in">len</span>(b)</span><br><span class="line">      <span class="keyword">if</span> l+<span class="built_in">len</span>(src) &gt; <span class="built_in">cap</span>(b) &#123;</span><br><span class="line">        t := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>*<span class="built_in">cap</span>(b)+<span class="built_in">len</span>(src))</span><br><span class="line">        <span class="built_in">copy</span>(t, b)</span><br><span class="line">        b = t</span><br><span class="line">      &#125;</span><br><span class="line">      b = b[<span class="number">0</span> : l+<span class="built_in">len</span>(src)]</span><br><span class="line">      <span class="built_in">copy</span>(b[l:], src)</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="keyword">string</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">    b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, <span class="keyword">string</span>(res), expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkStringBuilder</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    <span class="keyword">var</span> builder strings.Builder</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">      builder.WriteString(src)</span><br><span class="line">    &#125;</span><br><span class="line">    res = builder.String()</span><br><span class="line">  &#125;</span><br><span class="line">  b.StopTimer()</span><br><span class="line">  <span class="keyword">if</span> res != expected &#123;</span><br><span class="line">    b.Errorf(<span class="string">&quot;got=%s, want=%s&quot;</span>, <span class="keyword">string</span>(res), expected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我本机的测试结果如下，对于这个测试结果我表示也没想到，但是我已经知道以后该怎么做了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkStringConcat|BenchmarkStringSprintf|BenchmarkStringJoin|BenchmarkBufferWrite|BenchmarkBytesAppend|BenchmarkStringCopy|BenchmarkStringCopy2|BenchmarkStringBuilder)$&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkStringConcat</span><br><span class="line">BenchmarkStringConcat-4                8         131090517 ns/op        632845121 B/op     10004 allocs/op</span><br><span class="line">BenchmarkStringSprintf</span><br><span class="line">BenchmarkStringSprintf-4               4         295268326 ns/op        1075561174 B/op    29686 allocs/op</span><br><span class="line">BenchmarkStringJoin</span><br><span class="line">BenchmarkStringJoin-4                  6         287073860 ns/op        632845282 B/op     10008 allocs/op</span><br><span class="line">BenchmarkBufferWrite</span><br><span class="line">BenchmarkBufferWrite-4              5631            210591 ns/op          441616 B/op         13 allocs/op</span><br><span class="line">BenchmarkBytesAppend</span><br><span class="line">BenchmarkBytesAppend-4              7819            152409 ns/op          628720 B/op         25 allocs/op</span><br><span class="line">BenchmarkStringCopy</span><br><span class="line">BenchmarkStringCopy-4               8820            118761 ns/op          441552 B/op         12 allocs/op</span><br><span class="line">BenchmarkStringCopy2</span><br><span class="line">BenchmarkStringCopy2-4              9598            135427 ns/op          441552 B/op         12 allocs/op</span><br><span class="line">BenchmarkStringBuilder</span><br><span class="line">BenchmarkStringBuilder-4            7729            156815 ns/op          505840 B/op         24 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example.com/hello       17.512s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 基准测试</title>
    <url>/2021/07/17/go-benchmark-test/</url>
    <content><![CDATA[<p>🏃‍♂️ Go 语言标准库内置的 testing 测试框架提供了基准测试（benchmark）的能力，能让我们很容易地对某一段代码进行性能测试。基准测试主要是通过测试 CPU 和 Memory 的效率问题，来评估被测试代码的性能，进而找到更好的解决方案。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/"><code>Go 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/"><code>Go 数据类型</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/"><code>Go 日期时间</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/"><code>Go 随机数</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/"><code>Go 单元测试</code></a></li>
<li><strong>Go 基准测试</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/"><code>Go 其它测试</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/"><code>Go 正确姿势</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/"><code>Go 连接字符串</code></a></li>
</ul>
<h2 id="基准测试命令"><a href="#基准测试命令" class="headerlink" title="基准测试命令"></a>基准测试命令</h2><h3 id="基准测试命令实例"><a href="#基准测试命令实例" class="headerlink" title="基准测试命令实例"></a>基准测试命令实例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -bench=.</span><br><span class="line">$ go <span class="built_in">test</span> -v -bench=<span class="string">&#x27;Fib$&#x27;</span> -benchtime=5s .</span><br><span class="line">$ go <span class="built_in">test</span> -v -bench=<span class="string">&#x27;Fib$&#x27;</span> -benchtime=1000x .</span><br><span class="line">$ go <span class="built_in">test</span> -v -bench=<span class="string">&#x27;Fib$&#x27;</span> -benchtime=1000x -count=5 .</span><br><span class="line">$ go <span class="built_in">test</span> -v -bench=<span class="string">&#x27;Fib$&#x27;</span> -cpu=2,4,8,16,32,64,128,256,512,1024,2048,4096 .</span><br><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkFib)$&#x27;</span> example.com/hello .</span><br></pre></td></tr></table></figure>
<h2 id="基准测试函数"><a href="#基准测试函数" class="headerlink" title="基准测试函数"></a>基准测试函数</h2><h3 id="基准测试函数格式"><a href="#基准测试函数格式" class="headerlink" title="基准测试函数格式"></a>基准测试函数格式</h3><div class="note danger">
            <p><code>BenchmarkXxx</code> 中 <code>Xxx</code> 可以是任何字母数字字符串，但是第一个字母不能是小写字母。</p>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkXxx</span><span class="params">(t *testing.T)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下命名是合法的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark123</span><span class="params">(t *testing.T)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark</span>中国<span class="params">(t *testing.T)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMac</span><span class="params">(t *testing.T)</span></span></span><br></pre></td></tr></table></figure>
<p>基准测试用例函数需要以 <code>Benchmark</code> 为前缀：</p>
<ul>
<li>前缀用例文件不会参与正常源码编译，不会被包含到可执行文件中；</li>
<li>基准测试用例使用 <code>go test -bench=.</code> 指令来执行，没有也不需要 <code>main()</code> 作为函数入口。所有以 <code>_test</code> 结尾的源码内以 <code>Benchmark</code> 开头的函数会被自动执行；</li>
<li>基准测试函数的参数 <code>b *test.B</code> 必须传入，否则会报函数签名错误，即：<code>wrong signature for BenchmarkXxx, must be: func BenchmarkXxx(b \*testing.B)</code>；</li>
</ul>
<p>要编写一个新的基准测试，需要创建一个名称以 <code>_test.go</code> 结尾的文件，该文件包含 <code>BenchmarkXxx</code> 函数。</p>
<h2 id="基准测试用例"><a href="#基准测试用例" class="headerlink" title="基准测试用例"></a>基准测试用例</h2><h3 id="简单基准测试"><a href="#简单基准测试" class="headerlink" title="简单基准测试"></a>简单基准测试</h3><p>待测代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> n &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> Fib(n<span class="number">-1</span>) + Fib(n<span class="number">-2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    Fib(<span class="number">15</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkFib)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkFib</span><br><span class="line">BenchmarkFib-4   	  238396	      4793 ns/op	       0 B/op	       0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	2.190s</span><br></pre></td></tr></table></figure>
<p>基准函数会运行目标代码 <code>b.N</code> 次。在基准执行期间，程序会自动调整 <code>b.N</code> 直到基准测试函数持续足够长的时间。<code>b.N</code> 对于每个用例都是不一样的。<code>b.N</code> 从 <code>1</code> 开始，如果该用例能够在 <code>1s</code> 内完成，<code>b.N</code> 的值便会增加，再次执行。<code>b.N</code> 的值大概以 <code>1, 2, 3, 5, 10, 20, 30, 50, 100</code> 这样的序列递增，越到后面，增加得越快。</p>
<h3 id="提升准确度"><a href="#提升准确度" class="headerlink" title="提升准确度"></a>提升准确度</h3><ul>
<li><code>Benchmark</code> 的默认时间是 <code>1s</code>，那么我们可以使用 <code>-benchtime</code> 指定为 <code>5s</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 沿用实例一的代码做基准测试</span><br><span class="line">$ go <span class="built_in">test</span> -v -benchtime=5s -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkFib)$&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkFib</span><br><span class="line">BenchmarkFib-4           1290742              4529 ns/op               0 B/op          0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example.com/hello       10.375s</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实际执行的时间是 <code>10.375s</code>，比 <code>benchtime</code> 的 <code>5s</code> 要长，测试用例编译、执行、销毁等是需要时间的。</p>
</blockquote>
<ul>
<li><code>Benchmark</code> 的 <code>-benchtime</code> 的值除了是时间外，还可以是具体的次数：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 沿用实例一的代码做基准测试</span><br><span class="line">$ go <span class="built_in">test</span> -v -benchtime=50x -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkFib)$&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkFib</span><br><span class="line">BenchmarkFib-4                50              4556 ns/op               0 B/op          0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example.com/hello       0.010s</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Benchmark</code> 的 <code>-count</code> 参数可以用来设置轮数：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 沿用实例一的代码做基准测试</span><br><span class="line">$ go <span class="built_in">test</span> -v -count=3 -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkFib)$&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkFib</span><br><span class="line">BenchmarkFib-4            226737              4483 ns/op               0 B/op          0 allocs/op</span><br><span class="line">BenchmarkFib-4            226686              5645 ns/op               0 B/op          0 allocs/op</span><br><span class="line">BenchmarkFib-4            226284              4485 ns/op               0 B/op          0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example.com/hello       3.489s</span><br></pre></td></tr></table></figure>
<h3 id="内存分配情况"><a href="#内存分配情况" class="headerlink" title="内存分配情况"></a>内存分配情况</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genWithCap</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">  nums := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, n)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">    nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genWithoutCap</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">  nums := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">    nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenWithCap</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    genWithCap(<span class="number">1000000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenWithoutCap</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    genWithoutCap(<span class="number">1000000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^BenchmarkGen&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkGenWithCap</span><br><span class="line">BenchmarkGenWithCap-4                 40          28733419 ns/op         8003585 B/op          1 allocs/op</span><br><span class="line">BenchmarkGenWithoutCap</span><br><span class="line">BenchmarkGenWithoutCap-4              26          38608707 ns/op        45188404 B/op         40 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example.com/hello       3.167s</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>genWithoutCap</code> 分配的内存空间是 <code>genWithCap</code> 的 <code>45188404/8003585 ≈ 5.6</code> 倍，设置了切片容量，内存只分配一次，而不设置切片容量，内存分配了 <code>40</code> 次。</p>
<h3 id="测试输入规模"><a href="#测试输入规模" class="headerlink" title="测试输入规模"></a>测试输入规模</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">  nums := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">    nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(i <span class="keyword">int</span>, b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    gen(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGen10</span><span class="params">(b *testing.B)</span></span>      &#123; helper(<span class="number">10</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGen100</span><span class="params">(b *testing.B)</span></span>     &#123; helper(<span class="number">100</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGen1000</span><span class="params">(b *testing.B)</span></span>    &#123; helper(<span class="number">1000</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGen10000</span><span class="params">(b *testing.B)</span></span>   &#123; helper(<span class="number">10000</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGen100000</span><span class="params">(b *testing.B)</span></span>  &#123; helper(<span class="number">100000</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGen1000000</span><span class="params">(b *testing.B)</span></span> &#123; helper(<span class="number">1000000</span>, b) &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkGen10|BenchmarkGen100|BenchmarkGen1000|BenchmarkGen10000|BenchmarkGen100000|BenchmarkGen1000000)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkGen10</span><br><span class="line">BenchmarkGen10-4        	   85984	     12604 ns/op	     248 B/op	       5 allocs/op</span><br><span class="line">BenchmarkGen100</span><br><span class="line">BenchmarkGen100-4       	   89773	     14911 ns/op	    2040 B/op	       8 allocs/op</span><br><span class="line">BenchmarkGen1000</span><br><span class="line">BenchmarkGen1000-4      	   28988	     38968 ns/op	   16376 B/op	      11 allocs/op</span><br><span class="line">BenchmarkGen10000</span><br><span class="line">BenchmarkGen10000-4     	    3843	    326670 ns/op	  386296 B/op	      20 allocs/op</span><br><span class="line">BenchmarkGen100000</span><br><span class="line">BenchmarkGen100000-4    	     357	   3429826 ns/op	 4654346 B/op	      30 allocs/op</span><br><span class="line">BenchmarkGen1000000</span><br><span class="line">BenchmarkGen1000000-4   	      37	  35700196 ns/op	45188381 B/op	      40 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	9.278s</span><br></pre></td></tr></table></figure>
<p>通过测试结果可以发现，输入变为原来的 <code>10</code> 倍，函数每次调用的时长也差不多是原来的 <code>10</code> 倍，这说明复杂度是线性的。</p>
<h2 id="B-类型"><a href="#B-类型" class="headerlink" title="B 类型"></a>B 类型</h2><h3 id="报告方法"><a href="#报告方法" class="headerlink" title="报告方法"></a>报告方法</h3><p>基准测试中，传递给基准测试函数的参数是 <code>*testing.B</code> 类型。<code>B</code> 是传递给基准测试函数的一种类型，它用于管理基准测试的计时行为，并指示应该迭代地运行测试多少次。</p>
<p>跟单元测试一样，基准测试会在执行的过程中积累日志，并在测试完毕时将日志转储到标准错误。但跟单元测试不一样的是，为了避免基准测试的结果受到日志打印操作的影响，基准测试总是会把日志打印出来。</p>
<p><code>B</code> 类型中的报告方法使用方式和 <code>T</code> 类型是一样的，一般来说，基准测试中也不需要使用，毕竟主要是测性能。</p>
<h3 id="计时方法"><a href="#计时方法" class="headerlink" title="计时方法"></a>计时方法</h3><ul>
<li><code>StartTimer</code>：开始对测试进行计时。该方法会在基准测试开始时自动被调用，我们也可以在调用 <code>StopTimer</code> 之后恢复计时；</li>
<li><code>StopTimer</code>：停止对测试进行计时。当你需要执行一些复杂的初始化操作，并且你不想对这些操作进行测量时，就可以使用这个方法来暂时地停止计时；</li>
<li><code>ResetTimer</code>：对已经逝去的基准测试时间以及内存分配计数器进行清零。对于正在运行中的计时器，这个方法不会产生任何效果；</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">0</span> || n == <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fib(n<span class="number">-2</span>) + fib(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">  <span class="comment">// b.ResetTimer()</span></span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    fib(<span class="number">30</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 注释 b.ResetTimer()</span><br><span class="line">$ go <span class="built_in">test</span> -v -benchtime=50x -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkFib)$&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkFib</span><br><span class="line">BenchmarkFib-4   	      50	  66575387 ns/op	       1 B/op	       0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	6.358s</span><br><span class="line"></span><br><span class="line">// 打开 b.ResetTimer()</span><br><span class="line">$ go <span class="built_in">test</span> -v -benchtime=50x -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkFib)$&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkFib</span><br><span class="line">BenchmarkFib-4   	      50	   6419112 ns/op	       0 B/op	       0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	6.344s</span><br></pre></td></tr></table></figure>
<p>可以看到，当注释 <code>b.ResetTimer()</code> 后，每次执行需要 <code>66575387/1000000000=0.06657539≈0.067</code> 秒；当打开 <code>b.ResetTimer()</code> 后，每次执行需要 <code>6419112/1000000000=0.00641911≈0.006</code> 秒。所以使用 <code>b.ResetTimer()</code> 重置定时器后快了 <code>0.067/0.006=11.16666667≈11</code> 倍。</p>
<p>在某些情况下，每次调用函数前后需要一些准备工作和清理工作，可以使用 <code>StopTimer</code> 暂停计时以及使用 <code>StartTimer</code> 开始计时：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genWithCap</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">  nums := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, n)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">    nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(nums []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums)-i; j++ &#123;</span><br><span class="line">      <span class="keyword">if</span> nums[j] &lt; nums[j<span class="number">-1</span>] &#123;</span><br><span class="line">        nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBubbleSort</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">    b.StopTimer()</span><br><span class="line">    nums := genWithCap(<span class="number">10000</span>)</span><br><span class="line">    b.StartTimer()</span><br><span class="line">    bubbleSort(nums)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchtime=50x -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkBubbleSort)$&#x27;</span> example.com/hello</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkBubbleSort</span><br><span class="line">BenchmarkBubbleSort-4   	      50	 124283402 ns/op	       0 B/op	       0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	6.380s</span><br></pre></td></tr></table></figure>
<h3 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h3><p>通过 <code>RunParallel</code> 方法能够并行地执行给定的基准测试。<code>RunParallel</code> 会创建出多个 <code>goroutine</code>，并将 <code>b.N</code> 分配给这些 <code>goroutine</code> 执行，其中 <code>goroutine</code> 数量的默认值为 <code>GOMAXPROCS</code>。用户如果想要增加非 <code>CPU</code> 受限（non-CPU-bound）基准测试的并行性，那么可以在 <code>RunParallel</code> 之前调用 <code>SetParallelism</code>（如：<code>SetParallelism(2)</code>，则 <code>goroutine</code> 数量为 <code>2*GOMAXPROCS</code>）。<code>RunParallel</code> 通常会与 <code>-cpu</code> 标志一同使用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;bytes&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkTemplateParallel</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  tpl := template.Must(template.New(<span class="string">&quot;test&quot;</span>).Parse(<span class="string">&quot;Hello, &#123;&#123;.&#125;&#125;!&quot;</span>))</span><br><span class="line">  <span class="comment">// RunParallel will create GOMAXPROCS goroutines and distribute work among them.</span></span><br><span class="line">  b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Each goroutine has its own bytes.Buffer.</span></span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    <span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">    <span class="comment">// The loop body is executed b.N times total across all goroutines.</span></span><br><span class="line">      buf.Reset()</span><br><span class="line">      tpl.Execute(&amp;buf, <span class="string">&quot;World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkTemplateParallel)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkTemplateParallel</span><br><span class="line">BenchmarkTemplateParallel-4   	 7044910	       198.2 ns/op	      48 B/op	       1 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	1.581s</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelectNonblock</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">  ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">  ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">  ch4 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">  b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ch1:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ch2 &lt;- <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ch3:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ch4 &lt;- <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkSelectNonblock)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkSelectNonblock</span><br><span class="line">BenchmarkSelectNonblock-4   	96872894	        13.02 ns/op	       0 B/op	       0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	1.286s</span><br></pre></td></tr></table></figure>
<h3 id="内存统计"><a href="#内存统计" class="headerlink" title="内存统计"></a>内存统计</h3><p><code>ReportAllocs</code> 方法用于打开当前基准测试的内存统计功能， 与 <code>go test</code> 使用 <code>-benchmem</code> 标志类似，但 <code>ReportAllocs</code> 只影响那些调用了该函数的基准测试。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;bytes&quot;</span></span><br><span class="line">  <span class="string">&quot;html/template&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkTmplExucte</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  b.ReportAllocs()</span><br><span class="line">  tpl := template.Must(template.New(<span class="string">&quot;test&quot;</span>).Parse(<span class="string">&quot;Hello, &#123;&#123;.&#125;&#125;!&quot;</span>))</span><br><span class="line">  b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Each goroutine has its own bytes.Buffer.</span></span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    <span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">      <span class="comment">// The loop body is executed b.N times total across all goroutines.</span></span><br><span class="line">      buf.Reset()</span><br><span class="line">      tpl.Execute(&amp;buf, <span class="string">&quot;World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -benchmem -run=^$ -bench <span class="string">&#x27;^(BenchmarkTplExucte)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example.com/hello</span><br><span class="line">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span><br><span class="line">BenchmarkTmplExucte</span><br><span class="line">BenchmarkTmplExucte-4</span><br><span class="line"> 1525129	       875.6 ns/op	     240 B/op	       8 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	2.152s</span><br></pre></td></tr></table></figure>
<h3 id="基准测试结果"><a href="#基准测试结果" class="headerlink" title="基准测试结果"></a>基准测试结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 循环执行了 238396 次，每次循环花费 4793 ns</span><br><span class="line">BenchmarkFib-4   	  238396	      4793 ns/op	       0 B/op	       0 allocs/op</span><br></pre></td></tr></table></figure>
<ul>
<li><code>BenchmarkFib-4</code>：<code>BenchmarkFib-8</code> 中的 <code>-8</code> 即 <code>GOMAXPROCS</code>，默认等于 CPU 核数。可以通过 <code>-cpu</code> 参数改变 <code>GOMAXPROCS</code>，<code>-cpu</code> 支持传入一个列表作为参数（比如：<code>-cpu=2,4,8,...</code>）；</li>
<li><code>238396</code>：基准测试的迭代总次数 <code>b.N</code>；</li>
<li><code>4793 ns/op</code>：平均每次迭代所消耗的纳秒数；</li>
<li><code>0 B/op</code>：平均每次迭代内存所分配的字节数；</li>
<li><code>0 allocs/op</code>：平均每次迭代的内存分配次数；</li>
</ul>
<p>在 <code>testing</code> 包中的 <a href="https://github.com/golang/go/blob/master/src/testing/benchmark.go#L353~L363">BenchmarkResult</a> 类型保存了基准测试的结果，定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BenchmarkResult contains the results of a benchmark run.</span></span><br><span class="line"><span class="keyword">type</span> BenchmarkResult <span class="keyword">struct</span> &#123;</span><br><span class="line">  N         <span class="keyword">int</span>           <span class="comment">// The number of iterations.</span></span><br><span class="line">  T         time.Duration <span class="comment">// The total time taken.</span></span><br><span class="line">  Bytes     <span class="keyword">int64</span>         <span class="comment">// Bytes processed in one iteration.</span></span><br><span class="line">  MemAllocs <span class="keyword">uint64</span>        <span class="comment">// The total number of memory allocations.</span></span><br><span class="line">  MemBytes  <span class="keyword">uint64</span>        <span class="comment">// The total number of bytes allocated.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Extra records additional metrics reported by ReportMetric.</span></span><br><span class="line">  Extra <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">	<span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  res := testing.Benchmark(<span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    tpl := template.Must(template.New(<span class="string">&quot;test&quot;</span>).Parse(<span class="string">&quot;Hello, &#123;&#123;.&#125;&#125;!&quot;</span>))</span><br><span class="line">    b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line">      <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">      <span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">        buf.Reset()</span><br><span class="line">        tpl.Execute(&amp;buf, <span class="string">&quot;World&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%8d\t%10d ns/op\t%10d B/op\t%10d allocs/op\n&quot;</span>,</span><br><span class="line">    res.N,</span><br><span class="line">    res.NsPerOp(),</span><br><span class="line">    res.AllocedBytesPerOp(),</span><br><span class="line">    res.AllocsPerOp(),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"> 5220064	       196 ns/op	        48 B/op	         1 allocs/op</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 数据类型</title>
    <url>/2021/07/02/go-data-type/</url>
    <content><![CDATA[<p>🦋 Go 是静态类型的编程语言，这意味着每个变量都有一种类型。从大的方面来说 Go 有两种类型，即基本类型和组合类型。数据类型指定有效的 Go 变量可以保持的数据类型。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/">Go 起步</a></li>
<li><strong>Go 数据类型</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/">Go 日期时间</a></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/">Go 随机数</a></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/">Go 单元测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/">Go 基准测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/">Go 其它测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/">Go 正确姿势</a></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/">Go 连接字符串</a></li>
</ul>
<h2 id="按基本数据类型分类"><a href="#按基本数据类型分类" class="headerlink" title="按基本数据类型分类"></a>按基本数据类型分类</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><div class="note info">
            <p><code>bool</code> 的零值为 <code>false</code>。</p>
          </div>
<p>仅赋值为 <code>true</code> 和 <code>false</code> 来表示真假。Go 没有定义布尔类型的字面量形式，可以将 <code>true</code> 和 <code>false</code> 这两个预声明的有名常量当作布尔类型的字面量形式。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  b2 := <span class="literal">true</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;b1: %s type, %d bytes\n&quot;</span>, reflect.TypeOf(b1), unsafe.Sizeof(b1))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;b2: %s type, %d bytes\n\n&quot;</span>, reflect.TypeOf(b2), unsafe.Sizeof(b2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">b1: bool type, 1 bytes</span></span><br><span class="line"><span class="comment">b2: bool type, 1 bytes</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><div class="note info">
            <p><code>numeric</code> 的零值为 <code>0</code>（但是不同类型的零值在内存中占用的空间可能不同）。</p>
          </div>
<h5 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h5><blockquote>
<p>包括有符号（Signed）和无符号（Unsigned）类型。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Type</th>
<th>Size</th>
<th>Range</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int8</code></td>
<td><code>1</code></td>
<td><code>-128~127</code> or <code>-2^7~2^7-1</code></td>
<td>有符号 8 位整形</td>
</tr>
<tr>
<td><code>uint8</code></td>
<td><code>1</code></td>
<td><code>0~255</code> or <code>2^8</code></td>
<td>无符号 8 位整形</td>
</tr>
<tr>
<td><code>int16</code></td>
<td><code>2</code></td>
<td><code>-32768~32767</code> or <code>-2^15~2^15-1</code></td>
<td>有符号 16 位整形</td>
</tr>
<tr>
<td><code>uint16</code></td>
<td><code>2</code></td>
<td><code>0~65535</code> or <code>2^16</code></td>
<td>无符号 16 位整形</td>
</tr>
<tr>
<td><code>int32</code></td>
<td><code>4</code></td>
<td><code>-2147483648~2147483647</code> or <code>-2^31~2^31-1</code></td>
<td>有符号 32 位整形</td>
</tr>
<tr>
<td><code>uint32</code></td>
<td><code>4</code></td>
<td><code>0~4294967295</code> or <code>2^31</code></td>
<td>无符号 32 位整形</td>
</tr>
<tr>
<td><code>int64</code></td>
<td><code>8</code></td>
<td><code>-9223372036854775808~9223372036854775807</code> or <code>-2^63~2^63-1</code></td>
<td>有符号 64 位整形</td>
</tr>
<tr>
<td><code>uint64</code></td>
<td><code>8</code></td>
<td><code>0~18446744073709551615</code> or <code>0~2^64</code></td>
<td>无符号 64 位整形</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>4 or 8</code></td>
<td>Platform dependent</td>
<td>有符号 32 或 64 位整形</td>
</tr>
<tr>
<td><code>uint</code></td>
<td><code>4 or 8</code></td>
<td>Platform dependent</td>
<td>无符号 32 或 64 位整形</td>
</tr>
<tr>
<td><code>uintptr</code></td>
<td><code>4 or 8</code></td>
<td>Platform dependent</td>
<td>用于存放一个指针</td>
</tr>
</tbody>
</table>
<div class="note info">
            <p><code>uintptr</code> 特性：</p><ul><li>可以被转换为 <code>unsafe.Pointer</code>，反之亦然；</li><li>可以在其上执行算术运算；</li><li>即使包含指针地址，也只是一个值，也不引用任何对象。所以：<ul><li>如果相应对象移动，则不会更新其值。例如：当 Goroutine 堆栈发生变化时；</li><li>相应的对象可以是被收集的垃圾；</li></ul></li></ul><p><code>uintptr</code> 场景：</p><ul><li>其上的是与 <code>unsafe.Pointer</code> 一起主要用于不安全的内存访问；</li><li>当你想要保存指针地址值以进行打印或存储它。由于地址刚刚存储并且不引用任何内容，因此相应的对象可以是垃圾收集的；</li></ul>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math/bits&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  i8 <span class="keyword">int8</span></span><br><span class="line">  u8 <span class="keyword">uint8</span></span><br><span class="line"></span><br><span class="line">  i16 <span class="keyword">int16</span></span><br><span class="line">  u16 <span class="keyword">uint16</span></span><br><span class="line"></span><br><span class="line">  i32 <span class="keyword">int32</span></span><br><span class="line">  u32 <span class="keyword">uint32</span></span><br><span class="line"></span><br><span class="line">  i64 <span class="keyword">int64</span></span><br><span class="line">  u64 <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">  i <span class="keyword">int</span></span><br><span class="line">  u <span class="keyword">uint</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;i8: %d bits, %s type, %d bytes\n&quot;</span>, bits.UintSize, reflect.TypeOf(i8), unsafe.Sizeof(i8))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;u8: %d bits, %s type, %d bytes\n\n&quot;</span>, bits.UintSize, reflect.TypeOf(u8), unsafe.Sizeof(u8))</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;i16: %d bits, %s type, %d bytes\n&quot;</span>, bits.UintSize, reflect.TypeOf(i16), unsafe.Sizeof(i16))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;u16: %d bits, %s type, %d bytes\n\n&quot;</span>, bits.UintSize, reflect.TypeOf(u16), unsafe.Sizeof(u16))</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;i32: %d bits, %s type, %d bytes\n&quot;</span>, bits.UintSize, reflect.TypeOf(i32), unsafe.Sizeof(i32))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;u32: %d bits, %s type, %d bytes\n\n&quot;</span>, bits.UintSize, reflect.TypeOf(u32), unsafe.Sizeof(u32))</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;i64: %d bits, %s type, %d bytes\n&quot;</span>, bits.UintSize, reflect.TypeOf(i64), unsafe.Sizeof(i64))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;u64: %d bits, %s type, %d bytes\n\n&quot;</span>, bits.UintSize, reflect.TypeOf(u64), unsafe.Sizeof(u64))</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;i: %d bits, %s type, %d bytes\n&quot;</span>, bits.UintSize, reflect.TypeOf(i), unsafe.Sizeof(i))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;u: %d bits, %s type, %d bytes\n\n&quot;</span>, bits.UintSize, reflect.TypeOf(u), unsafe.Sizeof(u))</span><br><span class="line"></span><br><span class="line">  s := &amp;student&#123;name: <span class="string">&quot;tony&quot;</span>, age: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the address of field name in struct s</span></span><br><span class="line">  p := unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(s)) + unsafe.Offsetof(s.name))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Typecast it to a string pointer and print the value of it</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;p: %s&quot;</span>, *(*<span class="keyword">string</span>)(p))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i8: 64 bits, int8 type, 1 bytes</span></span><br><span class="line"><span class="comment">u8: 64 bits, uint8 type, 1 bytes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i16: 64 bits, int16 type, 2 bytes</span></span><br><span class="line"><span class="comment">u16: 64 bits, uint16 type, 2 bytes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i32: 64 bits, int32 type, 4 bytes</span></span><br><span class="line"><span class="comment">u32: 64 bits, uint32 type, 4 bytes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i64: 64 bits, int64 type, 8 bytes</span></span><br><span class="line"><span class="comment">u64: 64 bits, uint64 type, 8 bytes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i: 64 bits, int type, 8 bytes</span></span><br><span class="line"><span class="comment">u: 64 bits, uint type, 8 bytes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">p: tony</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<div class="note info">
            <p><code>byte</code> 为 <code>uint8</code> 的别名。因此它是一个整数值，此整数值为 8 位，它表示 0~255 之间的一个字节。单个字节可以代表 ASCII 字符。Go 没有任何 <code>char</code> 数据类型，因此字节用于表示 ASCII 字符。</p>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> char <span class="keyword">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type: %s, Size: %d\n&quot;</span>, reflect.TypeOf(char), unsafe.Sizeof(char))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Character: %c\n&quot;</span>, char)</span><br><span class="line"></span><br><span class="line">  s := <span class="string">&quot;abc&quot;</span></span><br><span class="line">  fmt.Println([]<span class="keyword">byte</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Type: uint8, Size: 1</span></span><br><span class="line"><span class="comment">Character: a</span></span><br><span class="line"><span class="comment">[97 98 99]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<div class="note info">
            <p><code>rune</code> 为 <code>int32</code> 的别名。因此它是一个整数值，此整数值旨在表示 Unicode Code Point。关于 Unicode 和字符集请戳 <a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/">The Absolute Minimum Every Software Developer Absolutely, Positively. Must Know About Unicode and Character Sets(No Excuses!)</a>。</p>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  char := <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type: %s, Size: %d\n&quot;</span>, reflect.TypeOf(char), unsafe.Sizeof(char))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Character: %c\n&quot;</span>, char)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Unicode Code Point: %U\n&quot;</span>, char)</span><br><span class="line"></span><br><span class="line">  s := <span class="string">&quot;0b™&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This will print the Unicode Code Point</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;%U\n&quot;</span>, []<span class="keyword">rune</span>(s))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This will the decimal value of Unicode Code Point</span></span><br><span class="line">  fmt.Println([]<span class="keyword">rune</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Type: int32, Size: 4</span></span><br><span class="line"><span class="comment">Character: a</span></span><br><span class="line"><span class="comment">Unicode Code Point: U+0061</span></span><br><span class="line"><span class="comment">[U+0030 U+0062 U+2122]</span></span><br><span class="line"><span class="comment">[48 98 8482]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>整数类型有四种字面量形式：十进制形式（Decimal）、八进制形式（Octal）、十六进制形式（Hex）和二进制形式（Binary）；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 十六进制表示</span><br><span class="line">0xF</span><br><span class="line">0XF</span><br><span class="line"></span><br><span class="line">// 八进制表示（0o 或 0O 开头的八进制形式从 Go 1.13 才开始支持）</span><br><span class="line">017</span><br><span class="line">0o17</span><br><span class="line">0O17</span><br><span class="line"></span><br><span class="line">// 二进制表示</span><br><span class="line">0b1011</span><br><span class="line">0B1011</span><br><span class="line"></span><br><span class="line">// 十进制表示</span><br><span class="line">32</span><br></pre></td></tr></table></figure>
<h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><blockquote>
<p>在内存中，所有的浮点数都是使用 <a href="https://zh.wikipedia.org/wiki/IEEE_754">IEEE-754</a> 格式存储的。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Type</th>
<th>Size</th>
<th>Range</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>float32</code></td>
<td><code>4</code></td>
<td><code>正负1.18*10^-38~正负3.40*10^38</code></td>
<td>32 位的浮点型</td>
</tr>
<tr>
<td><code>float64</code></td>
<td><code>8</code></td>
<td><code>正负2.23*10^-308~正负1.80*10^308</code></td>
<td>64 位的浮点型</td>
</tr>
</tbody>
</table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f32 <span class="keyword">float32</span></span><br><span class="line"><span class="keyword">var</span> f64 <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> f1 <span class="keyword">float32</span></span><br><span class="line">  f1 = <span class="number">3.1415926</span></span><br><span class="line">  f2 := <span class="number">3.1415926</span> <span class="comment">// Default is float64</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;f32: %s type, %d bytes\n&quot;</span>, reflect.TypeOf(f32), unsafe.Sizeof(f32))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;f64: %s type, %d bytes\n\n&quot;</span>, reflect.TypeOf(f64), unsafe.Sizeof(f64))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;f1: %s type, %d bytes\n&quot;</span>, reflect.TypeOf(f1), unsafe.Sizeof(f1))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;f2: %s type, %d bytes\n\n&quot;</span>, reflect.TypeOf(f2), unsafe.Sizeof(f2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f32: float32 type, 4 bytes</span></span><br><span class="line"><span class="comment">f64: float64 type, 8 bytes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">f1: float32 type, 4 bytes</span></span><br><span class="line"><span class="comment">f2: float64 type, 8 bytes</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>浮点数类型值的字面量形式：一个浮点数的完整十进制字面量形式可能包含一个十进制整数部分、一个小数点、一个十进制小数部分和一个以 10 为底数的整数指数部分。整数指数部分字母 <code>e</code> 或 <code>E</code> 带一个十进制的整数字面量组成（<code>xEn</code> 表示 <code>x</code> 乘以 <code>10^n</code>，而 <code>xE-n</code> 表示 <code>x</code> 除以 <code>10^n</code>）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.1234</span><br><span class="line">03.1415 // 3.1415</span><br><span class="line">.88</span><br><span class="line">99.</span><br><span class="line"></span><br><span class="line">1.23e2 // 123.0</span><br><span class="line">123E2 // 12300.0</span><br><span class="line">123.E+2 // 12300.0</span><br><span class="line">1e-1 // 0.1</span><br><span class="line">.1e0 // 0.1</span><br><span class="line">0010e-2 // 0.1</span><br><span class="line">0e+5 // 0.0</span><br></pre></td></tr></table></figure>
<p>一些合法的浮点数的十六进制字面量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x1p-2     // == 1.0/4 = 0.25</span><br><span class="line">0x2.p10    // == 2.0 * 1024 == 2048.0</span><br><span class="line">0x1.Fp+0   // == 1+15.0/16 == 1.9375</span><br><span class="line">0X.8p1     // == 8.0/16 * 2 == 1.0</span><br><span class="line">0X1FFFP-16 // == 0.1249847412109375</span><br></pre></td></tr></table></figure>
<h5 id="复数型"><a href="#复数型" class="headerlink" title="复数型"></a>复数型</h5><table>
<thead>
<tr>
<th>Type</th>
<th>Size</th>
<th>Range</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>complex64</code></td>
<td><code>8</code></td>
<td>N/A</td>
<td>64 位的复数型，由 float32 位的实部和虚部联合表示</td>
</tr>
<tr>
<td><code>complex128</code></td>
<td><code>16</code></td>
<td>N/A</td>
<td>128 位的复数型，由 float64 位的实部和虚部联合表示</td>
</tr>
</tbody>
</table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">3</span></span><br><span class="line">  <span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m <span class="keyword">float64</span> = <span class="number">3</span></span><br><span class="line">  <span class="keyword">var</span> n <span class="keyword">float64</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  c := <span class="built_in">complex</span>(a, b)</span><br><span class="line">  <span class="keyword">var</span> d <span class="keyword">complex64</span></span><br><span class="line">  d = <span class="number">4</span> + <span class="number">5i</span></span><br><span class="line"></span><br><span class="line">  p := <span class="built_in">complex</span>(m, n)</span><br><span class="line">  q := <span class="number">4</span> + <span class="number">5i</span> <span class="comment">// When don&#x27;t specify a type, the default type will be complex128</span></span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;c: %s type, %d bytes\n&quot;</span>, reflect.TypeOf(c), unsafe.Sizeof(c))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;d: %s type, %d bytes\n&quot;</span>, reflect.TypeOf(d), unsafe.Sizeof(d))</span><br><span class="line">  fmt.Println(c+d, c-d, c*d, c/d)</span><br><span class="line"></span><br><span class="line">  fmt.Println()</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;p: %s type, %d bytes\n&quot;</span>, reflect.TypeOf(p), unsafe.Sizeof(p))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;q: %s type, %d bytes\n&quot;</span>, reflect.TypeOf(q), unsafe.Sizeof(q))</span><br><span class="line">  fmt.Println(p+q, p-q, p*q, p/q)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c: complex64 type, 8 bytes</span></span><br><span class="line"><span class="comment">d: complex64 type, 8 bytes</span></span><br><span class="line"><span class="comment">(7+10i) (-1+0i) (-13+35i) (0.902439+0.12195122i)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">p: complex128 type, 16 bytes</span></span><br><span class="line"><span class="comment">q: complex128 type, 16 bytes</span></span><br><span class="line"><span class="comment">(7+10i) (-1+0i) (-13+35i) (0.902439024390244+0.12195121951219513i)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>复数虚部字面量形式：一个虚部值的字面量形式由一个浮点数字面量或者一个整数字面量和其后跟随的一个小写的字母 <code>i</code> 组成。 在 Go 1.13 之前，如果虚部中 <code>i</code> 前的部分为一个整数字面量，则其必须为并且总是被视为十进制形式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.23i</span><br><span class="line">1.i</span><br><span class="line">.23i</span><br><span class="line">123i</span><br><span class="line">0123i   // == 123i（兼容性使然。见下）</span><br><span class="line">1.23E2i // == 123i</span><br><span class="line">1e-1i</span><br><span class="line">011i   // == 11i（兼容性使然。见下）</span><br><span class="line">00011i // == 11i（兼容性使然。见下）</span><br><span class="line"></span><br><span class="line">// 下面这几行从 Go 1.13 开始才能编译通过</span><br><span class="line">0o11i    // == 9i</span><br><span class="line">0x11i    // == 17i</span><br><span class="line">0b11i    // == 3i</span><br><span class="line">0X.8p-0i // == 0.5i</span><br></pre></td></tr></table></figure>
<h5 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h5><div class="note info">
            <p><code>string</code> 的零值为 <code>&quot;&quot;</code>，即空字符串。</p>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  x := <span class="string">&quot;hello\nworld&quot;</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;x: %s\n&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">  y := <span class="string">`Hello\nWorld`</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;y: %s\n&quot;</span>, y)</span><br><span class="line"></span><br><span class="line">  s := <span class="string">&quot;¡Q™&quot;</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;s: %s\n&quot;</span>, s)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;s length is: %d\n&quot;</span>, <span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(c))</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(<span class="string">&quot;🚀&quot;</span> + <span class="string">&quot; &quot;</span> + <span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x: hello</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">y: Hello\nWorld</span></span><br><span class="line"><span class="comment">s: ¡Q™</span></span><br><span class="line"><span class="comment">s length is: 6</span></span><br><span class="line"><span class="comment">¡</span></span><br><span class="line"><span class="comment">Q</span></span><br><span class="line"><span class="comment">™</span></span><br><span class="line"><span class="comment">🚀 Hello World!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Go 字符串的字面量形式有两种：一种是解释型字面表示（Interpreted String Literal，双引号风格）。 另一种是直白字面表示（Raw String Literal，反引号风格）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 解释形式</span><br><span class="line"><span class="string">&quot;Hello World!\n&quot;</span></span><br><span class="line"></span><br><span class="line">// 直白形式</span><br><span class="line">`Hello World!`</span><br></pre></td></tr></table></figure>
<h3 id="组合类型"><a href="#组合类型" class="headerlink" title="组合类型"></a>组合类型</h3><h4 id="非引用类型"><a href="#非引用类型" class="headerlink" title="非引用类型"></a>非引用类型</h4><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> arr1 [<span class="number">2</span>]<span class="keyword">string</span></span><br><span class="line">  arr1[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">  arr1[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">  dump(<span class="string">&quot;arr1&quot;</span>, arr1)</span><br><span class="line"></span><br><span class="line">  arr2 := [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line">  dump(<span class="string">&quot;arr2&quot;</span>, arr2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dump</span><span class="params">(name <span class="keyword">string</span>, array [2]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%s: %v\n&quot;</span>, name, array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr1: [a b]</span></span><br><span class="line"><span class="comment">arr2: [Hello World]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> employee <span class="keyword">struct</span> &#123;</span><br><span class="line">  name   <span class="keyword">string</span></span><br><span class="line">  age    <span class="keyword">int</span></span><br><span class="line">  salary <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  e1 := employee&#123;<span class="string">&quot;John&quot;</span>, <span class="number">28</span>, <span class="number">12000.00</span>&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;e1: %v\n&quot;</span>, e1)</span><br><span class="line"></span><br><span class="line">  e2 := employee&#123;name: <span class="string">&quot;Jack&quot;</span>, age: <span class="number">26</span>, salary: <span class="number">8000.00</span>&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;e2: %v\n&quot;</span>, e2)</span><br><span class="line"></span><br><span class="line">  e3 := employee&#123;name: <span class="string">&quot;Pony&quot;</span>, age: <span class="number">27</span>&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;e3: %v\n&quot;</span>, e3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">e1: &#123;John 28 12000&#125;</span></span><br><span class="line"><span class="comment">e2: &#123;Jack 26 8000&#125;</span></span><br><span class="line"><span class="comment">e3: &#123;Pony 27 0&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>切片是动态大小的，数组是固定大小的，因此切片提供更灵活的接口。切片是引用类型，因为它在内部引用数组。它的内部表示通过三个字段：</p>
<ul>
<li>底层数组的地址；</li>
<li>切片的长度；</li>
<li>切片的容量；</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  s := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Slice: %v, Type: %s, Len: %d, Cap: %d\n&quot;</span>, s, reflect.TypeOf(s), <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line"></span><br><span class="line">  p := []<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Slice: %v, Type: %s, Len: %d, Cap: %d\n&quot;</span>, p, reflect.TypeOf(p), <span class="built_in">len</span>(p), <span class="built_in">cap</span>(s))</span><br><span class="line"></span><br><span class="line">  p = <span class="built_in">append</span>(p, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Slice: %v, Type: %s, Len: %d, Cap: %d\n&quot;</span>, p, reflect.TypeOf(p), <span class="built_in">len</span>(p), <span class="built_in">cap</span>(s))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> p &#123;</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Slice: [ ], Type: []string, Len: 2, Cap: 3</span></span><br><span class="line"><span class="comment">Slice: [a b c], Type: []string, Len: 3, Cap: 3</span></span><br><span class="line"><span class="comment">Slice: [a b c d], Type: []string, Len: 4, Cap: 3</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h5 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h5><div class="note info">
            <p><code>map</code> 的零值是 <code>nil</code>。</p>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> student <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type: %s, Value: %v\n&quot;</span>, reflect.TypeOf(student), student)</span><br><span class="line"></span><br><span class="line">  stu1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type: %s, Value: %v\n&quot;</span>, reflect.TypeOf(stu1), stu1)</span><br><span class="line"></span><br><span class="line">  stu2 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">&quot;John&quot;</span>: <span class="number">18</span>, <span class="string">&quot;Jack&quot;</span>: <span class="number">20</span>&#125;</span><br><span class="line">  stu2[<span class="string">&quot;Carl&quot;</span>] = <span class="number">28</span></span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;John age is %d\n&quot;</span>, stu2[<span class="string">&quot;John&quot;</span>])</span><br><span class="line">  <span class="built_in">delete</span>(stu2, <span class="string">&quot;Carl&quot;</span>)</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;\nPrint stu2 map:&quot;</span>)</span><br><span class="line">  fmt.Println(stu2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Type: map[string]interface &#123;&#125;, Value: map[]</span></span><br><span class="line"><span class="comment">Type: map[string]int, Value: map[]</span></span><br><span class="line"><span class="comment">John age is 18</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Print stu2 map:map[Jack:20 John:18]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h5 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h5><div class="note info">
            <p>通道提供 <code>Goroutine</code> 之间的同步和通信。你可以将其视为管道，<code>Goroutine</code> 可以发送值和接收值。操作 <code>&lt;-</code> 用于发送或接收，并指定数据流动方向的箭头方向。</p><p>两种类型的通道：</p><ul><li>无缓冲通道（Unbuffered Channel）：它没有任何容纳能力和值：<ul><li>除非有另一个 <code>Goroutine</code> 接收，否则发送在频道上是阻塞的；</li><li>接收是阻塞的，直到另一个 <code>Goroutine</code> 在一边去发送；</li></ul></li><li>带缓冲通道（Buffered Channel）：可以在此处指定缓冲区的大小：<ul><li>如果缓冲区已满，则仅发送阻塞的缓冲通道；</li><li>接收唯一的阻塞是通道的缓冲区是空的；</li></ul></li></ul>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// Creating a buffered channel of length 4</span></span><br><span class="line">  bufChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">4</span>)</span><br><span class="line">  bufChan &lt;- <span class="string">&quot;🚀 Hello &quot;</span></span><br><span class="line">  bufChan &lt;- <span class="string">&quot;World, &quot;</span></span><br><span class="line">  bufChan &lt;- <span class="string">&quot;Hello &quot;</span></span><br><span class="line">  bufChan &lt;- <span class="string">&quot;Go!\n&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">close</span>(bufChan)</span><br><span class="line">  <span class="keyword">for</span> ch := <span class="keyword">range</span> bufChan &#123;</span><br><span class="line">    fmt.Print(ch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Creating a unbuffered channel</span></span><br><span class="line">  unbufChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">  <span class="keyword">go</span> sendChan(unbufChan)</span><br><span class="line">  <span class="keyword">for</span> ch := <span class="keyword">range</span> unbufChan &#123;</span><br><span class="line">    fmt.Print(ch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendChan</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  ch &lt;- <span class="string">&quot;🚀 Hello &quot;</span></span><br><span class="line">  ch &lt;- <span class="string">&quot;World, &quot;</span></span><br><span class="line">  ch &lt;- <span class="string">&quot;Hello &quot;</span></span><br><span class="line">  ch &lt;- <span class="string">&quot;Go!&quot;</span></span><br><span class="line">  <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">🚀 Hello World, Hello Go!</span></span><br><span class="line"><span class="comment">🚀 Hello World, Hello Go!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  add := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(doExecute(add, <span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doExecute</span><span class="params">(fn <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">x</span>, <span class="title">y</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fn(x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> b *<span class="keyword">int</span></span><br><span class="line">  a := <span class="number">88</span></span><br><span class="line">  b = &amp;a</span><br><span class="line">  fmt.Printf(<span class="string">&quot;b: %v, *b: %v\n&quot;</span>, b, *b)</span><br><span class="line"></span><br><span class="line">  b = <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">  *b = <span class="number">99</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;b: %v, *b: %v\n&quot;</span>, b, *b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">b: 0xc0000ac008, *b: 88</span></span><br><span class="line"><span class="comment">b: 0xc0000ac018, *b: 99</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h4><div class="note info">
            <p><code>interface</code> 的零值是 <code>nil</code>。</p>
          </div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> shape <span class="keyword">interface</span> &#123;</span><br><span class="line">  area() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> square <span class="keyword">struct</span> &#123;</span><br><span class="line">  side <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> triangle <span class="keyword">struct</span> &#123;</span><br><span class="line">  bottom <span class="keyword">float64</span></span><br><span class="line">  height <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *square)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> s.side * s.side</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *triangle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (t.bottom * t.height) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> s shape</span><br><span class="line">  s = &amp;square&#123;side: <span class="number">4</span>&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Square area is %v\n&quot;</span>, s.area())</span><br><span class="line"></span><br><span class="line">  t := &amp;triangle&#123;bottom: <span class="number">10</span>, height: <span class="number">12</span>&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Triangle area is %v\n&quot;</span>, t.area())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Square area is 16</span></span><br><span class="line"><span class="comment">Triangle area is 60</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>空接口的特殊情况：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;go&quot;</span>, <span class="string">&quot;js&quot;</span>&#125;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">&quot;hello&quot;</span>, <span class="number">2</span>: <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line">  dump(<span class="string">&quot;🚀 Hello World, Hello Go!&quot;</span>)</span><br><span class="line">  dump(<span class="number">123456780</span>)</span><br><span class="line">  dump(<span class="literal">true</span>)</span><br><span class="line">  dump(a)</span><br><span class="line">  dump(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dump</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type: %T, Value: %v\n&quot;</span>, v, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Type: string, Value: 🚀 Hello World, Hello Go!</span></span><br><span class="line"><span class="comment">Type: int, Value: 123456780</span></span><br><span class="line"><span class="comment">Type: bool, Value: true</span></span><br><span class="line"><span class="comment">Type: [2]string, Value: [go js]</span></span><br><span class="line"><span class="comment">Type: map[int]string, Value: map[1:hello 2:world]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="数值类型运算符"><a href="#数值类型运算符" class="headerlink" title="数值类型运算符"></a>数值类型运算符</h2><ul>
<li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></li>
<li>比较运算符：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>&lt;</code></li>
<li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code></li>
<li>增减运算符：<code>++</code>、<code>--</code></li>
<li>按位运算符：<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&amp;^</code></li>
<li>赋值运算符：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code></li>
</ul>
<h2 id="运算符优化级"><a href="#运算符优化级" class="headerlink" title="运算符优化级"></a>运算符优化级</h2><table>
<thead>
<tr>
<th>Priority</th>
<th>Category</th>
<th>Operator</th>
<th>Associativity</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Postfix</td>
<td><code>() [] -&gt; . ++ --</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>2</td>
<td>Unary</td>
<td><code>+ - ! ~ ++ -- (type)* &amp; sizeof</code></td>
<td>Right to left</td>
</tr>
<tr>
<td>3</td>
<td>Multiplicative</td>
<td><code>* / %</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>4</td>
<td>Additive</td>
<td><code>+ -</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>5</td>
<td>Shift</td>
<td><code>&lt;&lt; &gt;&gt;</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>6</td>
<td>Relational</td>
<td><code>&lt; &lt;= &gt;= &gt;</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>7</td>
<td>Equality</td>
<td><code>== !=</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>8</td>
<td>Bitwise AND</td>
<td><code>&amp;</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>9</td>
<td>Bitwise XOR</td>
<td><code>^</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>10</td>
<td>Bitwise OR</td>
<td><code>⎮</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>11</td>
<td>Logical AND</td>
<td><code>&amp;&amp;</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>12</td>
<td>Logical OR</td>
<td><code>⎮⎮</code></td>
<td>Left to right</td>
</tr>
<tr>
<td>13</td>
<td>Assignment</td>
<td><code>= += -= *= /= %= = &gt;&gt;= &lt;&lt;= &amp;= ^= ⎮=</code></td>
<td>Right to right</td>
</tr>
<tr>
<td>14</td>
<td>Comma</td>
<td><code>,</code></td>
<td>Left to right</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 起步</title>
    <url>/2021/06/26/go-get-started/</url>
    <content><![CDATA[<p>🚀 Go 是互联网时代的 C 语言，此言非虚，但凡看看市场的招聘需求，不得不让人跃跃欲试，与其说是主动出击，倒不如说是裹挟前进。好吧，我表示学不动了。</p>
<span id="more"></span>
<ul>
<li><strong>Go 起步</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/">Go 数据类型</a></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/">Go 日期时间</a></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/">Go 随机数</a></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/">Go 单元测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/">Go 基准测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/">Go 其它测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/">Go 正确姿势</a></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/">Go 连接字符串</a></li>
</ul>
<blockquote>
<p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
</blockquote>
<p>Go 是有表现力的、简洁的、干净的和高效的。它的并发机制使编写程序更容易，以最大限度地利用多核和联网机器，而其新颖的类型系统使程序构造灵活和模块化。Go 可以快速编译成机器码，同时还具有垃圾收集的便利和运行时反射的强大功能。它是一种快速、静态类型的编译语言，感觉就像一种动态类型的解释语言。</p>
<p>Go 有很多特性，有一些是独特的，有一些是借鉴其它编程语言的：</p>
<ul>
<li>内置并发编程支持：<ul>
<li>使用协程（Goroutine）做为基本的计算单元。轻松地创建协和；</li>
<li>使用通道（Channel）来实现协程间的同步和通信；</li>
</ul>
</li>
<li>内置了映射（Map）和切片（Slice）类型；</li>
<li>支持多态（Polymorphism）；</li>
<li>使用接口（Interface）来实现装盒（Value Boxing）和反射（Reflection）；</li>
<li>支持指针（Pointer）；</li>
<li>支持函数闭包（Closure）；</li>
<li>支持方法（Method）；</li>
<li>支持延迟函数调用（Defer）；</li>
<li>支持类型内嵌（Type Embeding）；</li>
<li>支持类型推断（Type Deduction or Type Inference）；</li>
<li>内存安全；</li>
<li>自动垃圾回收；</li>
<li>良好的代码跨平台；</li>
<li>比较简洁的语法；</li>
<li>比较齐全的标准库；</li>
<li>活跃和快速响应的社区，<a href="https://github.com/avelino/awesome-go">社区三方包和应用</a></li>
<li>还有一个统一的称号 <code>gopher - [&#39;ɡoʊfə]</code>，即 <strong>地鼠</strong>，尽管其它语言也有类似的；</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://golang.org/doc/install">Go installer</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 通过 brew 命令安装 Go</span><br><span class="line">&gt; brew install go</span><br><span class="line"></span><br><span class="line">// 验证已经安装的 Go 版本</span><br><span class="line">&gt; go version</span><br><span class="line">go version go1.17.2 darwin/arm64</span><br></pre></td></tr></table></figure>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>Go 语言内置的所有命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Go is a tool <span class="keyword">for</span> managing Go <span class="built_in">source</span> code.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">	go &lt;<span class="built_in">command</span>&gt; [arguments]</span><br><span class="line"></span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">	bug         start a bug report</span><br><span class="line">	build       compile packages and dependencies</span><br><span class="line">	clean       remove object files and cached files</span><br><span class="line">	doc         show documentation <span class="keyword">for</span> package or symbol</span><br><span class="line">	env         <span class="built_in">print</span> Go environment information</span><br><span class="line">	fix         update packages to use new APIs</span><br><span class="line">	fmt         gofmt (reformat) package sources</span><br><span class="line">	generate    generate Go files by processing <span class="built_in">source</span></span><br><span class="line">	get         add dependencies to current module and install them</span><br><span class="line">	install     compile and install packages and dependencies</span><br><span class="line">	list        list packages or modules</span><br><span class="line">	mod         module maintenance</span><br><span class="line">	run         compile and run Go program</span><br><span class="line">	<span class="built_in">test</span>        <span class="built_in">test</span> packages</span><br><span class="line">	tool        run specified go tool</span><br><span class="line">	version     <span class="built_in">print</span> Go version</span><br><span class="line">	vet         report likely mistakes <span class="keyword">in</span> packages</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;go help &lt;command&gt;&quot;</span> <span class="keyword">for</span> more information about a <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Additional <span class="built_in">help</span> topics:</span><br><span class="line"></span><br><span class="line">	buildconstraint build constraints</span><br><span class="line">	buildmode       build modes</span><br><span class="line">	c               calling between Go and C</span><br><span class="line">	cache           build and <span class="built_in">test</span> caching</span><br><span class="line">	environment     environment variables</span><br><span class="line">	filetype        file types</span><br><span class="line">	go.mod          the go.mod file</span><br><span class="line">	gopath          GOPATH environment variable</span><br><span class="line">	gopath-get      legacy GOPATH go get</span><br><span class="line">	goproxy         module proxy protocol</span><br><span class="line">	importpath      import path syntax</span><br><span class="line">	modules         modules, module versions, and more</span><br><span class="line">	module-get      module-aware go get</span><br><span class="line">	module-auth     module authentication using go.sum</span><br><span class="line">	packages        package lists and patterns</span><br><span class="line">	private         configuration <span class="keyword">for</span> downloading non-public code</span><br><span class="line">	testflag        testing flags</span><br><span class="line">	testfunc        testing <span class="built_in">functions</span></span><br><span class="line">	vcs             controlling version control with GOVCS</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;go help &lt;topic&gt;&quot;</span> <span class="keyword">for</span> more information about that topic.</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>配置 Go PATH 路径：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 打开 .zshrc 或者 .bashrc，之所以这样设置是因为本人不喜欢 go 目录直接设置到 <span class="variable">$HOME</span> 下，仅此而已</span><br><span class="line">&gt; vim ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">&quot;<span class="variable">$HOME</span>/Codes/go&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置 Go ENV 环境变量：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 开启 GO111MODULE</span><br><span class="line">&gt; go env -w GO111MODULE=on</span><br><span class="line"></span><br><span class="line">// 配置代理，仅限大陆地区</span><br><span class="line">&gt; go env -w GOPROXY=https://goproxy.cn,https://goproxy.io,direct</span><br><span class="line"></span><br><span class="line">// 查看环境变量</span><br><span class="line">&gt; go evn</span><br><span class="line">GO111MODULE=<span class="string">&quot;on&quot;</span></span><br><span class="line">GOARCH=<span class="string">&quot;arm64&quot;</span></span><br><span class="line">GOBIN=<span class="string">&quot;&quot;</span></span><br><span class="line">GOCACHE=<span class="string">&quot;/Users/xxx/Library/Caches/go-build&quot;</span></span><br><span class="line">GOENV=<span class="string">&quot;/Users/xxx/Library/Application Support/go/env&quot;</span></span><br><span class="line">GOEXE=<span class="string">&quot;&quot;</span></span><br><span class="line">GOEXPERIMENT=<span class="string">&quot;&quot;</span></span><br><span class="line">GOFLAGS=<span class="string">&quot;&quot;</span></span><br><span class="line">GOHOSTARCH=<span class="string">&quot;arm64&quot;</span></span><br><span class="line">GOHOSTOS=<span class="string">&quot;darwin&quot;</span></span><br><span class="line">GOINSECURE=<span class="string">&quot;&quot;</span></span><br><span class="line">GOMODCACHE=<span class="string">&quot;/Users/xxx/Codes/go/pkg/mod&quot;</span></span><br><span class="line">GONOPROXY=<span class="string">&quot;&quot;</span></span><br><span class="line">GONOSUMDB=<span class="string">&quot;&quot;</span></span><br><span class="line">GOOS=<span class="string">&quot;darwin&quot;</span></span><br><span class="line">GOPATH=<span class="string">&quot;/Users/xxx/Codes/go&quot;</span></span><br><span class="line">GOPRIVATE=<span class="string">&quot;&quot;</span></span><br><span class="line">GOPROXY=<span class="string">&quot;https://proxy.golang.org,direct&quot;</span></span><br><span class="line">GOROOT=<span class="string">&quot;/opt/homebrew/Cellar/go/1.17.2/libexec&quot;</span></span><br><span class="line">GOSUMDB=<span class="string">&quot;sum.golang.org&quot;</span></span><br><span class="line">GOTMPDIR=<span class="string">&quot;&quot;</span></span><br><span class="line">GOTOOLDIR=<span class="string">&quot;/opt/homebrew/Cellar/go/1.17.2/libexec/pkg/tool/darwin_arm64&quot;</span></span><br><span class="line">GOVCS=<span class="string">&quot;&quot;</span></span><br><span class="line">GOVERSION=<span class="string">&quot;go1.17.2&quot;</span></span><br><span class="line">GCCGO=<span class="string">&quot;gccgo&quot;</span></span><br><span class="line">AR=<span class="string">&quot;ar&quot;</span></span><br><span class="line">CC=<span class="string">&quot;clang&quot;</span></span><br><span class="line">CXX=<span class="string">&quot;clang++&quot;</span></span><br><span class="line">CGO_ENABLED=<span class="string">&quot;1&quot;</span></span><br><span class="line">GOMOD=<span class="string">&quot;/dev/null&quot;</span></span><br><span class="line">CGO_CFLAGS=<span class="string">&quot;-g -O2&quot;</span></span><br><span class="line">CGO_CPPFLAGS=<span class="string">&quot;&quot;</span></span><br><span class="line">CGO_CXXFLAGS=<span class="string">&quot;-g -O2&quot;</span></span><br><span class="line">CGO_FFLAGS=<span class="string">&quot;-g -O2&quot;</span></span><br><span class="line">CGO_LDFLAGS=<span class="string">&quot;-g -O2&quot;</span></span><br><span class="line">PKG_CONFIG=<span class="string">&quot;pkg-config&quot;</span></span><br><span class="line">GOGCCFLAGS=<span class="string">&quot;-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/nk/dtkbhx993b57y5kt49l4qsb40000gn/T/go-build1748431349=/tmp/go-build -gno-record-gcc-switches -fno-common&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>切换到某个目录：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to</span><br></pre></td></tr></table></figure>
<ul>
<li>创建 Go 的源代码目录：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; mkdir hello</span><br><span class="line">&gt; <span class="built_in">cd</span> hello</span><br></pre></td></tr></table></figure>
<ul>
<li>启用依赖管理：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go mod init github.com/xxx/hello/</span><br><span class="line">go: creating new go.mod: module github.com/xxx/hello</span><br></pre></td></tr></table></figure>
<ul>
<li>创建程序文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; touch main.go</span><br><span class="line">&gt; vim main.go</span><br></pre></td></tr></table></figure>
<ul>
<li>编写简单程序：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello World, Hello Go!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编译并运行程序：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go build -o main ./main.go</span><br><span class="line">&gt; go run .</span><br><span class="line">或者</span><br><span class="line">&gt; go run main.go</span><br><span class="line">Hello World, Hello Go!</span><br></pre></td></tr></table></figure>
<p>至此，一个 <code>Hello World</code> 的 Go 程序已经跑起来了！</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li>在执行构建前自动分析源码中的依赖变化，识别新增依赖项并下载：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go mod tidy</span><br></pre></td></tr></table></figure>
<ul>
<li>查询发布版本：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go list -m -versions github.com/sirupsen/logrus</span><br><span class="line">github.com/sirupsen/logrus v0.1.0 v0.1.1 v0.2.0 v0.3.0 v0.4.0 v0.4.1 v0.5.0 v0.5.1 v0.6.0 v0.6.1 v0.6.2 v0.6.3 v0.6.4 v0.6.5 v0.6.6 v0.7.0 v0.7.1 v0.7.2 v0.7.3 v0.8.0 v0.8.1 v0.8.2 v0.8.3 v0.8.4 v0.8.5 v0.8.6 v0.8.7 v0.9.0 v0.10.0 v0.11.0 v0.11.1 v0.11.2 v0.11.3 v0.11.4 v0.11.5 v1.0.0 v1.0.1 v1.0.3 v1.0.4 v1.0.5 v1.0.6 v1.1.0 v1.1.1 v1.2.0 v1.3.0 v1.4.0 v1.4.1 v1.4.2 v1.5.0 v1.6.0 v1.7.0 v1.7.1 v1.8.0 v1.8.1</span><br></pre></td></tr></table></figure>
<ul>
<li>安装最新版本：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure>
<ul>
<li>安装指定版本：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go get github.com/sirupsen/logrus@v1.7.0</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>go mod edit</code> 指定版本（假如要修改多个包版本）并用 <code>go mod tidy</code> 批量更新：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go mod edit -require=github.com/sirupsen/logrus@v1.7.0</span><br><span class="line">&gt; go mod tidy</span><br></pre></td></tr></table></figure>
<ul>
<li>查询当前项目的所有依赖：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go list -m all</span><br></pre></td></tr></table></figure>
<ul>
<li>项目建立 <code>vendor</code> 依赖目录，如果基于 <code>vendor</code> 构建，需要在 <code>go build</code> 后面加上 <code>-mod=vendor</code> 参数：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; go mod vendor</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 其它测试</title>
    <url>/2021/07/22/go-other-test/</url>
    <content><![CDATA[<p>Go 的 testing 包除了测试，还提供了运行并验证示例的功能。一方面是文档的效果，是关于某个功能的使用例子；另一方面，可以被当做测试运行。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/">Go 起步</a></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/">Go 数据类型</a></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/">Go 日期时间</a></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/">Go 随机数</a></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/">Go 单元测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/">Go 基准测试</a></li>
<li><strong>Go 其它测试</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/">Go 正确姿势</a></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/">Go 连接字符串</a></li>
</ul>
<h2 id="示例测试"><a href="#示例测试" class="headerlink" title="示例测试"></a>示例测试</h2><h3 id="示例测试函数格式"><a href="#示例测试函数格式" class="headerlink" title="示例测试函数格式"></a>示例测试函数格式</h3><p>Go 语言通过大量的命名约定来简化工具的复杂度，规范代码的风格。对示例函数的命名有如下约定：</p>
<ul>
<li>包级别的示例函数，直接命名为：<code>func Example() &#123; ... &#125;</code>；</li>
<li>函数 <code>F</code> 的示例，命名为：<code>func ExampleF() &#123; ... &#125;</code>；</li>
<li>类型 <code>T</code> 的示例，命名为：<code>func ExampleT() &#123; ... &#125;</code>；</li>
<li>类型 <code>T</code> 上的方法 <code>M</code> 的示例，命名为：<code>func ExampleT_M() &#123; ... &#125;</code>；</li>
</ul>
<p>有时，我们想要给 <code>包/类型/函数/方法</code> 提供多个示例，可以通过在示例函数名称后附加一个不同的后缀来实现，但这种后缀必须以小写字母开头，如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example_suffix</span><span class="params">()</span></span>    &#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleF_suffix</span><span class="params">()</span></span>   &#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleT_suffix</span><span class="params">()</span></span>   &#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleT_M_suffix</span><span class="params">()</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例测试实例"><a href="#示例测试实例" class="headerlink" title="示例测试实例"></a>示例测试实例</h3><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleToUpper</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(strings.ToUpper(<span class="string">&quot;foo&quot;</span>))</span><br><span class="line">  <span class="comment">// Output: FOO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleToUpperFail</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(strings.ToUpper(<span class="string">&quot;bar&quot;</span>))</span><br><span class="line">  <span class="comment">// Output: Bar</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^(ExampleToUpper|ExampleToUpperFail)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   ExampleToUpper</span><br><span class="line">--- PASS: ExampleToUpper (0.00s)</span><br><span class="line">=== RUN   ExampleToUpperFail</span><br><span class="line">--- FAIL: ExampleToUpperFail (0.00s)</span><br><span class="line">got:</span><br><span class="line">BAR</span><br><span class="line">want:</span><br><span class="line">Bar</span><br><span class="line">FAIL</span><br><span class="line">FAIL	example.com/hello	0.008s</span><br></pre></td></tr></table></figure>
<h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s: %d&quot;</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ByAge implements sort.Interface for []Person based on the Age field.</span></span><br><span class="line"><span class="keyword">type</span> SortByAge []Person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a SortByAge)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(a) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a SortByAge)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; a[i], a[j] = a[j], a[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a SortByAge)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> a[i].Age &lt; a[j].Age &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example</span><span class="params">()</span></span> &#123;</span><br><span class="line">  people := []Person&#123;</span><br><span class="line">    &#123;<span class="string">&quot;Jack&quot;</span>, <span class="number">31</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;John&quot;</span>, <span class="number">42</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Acme&quot;</span>, <span class="number">17</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Pony&quot;</span>, <span class="number">26</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Wise&quot;</span>, <span class="number">33</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(people)</span><br><span class="line">  sort.Sort(SortByAge(people))</span><br><span class="line">  fmt.Println(people)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Output:</span></span><br><span class="line">  <span class="comment">// [Jack: 31 John: 42 Acme: 17 Pony: 26 Wise: 33]</span></span><br><span class="line">  <span class="comment">// [Acme: 17 Pony: 26 Jack: 31 Wise: 33 John: 42]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   Example</span><br><span class="line">--- PASS: Example (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	0.007s</span><br></pre></td></tr></table></figure>
<h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;go/ast&quot;</span></span><br><span class="line">  <span class="string">&quot;go/parser&quot;</span></span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleAST</span><span class="params">()</span></span> &#123;</span><br><span class="line">  expr, err := parser.ParseExpr(<span class="string">&quot;9 / (2 + 1)&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">  ast.Print(<span class="literal">nil</span>, expr)</span><br><span class="line">  <span class="comment">// Output: 0  *ast.BinaryExpr &#123;</span></span><br><span class="line">  <span class="comment">//      1  .  X: *ast.BasicLit &#123;</span></span><br><span class="line">  <span class="comment">//      2  .  .  ValuePos: 1</span></span><br><span class="line">  <span class="comment">//      3  .  .  Kind: INT</span></span><br><span class="line">  <span class="comment">//      4  .  .  Value: &quot;9&quot;</span></span><br><span class="line">  <span class="comment">//      5  .  &#125;</span></span><br><span class="line">  <span class="comment">//      6  .  OpPos: 3</span></span><br><span class="line">  <span class="comment">//      7  .  Op: /</span></span><br><span class="line">  <span class="comment">//      8  .  Y: *ast.ParenExpr &#123;</span></span><br><span class="line">  <span class="comment">//      9  .  .  Lparen: 5</span></span><br><span class="line">  <span class="comment">//     10  .  .  X: *ast.BinaryExpr &#123;</span></span><br><span class="line">  <span class="comment">//     11  .  .  .  X: *ast.BasicLit &#123;</span></span><br><span class="line">  <span class="comment">//     12  .  .  .  .  ValuePos: 6</span></span><br><span class="line">  <span class="comment">//     13  .  .  .  .  Kind: INT</span></span><br><span class="line">  <span class="comment">//     14  .  .  .  .  Value: &quot;2&quot;</span></span><br><span class="line">  <span class="comment">//     15  .  .  .  &#125;</span></span><br><span class="line">  <span class="comment">//     16  .  .  .  OpPos: 8</span></span><br><span class="line">  <span class="comment">//     17  .  .  .  Op: +</span></span><br><span class="line">  <span class="comment">//     18  .  .  .  Y: *ast.BasicLit &#123;</span></span><br><span class="line">  <span class="comment">//     19  .  .  .  .  ValuePos: 10</span></span><br><span class="line">  <span class="comment">//     20  .  .  .  .  Kind: INT</span></span><br><span class="line">  <span class="comment">//     21  .  .  .  .  Value: &quot;1&quot;</span></span><br><span class="line">  <span class="comment">//     22  .  .  .  &#125;</span></span><br><span class="line">  <span class="comment">//     23  .  .  &#125;</span></span><br><span class="line">  <span class="comment">//     24  .  .  Rparen: 11</span></span><br><span class="line">  <span class="comment">//     25  .  &#125;</span></span><br><span class="line">  <span class="comment">//     26  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^ExampleAST$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   ExampleAST</span><br><span class="line">--- PASS: ExampleAST (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	(cached)</span><br></pre></td></tr></table></figure>
<h2 id="主函数测试"><a href="#主函数测试" class="headerlink" title="主函数测试"></a>主函数测试</h2><div class="note danger">
            <p>注意：在 <code>TestMain</code> 函数的最后，应该使用 <code>m.Run</code> 的返回值作为参数去调用 <code>os.Exit</code>。</p>
          </div>
<p>在写测试时，有时需要在测试之前或之后进行额外的设置（setup）或拆卸（teardown）；有时，测试还需要控制在主线程上运行的代码。为了支持这些需求，<code>testing</code> 包提供了 <code>TestMain</code> 函数（附上 <a href="https://github.com/golang/go/blob/master/src/net/http/main_test.go">官方 TestMain 使用姿势</a>）：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">  log.Println(<span class="string">&quot;Do stuff BEFORE the tests!&quot;</span>)</span><br><span class="line">  exit := m.Run()</span><br><span class="line">  log.Println(<span class="string">&quot;Do stuff AFTER the tests!&quot;</span>)</span><br><span class="line"></span><br><span class="line">  os.Exit(exit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestA</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  log.Println(<span class="string">&quot;TestA running&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestB</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  log.Println(<span class="string">&quot;TestB running&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^(TestMain|TestA|TestB)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">2021/07/22 20:07:25 Do stuff BEFORE the tests!</span><br><span class="line">=== RUN   TestA</span><br><span class="line">2021/07/22 20:07:25 TestA running</span><br><span class="line">--- PASS: TestA (0.00s)</span><br><span class="line">=== RUN   TestB</span><br><span class="line">2021/07/22 20:07:25 TestB running</span><br><span class="line">--- PASS: TestB (0.00s)</span><br><span class="line">PASS</span><br><span class="line">2021/07/22 20:07:25 Do stuff AFTER the tests!</span><br><span class="line">ok  	example.com/hello	(cached)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 正确姿势</title>
    <url>/2021/07/24/go-correct-posture/</url>
    <content><![CDATA[<p>🙏 在编写 Go 代码之时，我跟很多新手一样踩了不少坑，感觉非常有必要将那些踩过的坑记录下来以避免下次犯错。很多人说 Go 简单易学，上手容易，可惜我不是那些很多人中的一个，天资愚钝如此，我只能反复学习了。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/">Go 起步</a></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/">Go 数据类型</a></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/">Go 日期时间</a></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/">Go 随机数</a></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/">Go 单元测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/">Go 基准测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/">Go 其它测试</a></li>
<li><strong>Go 正确姿势</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/">Go 连接字符串</a></li>
</ul>
<h2 id="常见错误与纠正"><a href="#常见错误与纠正" class="headerlink" title="常见错误与纠正"></a>常见错误与纠正</h2><h3 id="assignment-to-entry-in-nil-map"><a href="#assignment-to-entry-in-nil-map" class="headerlink" title="assignment to entry in nil map"></a>assignment to entry in nil map</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">--- FAIL: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">panic: assignment to entry in nil map [recovered]</span></span><br><span class="line"><span class="comment">	panic: assignment to entry in nil map</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span></span><br><span class="line">  m[<span class="string">&quot;pi&quot;</span>] = <span class="number">3.1416</span></span><br><span class="line">  t.Log(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:39: map[pi:3.1416]</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.012s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span>)</span><br><span class="line">  m[<span class="string">&quot;pi&quot;</span>] = <span class="number">3.1416</span></span><br><span class="line">  t.Log(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="invalid-memory-address-or-nil-pointer-dereference"><a href="#invalid-memory-address-or-nil-pointer-dereference" class="headerlink" title="invalid memory address or nil pointer dereference"></a>invalid memory address or nil pointer dereference</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;math&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">  X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> math.Sqrt(p.X*p.X + p.Y*p.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">--- FAIL: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">panic: runtime error: invalid memory address or nil pointer dereference [recovered]</span></span><br><span class="line"><span class="comment">	panic: runtime error: invalid memory address or nil pointer dereference</span></span><br><span class="line"><span class="comment">[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x110a643]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> p *Point</span><br><span class="line">  t.Log(p.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:26: &amp;&#123;0 0&#125;</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:29: 0</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.009s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> p *Point = <span class="built_in">new</span>(Point)</span><br><span class="line">  t.Log(p)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> q Point <span class="comment">// has zero value Point&#123;X:0, Y:0&#125;</span></span><br><span class="line">  t.Log(q.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="array-won’t-change"><a href="#array-won’t-change" class="headerlink" title="array won’t change"></a>array won’t change</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">(a [2]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bar</span><span class="params">(a []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:20: [1 2]</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.008s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  a := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">  Foo(a)</span><br><span class="line">  t.Log(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:40: [8 2]</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.013s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">  Bar(a)</span><br><span class="line">  t.Log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="shadowed-variables"><a href="#shadowed-variables" class="headerlink" title="shadowed variables"></a>shadowed variables</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:20: 0</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.007s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  n := <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">    n := <span class="number">1</span></span><br><span class="line">    n++</span><br><span class="line">  &#125;</span><br><span class="line">  t.Log(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:36: 2</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	(cached)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  n := <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    n++</span><br><span class="line">  &#125;</span><br><span class="line">  t.Log(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>安装 <a href="https://pkg.go.dev/golang.org/x/tools#readme-download-install">Go Tools</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get -u golang.org/x/tools/...</span><br></pre></td></tr></table></figure>
<p>检测隐藏变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go vet -vettool=$(<span class="built_in">which</span> shadow) -strict</span><br><span class="line"><span class="comment"># example.com/hello</span></span><br><span class="line">./hello_test.go:17:3: declaration of <span class="string">&quot;n&quot;</span> shadows declaration at line 15</span><br></pre></td></tr></table></figure>
<h3 id="immutable-strings"><a href="#immutable-strings" class="headerlink" title="immutable strings"></a>immutable strings</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># example.com/hello [example.com/hello.test]</span></span><br><span class="line"><span class="comment">/Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:16:7: cannot assign to s[0] (strings are immutable)</span></span><br><span class="line"><span class="comment">FAIL	example.com/hello [build failed]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">  s[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span> <span class="comment">// IDE 会提示：cannot assign to s[0] (value of type byte)compilerUnassignableOperand</span></span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:29: Hello</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.007s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  buf := []<span class="keyword">rune</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  buf[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span></span><br><span class="line">  s := <span class="keyword">string</span>(buf)</span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="characters-add"><a href="#characters-add" class="headerlink" title="characters add"></a>characters add</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;strconv&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:13: Ta</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:14: 181</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.014s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Log(<span class="string">&quot;T&quot;</span> + <span class="string">&quot;a&quot;</span>)</span><br><span class="line">  t.Log(<span class="string">&#x27;T&#x27;</span> + <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/imajinyun/hello/hello_test.go:30: 84a</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/imajinyun/hello/hello_test.go:31: Ta</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.012s</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.012s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Log(strconv.Itoa(<span class="number">84</span>) + <span class="keyword">string</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">  t.Log(fmt.Sprintf(<span class="string">&quot;%c%c&quot;</span>, <span class="number">84</span>, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="trim-string"><a href="#trim-string" class="headerlink" title="trim string"></a>trim string</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:17: true</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18: true</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.009s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Log(<span class="string">&quot; hello world &quot;</span> == strings.TrimRight(<span class="string">&quot; hello world &quot;</span>, <span class="string">&quot;hello&quot;</span>))</span><br><span class="line">  t.Log(<span class="string">&quot;hello  world&quot;</span> == strings.TrimLeft(<span class="string">&quot;hello  world&quot;</span>, <span class="string">&quot;world&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:33: true</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:34: true</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:35: true</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:36: true</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.008s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Log(<span class="string">&quot;hello&quot;</span> == strings.TrimSpace(<span class="string">&quot;  hello  &quot;</span>))</span><br><span class="line">  t.Log(<span class="string">&quot;hello \t world&quot;</span> == strings.TrimSpace(<span class="string">&quot; \t hello \t world \t &quot;</span>))</span><br><span class="line">  t.Log(<span class="string">&quot; world&quot;</span> == strings.TrimPrefix(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello&quot;</span>))</span><br><span class="line">  t.Log(<span class="string">&quot;hello &quot;</span> == strings.TrimSuffix(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;world&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="elements-copy"><a href="#elements-copy" class="headerlink" title="elements copy"></a>elements copy</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18: dst: []</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	(cached)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> src, dst []<span class="keyword">int</span></span><br><span class="line">  src = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">  <span class="built_in">copy</span>(dst, src) <span class="comment">// Copy elements to dst from src.</span></span><br><span class="line">  t.Log(<span class="string">&quot;dst:&quot;</span>, dst)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:36: dst: [1 2 3] (copied 3 numbers)</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.008s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> src, dst []<span class="keyword">int</span></span><br><span class="line">  src = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">  dst = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(src))</span><br><span class="line">  n := <span class="built_in">copy</span>(dst, src)</span><br><span class="line">  t.Log(<span class="string">&quot;dst:&quot;</span>, dst, <span class="string">&quot;(copied&quot;</span>, n, <span class="string">&quot;numbers)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRight2Usage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:40: dst: [1 2 3]</span></span><br><span class="line"><span class="comment">--- PASS: TestRight2Usage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.016s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRight2Usage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> src, dst []<span class="keyword">int</span></span><br><span class="line">  src = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">  dst = <span class="built_in">append</span>(dst, src...)</span><br><span class="line">  t.Log(<span class="string">&quot;dst:&quot;</span>, dst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="can’t-change-entries-in-range-loop"><a href="#can’t-change-entries-in-range-loop" class="headerlink" title="can’t change entries in range loop"></a>can’t change entries in range loop</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:21: [1 1 1]</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.011s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">  <span class="keyword">for</span> _, n := <span class="keyword">range</span> s &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:36: [2 2 2]</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.013s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">    s[i] += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  t.Log(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="iteration-variable-doesn’t-see-change-in-range-loop"><a href="#iteration-variable-doesn’t-see-change-in-range-loop" class="headerlink" title="iteration variable doesn’t see change in range loop"></a>iteration variable doesn’t see change in range loop</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">x = 0</span></span><br><span class="line"><span class="comment">x = 0</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:21: [0 8]</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.013s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">  <span class="keyword">for</span> _, x := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;x =&quot;</span>, x)</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">8</span></span><br><span class="line">  &#125;</span><br><span class="line">  t.Log(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">x = 0</span></span><br><span class="line"><span class="comment">x = 8</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:39: [0 8]</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.009s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">  <span class="keyword">for</span> _, x := <span class="keyword">range</span> a[:] &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;x =&quot;</span>, x)</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">8</span></span><br><span class="line">  &#125;</span><br><span class="line">  t.Log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="iteration-variables-and-closures"><a href="#iteration-variables-and-closures" class="headerlink" title="iteration variables and closures"></a>iteration variables and closures</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;sync&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestWrongUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:23: 5</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:23: 5</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:23: 5</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:23: 5</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:23: 5</span></span><br><span class="line"><span class="comment">--- PASS: TestWrongUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.013s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">  <span class="keyword">var</span> n <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line">  wg.Add(n)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      t.Log(i)</span><br><span class="line">      wg.Done()</span><br><span class="line">    &#125;()</span><br><span class="line">  &#125;</span><br><span class="line">  wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRightUsage</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:47: 4</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:47: 1</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:47: 0</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:47: 3</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:47: 2</span></span><br><span class="line"><span class="comment">--- PASS: TestRightUsage (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.009s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRightUsage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">  <span class="keyword">var</span> n <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line">  wg.Add(n)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">    x := i <span class="comment">// Create a unique variable for each closure.</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      t.Log(x)</span><br><span class="line">      wg.Done()</span><br><span class="line">    &#125;()</span><br><span class="line">  &#125;</span><br><span class="line">  wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="常用的一些写法"><a href="#常用的一些写法" class="headerlink" title="常用的一些写法"></a>常用的一些写法</h2><h3 id="检查字典中是否存在指定键"><a href="#检查字典中是否存在指定键" class="headerlink" title="检查字典中是否存在指定键"></a>检查字典中是否存在指定键</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestIfKeyExistInMap</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:12: value: 100</span></span><br><span class="line"><span class="comment">--- PASS: TestIfKeyExistInMap (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.009s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIfKeyExistInMap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">&quot;foo&quot;</span>: <span class="number">100</span>, <span class="string">&quot;bar&quot;</span>: <span class="number">200</span>&#125;</span><br><span class="line">  value, ok := dict[<span class="string">&quot;foo&quot;</span>]</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    t.Log(<span class="string">&quot;value:&quot;</span>, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    t.Log(<span class="string">&quot;Key not found&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="连接两个切片"><a href="#连接两个切片" class="headerlink" title="连接两个切片"></a>连接两个切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestCombineTwoSlice</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:17: [1 2 3 4]</span></span><br><span class="line"><span class="comment">--- PASS: TestCombineTwoSlice (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.007s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCombineTwoSlice</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  slice := <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>&#125;...)</span><br><span class="line">  t.Log(slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="将-byte-转换为-string"><a href="#将-byte-转换为-string" class="headerlink" title="将 byte 转换为 string"></a>将 byte 转换为 string</h3><p>标准转换：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestByteToStr</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:16:</span></span><br><span class="line"><span class="comment">        [72 101 108 108 111 32 87 111 114 108 100]</span></span><br><span class="line"><span class="comment">        Hello World</span></span><br><span class="line"><span class="comment">--- PASS: TestByteToStr (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.007s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestByteToStr</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  b := []<span class="keyword">byte</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">  t.Logf(<span class="string">&quot;\n%v\n%v&quot;</span>, b, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>强制转换：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestByteToString</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:19:</span></span><br><span class="line"><span class="comment">        [72 101 108 108 111 32 87 111 114 108 100]</span></span><br><span class="line"><span class="comment">        &quot;Hello World&quot;</span></span><br><span class="line"><span class="comment">        Hello World</span></span><br><span class="line"><span class="comment">--- PASS: TestByteToString (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.008s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestByteToString</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  b := []<span class="keyword">byte</span>&#123;<span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>&#125;</span><br><span class="line">  s := byteToString(b)</span><br><span class="line">  t.Logf(<span class="string">&quot;\n%v\n%#v\n%v&quot;</span>, b, s, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">byteToString</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(b))</span><br><span class="line">  <span class="keyword">for</span> i, c := <span class="keyword">range</span> b &#123;</span><br><span class="line">    data[i] = c</span><br><span class="line">  &#125;</span><br><span class="line">  hdr := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">  hdr.Data = <span class="keyword">uintptr</span>(unsafe.Pointer(&amp;data[<span class="number">0</span>]))</span><br><span class="line">  hdr.Len = <span class="built_in">len</span>(b)</span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="将-string-转换为-byte"><a href="#将-string-转换为-byte" class="headerlink" title="将 string 转换为 byte"></a>将 string 转换为 byte</h3><p>标准转换：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringToByte</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18:</span></span><br><span class="line"><span class="comment">        Hello World</span></span><br><span class="line"><span class="comment">        [72 101 108 108 111 32 87 111 114 108 100]</span></span><br><span class="line"><span class="comment">--- PASS: TestStringToByte (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.008s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringToByte</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">  t.Logf(<span class="string">&quot;\n%v\n%v&quot;</span>, s, []<span class="keyword">byte</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>强制转换：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringToByte</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:19:</span></span><br><span class="line"><span class="comment">        Hello World</span></span><br><span class="line"><span class="comment">        [72 101 108 108 111 32 87 111 114 108 100]</span></span><br><span class="line"><span class="comment">--- PASS: TestStringToByte (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.012s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringToByte</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">  b := stringToByte(s)</span><br><span class="line">  t.Logf(<span class="string">&quot;\n%v\n%v\n&quot;</span>, s, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringToByte</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">  b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(s))</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">    c := s[i]</span><br><span class="line">    b[i] = c</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="将-rune-转换为-string"><a href="#将-rune-转换为-string" class="headerlink" title="将 rune 转换为 string"></a>将 rune 转换为 string</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestRuneToString</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:8:</span></span><br><span class="line"><span class="comment">        r = [72 101 108 108 111 32 87 111 114 108 100 33]</span></span><br><span class="line"><span class="comment">        r = [U+0048 U+0065 U+006C U+006C U+006F U+0020 U+0057 U+006F U+0072 U+006C U+0064 U+0021]</span></span><br><span class="line"><span class="comment">        s = Hello World!</span></span><br><span class="line"><span class="comment">--- PASS: TestRuneToString (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRuneToString</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  r := []<span class="keyword">rune</span>&#123;<span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">33</span>&#125;</span><br><span class="line">  s := <span class="keyword">string</span>(r)</span><br><span class="line">  t.Logf(<span class="string">&quot;\nr = %v\nr = %U\ns = %v&quot;</span>, r, r, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="将-string-转换为-rune"><a href="#将-string-转换为-rune" class="headerlink" title="将 string 转换为 rune"></a>将 string 转换为 rune</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestStringToRune</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:14:</span></span><br><span class="line"><span class="comment">        s = Hello World!</span></span><br><span class="line"><span class="comment">        r = [72 101 108 108 111 32 87 111 114 108 100 33]</span></span><br><span class="line"><span class="comment">        r = [U+0048 U+0065 U+006C U+006C U+006F U+0020 U+0057 U+006F U+0072 U+006C U+0064 U+0021]</span></span><br><span class="line"><span class="comment">--- PASS: TestStringToRune (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello	0.016s</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringToRune</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">  r := []<span class="keyword">rune</span>(s)</span><br><span class="line">  t.Logf(<span class="string">&quot;\ns = %v\nr = %v\nr = %U&quot;</span>, s, r, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构体比较"><a href="#结构体比较" class="headerlink" title="结构体比较"></a>结构体比较</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Devloper <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Lang <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestCompareStruct</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:18: false</span></span><br><span class="line"><span class="comment">    /Users/xxx/Codes/go/src/github.com/xxx/hello/hello_test.go:19: true</span></span><br><span class="line"><span class="comment">--- PASS: TestCompareStruct (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok  	example.com/hello</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCompareStruct</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  d1 := Devloper&#123;<span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="number">26</span>&#125;</span><br><span class="line">  d2 := Devloper&#123;<span class="string">&quot;Bar&quot;</span>, <span class="string">&quot;Go&quot;</span>, <span class="number">28</span>&#125;</span><br><span class="line">  d3 := Devloper&#123;<span class="string">&quot;Bar&quot;</span>, <span class="string">&quot;Go&quot;</span>, <span class="number">28</span>&#125;</span><br><span class="line">  t.Log(reflect.DeepEqual(d1, d2))</span><br><span class="line">  t.Log(reflect.DeepEqual(d2, d3))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 随机数</title>
    <url>/2021/07/14/go-random-number/</url>
    <content><![CDATA[<p>🥳 在 Go 中的生成的随机数根本就不是随机的，叫伪随机数。它们是用固定的决定论算法计算的。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/">Go 起步</a></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/">Go 数据类型</a></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/">Go 日期时间</a></li>
<li><strong>Go 随机数</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/">Go 单元测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/">Go 基准测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/">Go 其它测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/">Go 正确姿势</a></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/">Go 连接字符串</a></li>
</ul>
<h2 id="生成伪随机数"><a href="#生成伪随机数" class="headerlink" title="生成伪随机数"></a>生成伪随机数</h2><div class="note danger">
            <p>如果初始化时没有调用 <code>rand.Seed</code> 方法，你每次运行程序都会得到相同的数字序列。</p>
          </div>
<p>使用 <code>math/rand</code> 包中的 <code>rand.Seed</code> 和 <code>rand.Int63</code> 方法去生成 <code>int64</code> 类型的的非负伪随机数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">n := rand.Int63() <span class="comment">// 4394549077322118751</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>rand.Float64</code> 生成一个浮点伪随机数 <code>x</code>，其中 <code>0 &lt;= x &lt;= 1</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">n := rand.Float64() <span class="comment">// 0.41473976189141065</span></span><br></pre></td></tr></table></figure>
<p><code>math/rand</code> 包中的函数都使用单个随机源：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">generator := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">x := generator.Int63() <span class="comment">// 1449278222774694185</span></span><br><span class="line">y := generator.Float64() <span class="comment">// 0.947309190343705</span></span><br></pre></td></tr></table></figure>
<h2 id="生成指定范围随机数"><a href="#生成指定范围随机数" class="headerlink" title="生成指定范围随机数"></a>生成指定范围随机数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a &lt;= n &lt;= b</span></span><br><span class="line">a, b := <span class="number">0</span>, <span class="number">100</span></span><br><span class="line">generator := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">n := a + generator.Intn(b-a+<span class="number">1</span>) <span class="comment">// 0 &lt;= n &lt;= 100</span></span><br></pre></td></tr></table></figure>
<h2 id="生成指定范围随机字符"><a href="#生成指定范围随机字符" class="headerlink" title="生成指定范围随机字符"></a>生成指定范围随机字符</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;a&#x27; &lt;= n &lt;= &#x27;z&#x27;</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  x = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  y = <span class="string">&#x27;z&#x27;</span></span><br><span class="line">)</span><br><span class="line">generator := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">n := x + <span class="keyword">rune</span>(generator.Intn(<span class="keyword">int</span>(y)-<span class="keyword">int</span>(x)+<span class="number">1</span>)) <span class="comment">// 97 &lt;= n &lt;= 122</span></span><br><span class="line">m := <span class="string">&#x27;a&#x27;</span> + <span class="keyword">rune</span>(generator.Intn(<span class="string">&#x27;z&#x27;</span>-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>))     <span class="comment">// 92 &lt;= m &lt;= 122</span></span><br></pre></td></tr></table></figure>
<h2 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Println(randomString(<span class="number">10</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomString</span><span class="params">(size <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  bytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, size)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">    bytes[i] = <span class="keyword">byte</span>(randInt(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randInt</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> min + rand.Intn(max-min+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tcjrkupnct</span></span><br><span class="line"><span class="comment">twdvwjihfb</span></span><br><span class="line"><span class="comment">lkemigoqne</span></span><br><span class="line"><span class="comment">vqxyasbrqx</span></span><br><span class="line"><span class="comment">iwdncpibxg</span></span><br><span class="line"><span class="comment">ugtsutgmjt</span></span><br><span class="line"><span class="comment">namoonwvyh</span></span><br><span class="line"><span class="comment">mcxnbbjfgf</span></span><br><span class="line"><span class="comment">ufradkxsjq</span></span><br><span class="line"><span class="comment">blnweycudh</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="从切片中获取随机元素"><a href="#从切片中获取随机元素" class="headerlink" title="从切片中获取随机元素"></a>从切片中获取随机元素</h2><p>实例一：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  runes := []<span class="keyword">rune</span>(<span class="string">&quot;A™B£C¢&quot;</span>)</span><br><span class="line">  char := runes[rand.Intn(<span class="built_in">len</span>(runes))]</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="keyword">string</span>(char)) <span class="comment">// £</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例二：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  slices := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">  slices = <span class="built_in">append</span>(slices, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Microsoft&quot;</span>, <span class="string">&quot;Amazon&quot;</span>, <span class="string">&quot;Facebook&quot;</span>)</span><br><span class="line">  element := slices[rand.Intn(<span class="built_in">len</span>(slices))]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get random element from slices: Amazon</span></span><br><span class="line">  fmt.Println(fmt.Sprintf(<span class="string">&quot;Get random element from slices: %v&quot;</span>, element))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成安全的随机数"><a href="#生成安全的随机数" class="headerlink" title="生成安全的随机数"></a>生成安全的随机数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">randomCrypto, _ := rand.Prime(rand.Reader, <span class="number">128</span>)</span><br><span class="line">fmt.Println(randomCrypto) <span class="comment">// 332362372159551722027736589221875117617</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 日期时间</title>
    <url>/2021/07/11/go-date-time/</url>
    <content><![CDATA[<p>🕢 Go 中的日期时间使用布局来格式化，通过布局来完成日期时间的格式化和解析。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/"><code>Go 起步</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/"><code>Go 数据类型</code></a></li>
<li><strong>Go 日期时间</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/"><code>Go 随机数</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/16/go-unit-test/"><code>Go 单元测试</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/"><code>Go 基准测试</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/"><code>Go 其它测试</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/"><code>Go 正确姿势</code></a></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/"><code>Go 连接字符串</code></a></li>
</ul>
<h1 id="当前日期时间"><a href="#当前日期时间" class="headerlink" title="当前日期时间"></a>当前日期时间</h1><h2 id="标准日期时间格式"><a href="#标准日期时间格式" class="headerlink" title="标准日期时间格式"></a>标准日期时间格式</h2><p>布局格式：</p>
<table>
<thead>
<tr>
<th>Layout</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>January 2, 2006</code></td>
<td>Date</td>
</tr>
<tr>
<td><code>01/02/06</code></td>
<td>Date</td>
</tr>
<tr>
<td><code>Jan-02-06</code></td>
<td>Date</td>
</tr>
<tr>
<td><code>15:04:05</code></td>
<td>Time</td>
</tr>
<tr>
<td><code>3:04:05 PM</code></td>
<td>Time</td>
</tr>
<tr>
<td><code>Jan _2 15:04:05</code></td>
<td>Timestamp</td>
</tr>
<tr>
<td><code>Jan _2 15:04:05.000000</code></td>
<td>With microseconds</td>
</tr>
<tr>
<td><code>2006-01-02T15:04:05-0700</code></td>
<td><a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>(<a href="https://www.ietf.org/rfc/rfc3339.txt">RFC 3339</a>)</td>
</tr>
<tr>
<td><code>2006-01-02</code></td>
<td><a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>(<a href="https://www.ietf.org/rfc/rfc3339.txt">RFC 3339</a>)</td>
</tr>
<tr>
<td><code>15:04:05</code></td>
<td><a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>(<a href="https://www.ietf.org/rfc/rfc3339.txt">RFC 3339</a>)</td>
</tr>
<tr>
<td><code>02 Jan 06 15:04 MST</code></td>
<td><a href="https://www.ietf.org/rfc/rfc822.txt">RFC 822</a></td>
</tr>
<tr>
<td><code>02 Jan 06 15:04 -0700</code></td>
<td>With numeric zone</td>
</tr>
<tr>
<td><code>Mon, 02 Jan 2006 15:04:05 MST</code></td>
<td><a href="https://www.ietf.org/rfc/rfc1123.txt">RFC 1123</a></td>
</tr>
<tr>
<td><code>Mon, 02 Jan 2006 15:04:05 -0700</code></td>
<td>With numeric zone</td>
</tr>
</tbody>
</table>
<p>布局选项：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Options</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Year</code></td>
<td><code>06</code> <code>2006</code></td>
</tr>
<tr>
<td><code>Month</code></td>
<td><code>01</code> <code>1</code> <code>Jan</code> <code>January</code></td>
</tr>
<tr>
<td><code>Day</code></td>
<td><code>02</code> <code>2</code> <code>_2</code>(width two, right justified)</td>
</tr>
<tr>
<td><code>Weekday</code></td>
<td><code>Mon</code> <code>Monday</code></td>
</tr>
<tr>
<td><code>Hours</code></td>
<td><code>03</code> <code>3</code> <code>15</code></td>
</tr>
<tr>
<td><code>Minutes</code></td>
<td><code>04</code> <code>4</code></td>
</tr>
<tr>
<td><code>Seconds</code></td>
<td><code>05</code> <code>5</code></td>
</tr>
<tr>
<td><code>ms us ns</code></td>
<td><code>.000</code> <code>.000000</code> <code>.000000000</code></td>
</tr>
<tr>
<td><code>ms us ns</code></td>
<td><code>.999</code> <code>.999999</code> <code>.999999999</code>(trailing zeros removed)</td>
</tr>
<tr>
<td><code>am/pm</code></td>
<td><code>AM</code> <code>am</code> <code>PM</code> <code>pm</code></td>
</tr>
<tr>
<td><code>Timezone</code></td>
<td><code>MST</code></td>
</tr>
<tr>
<td><code>Offset</code></td>
<td><code>-0700</code> <code>-07</code> <code>-07:00</code> <code>Z0700</code> <code>Z07:00</code></td>
</tr>
</tbody>
</table>
<p>以下是 Go 源码中预定义日期和时间格式常量：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// These are predefined layouts for use in Time.Format and time.Parse.</span></span><br><span class="line"><span class="comment">// The reference time used in the layouts is the specific time:</span></span><br><span class="line"><span class="comment">//	Mon Jan 2 15:04:05 MST 2006</span></span><br><span class="line"><span class="comment">// which is Unix time 1136239445. Since MST is GMT-0700,</span></span><br><span class="line"><span class="comment">// the reference time can be thought of as</span></span><br><span class="line"><span class="comment">//	01/02 03:04:05PM &#x27;06 -0700</span></span><br><span class="line"><span class="comment">// To define your own format, write down what the reference time would look</span></span><br><span class="line"><span class="comment">// like formatted your way; see the values of constants like ANSIC,</span></span><br><span class="line"><span class="comment">// StampMicro or Kitchen for examples. The model is to demonstrate what the</span></span><br><span class="line"><span class="comment">// reference time looks like so that the Format and Parse methods can apply</span></span><br><span class="line"><span class="comment">// the same transformation to a general time value.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Some valid layouts are invalid time values for time.Parse, due to formats</span></span><br><span class="line"><span class="comment">// such as _ for space padding and Z for zone information.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Within the format string, an underscore _ represents a space that may be</span></span><br><span class="line"><span class="comment">// replaced by a digit if the following number (a day) has two digits; for</span></span><br><span class="line"><span class="comment">// compatibility with fixed-width Unix time formats.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A decimal point followed by one or more zeros represents a fractional</span></span><br><span class="line"><span class="comment">// second, printed to the given number of decimal places. A decimal point</span></span><br><span class="line"><span class="comment">// followed by one or more nines represents a fractional second, printed to</span></span><br><span class="line"><span class="comment">// the given number of decimal places, with trailing zeros removed.</span></span><br><span class="line"><span class="comment">// When parsing (only), the input may contain a fractional second</span></span><br><span class="line"><span class="comment">// field immediately after the seconds field, even if the layout does not</span></span><br><span class="line"><span class="comment">// signify its presence. In that case a decimal point followed by a maximal</span></span><br><span class="line"><span class="comment">// series of digits is parsed as a fractional second.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Numeric time zone offsets format as follows:</span></span><br><span class="line"><span class="comment">//	-0700  ±hhmm</span></span><br><span class="line"><span class="comment">//	-07:00 ±hh:mm</span></span><br><span class="line"><span class="comment">//	-07    ±hh</span></span><br><span class="line"><span class="comment">// Replacing the sign in the format with a Z triggers</span></span><br><span class="line"><span class="comment">// the ISO 8601 behavior of printing Z instead of an</span></span><br><span class="line"><span class="comment">// offset for the UTC zone. Thus:</span></span><br><span class="line"><span class="comment">//	Z0700  Z or ±hhmm</span></span><br><span class="line"><span class="comment">//	Z07:00 Z or ±hh:mm</span></span><br><span class="line"><span class="comment">//	Z07    Z or ±hh</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The recognized day of week formats are &quot;Mon&quot; and &quot;Monday&quot;.</span></span><br><span class="line"><span class="comment">// The recognized month formats are &quot;Jan&quot; and &quot;January&quot;.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The formats 2, _2, and 02 are unpadded, space-padded, and zero-padded</span></span><br><span class="line"><span class="comment">// day of month. The formats __2 and 002 are space-padded and zero-padded</span></span><br><span class="line"><span class="comment">// three-character day of year; there is no unpadded day of year format.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Text in the format string that is not recognized as part of the reference</span></span><br><span class="line"><span class="comment">// time is echoed verbatim during Format and expected to appear verbatim</span></span><br><span class="line"><span class="comment">// in the input to Parse.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The executable example for Time.Format demonstrates the working</span></span><br><span class="line"><span class="comment">// of the layout string in detail and is a good reference.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that the RFC822, RFC850, and RFC1123 formats should be applied</span></span><br><span class="line"><span class="comment">// only to local times. Applying them to UTC times will use &quot;UTC&quot; as the</span></span><br><span class="line"><span class="comment">// time zone abbreviation, while strictly speaking those RFCs require the</span></span><br><span class="line"><span class="comment">// use of &quot;GMT&quot; in that case.</span></span><br><span class="line"><span class="comment">// In general RFC1123Z should be used instead of RFC1123 for servers</span></span><br><span class="line"><span class="comment">// that insist on that format, and RFC3339 should be preferred for new protocols.</span></span><br><span class="line"><span class="comment">// RFC3339, RFC822, RFC822Z, RFC1123, and RFC1123Z are useful for formatting;</span></span><br><span class="line"><span class="comment">// when used with time.Parse they do not accept all the time formats</span></span><br><span class="line"><span class="comment">// permitted by the RFCs and they do accept time formats not formally defined.</span></span><br><span class="line"><span class="comment">// The RFC3339Nano format removes trailing zeros from the seconds field</span></span><br><span class="line"><span class="comment">// and thus may not sort correctly once formatted.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  ANSIC       = <span class="string">&quot;Mon Jan _2 15:04:05 2006&quot;</span></span><br><span class="line">  UnixDate    = <span class="string">&quot;Mon Jan _2 15:04:05 MST 2006&quot;</span></span><br><span class="line">  RubyDate    = <span class="string">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span></span><br><span class="line">  RFC822      = <span class="string">&quot;02 Jan 06 15:04 MST&quot;</span></span><br><span class="line">  RFC822Z     = <span class="string">&quot;02 Jan 06 15:04 -0700&quot;</span> <span class="comment">// RFC822 with numeric zone</span></span><br><span class="line">  RFC850      = <span class="string">&quot;Monday, 02-Jan-06 15:04:05 MST&quot;</span></span><br><span class="line">  RFC1123     = <span class="string">&quot;Mon, 02 Jan 2006 15:04:05 MST&quot;</span></span><br><span class="line">  RFC1123Z    = <span class="string">&quot;Mon, 02 Jan 2006 15:04:05 -0700&quot;</span> <span class="comment">// RFC1123 with numeric zone</span></span><br><span class="line">  RFC3339     = <span class="string">&quot;2006-01-02T15:04:05Z07:00&quot;</span></span><br><span class="line">  RFC3339Nano = <span class="string">&quot;2006-01-02T15:04:05.999999999Z07:00&quot;</span></span><br><span class="line">  Kitchen     = <span class="string">&quot;3:04PM&quot;</span></span><br><span class="line">  <span class="comment">// Handy time stamps.</span></span><br><span class="line">  Stamp      = <span class="string">&quot;Jan _2 15:04:05&quot;</span></span><br><span class="line">  StampMilli = <span class="string">&quot;Jan _2 15:04:05.000&quot;</span></span><br><span class="line">  StampMicro = <span class="string">&quot;Jan _2 15:04:05.000000&quot;</span></span><br><span class="line">  StampNano  = <span class="string">&quot;Jan _2 15:04:05.000000000&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  now := time.Now()</span><br><span class="line">  fmt.Printf(<span class="string">&quot;当前日期时间：%v\n&quot;</span>, now)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;年：%v\n&quot;</span>, now.Year())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;月：%v\n&quot;</span>, now.Month())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;日：%v\n&quot;</span>, now.Day())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;时：%v\n&quot;</span>, now.Hour())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;分：%v\n&quot;</span>, now.Minute())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;秒：%v\n&quot;</span>, now.Second())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;纳秒：%v\n&quot;</span>, now.Nanosecond())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当前日期时间：2021-07-11 11:12:59.787921 +0800 CST m=+0.000104353</span></span><br><span class="line"><span class="comment">年：2021</span></span><br><span class="line"><span class="comment">月：July</span></span><br><span class="line"><span class="comment">日：11</span></span><br><span class="line"><span class="comment">时：11</span></span><br><span class="line"><span class="comment">分：12</span></span><br><span class="line"><span class="comment">秒：59</span></span><br><span class="line"><span class="comment">纳秒：787921000</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure>
<h2 id="获取当前时间戳"><a href="#获取当前时间戳" class="headerlink" title="获取当前时间戳"></a>获取当前时间戳</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	now := time.Now()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;当前时间戳（单位为秒）：%v\n&quot;</span>, now.Unix())</span><br><span class="line">	fmt.Printf(<span class="string">&quot;当前时间戳（单位为纳秒）：%v\n&quot;</span>, now.UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当前时间戳（单位为秒）：1625973361</span></span><br><span class="line"><span class="comment">当前时间戳（单位为纳秒）：1625973361766745000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="获取当前时间的字符串格式"><a href="#获取当前时间的字符串格式" class="headerlink" title="获取当前时间的字符串格式"></a>获取当前时间的字符串格式</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  now := time.Now()</span><br><span class="line">  fmt.Printf(<span class="string">&quot;当前日期时间：%v\n&quot;</span>, now.Format(time.RFC3339))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;当前日期时间：%v\n&quot;</span>, now.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当前日期时间：2021-07-11T11:42:19+08:00</span></span><br><span class="line"><span class="comment">当前日期时间：2021-07-11 11:42:19</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="指定时区获取日期时间"><a href="#指定时区获取日期时间" class="headerlink" title="指定时区获取日期时间"></a>指定时区获取日期时间</h1><h2 id="使用-FixedZone-指定"><a href="#使用-FixedZone-指定" class="headerlink" title="使用 FixedZone 指定"></a>使用 FixedZone 指定</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TheCSTLayout = <span class="string">&quot;2006-01-02T15:04:05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> theCSTZone *time.Location</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  theCSTZone = time.FixedZone(<span class="string">&quot;CST&quot;</span>, <span class="number">8</span>*<span class="number">3600</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNowDateTime</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  dateTime := time.Now().In(theCSTZone).Format(TheCSTLayout)</span><br><span class="line">  t.Logf(<span class="string">&quot;The date time: %v&quot;</span>, dateTime)</span><br><span class="line">  now, _ := time.ParseInLocation(TheCSTLayout, dateTime, theCSTZone)</span><br><span class="line">  t.Logf(<span class="string">&quot;Now date time: %v&quot;</span>, now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go test -v -timeout 30s -run ^TestNowDateTime$ example.org/hello/v2</span></span><br><span class="line"><span class="comment">=== RUN   TestNowDateTime</span></span><br><span class="line"><span class="comment">    main_test.go:18: The date time: 2021-09-25T09:02:03</span></span><br><span class="line"><span class="comment">    main_test.go:20: Now date time: 2021-09-25 09:02:03 +0800 CST</span></span><br><span class="line"><span class="comment">--- PASS: TestNowDateTime (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok      example.org/hello/v2    0.234s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-LoadLocation-指定"><a href="#使用-LoadLocation-指定" class="headerlink" title="使用 LoadLocation 指定"></a>使用 LoadLocation 指定</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TheCSTLayout = <span class="string">&quot;2006-01-02T15:04:05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> theCSTLocation *time.Location</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> err error</span><br><span class="line">  theCSTLocation, err = time.LoadLocation(<span class="string">&quot;Asia/Shanghai&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">&quot;Load location failed, %v&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNowDateTime</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  dateTime := time.Now().In(theCSTLocation).Format(TheCSTLayout)</span><br><span class="line">  t.Logf(<span class="string">&quot;The date time: %v&quot;</span>, dateTime)</span><br><span class="line">  now, _ := time.ParseInLocation(TheCSTLayout, dateTime, theCSTLocation)</span><br><span class="line">  t.Logf(<span class="string">&quot;Now date time: %v&quot;</span>, now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go test -v -timeout 30s -run ^TestNowDateTime$ example.org/hello/v2</span></span><br><span class="line"><span class="comment">=== RUN   TestNowDateTime</span></span><br><span class="line"><span class="comment">    main_test.go:23: The date time: 2021-09-25T09:39:02</span></span><br><span class="line"><span class="comment">    main_test.go:25: Now date time: 2021-09-25 09:39:02 +0800 CST</span></span><br><span class="line"><span class="comment">--- PASS: TestNowDateTime (0.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">ok      example.org/hello/v2    1.777s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="常用日期时间转换"><a href="#常用日期时间转换" class="headerlink" title="常用日期时间转换"></a>常用日期时间转换</h1><h2 id="时间戳转日期时间字符串"><a href="#时间戳转日期时间字符串" class="headerlink" title="时间戳转日期时间字符串"></a>时间戳转日期时间字符串</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;strconv&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  layout := <span class="string">&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line">  now := time.Now().Unix()</span><br><span class="line">  fmt.Printf(<span class="string">&quot;转换后的日期时间：%v\n&quot;</span>, time.Unix(now, <span class="number">0</span>).Format(layout))</span><br><span class="line"></span><br><span class="line">  a, b := <span class="number">1626005415</span>, <span class="string">&quot;1626005415&quot;</span></span><br><span class="line">  c, _ := strconv.ParseInt(b, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;转换后的日期时间：%v\n&quot;</span>, time.Unix(<span class="keyword">int64</span>(a), <span class="number">0</span>).Format(layout))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;转换后的日期时间：%v\n&quot;</span>, time.Unix(c, <span class="number">0</span>).Format(layout))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">转换后的日期时间：2021-07-11 20:35:31</span></span><br><span class="line"><span class="comment">转换后的日期时间：2021-07-11 20:10:15</span></span><br><span class="line"><span class="comment">转换后的日期时间：2021-07-11 20:10:15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="日期时间字符串转时间戳"><a href="#日期时间字符串转时间戳" class="headerlink" title="日期时间字符串转时间戳"></a>日期时间字符串转时间戳</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  ChinaFormat = <span class="string">&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a, b := <span class="string">&quot;2021-07-11 20:27:33&quot;</span>, <span class="string">&quot;Sun, 11 Jul 2021 15:04:05 UTC&quot;</span></span><br><span class="line">  at1, _ := time.Parse(ChinaFormat, a)</span><br><span class="line">  at2, _ := time.Parse(time.RFC1123, b)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;转换后的时间戳：%v\n&quot;</span>, at1.Unix())</span><br><span class="line">  fmt.Printf(<span class="string">&quot;转换后的时间戳：%v\n&quot;</span>, at2.Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">转换后的时间戳：1626035253</span></span><br><span class="line"><span class="comment">转换后的时间戳：1626015845</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="日期时间字符串转时间对象"><a href="#日期时间字符串转时间对象" class="headerlink" title="日期时间字符串转时间对象"></a>日期时间字符串转时间对象</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  str := <span class="string">&quot;2008-08-08 08:08:08&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Parse the date string into Go&#x27;s time object</span></span><br><span class="line">  at, _ := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, str)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;转换后的日期时间：%v\n&quot;</span>, at)</span><br><span class="line">  fmt.Println(at.Date())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">转换后的日期时间：2008-08-08 08:08:08 +0000 UTC</span></span><br><span class="line"><span class="comment">2008 August 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="常用日期时间计算"><a href="#常用日期时间计算" class="headerlink" title="常用日期时间计算"></a>常用日期时间计算</h1><h2 id="计算两个给定日期之前相差的天数"><a href="#计算两个给定日期之前相差的天数" class="headerlink" title="计算两个给定日期之前相差的天数"></a>计算两个给定日期之前相差的天数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  t1, t2 := Date(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>), Date(<span class="number">2021</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">  days := t2.Sub(t1).Hours() / <span class="number">24</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;两个给定日期之前相差的天数为：%v\n&quot;</span>, days)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Date</span><span class="params">(year, month, day <span class="keyword">int</span>)</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> time.Date(year, time.Month(month), day, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">两个给定日期之前相差的天数为：366</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="统计代码运行时间"><a href="#统计代码运行时间" class="headerlink" title="统计代码运行时间"></a>统计代码运行时间</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fn := TimeSpent(execSlowFunc)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Exec result: %v\n&quot;</span>, fn(<span class="number">9999</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execSlowFunc</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TimeSpent</span><span class="params">(fn <span class="keyword">func</span>(x <span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">func</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    ret := fn(x)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Time spent:&quot;</span>, time.Since(start).Seconds())</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Time spent: 3.004356442</span></span><br><span class="line"><span class="comment">Exec result: 10000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> TimeSpent(execSlowFunc(<span class="string">&quot;Hello World!&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execSlowFunc</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, time.Time)</span></span> &#123;</span><br><span class="line">  time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">  <span class="keyword">return</span> s + <span class="string">&quot; 🌏🌈💫🔥🎉🚀🙏&quot;</span>, time.Now()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TimeSpent</span><span class="params">(s <span class="keyword">string</span>, start time.Time)</span></span> &#123;</span><br><span class="line">  log.Printf(<span class="string">&quot;%v: %v\n&quot;</span>, s, time.Since(start))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2021/07/14 08:22:38 Hello World! 🌏🌈💫🔥🎉🚀🙏: 4.582µs</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World - Hello Notes</title>
    <url>/2018/01/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Create a new post.</span><br><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Start the server.</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Generate static files.</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Deploy your website.</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h1 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --<span class="built_in">help</span></span><br><span class="line">Usage: hexo &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  algolia     Index your content <span class="keyword">in</span> Algolia Search API</span><br><span class="line">  clean       Remove generated files and cache.</span><br><span class="line">  config      Get or <span class="built_in">set</span> configurations.</span><br><span class="line">  deploy      Deploy your website.</span><br><span class="line">  generate    Generate static files.</span><br><span class="line">  <span class="built_in">help</span>        Get <span class="built_in">help</span> on a <span class="built_in">command</span>.</span><br><span class="line">  init        Create a new Hexo folder.</span><br><span class="line">  lc-counter  hexo-leancloud-counter-security</span><br><span class="line">  list        List the information of the site</span><br><span class="line">  migrate     Migrate your site from other system to Hexo.</span><br><span class="line">  new         Create a new post.</span><br><span class="line">  publish     Moves a draft post from _drafts to _posts folder.</span><br><span class="line">  render      Render files with renderer plugins.</span><br><span class="line">  server      Start the server.</span><br><span class="line">  version     Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages <span class="keyword">in</span> the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span>, you can use <span class="string">&#x27;hexo help [command]&#x27;</span> <span class="keyword">for</span> the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 单元测试</title>
    <url>/2021/07/16/go-unit-test/</url>
    <content><![CDATA[<p>🏋️‍♂️ Go 语言从开发初期就注意了测试用例的编写。特别是静态语言，由于调试没有动态语言那么方便，所以能最快最方便地编写一个测试用例就显得非常重要了。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/06/26/go-get-started/">Go 起步</a></li>
<li><a href="https://imajinyun.xyz/2021/07/02/go-data-type/">Go 数据类型</a></li>
<li><a href="https://imajinyun.xyz/2021/07/11/go-date-time/">Go 日期时间</a></li>
<li><a href="https://imajinyun.xyz/2021/07/14/go-random-number/">Go 随机数</a></li>
<li><strong>Go 单元测试</strong></li>
<li><a href="https://imajinyun.xyz/2021/07/17/go-benchmark-test/">Go 基准测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/22/go-other-test/">Go 其它测试</a></li>
<li><a href="https://imajinyun.xyz/2021/07/24/go-correct-posture/">Go 正确姿势</a></li>
<li><a href="https://imajinyun.xyz/2021/07/25/go-concat-string/">Go 连接字符串</a></li>
</ul>
<h2 id="单元测试命令"><a href="#单元测试命令" class="headerlink" title="单元测试命令"></a>单元测试命令</h2><h3 id="单元测试命令实例"><a href="#单元测试命令实例" class="headerlink" title="单元测试命令实例"></a>单元测试命令实例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v hello.go hello_test.go</span><br><span class="line">$ go <span class="built_in">test</span> -v .</span><br><span class="line">$ go <span class="built_in">test</span> -v -run TestFib .</span><br><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^TestFib$&#x27;</span> example.com/hello .</span><br></pre></td></tr></table></figure>
<h3 id="一些测试选项"><a href="#一些测试选项" class="headerlink" title="一些测试选项"></a>一些测试选项</h3><ul>
<li><code>-bench regexp</code>：执行相应的 <code>benchmarks</code>，例如：<code>-bench=.</code>；</li>
<li><code>-cover</code>：开户测试覆盖率；</li>
<li><code>-run regexp</code>：只运行 <code>regexp</code> 匹配的函数，例如：<code>-run=Array</code> 仅执行包含有 <code>Array</code> 开头的函数；</li>
<li><code>-v</code>：显示测试的详细命令；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 10s -run <span class="string">&#x27;^TestFib$&#x27;</span> example.com/hello .</span><br><span class="line">=== RUN   TestFib</span><br><span class="line">--- PASS: TestFib (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      example.com/hello       0.006s</span><br></pre></td></tr></table></figure>
<h2 id="单元测试函数"><a href="#单元测试函数" class="headerlink" title="单元测试函数"></a>单元测试函数</h2><h3 id="单元测试函数格式"><a href="#单元测试函数格式" class="headerlink" title="单元测试函数格式"></a>单元测试函数格式</h3><div class="note danger">
            <p><code>TestXxx</code> 中 <code>Xxx</code> 可以是任何字母数字字符串，但是第一个字母不能是小写字母。</p>
          </div>
<p>单元测试源码文件可以由多个测试用例组成，每个测试用例函数需要以 <code>Test</code> 为前缀：</p>
<ul>
<li>前缀用例文件不会参与正常源码编译，不会被包含到可执行文件中；</li>
<li>单元测试用例使用 <code>go test</code> 指令来执行，没有也不需要 <code>main()</code> 作为函数入口。所有以 <code>_test</code> 结尾的源码内以 <code>Test</code> 开头的函数会被自动执行；</li>
<li>单元测试函数的参数 <code>t *test.T</code> 必须传入，否则会报函数签名错误，即：<code>wrong signature for TestXxx, must be: func TestXxx(t *testing.T)</code>；</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXxx</span><span class="params">(t *testing.T)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下命名是合法的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test123</span><span class="params">(t *testing.T)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span>中国<span class="params">(t *testing.T)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMac</span><span class="params">(t *testing.T)</span></span></span><br></pre></td></tr></table></figure>
<p>要编写一个新的测试套件，需要创建一个名称以 <code>_test.go</code> 结尾的文件，该文件包含 <code>TestXxx</code> 函数。</p>
<h3 id="各种不同测试用例"><a href="#各种不同测试用例" class="headerlink" title="各种不同测试用例"></a>各种不同测试用例</h3><ul>
<li><code>TestSomething(t *testing.T)</code>：基本测试用例；</li>
<li><code>BenchmarkSomething(b *testing.B)</code>：基准测试用例；</li>
<li><code>ExampleSomething()</code>：控制台测试用例；</li>
<li><code>TestMain(m *testing.M)</code>：主函数测试用例；</li>
</ul>
<h2 id="单元测试用例"><a href="#单元测试用例" class="headerlink" title="单元测试用例"></a>单元测试用例</h2><h3 id="基本测试实例"><a href="#基本测试实例" class="headerlink" title="基本测试实例"></a>基本测试实例</h3><p>待测代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Fib(n<span class="number">-1</span>) + Fib(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFib</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    in = <span class="number">7</span></span><br><span class="line">    expect = <span class="number">13</span></span><br><span class="line">  )</span><br><span class="line">  actual := Fib(in)</span><br><span class="line">  <span class="keyword">if</span> actual != expect &#123;</span><br><span class="line">    t.Errorf(<span class="string">&quot;Fib(%d) = %d; want %d&quot;</span>, in, actual, expect)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^TestFib$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestFib</span><br><span class="line">--- PASS: TestFib (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	0.007s</span><br></pre></td></tr></table></figure>
<h3 id="表驱动测试实例"><a href="#表驱动测试实例" class="headerlink" title="表驱动测试实例"></a>表驱动测试实例</h3><p>Table-Driven 的测试方式在 Go 的源码中司空见惯，比如：<a href="https://github.com/golang/go/blob/master/src/time/time_test.go">time_test.go</a>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFib</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> fibTests = []<span class="keyword">struct</span> &#123;</span><br><span class="line">    in     <span class="keyword">int</span></span><br><span class="line">    expect <span class="keyword">int</span></span><br><span class="line">  &#125;&#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="number">6</span>, <span class="number">8</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">13</span>&#125;,</span><br><span class="line">    &#123;<span class="number">8</span>, <span class="number">21</span>&#125;,</span><br><span class="line">    &#123;<span class="number">9</span>, <span class="number">34</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> i, tt := <span class="keyword">range</span> fibTests &#123;</span><br><span class="line">    actual := Fib(tt.in)</span><br><span class="line">    <span class="keyword">if</span> actual != tt.expect &#123;</span><br><span class="line">      t.Errorf(<span class="string">&quot;#%d: Fib(%d) = %d; want %d&quot;</span>, i, tt.in, actual, tt.expect)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^TestFib$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestFib</span><br><span class="line">--- PASS: TestFib (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	(cached)</span><br></pre></td></tr></table></figure>
<h3 id="子测试实例"><a href="#子测试实例" class="headerlink" title="子测试实例"></a>子测试实例</h3><p>待测代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAll</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> positiveNumberTests = []<span class="keyword">struct</span> &#123;</span><br><span class="line">    name           <span class="keyword">string</span></span><br><span class="line">    x, y, expected <span class="keyword">int</span></span><br><span class="line">  &#125;&#123;</span><br><span class="line">    &#123;<span class="string">&quot;positive number&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;negative number&quot;</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">9</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;zero number&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> positiveNumberTests &#123;</span><br><span class="line">    t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> actual := Add(tt.x, tt.y); actual != tt.expected &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;Add(%d, %d) = %d, want %d&quot;</span>, tt.x, tt.y, actual, tt.expected)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^TestAll$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestAll</span><br><span class="line">=== RUN   TestAll/positive_number</span><br><span class="line">=== RUN   TestAll/negative_number</span><br><span class="line">=== RUN   TestAll/zero_number</span><br><span class="line">--- PASS: TestAll (0.00s)</span><br><span class="line">    --- PASS: TestAll/positive_number (0.00s)</span><br><span class="line">    --- PASS: TestAll/negative_number (0.00s)</span><br><span class="line">    --- PASS: TestAll/zero_number (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	0.013s</span><br></pre></td></tr></table></figure>
<h3 id="模仿测试实例"><a href="#模仿测试实例" class="headerlink" title="模仿测试实例"></a>模仿测试实例</h3><p>待测代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> API <span class="keyword">interface</span> &#123;</span><br><span class="line">  FetchPostByID(ctx context.Context, id <span class="keyword">int</span>) (*APIPost, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> APIPost <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID     <span class="keyword">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">  UserID <span class="keyword">int</span>    <span class="string">`json:&quot;user_id&quot;`</span></span><br><span class="line">  Title  <span class="keyword">string</span> <span class="string">`json:&quot;title&quot;`</span></span><br><span class="line">  Body   <span class="keyword">string</span> <span class="string">`json:&quot;body&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;context&quot;</span></span><br><span class="line">  <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;io&quot;</span></span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;reflect&quot;</span></span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> APIMock <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *APIMock)</span> <span class="title">FetchPostByID</span><span class="params">(ctx context.Context, id <span class="keyword">int</span>)</span> <span class="params">(*APIPost, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(http.StatusText(http.StatusNotFound))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HTTPClient <span class="keyword">interface</span> &#123;</span><br><span class="line">  Do(*http.Request) (*http.Response, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HTTPClientMock <span class="keyword">struct</span> &#123;</span><br><span class="line">  DoFunc <span class="function"><span class="keyword">func</span><span class="params">(*http.Request)</span> <span class="params">(*http.Response, error)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h HTTPClientMock)</span> <span class="title">Do</span><span class="params">(r *http.Request)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> h.DoFunc(r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(client HTTPClient, baseURL <span class="keyword">string</span>, timeout time.Duration)</span> <span class="title">API</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;v1&#123;</span><br><span class="line">    c:       client,</span><br><span class="line">    baseURL: baseURL,</span><br><span class="line">    timeout: timeout,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> v1 <span class="keyword">struct</span> &#123;</span><br><span class="line">  c       HTTPClient</span><br><span class="line">  baseURL <span class="keyword">string</span></span><br><span class="line">  timeout time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v v1)</span> <span class="title">FetchPostByID</span><span class="params">(ctx context.Context, id <span class="keyword">int</span>)</span> <span class="params">(*APIPost, error)</span></span> &#123;</span><br><span class="line">  u := fmt.Sprintf(<span class="string">&quot;%s/posts/%d&quot;</span>, v.baseURL, id)</span><br><span class="line">  ctx, cancel := context.WithTimeout(ctx, v.timeout)</span><br><span class="line">  <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">  req, err := http.NewRequestWithContext(ctx, http.MethodGet, u, <span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  res, err := v.c.Do(req)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> res.StatusCode != http.StatusOK &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(http.StatusText(res.StatusCode))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> result *APIPost</span><br><span class="line">  <span class="keyword">return</span> result, json.NewDecoder(res.Body).Decode(&amp;result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  client = &amp;HTTPClientMock&#123;&#125;</span><br><span class="line">  api    = New(client, <span class="string">&quot;&quot;</span>, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestV1FetchPostByID</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  postTests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">    Body       <span class="keyword">string</span></span><br><span class="line">    StatusCode <span class="keyword">int</span></span><br><span class="line">    Result     *APIPost</span><br><span class="line">    Error      error</span><br><span class="line">  &#125;&#123;</span><br><span class="line">    &#123;</span><br><span class="line">      Body:       <span class="string">`&#123;&quot;id&quot;:1,&quot;user_id&quot;:1001,&quot;title&quot;:&quot;title 1&quot;,&quot;body&quot;:&quot;body 1&quot;&#125;`</span>,</span><br><span class="line">      StatusCode: <span class="number">200</span>,</span><br><span class="line">      Result:     &amp;APIPost&#123;<span class="number">1</span>, <span class="number">1001</span>, <span class="string">&quot;title 1&quot;</span>, <span class="string">&quot;body 1&quot;</span>&#125;,</span><br><span class="line">      Error:      <span class="literal">nil</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      Body:       <span class="string">`&#123;&quot;id&quot;:2,&quot;user_id&quot;:1002,&quot;title&quot;:&quot;title 2&quot;,&quot;body&quot;:&quot;body 2&quot;&#125;`</span>,</span><br><span class="line">      StatusCode: <span class="number">200</span>,</span><br><span class="line">      Result:     &amp;APIPost&#123;<span class="number">2</span>, <span class="number">1002</span>, <span class="string">&quot;title 2&quot;</span>, <span class="string">&quot;body 2&quot;</span>&#125;,</span><br><span class="line">      Error:      <span class="literal">nil</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      Body:       <span class="string">``</span>,</span><br><span class="line">      StatusCode: http.StatusBadRequest,</span><br><span class="line">      Result:     <span class="literal">nil</span>,</span><br><span class="line">      Error:      fmt.Errorf(http.StatusText(http.StatusBadRequest)),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      Body:       <span class="string">``</span>,</span><br><span class="line">      StatusCode: http.StatusBadRequest,</span><br><span class="line">      Result:     <span class="literal">nil</span>,</span><br><span class="line">      Error:      fmt.Errorf(http.StatusText(http.StatusBadRequest)),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> postTests &#123;</span><br><span class="line">    client.DoFunc = <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &amp;http.Response&#123;</span><br><span class="line">        Body:       io.NopCloser(strings.NewReader(tt.Body)),</span><br><span class="line">        StatusCode: tt.StatusCode,</span><br><span class="line">      &#125;, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post, err := api.FetchPostByID(context.Background(), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err.Error() != tt.Error.Error() &#123;</span><br><span class="line">      t.Fatalf(<span class="string">&quot;want %v, got %v&quot;</span>, tt.Error, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !reflect.DeepEqual(post, tt.Result) &#123;</span><br><span class="line">      t.Fatalf(<span class="string">&quot;want %v, got %v&quot;</span>, tt.Result, post)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^TestV1FetchPostByID$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestV1FetchPostByID</span><br><span class="line">--- PASS: TestV1FetchPostByID (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	(cached)</span><br></pre></td></tr></table></figure>
<h2 id="T-类型"><a href="#T-类型" class="headerlink" title="T 类型"></a>T 类型</h2><p>单元测试中，传递给测试函数的参数是 <code>*testing.T</code> 类型。它用于管理测试状态并支持格式化测试日志。测试日志会在执行测试的过程中不断累积，并在测试完成时转储至标准输出。</p>
<h3 id="报告方法"><a href="#报告方法" class="headerlink" title="报告方法"></a>报告方法</h3><h4 id="错误方法"><a href="#错误方法" class="headerlink" title="错误方法"></a>错误方法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;errors&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestErrorFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Error(<span class="string">&quot;this is a error&quot;</span>)</span><br><span class="line">  t.Errorf(<span class="string">&quot;%s&quot;</span>, errors.New(<span class="string">&quot;this is a error&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^TestErrorFunc$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestErrorFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:9: this is a error</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:10: this is a error</span><br><span class="line">--- FAIL: TestErrorFunc (0.00s)</span><br><span class="line">FAIL</span><br><span class="line">FAIL	example.com/hello	0.010s</span><br></pre></td></tr></table></figure>
<h4 id="失败方法"><a href="#失败方法" class="headerlink" title="失败方法"></a>失败方法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFailFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Fail()</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFailedFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Failed()</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFailNowFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.FailNow()</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^(TestFailFunc|TestFailedFunc|TestFailNowFunc)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestFailFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:9: see <span class="keyword">if</span> this line will output <span class="comment">#1</span></span><br><span class="line">--- FAIL: TestFailFunc (0.00s)</span><br><span class="line">=== RUN   TestFailedFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:14: see <span class="keyword">if</span> this line will output <span class="comment">#2</span></span><br><span class="line">--- PASS: TestFailedFunc (0.00s)</span><br><span class="line">=== RUN   TestFailNowFunc</span><br><span class="line">--- FAIL: TestFailNowFunc (0.00s)</span><br><span class="line">FAIL</span><br><span class="line">FAIL	example.com/hello	0.008s</span><br></pre></td></tr></table></figure>
<h4 id="致命方法"><a href="#致命方法" class="headerlink" title="致命方法"></a>致命方法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;errors&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFatalFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Fatal(<span class="string">&quot;this is a fatal&quot;</span>)</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFatalfFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Fatalf(<span class="string">&quot;%s&quot;</span>, errors.New(<span class="string">&quot;this is a fatal&quot;</span>))</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^(TestFatalFunc|TestFatalfFunc)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestFatalFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:9: this is a fatal</span><br><span class="line">--- FAIL: TestFatalFunc (0.00s)</span><br><span class="line">=== RUN   TestFatalfFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:14: this is a fatal</span><br><span class="line">--- FAIL: TestFatalfFunc (0.00s)</span><br><span class="line">FAIL</span><br><span class="line">FAIL	example.com/hello	0.012s</span><br></pre></td></tr></table></figure>
<h4 id="日志方法"><a href="#日志方法" class="headerlink" title="日志方法"></a>日志方法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;errors&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestLogFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Log(<span class="string">&quot;this is a log&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestLogfFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Logf(<span class="string">&quot;%s&quot;</span>, errors.New(<span class="string">&quot;this is a log&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run <span class="string">&#x27;^(TestLogFunc|TestLogfFunc)$&#x27;</span> example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestLogFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:9: this is a <span class="built_in">log</span></span><br><span class="line">--- PASS: TestLogFunc (0.00s)</span><br><span class="line">=== RUN   TestLogfFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:13: this is a <span class="built_in">log</span></span><br><span class="line">--- PASS: TestLogfFunc (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	0.015s</span><br></pre></td></tr></table></figure>
<h4 id="跳过方法"><a href="#跳过方法" class="headerlink" title="跳过方法"></a>跳过方法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;errors&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSkipFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Skip(<span class="string">&quot;this is a skip&quot;</span>)</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSkipfFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Logf(<span class="string">&quot;%s&quot;</span>, errors.New(<span class="string">&quot;this is a skip&quot;</span>))</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSkipNowFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.SkipNow()</span><br><span class="line">  t.Log(<span class="string">&quot;see if this line will output #3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSkippedFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> t.Skipped() &#123;</span><br><span class="line">    t.Log(<span class="string">&quot;see if this line will output #4&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -timeout 30s -run <span class="string">&#x27;^(TestSkipFunc|TestSkipfFunc|TestSkipNowFunc|TestSkippedFunc)$&#x27;</span> example.com/hello -v</span><br><span class="line"></span><br><span class="line">=== RUN   TestSkipFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:9: this is a skip</span><br><span class="line">--- SKIP: TestSkipFunc (0.00s)</span><br><span class="line">=== RUN   TestSkipfFunc</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:14: this is a skip</span><br><span class="line">    /Users/majinyun/Codes/go/src/github.com/imajinyun/hello/hello_test.go:15: see <span class="keyword">if</span> this line will output <span class="comment">#2</span></span><br><span class="line">--- PASS: TestSkipfFunc (0.00s)</span><br><span class="line">=== RUN   TestSkipNowFunc</span><br><span class="line">--- SKIP: TestSkipNowFunc (0.00s)</span><br><span class="line">=== RUN   TestSkippedFunc</span><br><span class="line">--- PASS: TestSkippedFunc (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok  	example.com/hello	0.011s</span><br></pre></td></tr></table></figure>
<h3 id="并行测试"><a href="#并行测试" class="headerlink" title="并行测试"></a>并行测试</h3><p>默认情况下，指定包的测试是按照顺序执行的，但也可以通过在测试的函数内部使用 <code>t.Parallel()</code> 来标志某些测试也可以被安全的并发执行（和默认的一样，假设参数名为 <code>t</code>）。在并行执行的情况下，只有当那些被标记为并行的测试才会被并行执行，所以只有一个测试函数时是没意义的。它应该在测试函数体中第一个被调用（在任何需要跳过的条件之后），因为它会重置测试时间：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Parallel()</span><br><span class="line">  <span class="comment">// actual test...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在并发情况下，同时运行的测试的数量默认取决于 <code>GOMAXPROCS</code>。它可以通过 <code>-parallel n</code> 被指定（<code>go test -parallel 4</code>）。</p>
<p>另外一个可以实现并行的方法，尽管不是函数级粒度，但却是包级粒度，就是类似这样执行 <code>go test p1 p2 p3</code>（也就是说，同时调用多个测试包）。在这种情况下，包会被先编译，并同时被执行。当然，这对于总的时间来说是有好处的，但它也可能会导致错误变得具有不可预测性，比如一些资源被多个包同时使用时（例如，一些测试需要访问数据库，并删除一些行，而这些行又刚好被其他的测试包使用的话）。</p>
<p>为了保持可控性，<code>-p</code> 标志可以用来指定编译和测试的并发数。当仓库中有多个测试包，并且每个包在不同的子目录中，一个可以执行所有包的命令是 <code>go test ./...</code>，这包含当前目录和所有子目录。没有带 <code>-p</code> 标志执行时，总的运行时间应该接近于运行时间最长的包的时间（加上编译时间）。运行 <code>go test -p 1 ./...</code>，使编译和测试工具只能在一个包中执行时，总的时间应该接近于所有独立的包测试的时间加上编译的时间的总和。具体可以执行 <code>go test -p 3 ./...</code> 来看一下对运行时间的影响。</p>
<p>还有，另外一个可以并行化的地方是在包的代码里面。多亏了 Go 非常棒的并行原语，实际上，除非 <code>GOMAXPROCS</code> 通过环境变量或者在代码中显式设置为 <code>GOMAXPROCS=1</code>，否则，包中一个 <code>goroutines</code> 都没有用是不太常见的。想要使用 <code>2</code> 个 <code>CPU</code>，可以执行 <code>GOMAXPROCS=2 go test</code>，想要使用 <code>4</code> 个 <code>CPU</code>，可以执行 <code>GOMAXPROCS=4 go test</code>，但还有更好的方法：<code>go test -cpu=1,2,4</code> 将会执行 <code>3</code> 次，其中 <code>GOMAXPROCS</code> 值分别为 <code>1,2,4</code>。</p>
<p>待测代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  data   = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">  locker sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetToMap</span><span class="params">(k, v <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  locker.Lock()</span><br><span class="line">  <span class="keyword">defer</span> locker.Unlock()</span><br><span class="line">  data[k] = v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetToMap</span><span class="params">(k <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  locker.Lock()</span><br><span class="line">  <span class="keyword">defer</span> locker.RUnlock()</span><br><span class="line">  <span class="keyword">return</span> data[k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapTests = []<span class="keyword">struct</span> &#123;</span><br><span class="line">  k, v <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;🎉 Hello World&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;nickname&quot;</span>, <span class="string">&quot;Golang&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;email&quot;</span>, <span class="string">&quot;example@golang.com&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;12311118888&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;address&quot;</span>, <span class="string">&quot;Nanyang Technological University&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;compony&quot;</span>, <span class="string">&quot;Amazon&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSetToMap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Parallel()</span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> mapTests &#123;</span><br><span class="line">    SetToMap(tt.k, tt.v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetToMap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  t.Parallel()</span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> mapTests &#123;</span><br><span class="line">    actual := GetToMap(tt.k)</span><br><span class="line">    <span class="keyword">if</span> actual != tt.v &#123;</span><br><span class="line">      t.Errorf(<span class="string">&quot;GetToMap(%s) = %v, want: %v&quot;</span>, tt.k, actual, tt.v)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -timeout 30s -run ^(TestSetToMap|TestGetToMap)$ example.com/hello</span><br><span class="line"></span><br><span class="line">=== RUN   TestSetToMap</span><br><span class="line">--- PASS: TestSetToMap (0.00s)</span><br><span class="line">=== RUN   TestGetToMap</span><br><span class="line">fatal error: sync: RUnlock of unlocked RWMutex</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>因此，如果代码能够进行并行测试，在写测试时，尽量加上 <code>Parallel</code>，这样可以测试出一些可能的问题。</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>前端跨域方案</title>
    <url>/2019/10/27/js-cross-domain/</url>
    <content><![CDATA[<p><img src="/images/2019/201910271121.png" alt="201910271121.png"></p>
<p>所谓跨域，顾名思义，跨到了另外的域，域不仅仅指的是不同的域名网站，可能同一个域名不同的端口号也算不同的域。浏览器是有规则的，只要 <strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong> 有任何一个不同，都被当作是不同的域。协议指的是 http，或者 https 等。</p>
<span id="more"></span>
<h1 id="跨域概念"><a href="#跨域概念" class="headerlink" title="跨域概念"></a>跨域概念</h1><p>一个域下的文档或脚本试图去请求另一个域下的资源。</p>
<h2 id="跨域形式"><a href="#跨域形式" class="headerlink" title="跨域形式"></a>跨域形式</h2><ul>
<li><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到</li>
<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code> 标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。不同浏览器有不同的限制：IE、Firefox、Chrome、Safari（跳至CVE-2010-0051）部分和 Opera</li>
<li><code>&lt;img&gt;</code> 嵌入图片。支持的图片格式包括 PNG、JPEG、GIF、BMP、SVG、…</li>
<li><code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 嵌入多媒体资源</li>
<li><code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code> 和 <code>&lt;applet&gt;</code> 的插件</li>
<li><code>@font-face</code> 引入的字体。一些浏览器允许跨域字体（cross-origin fonts），一些需要同源字体（same-origin fonts）</li>
<li><code>&lt;frame&gt;</code> 和 <code>&lt;iframe&gt;</code> 载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互</li>
</ul>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p><a href="https://en.wikipedia.org/wiki/Same-origin_policy">同源策略-SOP</a>（Same Origin Policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指 <code>协议+域名+端口</code> 三者相同，即便两个不同的域名指向同一个 IP 地址，也非同源。</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<h3 id="同源策略目的"><a href="#同源策略目的" class="headerlink" title="同源策略目的"></a>同源策略目的</h3><p>为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<h3 id="同源策略限制范围"><a href="#同源策略限制范围" class="headerlink" title="同源策略限制范围"></a>同源策略限制范围</h3><ul>
<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>
<li>DOM 无法获得</li>
<li>AJAX 请求不能发送</li>
</ul>
<h1 id="跨域场景"><a href="#跨域场景" class="headerlink" title="跨域场景"></a>跨域场景</h1><table>
<thead>
<tr>
<th>URL</th>
<th>说明</th>
<th>是否允许</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>http://www.example.com/a.js</code><br><code>http://www.example.com/b.js</code><br><code>http://www.example.com/src/c.js</code></td>
<td>同一域名，不同文件或路径</td>
<td>OK</td>
</tr>
<tr>
<td><code>http://www.example.com:8001/a.js</code><br><code>http://www.example.com:8002/b.js</code></td>
<td>同一域名，不同端口</td>
<td>NO</td>
</tr>
<tr>
<td><code>http://www.example.com/a.js</code><br><code>https://www.example.com/b.js</code></td>
<td>同一域名，不同协议</td>
<td>NO</td>
</tr>
<tr>
<td><code>http://www.example.com/a.js</code><br><code>http://cdn.example.com/b.js</code></td>
<td>相同主域，不同子域</td>
<td>NO</td>
</tr>
<tr>
<td><code>http://www.example.com/a.js</code><br><code>http://192.168.10.10/b.js</code></td>
<td>域名对应 IP</td>
<td>NO</td>
</tr>
<tr>
<td><code>http://www.example.com/a.js</code><br><code>http://www.sample.com/b.js</code></td>
<td>不同域名</td>
<td>NO</td>
</tr>
</tbody>
</table>
<h1 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h1><ul>
<li>jsonp 跨域</li>
<li>document.domain + iframe 跨域</li>
<li>location.hash + iframe 跨域</li>
<li>window.name + iframe 跨域</li>
<li>postMessage 跨域</li>
<li>跨域资源共享（CORS）</li>
<li>Nginx 代理跨域</li>
<li>NodeJS 中间件代理跨域</li>
<li>WebSocket 协议跨域</li>
</ul>
<h2 id="jsonp-跨域"><a href="#jsonp-跨域" class="headerlink" title="jsonp 跨域"></a>jsonp 跨域</h2><h3 id="原生方案"><a href="#原生方案" class="headerlink" title="原生方案"></a>原生方案</h3><p>前端代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">script.type = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">script.src = <span class="string">&#x27;http://www.sample.com/test?callback=mycallback&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mycallback</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后端代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">RequestInterface</span> <span class="title">as</span> <span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span> <span class="title">as</span> <span class="title">Response</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Slim</span>\<span class="title">Factory</span>\<span class="title">AppFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span> = AppFactory::create();</span><br><span class="line"><span class="variable">$app</span>-&gt;get(<span class="string">&#x27;/test&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params">Request <span class="variable">$request</span>, Response <span class="variable">$response</span>, <span class="keyword">array</span> <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$content</span> = [<span class="string">&#x27;status&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;OK&#x27;</span>, <span class="string">&#x27;result&#x27;</span> =&gt; []];</span><br><span class="line">    <span class="variable">$content</span> = json_encode(<span class="variable">$content</span>);</span><br><span class="line">    <span class="variable">$response</span>-&gt;getBody()-&gt;write(<span class="string">&quot;mycallback(<span class="subst">&#123;$content&#125;</span>)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$app</span>-&gt;run();</span><br></pre></td></tr></table></figure>
<h3 id="jQuery-Ajax-方案"><a href="#jQuery-Ajax-方案" class="headerlink" title="jQuery Ajax 方案"></a>jQuery Ajax 方案</h3><p>前端代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://www.sample.com/test&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">  <span class="attr">jsonpCallback</span>: <span class="string">&quot;mycallback&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mycallback</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后端代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">RequestInterface</span> <span class="title">as</span> <span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span> <span class="title">as</span> <span class="title">Response</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Slim</span>\<span class="title">Factory</span>\<span class="title">AppFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span> = AppFactory::create();</span><br><span class="line"><span class="variable">$app</span>-&gt;get(<span class="string">&#x27;/test&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params">Request <span class="variable">$request</span>, Response <span class="variable">$response</span>, <span class="keyword">array</span> <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$params</span> = <span class="variable">$request</span>-&gt;getQueryParams();</span><br><span class="line">    <span class="variable">$content</span> = [<span class="string">&#x27;status&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;OK&#x27;</span>, <span class="string">&#x27;result&#x27;</span> =&gt; [<span class="variable">$params</span>]];</span><br><span class="line">    <span class="variable">$payload</span> = json_encode(<span class="variable">$content</span>);</span><br><span class="line">    <span class="variable">$response</span>-&gt;getBody()-&gt;write(<span class="string">&quot;mycallback(<span class="subst">&#123;$payload&#125;</span>)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span>-&gt;withHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">        -&gt;withStatus(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$app</span>-&gt;run();</span><br></pre></td></tr></table></figure>
<p>以上的方式看起来不错，但遗憾的是仅支持 GET 请求。</p>
<h2 id="document-domain-iframe-跨域"><a href="#document-domain-iframe-跨域" class="headerlink" title="document.domain + iframe 跨域"></a>document.domain + iframe 跨域</h2><blockquote>
<p>这个跨域仅限主域相同，子域不同的跨域应用场景。</p>
</blockquote>
<p>两个页面都通过 js 强制设置 <code>document.domain</code> 为主域，就实现了同域。</p>
<p>父窗口代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;http://sub.example.com&quot;</span> frameborder=<span class="string">&quot;0&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">document</span>.domain = <span class="string">&#x27;example.com&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">var</span> content = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">status</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">message</span>: <span class="string">&#x27;OK&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">result</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>子窗口代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;example.com&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.parent.content)</span><br></pre></td></tr></table></figure>
<h2 id="location-hash-iframe-跨域"><a href="#location-hash-iframe-跨域" class="headerlink" title="location.hash + iframe 跨域"></a>location.hash + iframe 跨域</h2><h2 id="window-name-iframe-跨域"><a href="#window-name-iframe-跨域" class="headerlink" title="window.name + iframe 跨域"></a>window.name + iframe 跨域</h2><h2 id="postMessage-跨域"><a href="#postMessage-跨域" class="headerlink" title="postMessage 跨域"></a>postMessage 跨域</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">window.postMessage()</a> 方法可以安全地实现 Window 对象之间的跨域通信。<code>postMessage()</code> 方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p>
<p>发送代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.sample.com/index.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;frame&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> domain = <span class="string">&#x27;http://www.sample.com&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;frame&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    iframe.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> data = &#123; <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">      iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), domain)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">&#x27;Mesage request from &#x27;</span> + <span class="built_in">document</span>.location.href)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.groupEnd(<span class="string">&#x27;adsfa&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">&#x27;Mesage response from &#x27;</span> + e.origin)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e.data)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.groupEnd()</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接收代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> domain = <span class="string">&#x27;http://www.example.com&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (e.origin !== domain) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(e.data)</span></span><br><span class="line"><span class="javascript">      data.status = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      data.message += <span class="string">&#x27; World!&#x27;</span></span></span><br><span class="line"><span class="javascript">      data.result = &#123;&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.parent.postMessage(data, domain);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="WebSocket-协议跨域"><a href="#WebSocket-协议跨域" class="headerlink" title="WebSocket 协议跨域"></a>WebSocket 协议跨域</h2><p><a href="https://zh.wikipedia.org/wiki/WebSocket">WebSocket</a> 是 HTML5 的一种新通信协议，它实现了浏览器与服务器之间的双向通讯，属于应用层协议。它基于 TCP 传输协议，并复用 HTTP 的握手通道。由于原生 WebSocket API 使用起来不太方便，我们使用 <a href="https://socket.io">Socket.IO</a>，而 Socket.IO 是一个完全由 JavaScript 实现、基于 Node.js、支持 WebSocket 的协议用于实时通信、跨平台的开源框架，它包括了客户端的 JavaScript 和服务器端的 Node.js。Socket.IO 除了支持 WebSocket 通讯协议外，还支持许多种轮询（Polling）机制以及其它实时通信方式，并封装成了通用的接口，并且在服务端实现了这些实时机制的相应代码。Socket.IO 实现的 Polling 通信机制包括 Adobe Flash Socket、AJAX 长轮询、AJAX multipart streaming、持久 Iframe、JSONP 轮询等。Socket.IO 能够根据浏览器对通讯机制的支持情况自动地选择最佳的方式来实现网络实时应用。它的设计目的是构建能够在不同浏览器和移动设备上良好运行的实时应用，如实时分析系统、二进制流数据处理应用、在线聊天室、在线客服系统、评论系统、WebIM 等。</p>
<p>前端代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Input: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> socket = io(<span class="string">&#x27;http://www.sample.com:6001&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">&#x27;From server: &#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(message)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.groupEnd()</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;Server closed&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>).onblur = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> value = e.target.value</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">&#x27;Send message:&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(value)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.groupEnd();</span></span><br><span class="line"><span class="javascript">      socket.emit(<span class="string">&#x27;message&#x27;</span>, value);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>后端代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPSocketIO</span>\<span class="title">SocketIO</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$socket</span> = <span class="keyword">new</span> SocketIO(<span class="number">6001</span>);</span><br><span class="line"><span class="variable">$socket</span>-&gt;on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$socket</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$socket</span>-&gt;on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$message</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$socket</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="variable">$message</span>,</span><br><span class="line">            <span class="string">&#x27;result&#x27;</span> =&gt; [],</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$socket</span>-&gt;emit(<span class="string">&#x27;message&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$socket</span>-&gt;on(<span class="string">&#x27;discount&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux - 常用命令</title>
    <url>/2018/02/13/linux-common-commands/</url>
    <content><![CDATA[<p>🗂 旨在收集一些常用的 Linux 命令于此，方便以后快速查询及使用。其中有些命令在 CentOS 7 及以上的版本中并不能正常使用，需要安装相应的包才能工作。</p>
<span id="more"></span>
<h1 id="命令技巧"><a href="#命令技巧" class="headerlink" title="命令技巧"></a>命令技巧</h1><h2 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h2><ul>
<li>记得关键字的情况下，通过 <code>man -k &lt;command keyword&gt;</code> 来搜索</li>
<li>命令简要说明使用 <code>whatis &lt;command&gt;</code>；命令详细说明使用 <code>info &lt;command&gt;</code></li>
<li>查看命令位置使用 <code>which &lt;command&gt;</code></li>
<li>命令的具体参数和使用方法使用 <code>man &lt;command&gt;</code></li>
</ul>
<h2 id="Bash-快捷键"><a href="#Bash-快捷键" class="headerlink" title="Bash 快捷键"></a>Bash 快捷键</h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl-U</code></td>
<td>删除光标到行首的所有字符，在某些设置下，删除全行</td>
</tr>
<tr>
<td><code>Ctrl-W</code></td>
<td>删除当前光标到前边的最近一个空格之间的字符</td>
</tr>
<tr>
<td><code>Ctrl-H</code></td>
<td>删除光标前边的字符</td>
</tr>
<tr>
<td><code>Ctrl-R</code></td>
<td>匹配最相近的一个文件，然后输出</td>
</tr>
</tbody>
</table>
<h1 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lspci -tv</code></td>
<td>列出所有 PCI 设备</td>
</tr>
<tr>
<td><code>lsusb -tv</code></td>
<td>列出所有 USB 设备</td>
</tr>
<tr>
<td><code>lsmod</code></td>
<td>列出加载的内核模块</td>
</tr>
<tr>
<td><code>uname -a</code></td>
<td>查看内核，操作系统，CPU 信息</td>
</tr>
<tr>
<td><code>head -n 1 /etc/issue</code></td>
<td>查看操作系统版本</td>
</tr>
<tr>
<td><code>cat /proc/cpuinfo</code></td>
<td>查看 CPU 信息</td>
</tr>
<tr>
<td><code>grep “model name” /proc/cpuinfo &#124; wc -l</code></td>
<td>查看 CPU 数量</td>
</tr>
<tr>
<td><code>hostname</code></td>
<td>查看计算机名</td>
</tr>
<tr>
<td><code>env</code></td>
<td>查看环境变量</td>
</tr>
<tr>
<td><code>free -m</code></td>
<td>查看内存使用量和交换区使用量</td>
</tr>
<tr>
<td><code>df -h</code></td>
<td>查看各分区使用情况</td>
</tr>
<tr>
<td><code>grep MemTotal /proc/meminfo</code></td>
<td>查看内存总量</td>
</tr>
<tr>
<td><code>grep MemFree /proc/meminfo</code></td>
<td>查看空闲内存量</td>
</tr>
<tr>
<td><code>uptime</code></td>
<td>查看系统运行时间，用户数，负载</td>
</tr>
<tr>
<td><code>cat /proc/loadavg</code></td>
<td>查看系统负载</td>
</tr>
<tr>
<td><code>lsof -i:3306</code></td>
<td>查看端口占用的进程状态</td>
</tr>
<tr>
<td><code>kill -9 &lt;pid&gt;</code></td>
<td>强行中止进程</td>
</tr>
<tr>
<td><code>ps -ef &#124; grep name &#124; awk ‘&#123;print $2&#125;’ &#124; xargs kill -9</code></td>
<td>查询指定的进程并进行中止</td>
</tr>
<tr>
<td><code>ps -aux</code></td>
<td>显示所有（包含其他用户）的进程</td>
</tr>
<tr>
<td><code>ps -ef &#124; grep name</code></td>
<td>查看指定进程</td>
</tr>
<tr>
<td><code>ps -x -o pid,rss,vsz,command</code></td>
<td>查看进程占用内存信息</td>
</tr>
</tbody>
</table>
<h1 id="磁盘命令"><a href="#磁盘命令" class="headerlink" title="磁盘命令"></a>磁盘命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mount</code></td>
<td>输出系统目前的挂载信息</td>
</tr>
<tr>
<td><code>mount /dev/sda1 /mnt</code></td>
<td>将 sda1 挂载到 /mnt 中</td>
</tr>
<tr>
<td><code>mount &#124; column -t</code></td>
<td>查看挂接的分区状态</td>
</tr>
<tr>
<td><code>umount /mnt</code></td>
<td>卸载 /mnt 这个挂载点的文件系统</td>
</tr>
<tr>
<td><code>umount -a</code></td>
<td>卸载所有已挂载的文件系统</td>
</tr>
<tr>
<td><code>fdisk -l</code></td>
<td>查看所有分区</td>
</tr>
<tr>
<td><code>swapon -s</code></td>
<td>查看所有交换分区</td>
</tr>
<tr>
<td><code>dmesg &#124; grep IDE</code></td>
<td>查看启动时 IDE 设备检测状况</td>
</tr>
<tr>
<td><code>iptables -L</code></td>
<td>查看防火墙设置</td>
</tr>
<tr>
<td><code>du -sh &lt;directory&gt;</code></td>
<td>查看指定目录的大小</td>
</tr>
<tr>
<td><code>du -sh ls &#124; sort</code></td>
<td>查看当前目录下所有子文件夹排序后的大小</td>
</tr>
</tbody>
</table>
<h1 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ifconfig</code></td>
<td>查看所有网络接口的属性</td>
</tr>
<tr>
<td><code>ip addr show</code></td>
<td>查看所有网络接口的属性</td>
</tr>
<tr>
<td><code>route -n</code></td>
<td>查看路由表</td>
</tr>
<tr>
<td><code>netstat -lntp</code></td>
<td>查看所有监听的端口</td>
</tr>
<tr>
<td><code>netstat -antp</code></td>
<td>查看所有已经建立的连接</td>
</tr>
<tr>
<td><code>netstat -s</code></td>
<td>查看网络统计信息</td>
</tr>
<tr>
<td><code>netstat -nap &#124; grep <port></code></td>
<td>将会显示使用该端口的应用程序的进程 ID</td>
</tr>
<tr>
<td><code>netstat -all</code> 或 <code>netstat -a</code></td>
<td>将会显示包括 TCP 和 UDP 的所有连接</td>
</tr>
<tr>
<td><code>netstat --tcp</code> 或 <code>netstat -t</code></td>
<td>将会显示 TCP 连接</td>
</tr>
<tr>
<td><code>netstat --udp</code> 或 <code>netstat -u</code></td>
<td>将会显示 UDP 连接</td>
</tr>
<tr>
<td><code>netstat -g</code></td>
<td>将会显示该主机订阅的所有多播网络</td>
</tr>
<tr>
<td><code>netstat -anpt &#124; grep ‘:<port>‘</code></td>
<td>找出运行在指定端口的进程</td>
</tr>
<tr>
<td><code>netstat -an</td>
<td>awk ‘/^tcp/&#123;+S[$NF]&#125; END &#123;for(a in S) print a,S[a]&#125;’</code></td>
<td>查看服务器网络连接状态并汇总</td>
</tr>
<tr>
<td><code>ping -c 3 &lt;domain&gt;</code></td>
<td>指定次数后 Ping 域名</td>
</tr>
</tbody>
</table>
<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><blockquote>
<p><a href="https://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 下载单个文件</span><br><span class="line">$ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"></span><br><span class="line">// 下载文件重命名</span><br><span class="line">$ wget -O baidu.html http://www.baidu.com/index.html</span><br><span class="line"></span><br><span class="line">// 限制下载速率</span><br><span class="line">$ wget --limit-rate=200k http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</span><br><span class="line"></span><br><span class="line">// 断点续传</span><br><span class="line">$ wget -c http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</span><br><span class="line"></span><br><span class="line">// 后台下载</span><br><span class="line">$ wget -b http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</span><br><span class="line">$ tail -f wget-log <span class="comment"># 查看下载进度</span></span><br></pre></td></tr></table></figure>
<h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 本地文件复制到远程服务器</span><br><span class="line">$ scp -r test.sql user@ip:/home/user</span><br><span class="line"></span><br><span class="line">// 远程服务器文件复制到本地</span><br><span class="line">$ scp -r user@ip:/home/user/test.sql ./</span><br></pre></td></tr></table></figure>
<h1 id="用户命令"><a href="#用户命令" class="headerlink" title="用户命令"></a>用户命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>w</code></td>
<td>查看活动用户</td>
</tr>
<tr>
<td><code>id &lt;username&gt;</code></td>
<td>查看指定用户信息</td>
</tr>
<tr>
<td><code>last</code></td>
<td>查看用户登录日志</td>
</tr>
<tr>
<td><code>cut -d: -f1 /etc/passwd</code></td>
<td>查看系统所有用户</td>
</tr>
<tr>
<td><code>cut -d: -f1 /etc/group</code></td>
<td>查看系统所有组</td>
</tr>
<tr>
<td><code>crontab -l</code></td>
<td>查看当前用户的计划任务</td>
</tr>
</tbody>
</table>
<h1 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ln source dest</code></td>
<td>为 source 创建一个名为 dest 的硬链接</td>
</tr>
<tr>
<td><code>ln -s source dest</code></td>
<td>为 source 创建一个名为 dest 的软链接</td>
</tr>
<tr>
<td><code>tar -cvf filename.tar .</code></td>
<td>将当前目录所有文件归档，但不压缩</td>
</tr>
<tr>
<td><code>tar -xvf filename.tar</code></td>
<td>解压 filename.tar 到当前文件夹</td>
</tr>
<tr>
<td><code>tar -cvjf filename.tar.bz2 .</code></td>
<td>使用 bzip2 压缩当前目录</td>
</tr>
<tr>
<td><code>tar -xvjf filename.tar.bz2</code></td>
<td>解压 filename.tar.bz2 到当前目录</td>
</tr>
<tr>
<td><code>tar -cvzf filename.tar.gz .</code></td>
<td>使用 gzip  压缩当前目录</td>
</tr>
<tr>
<td><code>tar -xvzf filename.tar.gz</code></td>
<td>解压 filename.tar.gz 到当前文件夹</td>
</tr>
<tr>
<td><code>tar -tf filename</code></td>
<td>只查看 filename 归档中的文件，不解压</td>
</tr>
<tr>
<td><code>chown user filename</code></td>
<td>改变 filename 的所有者为 user</td>
</tr>
<tr>
<td><code>chown user:group filename</code></td>
<td>改变 filename 的所有者为 user，组为 group</td>
</tr>
<tr>
<td><code>chown -R root folder</code></td>
<td>改变 folder 文件夹及其子文件的所有者为 root</td>
</tr>
<tr>
<td><code>chmod +x filename</code></td>
<td>为 user，group，other 添加执行权限</td>
</tr>
<tr>
<td><code>chmod -x filename</code></td>
<td>取消 user，group，other 的执行权限</td>
</tr>
<tr>
<td><code>chmod +w filename</code></td>
<td>为 user 添加写入权限</td>
</tr>
<tr>
<td><code>chmod ugo=rwx filename</code></td>
<td>设置 user，group，other 具有读取、写入、执行权限</td>
</tr>
<tr>
<td><code>chmod ug=rw filename</code></td>
<td>设置 user，group 添加读取、写入权限</td>
</tr>
<tr>
<td><code>chmod ugo=--- filename</code></td>
<td>取消所有权限</td>
</tr>
<tr>
<td><code>find . -name &lt;pattern&gt;</code></td>
<td>从当前目录查找符合 pattern 的文件</td>
</tr>
<tr>
<td><code>find &lt;directory&gt; -name PATTERN -exec ls -l &#123;&#125; \;</code></td>
<td>从指定文件查找所有符合 pattern 的文件，并交由 ls 输出详细信息</td>
</tr>
<tr>
<td><code>find ./ -name &quot;*.txt&quot; -exec rm &#123;&#125; \;</code></td>
<td>递归当前目录及子目录删除所有 .txt 文件</td>
</tr>
<tr>
<td><code>find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \) -print</code></td>
<td>在当前目录下递归查找 .txt 和 .pdf 文件</td>
</tr>
<tr>
<td><code>find . -type d -print</code></td>
<td>递归列出当前目录下的所有目录</td>
</tr>
<tr>
<td><code>find . -type f -size +5k</code></td>
<td>查找大于指定大小的文件</td>
</tr>
<tr>
<td><code>find . -type f -name “*.php” -print0 &#124; xargs -0 wc -l</code></td>
<td>统计指定目录下的程序行数</td>
</tr>
<tr>
<td><code>locate php.ini</code></td>
<td>更快的查询指定的文件，需要定期执行更新命令 updatedb 来更新索引库</td>
</tr>
<tr>
<td><code>grep -r &quot;string&quot; /home/user/</code></td>
<td>以递归方式在指定的文件中搜索给定的字符串</td>
</tr>
<tr>
<td><code>grep -i &quot;the&quot; /home/user/.zshrc</code></td>
<td>在指定的文件中搜索给定的字符串</td>
</tr>
<tr>
<td><code>grep &quot;Controller&quot; . -R -n</code></td>
<td>在多级目录中对指定的文本递归搜索</td>
</tr>
<tr>
<td><code>diff -w ~/a.txt ~/b.txt</code></td>
<td>忽略空白后比较两个文件的差异</td>
</tr>
</tbody>
</table>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 将 a.txt 文件中的 php 字符串替换成 javascript 字符串</span><br><span class="line">$ sed -i <span class="string">&quot;s/php/javascript/g&quot;</span> `grep php -rl ./a.txt`</span><br><span class="line"></span><br><span class="line">// 以相反的顺序打印文件内容</span><br><span class="line">$ sed -n <span class="string">&#x27;1!G;h;$p&#x27;</span> /home/user/.zshrc</span><br></pre></td></tr></table></figure>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><blockquote>
<p><a href="http://awk.readthedocs.io/en/latest/chapter-one.html">AWK 程序设计语言</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$0</code></td>
<td><code>当前记录(这个变量中存放着整个行的内容)</code></td>
</tr>
<tr>
<td><code>$1-$n</code></td>
<td><code>当前记录的第 n 个字段，字段间由 FS 分隔</code></td>
</tr>
<tr>
<td><code>FS</code></td>
<td><code>输入字段分隔符，默认是空格或 Tab</code></td>
</tr>
<tr>
<td><code>NF</code></td>
<td><code>当前记录中的字段个数，就是有多少列</code></td>
</tr>
<tr>
<td><code>NR</code></td>
<td><code>已经读出的记录数，就是行号，从 1 开始，如果有多个文件话，这个值也是不断累加中</code></td>
</tr>
<tr>
<td><code>FNR</code></td>
<td><code>当前记录数，与 NR 不同的是，这个值会是各个文件自己的行号</code></td>
</tr>
<tr>
<td><code>RS</code></td>
<td><code>输入的记录分隔符，默认为换行符</code></td>
</tr>
<tr>
<td><code>OFS</code></td>
<td><code>输出字段分隔符，默认为空格</code></td>
</tr>
<tr>
<td><code>ORS</code></td>
<td><code>输出的记录分隔符，默认为换行符</code></td>
</tr>
<tr>
<td><code>FILENAME</code></td>
<td><code>当前输入文件的名字</code></td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 移除指定文件中重复的行并显示出来</span><br><span class="line">$ awk <span class="string">&#x27;!($0 in array) &#123; array[$0]; print &#125;&#x27;</span> a.txt</span><br><span class="line"></span><br><span class="line">// 将 uid 和 gid 相同的行显示出来</span><br><span class="line">$ awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;$3==$4&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">// 准备要操作的数据</span><br><span class="line">$ netstat -atlnpe &gt; netstat.log</span><br><span class="line"></span><br><span class="line">// 输出三列（1，4，9）</span><br><span class="line">$ awk <span class="string">&#x27;&#123;print $1, $4, $9&#125;&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 格式化输出</span><br><span class="line">$ awk <span class="string">&#x27;&#123;printf &quot;%-8s %-8s %-8s %-25s %-25s %-15s\n&quot;,$1,$2,$3,$4,$5,$6&#125;&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 仅显示第 3 列的值为 0 &amp;&amp; 第 6 列的值为 LISTE</span><br><span class="line">$ awk <span class="string">&#x27;$3==0 &amp;&amp; $6==&quot;LISTEN&quot;&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 仅显示第 3 列的值为 0 &amp;&amp; 第 6 列的值为 LISTE, 同时把表头也显示出来</span><br><span class="line">$ awk <span class="string">&#x27;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==2&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 仅显示第 3 列的值为 0 &amp;&amp; 第 6 列的值为 LISTE, 同时把表头也显示出来, 并且格式化输出三列(4, 5, 6)</span><br><span class="line">$ awk <span class="string">&#x27;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==2 &#123;printf &quot;%-20s %-20s %s\n&quot;, $4 , $5, $6&#125;&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 仅显示第 3 列的值为 0 &amp;&amp; 第 6 列的值为 ESTABLISHED, 同时把表头也显示出来, 并且格式化输出三列(4, 5, 6)</span><br><span class="line">$ awk <span class="string">&#x27;$3==0 &amp;&amp; $6==&quot;ESTABLISHED&quot; || NR==2 &#123;printf &quot;%02s %s %-20s %-20s %s\n&quot;, NR, FNR, $4, $5, $6&#125;&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 指定分隔符</span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;print $1, $3, $6&#125;&#x27;</span> /etc/passwd</span><br><span class="line">或者</span><br><span class="line">$ awk -F: <span class="string">&#x27;&#123;print $1, $3, $6&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">// -t 作为分隔符</span><br><span class="line">$ awk -F: <span class="string">&#x27;&#123;print $1, $3, $6&#125;&#x27;</span> OFS=<span class="string">&quot;\t&quot;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">// 匹配 LISTEN</span><br><span class="line">$ awk <span class="string">&#x27;$6 ~ /LISTEN/ || NR==2 &#123;print NR, $4, $5, $6&#125;&#x27;</span> OFS=<span class="string">&quot;\t&quot;</span> netstat.log</span><br><span class="line">或者</span><br><span class="line">$ awk <span class="string">&#x27;/LISTEN/&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 匹配 ESTABLISHED</span><br><span class="line">$ awk <span class="string">&#x27;$6 ~ /ESTABLISHED/ || NR==2 &#123;print NR, $4, $5, $6&#125;&#x27;</span> OFS=<span class="string">&quot;\t&quot;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 匹配 ESTABLISHED 取反</span><br><span class="line">$ awk <span class="string">&#x27;$6 !~ /ESTABLISHED/ || NR==2 &#123;print NR, $4, $5, $6&#125;&#x27;</span> OFS=<span class="string">&quot;\t&quot;</span> netstat.log</span><br><span class="line">或者</span><br><span class="line">$ awk <span class="string">&#x27;!/ESTABLISHED/&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 拆分文件</span><br><span class="line">$ awk <span class="string">&#x27;NR!=1 &amp;&amp; NR!=2 &#123;print &gt; $6&#125;&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 判断匹配拆分文件</span><br><span class="line">$ awk <span class="string">&#x27;NR!=1 &#123; if ($6 ~ /TIME|ESTABLISHED/) print &gt; &quot;1.log&quot;; else if ($6 ~ /LISTEN/) print &gt; &quot;2.log&quot;; else print &gt; &quot;3.log&quot; &#125;&#x27;</span> netstat.log</span><br><span class="line"></span><br><span class="line">// 求 *.php *.js 文件大小总和</span><br><span class="line">$ ls -l *.php *.js | awk <span class="string">&#x27;&#123;sum+=$5&#125; END &#123;print sum&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">// 统计每个用户的进程的占了多少内存</span><br><span class="line">$ ps aux | awk <span class="string">&#x27;NR!=1 &#123;a[$1]+=$6;&#125; END &#123; for(i in a) print i &quot;: &quot; a[i]&quot; KB&quot;; &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">// 从文件中找出长度大于 80 的行</span><br><span class="line">$ awk <span class="string">&#x27;length&gt;80&#x27;</span> /etc/php.ini</span><br><span class="line"></span><br><span class="line">// 按连接数查看客户端 IP</span><br><span class="line">$ netstat -ntu | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> | cut -d: -f1 | sort | uniq -c | sort -nr</span><br><span class="line"></span><br><span class="line">// 打印九九乘法表</span><br><span class="line">$ seq 9 | sed <span class="string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="string">&#x27;&#x27;</span> <span class="string">&#x27;&#123; for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\n&quot;:&quot;\t&quot;) &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 统计一个文件的行数，字数，字节数，文件名称</span><br><span class="line">$ wc filename</span><br><span class="line"></span><br><span class="line">// 统计一个文件的字符数</span><br><span class="line">$ wc -c filename</span><br><span class="line"></span><br><span class="line">// 统计一个文件的字符数</span><br><span class="line">$ wc -m filename</span><br><span class="line"></span><br><span class="line">// 统计一个文件的行数</span><br><span class="line">$ wc -l filename</span><br><span class="line"></span><br><span class="line">// 统计一个文件的单词数</span><br><span class="line">$ wc -w filename</span><br><span class="line"></span><br><span class="line">// 统计目录下的文件个数</span><br><span class="line">$ ll &lt;directory&gt; | wc -l</span><br></pre></td></tr></table></figure>
<p>本篇内容会持续更新</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 网络 IO 模型</title>
    <url>/2021/01/21/linux-network-io-model/</url>
    <content><![CDATA[<p><img src="/images/2021/202101210847.png" alt="202101210847.png"></p>
<p>🍹 Linux 的内核将所有外部设备都看做一个文件来操作（一切皆文件），对一个 <strong>File</strong> 的读写操作会调用内核提供的系统命令，返回一个 <strong>File Descriptor</strong>（FD 文件描述符）。而对一个 <strong>Socket</strong> 的读写也会有响应的描述符，称为 <strong>Socket File Descriptor</strong>（Socket 文件描述符），描述符就是一个数字，指向内核中的一个结构体（文件路径，数据区等一些属性）。</p>
<p>根据 UNIX 网络编程对 IO 模型的分类，UNIX 提供了 5 种 IO 模型。</p>
<span id="more"></span>
<h2 id="设备处理速度"><a href="#设备处理速度" class="headerlink" title="设备处理速度"></a>设备处理速度</h2><ul>
<li>内存读数据：纳秒级别；</li>
<li>千兆网卡读数据：微妙级别，1 微秒等于 1000 纳秒，网卡比内存慢了千倍；</li>
<li>磁盘读数据：毫秒级别。1 毫秒等于 10 万纳秒 ，硬盘比内存慢了 10 万倍；</li>
<li>CPU 一个时钟周期 1 纳秒上下，内存算是比较接近 CPU 的，其他设备都等不起；</li>
</ul>
<p>CPU 处理数据的速度远大于 IO 准备数据的速度 。所以理论上 <strong>任何编程语言</strong> 都会遇到这种 CPU 处理速度和 IO 速度不匹配的问题，在网络编程中如何进行网络 IO 优化，怎么高效地利用 CPU 进行网络数据处理就变得非常重要。</p>
<h2 id="程序空间与内核空间"><a href="#程序空间与内核空间" class="headerlink" title="程序空间与内核空间"></a>程序空间与内核空间</h2><p>五种模型经历的两个阶段：</p>
<ul>
<li>等待数据准备好（Waiting for the data to be ready）；</li>
<li>将准备好的数据，从内核空间复制到进程空间（Copying the data from the kernel to the process）；</li>
</ul>
<h2 id="五种模型概念"><a href="#五种模型概念" class="headerlink" title="五种模型概念"></a>五种模型概念</h2><p>Linux 在处理文件和网络连接时，都需要打开和关闭 FD（File Descriptor）。每个进程都会有默认的 FD：</p>
<ul>
<li>0：标准输入 stdin；</li>
<li>1：标准输出 stdout；</li>
<li>2：错误输出 stderr；</li>
</ul>
<h3 id="阻塞-IO-模型"><a href="#阻塞-IO-模型" class="headerlink" title="阻塞 IO 模型"></a>阻塞 IO 模型</h3><p>阻塞 IO 模型（Blocking IO）是最常用的 IO 模型，缺省情况下，所有文件操作都是阻塞的。以套接字为例：在进程空间中调用 recvfrom，其系统调用直到数据包到达且被复制到应用进程的缓冲区中或发生错误时才返回。在此期间一直会等待，进程从调用 recvfrom 开始到它返回的整段时间都是被阻塞的。即 recvfrom 的调用会被阻塞。</p>
<h3 id="非阻塞-IO-模型"><a href="#非阻塞-IO-模型" class="headerlink" title="非阻塞 IO 模型"></a>非阻塞 IO 模型</h3><p>非阻塞 IO 模型（Non-blocking IO），recvfrom 从应用层到内核的时候，如果缓冲区没有数据的话，就直接返回一个 EWOULDBLOCK 错误，一般对非阻塞 IO 模型进行轮询检查这个状态，看内核是不是有数据到来。即反复调用 recvfrom 等待成功指示（轮询）。</p>
<h3 id="IO-复用模型"><a href="#IO-复用模型" class="headerlink" title="IO 复用模型"></a>IO 复用模型</h3><p>IO 复用模型（IO Multiplexing），Linux 提供 select/poll，进程通过将一个或者多个 fd 传递给 select 或 poll 系统调用，阻塞在 select 操作上，阻塞在 select 操作上，这样 select/poll 可以帮我们侦测到多个 fd 是否处于就绪状态。select/poll 是顺序扫描 fd 是否就绪，而且支持的 fd 数量有限，因此它的使用受到了一些制约。Linux 还提供了 epoll 系统调用，epoll 使用基于事件驱动方式代替顺序扫描，因此性能更高。当有 fd 就绪时，立即回调函数 callback。即阻塞在 select/poll/epoll，以及数据复制拷贝的这段时间。</p>
<h3 id="信号驱动-IO-模型"><a href="#信号驱动-IO-模型" class="headerlink" title="信号驱动 IO 模型"></a>信号驱动 IO 模型</h3><p>信号驱动 IO 模型（Signal Driven IO），首先开启信号曲驱动 IO 功能，并通过系统调用 Sigaction 执行一个信号处理函数（此系统调用立即返回，进程继续工作，它是非阻塞的）。当数据准备就绪时，就为该进程生成一个 SIGIO 信号，通过信号回调通知应用程序调用 recvfrom 来读取数据，并通知主循环函数处理数据。即阻塞在数据复制拷贝的这段时间。</p>
<h3 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h3><p>异步 IO（Asynchronous IO），告知内核启动某个文件，并让内核整个操作完成后（包括将数据从内核复制到用户自己的缓冲区）通知我们。这种模型与信号模型的组要区别是：信号驱动 IO 由内核通知我们何时可以开始一个 IO 操作：异步 IO 模型由内核通知我们 IO 操作何时已完成。</p>
<h2 id="五种模型的区别"><a href="#五种模型的区别" class="headerlink" title="五种模型的区别"></a>五种模型的区别</h2><ul>
<li>阻塞 IO、非阻塞 IO、多路复用 IO、信号驱动 IO 都是同步 IO，五种模型在内核数据 Copy 到用户空间时都是阻塞的。</li>
<li>阻塞与非阻塞 IO：发起 IO 请求是否会被阻塞，如果阻塞就是传统的阻塞 IO，不如不阻塞就是非阻塞 IO；</li>
<li>同步与异步 IO：如果实际的 IO 读写阻塞请求过程，那么就是同步 IO，如果不阻塞，而是操作系统协助做完 IO 操作再将结果返回给你，那么就是异步 IO；</li>
</ul>
<h2 id="IO-多路复用技术"><a href="#IO-多路复用技术" class="headerlink" title="IO 多路复用技术"></a>IO 多路复用技术</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>IO 多路复用就是通过一种机制，一个进程可以监视多个文件描述符，一旦某个描述符就绪（读就绪或写就绪），能够通知程序进行相应的读写操作。</p>
</blockquote>
<ul>
<li>当客户处理多个描述字时（一般是交互式输入和网络套接口），必须使用 IO 复用；</li>
<li>当一个客户同时处理多个套接口时，而这种情况是可能的，但很少出现；</li>
<li>服务器需要同时处理多个处于监听状态或多个连接状态的套接字；</li>
<li>服务器需要同时处理多个服务或多个协议的套接字；</li>
</ul>
<p>与多进程和多线程技术相比，IO 多路复用技术的最大优势是系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减小了系统的开销。</p>
<h3 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h3><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><ul>
<li>良好跨平台支持；</li>
<li>单个进程可监视的 FD 数量被限制，即能监听端口的大小有限。一般来说这个数目和系统内存关系很大，具体数目可以 <code>cat /proc/sys/fs/file-max</code> 查看。32 位机默认是 1024 个。64 位机默认是 2048 个；</li>
<li>对 Socket 进行扫描时是线性扫描，即采用轮询的方法，效率较低：当套接字比较多的时候，每次 <code>select()</code> 都要通过遍历 FD_SETSIZE 个 Socket 来完成调度,不管哪个 Socket 是活跃的，都遍历一遍。这会浪费很多 CPU 时间。如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询，这正是 epoll 与 kqueue 做的；</li>
<li>需要维护一个用来存放大量 FD 的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大；</li>
<li>可以在一个线程内同时处理多个 Socket 的 IO 请求。在网络编程中，当涉及到多客户访问服务器的情况，我们首先想到的办法就是 fork 出多个进程来处理每个客户连接。现在，我们同样可以使用 select 来处理多客户问题，而不用 fork；</li>
</ul>
<p>用 select 处理带外数据，网络程序中，select 能处理的异常情况只有一种：socket 上接收到带外数据。</p>
<p>带外数据：带外数据（out—of—band data），有时也称为加速数据（expedited data），是指连接双方中的一方发生重要事情，想要迅速地通知对方。这种通知在已经排队等待发送的任何普通（有时称为『带内』）数据之前发送。带外数据设计为比普通数据有更高的优先级。带外数据是映射到现有的连接中的，而不是在客户机和服务器间再用一个连接。</p>
<h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><ul>
<li>没有最大文件描述符数量的限制；</li>
<li>和 select 一样，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大；</li>
<li>同 select 一样，内核需要将消息传递到用户空间，都需要内核拷贝动作；</li>
</ul>
<h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><ul>
<li>没有最大并发连接的限制，能打开的 FD 的上限远大于 1024（1G 的内存上能监听约 10 万个端口）；</li>
<li>IO 效率不会随着 FD 数目的增加而线性下将，只有活跃可用的 FD 才会调用 callback 函数；</li>
<li>内存拷贝，利用 mmap 文件映射内存加速与内核空间的消息传递。epoll 使用 mmap 减少复制开销，即 epoll 使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的 copy 只需一次；</li>
<li>通过内核和用户空间共享一块内存来实现，不需要内核拷贝动作；</li>
<li>epoll 拥有更加简单的 API；</li>
</ul>
<p>epoll 对文件描述符的操作有两种模式：</p>
<ul>
<li>LT（<code>Level Trigger</code>，水平触发）模式：是缺省的工作方式，并且同时支持 block 和 non-block socket。当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用 epoll_wait 时，会再次响应应用程序并通知此事件，这种机制可以比较好的保证每个数据用户都处理掉了；</li>
<li>ET（<code>Edge Trigger</code>，边缘触发）模式：是高速工作方式，只支持 non-block socket。,当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用 epoll_wait 时，不会再次响应应用程序并通知此事件。简而言之，就是内核通知过的事情不会再说第二遍，数据错过没读，你自己负责。这种机制确实速度提高了，但是风险相伴而行；</li>
</ul>
<p>ET 模式在很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。epoll 工作在 ET 模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>
<h3 id="技术区别"><a href="#技术区别" class="headerlink" title="技术区别"></a>技术区别</h3><table>
<thead>
<tr>
<th></th>
<th>select</th>
<th>poll</th>
<th>epoll</th>
</tr>
</thead>
<tbody>
<tr>
<td>事件集合</td>
<td>通过 3 个参数分别传入感兴趣的可读可写及异常事件。内核通过对这些参数的在线修改来反馈其中的就绪事件，这这使得用户每次调用 select 都要重置这 3 个 参数</td>
<td>统一处理所有事件类型，因此只需要一个事件参数，用户通过 pollfd.events 传入感兴趣的事件，内核通过修改 pollfd.revents 参数反馈其中就绪的事件</td>
<td>内核通过一个事件直接管理用户感兴趣的所有事件，因此每次调用 epoll_wait 时，无需反复传入用户感兴趣的事件，epoll_wait 系统调用的参数 events 仅用来反馈就绪的事件</td>
</tr>
<tr>
<td>工作原则</td>
<td>采用轮询方式检测就绪事件，时间复杂度：O(n)</td>
<td>采用轮询方式检测就绪事件，时间复杂度：O(n)</td>
<td>采用回调方式检测就绪事件，时间复杂度：O(1)</td>
</tr>
<tr>
<td>最大连接</td>
<td>1024</td>
<td>无上限</td>
<td>无上限</td>
</tr>
<tr>
<td>工作模式</td>
<td>LT</td>
<td>LT</td>
<td>LT 和 ET</td>
</tr>
<tr>
<td>文件描述</td>
<td>每次调用，每次拷贝</td>
<td>每次调用，每次拷贝</td>
<td>通过 mmap 的内存映射技术，降低拷贝的资源消耗</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux crontab 命令</title>
    <url>/2019/12/29/linux-crontab-command/</url>
    <content><![CDATA[<p><img src="/images/2020/202003151156.jpeg" alt="202003151156.jpeg"></p>
<p>♻️ crontab 命令被用来提交和管理用户的需要周期性执行的任务。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>通过 <strong>crontab</strong> 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script 脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><code>-e</code>：编辑该用户的计时器设置；</li>
<li><code>-l</code>：列出该用户的计时器设置；</li>
<li><code>-r</code>：删除该用户的计时器设置；</li>
<li><code>-u&lt;username&gt;</code>：指定要设定计时器的用户名称。</li>
</ul>
<h1 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h1><h2 id="系统任务调度"><a href="#系统任务调度" class="headerlink" title="系统任务调度"></a>系统任务调度</h2><p><strong>系统任务调度</strong> 是系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在 <code>/etc</code> 目录下有一个 crontab 文件，这个就是系统任务调度的配置文件。</p>
<p><code>/etc/crontab</code> 文件包括下面几行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash <span class="comment"># SHELL变量指定了系统要使用哪个 shell，这里是 bash</span></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin <span class="comment"># PATH 变量指定了系统执行命令的路径</span></span><br><span class="line">MAILTO=<span class="string">&quot;&quot;</span> <span class="comment"># MAILTO 变量指定了 crond 的任务执行信息将通过电子邮件发送给 root 用户，如果 MAILTO 变量的值为空，则表示不发送任务执行信息给用户</span></span><br><span class="line">HOME=/ <span class="comment"># HOME 变量指定了在执行命令或者脚本时使用的主目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run-parts</span></span><br><span class="line">51 * * * * root run-parts /etc/cron.hourly</span><br><span class="line">24 7 * * * root run-parts /etc/cron.daily</span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure>
<h2 id="用户任务调度"><a href="#用户任务调度" class="headerlink" title="用户任务调度"></a>用户任务调度</h2><p><strong>用户任务调度</strong> 是用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的 crontab 文件都被保存在 <code>/var/spool/cron</code> 目录中。其文件名与用户名一致，使用者权限文件如下：</p>
<blockquote>
<ul>
<li>/etc/cron.deny 该文件中所列用户不允许使用 crontab 命令；</li>
<li>/etc/cron.allow 该文件中所列用户允许使用 crontab 命令；</li>
<li>/var/spool/cron/ 所有用户 crontab 文件存放的目录，以用户名命名。</li>
</ul>
</blockquote>
<h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/202003/202003151135.png" alt="202003151135.png"></p>
<p>在以上各个字段中，还可以使用以下特殊字符：</p>
<blockquote>
<ul>
<li><code>*</code>：代表所有可能的值，例如 month 字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作；</li>
<li><code>,</code>：可以用逗号隔开的值指定一个列表范围，例如：<code>1,2,5,7,8,9</code>；</li>
<li><code>-</code>：可以用整数之间的中杠表示一个整数范围，例如：<code>2-6</code> 表示 <code>2,3,4,5,6</code>；</li>
<li><code>/</code>：可以用正斜线指定时间的间隔频率，例如：<code>0-23/2</code> 表示每两小时执行一次。同时正斜线可以和星号一起使用，例如：<code>*/10</code>，如果用在 minute 字段，表示每十分钟执行一次。</li>
</ul>
</blockquote>
<h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><div class="note info">
            <p>最好在 <code>crontab</code> 文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的定时作业。</p>
          </div>
<h2 id="每-1-分钟执行一次命令"><a href="#每-1-分钟执行一次命令" class="headerlink" title="每 1 分钟执行一次命令"></a>每 1 分钟执行一次命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<h2 id="每小时的第-3-和第-15-分钟执行"><a href="#每小时的第-3-和第-15-分钟执行" class="headerlink" title="每小时的第 3 和第 15 分钟执行"></a>每小时的第 3 和第 15 分钟执行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3,15 * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<h2 id="上午-8-点到-11-点的第-3-和第-15-分钟执行"><a href="#上午-8-点到-11-点的第-3-和第-15-分钟执行" class="headerlink" title="上午 8 点到 11 点的第 3 和第 15 分钟执行"></a>上午 8 点到 11 点的第 3 和第 15 分钟执行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3,15 8-11 * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<h2 id="每隔两天的上午-8-点到-11-点的第-3-和第-15-分钟执行"><a href="#每隔两天的上午-8-点到-11-点的第-3-和第-15-分钟执行" class="headerlink" title="每隔两天的上午 8 点到 11 点的第 3 和第 15 分钟执行"></a>每隔两天的上午 8 点到 11 点的第 3 和第 15 分钟执行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3,15 8-11 */2 * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<h2 id="每个星期一的上午-8-点到-11-点的第-3-和第-15-分钟执行"><a href="#每个星期一的上午-8-点到-11-点的第-3-和第-15-分钟执行" class="headerlink" title="每个星期一的上午 8 点到 11 点的第 3 和第 15 分钟执行"></a>每个星期一的上午 8 点到 11 点的第 3 和第 15 分钟执行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3,15 8-11 * * 1 <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<h2 id="每晚的-21-30-重启-smb"><a href="#每晚的-21-30-重启-smb" class="headerlink" title="每晚的 21:30 重启 smb"></a>每晚的 21:30 重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="每月-1、10、22-日的-4-45-重启-smb"><a href="#每月-1、10、22-日的-4-45-重启-smb" class="headerlink" title="每月 1、10、22 日的 4:45 重启 smb"></a>每月 1、10、22 日的 4:45 重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="每周六、周日的-1-10-重启-smb"><a href="#每周六、周日的-1-10-重启-smb" class="headerlink" title="每周六、周日的 1:10 重启 smb"></a>每周六、周日的 1:10 重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="每天-18-00-至-23-00-之间每隔-30-分钟重启-smb"><a href="#每天-18-00-至-23-00-之间每隔-30-分钟重启-smb" class="headerlink" title="每天 18:00 至 23:00 之间每隔 30 分钟重启 smb"></a>每天 18:00 至 23:00 之间每隔 30 分钟重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="每星期六的晚上-11-00-PM-重启-smb"><a href="#每星期六的晚上-11-00-PM-重启-smb" class="headerlink" title="每星期六的晚上 11:00 PM 重启 smb"></a>每星期六的晚上 11:00 PM 重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="每一小时重启-smb"><a href="#每一小时重启-smb" class="headerlink" title="每一小时重启 smb"></a>每一小时重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="晚上-11-点到早上-7-点之间，每隔一小时重启-smb"><a href="#晚上-11-点到早上-7-点之间，每隔一小时重启-smb" class="headerlink" title="晚上 11 点到早上 7 点之间，每隔一小时重启 smb"></a>晚上 11 点到早上 7 点之间，每隔一小时重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* 23-7/1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="每月的-4-号与每周一到周三的-11-点重启-smb"><a href="#每月的-4-号与每周一到周三的-11-点重启-smb" class="headerlink" title="每月的 4 号与每周一到周三的 11 点重启 smb"></a>每月的 4 号与每周一到周三的 11 点重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 11 4 * mon-wed /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="一月一号的-4-点重启-smb"><a href="#一月一号的-4-点重启-smb" class="headerlink" title="一月一号的 4 点重启 smb"></a>一月一号的 4 点重启 smb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 4 1 jan * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>
<h2 id="每小时执行-etc-cron-hourly-目录内的脚本"><a href="#每小时执行-etc-cron-hourly-目录内的脚本" class="headerlink" title="每小时执行 /etc/cron.hourly 目录内的脚本"></a>每小时执行 /etc/cron.hourly 目录内的脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 网络配置工具</title>
    <url>/2019/12/04/linux-network-configuration-tools/</url>
    <content><![CDATA[<p><img src="/images/2019/201912042040.png" alt="201912042040.png"></p>
<p>🧬 是时候体验下 iproute2 网络配置工具全家桶了，net-tools 家族有的 iproute2 一样也不差。我起初也不知道，直到新买的百度云服务器查看地址时出现『command not found』，才查阅资料了解了一下，原来 net-tools 这货已经寿终正寝了。Arch Linux 和 CentOS 已经完全抛弃了 net-tools，只支持 iproute2。</p>
<span id="more"></span>
<h1 id="net-tools"><a href="#net-tools" class="headerlink" title="net-tools"></a>net-tools</h1><ul>
<li><a href="http://net-tools.sourceforge.net/">net-tools</a></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ifconfig -a</code></td>
<td>显示所有已连接的网络接口</td>
</tr>
<tr>
<td><code>sudo ifconfig eth1 up</code></td>
<td>激活网络接口</td>
</tr>
<tr>
<td><code>sudo ifconfig eth1 down</code></td>
<td>停用网络接口</td>
</tr>
<tr>
<td><code>sudo ifconfig eth1 10.0.0.1/24</code></td>
<td>为网络接口分配 IPv4 地址</td>
</tr>
<tr>
<td><code>sudo ifconfig eth1 0</code></td>
<td>移除网络接口的 IPv4 地址</td>
</tr>
<tr>
<td><code>ifconfig eth1</code></td>
<td>显示网络接口的 IPv4 或 IPv6 地址</td>
</tr>
<tr>
<td><code>sudo ifconfig eth1 inet6 add 2080::f816:3ea1:fe98:7b20/64</code></td>
<td>为网络接口分配 IPv6 地址</td>
</tr>
<tr>
<td><code>sudo ifconfig eth1 inet6 del 2080::f816:3ea1:fe98:7b20/64</code></td>
<td>移除网络设备的 IPv6 地址</td>
</tr>
<tr>
<td><code>sudo ifconfig eth1 hw ether 00:16:3e:04:d9:97</code></td>
<td>改变网络接口的 MAC 地址</td>
</tr>
<tr>
<td><code>route -n</code> 或 <code>netstat -rn</code></td>
<td>查看 IP 路由表</td>
</tr>
<tr>
<td><code>sudo route add default gw 192.168.1.2 eth0</code></td>
<td>添加默认路由</td>
</tr>
<tr>
<td><code>sudo route del default gw 192.168.1.1 eth0</code></td>
<td>修改默认路由</td>
</tr>
<tr>
<td><code>sudo route add -net 172.16.32.0/24 gw 192.168.1.1 dev eth0</code></td>
<td>添加静态路由</td>
</tr>
<tr>
<td><code>sudo route del -net 172.16.32.0/24</code></td>
<td>移除静态路由</td>
</tr>
<tr>
<td><code>netstat</code> 或 <code>netstat -l</code></td>
<td>查看套接字统计信息</td>
</tr>
<tr>
<td><code>arp -an</code></td>
<td>查看 ARP 表</td>
</tr>
<tr>
<td><code>sudo arp -s 192.168.1.100 00:16:3e:04:d9:07</code></td>
<td>添加静态 ARP 项</td>
</tr>
<tr>
<td><code>sudo arp -d 192.168.1.100</code></td>
<td>删除静态 ARP 项</td>
</tr>
<tr>
<td><code>sudo ipmaddr add 33:44:00:00:00:01 dev eth0</code></td>
<td>添加多播地址</td>
</tr>
<tr>
<td><code>sudo ipmaddr del 33:44:00:00:00:01 dev eth0</code></td>
<td>删除多播地址</td>
</tr>
<tr>
<td><code>ipmaddr show dev eth0</code> 或 <code>netstat -g</code></td>
<td>查看多播地址</td>
</tr>
</tbody>
</table>
<h1 id="iproute2"><a href="#iproute2" class="headerlink" title="iproute2"></a>iproute2</h1><ul>
<li><a href="https://wiki.linuxfoundation.org/networking/iproute2">iproute2</a></li>
<li><a href="https://github.com/shemminger/iproute2">Linux routing utilities</a></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ip link show</code></td>
<td>显示所有已连接的网络接口</td>
</tr>
<tr>
<td><code>sudo ip link set up eth1</code></td>
<td>激活网络接口</td>
</tr>
<tr>
<td><code>sudo ip link set down eth1</code></td>
<td>停用网络接口</td>
</tr>
<tr>
<td><code>sudo ip addr add 10.0.0.1/24 dev eth1</code></td>
<td>为网络接口分配 IPv4 地址</td>
</tr>
<tr>
<td><code>sudo ip addr del 10.0.0.1/24 dev eth1</code></td>
<td>移除网络接口的 IPv4 地址</td>
</tr>
<tr>
<td><code>ip addr show dev eth1</code> 或 <code>ip -6 addr show dev eth1</code></td>
<td>显示网络接口的 IPv4 或 IPv6 地址</td>
</tr>
<tr>
<td><code>sudo ip -6 addr add 2002:0db5:0:f102::1/64 dev eth1</code></td>
<td>为网络接口分配 IPv6 地址</td>
</tr>
<tr>
<td><code>sudo ip -6 addr del 2002:0db5:0:f102::1/64 dev eth1</code></td>
<td>移除网络设备的 IPv6 地址</td>
</tr>
<tr>
<td><code>sudo ip link set dev eth1 address 00:16:3e:04:d9:97</code></td>
<td>改变网络接口的 MAC 地址</td>
</tr>
<tr>
<td><code>ip route show</code></td>
<td>查看 IP 路由表</td>
</tr>
<tr>
<td><code>sudo ip route add default via 192.168.1.2 dev eth0</code></td>
<td>添加默认路由</td>
</tr>
<tr>
<td><code>sudo ip route replace default via 192.168.1.2 dev eth0</code></td>
<td>修改默认路由</td>
</tr>
<tr>
<td><code>sudo ip route add 172.16.32.0/24 via 192.168.1.1 dev eth0</code></td>
<td>添加静态路由</td>
</tr>
<tr>
<td><code>sudo ip route del 172.16.32.0/24</code></td>
<td>移除静态路由</td>
</tr>
<tr>
<td><code>ss</code> 或 <code>ss -l</code></td>
<td>查看套接字统计信息</td>
</tr>
<tr>
<td><code>ip neigh</code></td>
<td>查看 ARP 表</td>
</tr>
<tr>
<td><code>sudo ip neigh add 192.168.1.100 lladdr 00:0c:29:c0:5a:ef dev eth0</code></td>
<td>添加静态 ARP 项</td>
</tr>
<tr>
<td><code>sudo ip neigh del 192.168.1.100 dev eth0</code></td>
<td>删除静态 ARP 项</td>
</tr>
<tr>
<td><code>sudo ip maddr add 33:44:00:00:00:01 dev eth0</code></td>
<td>添加多播地址</td>
</tr>
<tr>
<td><code>sudo ip maddr del 33:44:00:00:00:01 dev eth0</code></td>
<td>删除多播地址</td>
</tr>
<tr>
<td><code>ip maddr list dev eth0</code></td>
<td>查看多播地址</td>
</tr>
</tbody>
</table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://xmodulo.com/linux-tcpip-networking-net-tools-iproute2.html">Linux TCP/IP networking: net-tools vs. iproute2</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Console 之浏览器控制台</title>
    <url>/2018/01/31/js-chrome-console/</url>
    <content><![CDATA[<p><code>Chrome</code> 几乎是最好的浏览器，是的，我一直这么认为，它的开发者工具也觉不含糊，来，试一试 <code>Console</code>。</p>
<span id="more"></span>
<h1 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h1><h2 id="输出日志信息"><a href="#输出日志信息" class="headerlink" title="输出日志信息"></a>输出日志信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通日志信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;this is a log&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单样式的日志信息</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="string">&#x27;%cHello World!&#x27;</span>, style = <span class="string">&#x27;font-size: 30px; color: blue;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(template, style);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 华丽样式的日志信息</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="string">&#x27;%cHello World!&#x27;</span>, style = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">style += <span class="string">&#x27;background-image: -webkit-gradient(linear, left top, right top,&#x27;</span>;</span><br><span class="line">style += <span class="string">&#x27;color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f),&#x27;</span>;</span><br><span class="line">style += <span class="string">&#x27;color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2),&#x27;</span>;</span><br><span class="line">style += <span class="string">&#x27;color-stop(0.9, #ff2), color-stop(1, #f22));&#x27;</span>;</span><br><span class="line">style += <span class="string">&#x27;color: transparent; -webkit-background-clip: text; font-size: 6em;)&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(template, style);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片日志信息</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="string">&#x27;padding: 150px 200px; line-height: 300px; background: url(http://www.wyzu.cn/data/uploadfile/200803/2008032812262650.gif) no-repeat;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%c&#x27;</span>, style);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受不定参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%cHello World!&#x27;</span>, <span class="string">&#x27;color: red;&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;Web Developer&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="输出提示信息"><a href="#输出提示信息" class="headerlink" title="输出提示信息"></a>输出提示信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">&#x27;this is a info&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="输出警告信息"><a href="#输出警告信息" class="headerlink" title="输出警告信息"></a>输出警告信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.warn(<span class="string">&#x27;this is a warn.&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="输出错误信息"><a href="#输出错误信息" class="headerlink" title="输出错误信息"></a>输出错误信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.error(<span class="string">&#x27;this is a error&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="输出分组信息"><a href="#输出分组信息" class="headerlink" title="输出分组信息"></a>输出分组信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通组</span></span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;App.log&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;this is a group log.&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;App.info&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">&#x27;this is a group info.&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组嵌套</span></span><br><span class="line"><span class="keyword">var</span> user = <span class="string">&#x27;Atkinson&#x27;</span>, authenticated = <span class="literal">true</span>, authorized = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">&quot;Authenticating user &#x27;%s&#x27;&quot;</span>, user);</span><br><span class="line"><span class="keyword">if</span> (authenticated) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;User &#x27;%s&#x27; was authenticated.&quot;</span>, user);</span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">&quot;Authorizing user &#x27;%s&#x27;.&quot;</span>, user);</span><br><span class="line">    <span class="keyword">if</span> (authorized) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;User &#x27;%s&#x27; was authorized.&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;A nested group log trace.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 折叠组</span></span><br><span class="line"><span class="keyword">var</span> user = <span class="string">&#x27;Atkinson&#x27;</span>, authenticated = <span class="literal">true</span>, authorized = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">&quot;Authenticating user &#x27;%s&#x27;&quot;</span>, user);</span><br><span class="line"><span class="keyword">if</span> (authenticated) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;User &#x27;%s&#x27; was authenticated.&quot;</span>, user);</span><br><span class="line">    <span class="built_in">console</span>.groupCollapsed(<span class="string">&quot;Authorizing user &#x27;%s&#x27;.&quot;</span>, user);</span><br><span class="line">    <span class="keyword">if</span> (authorized) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;User &#x27;%s&#x27; was authorized.&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;A nested group log trace.&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="字符串替换和格式"><a href="#字符串替换和格式" class="headerlink" title="字符串替换和格式"></a>字符串替换和格式</h2><p>格式说明符的完整列表</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%s</code></td>
<td>格式的值作为一个字符串</td>
</tr>
<tr>
<td><code>%i</code> 或 <code>%d</code></td>
<td>格式的值为整数</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>格式的值作为一个浮点值</td>
</tr>
<tr>
<td><code>%o</code></td>
<td>格式的值是一个可扩展的 <code>DOM</code> 元素, 在内容面板中看到的</td>
</tr>
<tr>
<td><code>%O</code></td>
<td>格式的值是一个可扩展的 <code>JavaScript</code> 对象</td>
</tr>
<tr>
<td><code>%c</code></td>
<td>应用 <code>CSS</code> 样式规则输出字符串的二参数指定</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Node count: %d, and the time is %f.&quot;</span>, <span class="built_in">document</span>.childNodes.length, <span class="built_in">Date</span>.now());</span><br></pre></td></tr></table></figure>
<h2 id="将-DOM-结点以-JavaScript-对象的形式输出到控制台"><a href="#将-DOM-结点以-JavaScript-对象的形式输出到控制台" class="headerlink" title="将 DOM 结点以 JavaScript 对象的形式输出到控制台"></a>将 DOM 结点以 JavaScript 对象的形式输出到控制台</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.body);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.body.firstElementChild);</span><br></pre></td></tr></table></figure>
<h2 id="输出表格信息"><a href="#输出表格信息" class="headerlink" title="输出表格信息"></a>输出表格信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本表格</span></span><br><span class="line"><span class="keyword">var</span> table = [</span><br><span class="line">    &#123;<span class="string">&#x27;名称&#x27;</span>: <span class="string">&#x27;MacBook Pro&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;单位&#x27;</span>: <span class="string">&#x27;台&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;名称&#x27;</span>: <span class="string">&#x27;ThinkPad&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;单位&#x27;</span>: <span class="string">&#x27;台&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;名称&#x27;</span>: <span class="string">&#x27;JavaScript 工程师&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;单位&#x27;</span>: <span class="string">&#x27;人&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;名称&#x27;</span>: <span class="string">&#x27;PHP 工程师&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;单位&#x27;</span>: <span class="string">&#x27;人&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.table(table);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高级表格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, email, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.email = email;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> language = &#123;&#125;;</span><br><span class="line">language.c = <span class="keyword">new</span> Person(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;clang@gmail.com&#x27;</span>, <span class="number">40</span>);</span><br><span class="line">language.php = <span class="keyword">new</span> Person(<span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;php@gmail.com&#x27;</span>, <span class="number">25</span>);</span><br><span class="line">language.java = <span class="keyword">new</span> Person(<span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;java@gmail.com&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">language.javascript = <span class="keyword">new</span> Person(<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;javascript@gmail.com&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.table(language, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代替三目运算，先对传入的表达式进行断言，只有表达式为假时才输出信息</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isDebug, <span class="string">&#x27;请稍候, 系统正在调试中...&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="堆栈跟踪"><a href="#堆栈跟踪" class="headerlink" title="堆栈跟踪"></a>堆栈跟踪</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.trace(<span class="string">&#x27;recursion is function:&#x27;</span>, num);</span><br><span class="line">        <span class="keyword">return</span> num + add(num - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h1 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统计某段代码执行了多少次</span></span><br><span class="line"><span class="keyword">var</span> Test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.count(<span class="string">&#x27;`testFunc()` 函数被执行的次数&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            testFunc();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Test();</span><br><span class="line">f.init(); <span class="comment">// `testFunc()` 函数被执行的次数：1</span></span><br><span class="line">f.init(); <span class="comment">// `testFunc()` 函数被执行的次数：2</span></span><br></pre></td></tr></table></figure>
<h1 id="统计任务耗时"><a href="#统计任务耗时" class="headerlink" title="统计任务耗时"></a>统计任务耗时</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;Array initialize&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    array[i] = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;Array initialize&#x27;</span>); <span class="comment">// Array initialize: 1416.217ms</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/?hl=en">Using the Console</a></li>
<li><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html">Chrome 控制台不完全指南</a></li>
<li><a href="http://www.cnblogs.com/Wayou/p/things_you_dont_know_about_frontend.html">前端不为人知的一面–前端冷知识集锦</a></li>
<li><a href="http://james.padolsey.com/javascript/parsing-urls-with-the-dom/">Parsing URLs with the DOM</a></li>
<li><a href="https://developer.chrome.com/devtools/docs/commandline-api">Command Line API Reference</a></li>
<li><a href="https://segmentfault.com/a/1190000007713707">一天精通 Chrome 开发</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装配置 Shadowsocks</title>
    <url>/2019/01/02/linux-shadowsocks/</url>
    <content><![CDATA[<p><img src="/images/2019/201908191931.jpg" alt="201908191931.jpg"></p>
<p>🌏Shadowsocks 是一种基于 Socks5 代理方式的加密传输协议，也可以指实现这个协议的各种开发包。当前包使用 Python、C、C++、C#、Go 语言等编程语言开发，大部分主要实现（iOS 平台的除外）采用 Apache 许可证、GPL、MIT 许可证等多种自由软件许可协议开放源代码。Shadowsocks 分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。不多说，你懂得。</p>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h2><p><a href="https://shadowsocks.org/en/download/servers.html">参见不同支持语言的安装方式</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 pip3</span><br><span class="line">$ sudo apt install python3-pip</span><br><span class="line"></span><br><span class="line">// 安装 shadowsocks</span><br><span class="line">$ pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip</span><br><span class="line"></span><br><span class="line">// 检查 shadowsocks 版本</span><br><span class="line">$ ssserver --version</span><br><span class="line">Shadowsocks 3.0.0</span><br></pre></td></tr></table></figure>
<h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir /etc/shadowsocks</span><br><span class="line">$ sudo vim /etc/shadowsocks/shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;server_ip&quot;</span>, // 服务端监听 IP 地址，有人填 0.0.0.0 据说也可以</span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>: 9009, // 服务器监听端口号，一般自定义</span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>, // 本地代理 IP 地址</span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>: 1080, // 本地代理端口号</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;password&quot;</span>, // 服务端密码</span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>: 300, // 超时时间，以秒为单位</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;aes-256-cfb&quot;</span>, // 加密方式，据说 rc4-md5 的加密方式速度要快</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;udp&quot;</span> // 运行模式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 加载配置启动服务</span><br><span class="line">$ sudo ssserver -c /etc/shadowsocks/shadowsocks.json -d start</span><br><span class="line">或</span><br><span class="line">$ sudo ssserver -s 0.0.0.0 -p 443 -k password -m rc4-md5 -t 300 --user nobody -d start</span><br><span class="line"></span><br><span class="line">// 后台一直运行 Shadowsocks 服务</span><br><span class="line">$ sudo nohup ssserver -c /etc/shadowsocks/shadowsocks.json &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">// 停止服务</span><br><span class="line">$ sudo ssserver -d stop</span><br><span class="line"></span><br><span class="line">// 查看日志</span><br><span class="line">$ cat /var/<span class="built_in">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure>
<h2 id="开机启动配置"><a href="#开机启动配置" class="headerlink" title="开机启动配置"></a>开机启动配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在 /lib/systemd/system 下创建文件并粘贴如下内容</span><br><span class="line">$ sudo vim /lib/systemd/system/shadowsocks.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/shadowsocks.json</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h3 id="设置启动"><a href="#设置启动" class="headerlink" title="设置启动"></a>设置启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置开机启动</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> shadowsocks.service</span><br><span class="line"></span><br><span class="line">// 启动</span><br><span class="line">$ sudo systemctl start shadowsocks.service</span><br><span class="line"></span><br><span class="line">// 状态</span><br><span class="line">$ sudo systemctl status shadowsocks.service</span><br><span class="line">● shadowsocks.service - Shadowsocks Server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/shadowsocks.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Tue 2019-01-01 21:45:35 EST; 48min ago</span><br><span class="line"> Main PID: 446 (ssserver)</span><br><span class="line">    Tasks: 1 (<span class="built_in">limit</span>: 1175)</span><br><span class="line">   CGroup: /system.slice/shadowsocks.service</span><br><span class="line">           └─446 /usr/bin/python3 /usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/shadowsocks.json</span><br><span class="line"></span><br><span class="line">// 重启</span><br><span class="line">$ sudo systemctl restart shadowsocks.service</span><br><span class="line"></span><br><span class="line">// 停止</span><br><span class="line">$ sudo systemctl stop shadowsocks.service</span><br></pre></td></tr></table></figure>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h2><p><a href="https://shadowsocks.org/en/download/clients.html">下载对应平台的安装包安装即可</a></p>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/linux/201901/shadowsocks-client-config.png" alt="shadowsocks-client-config.png"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://wiki.archlinux.org/index.php/Shadowsocks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">Shadowsocks (简体中文)</a>)</li>
<li><a href="https://leihungjyu.com/post/ubuntu-install-shadowsocks.html">Ubuntu 18.04安装配置Shadowsocks实现科学上网</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 实用命令收集二</title>
    <url>/2019/02/05/mac-common-commands-2/</url>
    <content><![CDATA[<p><img src="/images/2019/201908181828.jpg" alt="201908181828.jpg"></p>
<p>😭 记录一些终端中的技巧和命令，鉴于经常使用终端，在某个不经意的瞬间忘记了『还有这种操作』，特此记录以飨自己。</p>
<span id="more"></span>
<h2 id="移除打开终端时的提示语"><a href="#移除打开终端时的提示语" class="headerlink" title="移除打开终端时的提示语"></a>移除打开终端时的提示语</h2><ul>
<li><a href="http://osxdaily.com/2010/06/22/remove-the-last-login-message-from-the-terminal/">Remove the『Last login』Message from the Terminal</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建 .hushlogin 文件</span><br><span class="line">$ touch .hushlogin</span><br></pre></td></tr></table></figure>
<h2 id="终端中使用-telnet"><a href="#终端中使用-telnet" class="headerlink" title="终端中使用 telnet"></a>终端中使用 telnet</h2><ul>
<li><a href="http://osxdaily.com/2018/07/18/get-telnet-macos/">How to Get Telnet for MacOS in Mojave or High Sierra</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 telnet</span><br><span class="line">$ brew install telnet</span><br></pre></td></tr></table></figure>
<h2 id="终端中使用上传下载"><a href="#终端中使用上传下载" class="headerlink" title="终端中使用上传下载"></a>终端中使用上传下载</h2><ul>
<li><a href="https://gist.github.com/meowoodie/4bcf6d6ae81727b618bf">Set rz and sz on Mac</a></li>
<li><a href="https://www.jianshu.com/p/dd30b1fb31c3">macOS 中使用 rz、sz 传输文件</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 lrzsz</span><br><span class="line">$ brew install lrzsz</span><br></pre></td></tr></table></figure>
<h2 id="检索文件"><a href="#检索文件" class="headerlink" title="检索文件"></a>检索文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 更新索引</span><br><span class="line">$ sudo /usr/libexec/locate.updatedb</span><br><span class="line"></span><br><span class="line">// 检索文件</span><br><span class="line">$ locate xxx.xxx</span><br></pre></td></tr></table></figure>
<h2 id="masOS-VSCode-Vim-模式无法持续按键"><a href="#masOS-VSCode-Vim-模式无法持续按键" class="headerlink" title="masOS VSCode Vim 模式无法持续按键"></a>masOS VSCode Vim 模式无法持续按键</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// For VSCode</span><br><span class="line">$ defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">// For VSCode Insiders</span><br><span class="line">$ defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">// For VSCodium</span><br><span class="line">$ defaults write com.visualstudio.code.oss ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">// To <span class="built_in">enable</span> global key-repeat</span><br><span class="line">// this is helpful <span class="keyword">if</span> you\<span class="string">&#x27;re using Vim in a PWA like code-server</span></span><br><span class="line"><span class="string">$ defaults write -g ApplePressAndHoldEnabled -bool false</span></span><br><span class="line"><span class="string">OR</span></span><br><span class="line"><span class="string">$ defaults delete -g ApplePressAndHoldEnabled</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 查看对 com.microsoft.VSCode 的设置</span></span><br><span class="line"><span class="string">$ defaults read com.microsoft.VSCode ApplePressAndHoldEnabled</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 实用命令收集一</title>
    <url>/2019/02/04/mac-common-commands-1/</url>
    <content><![CDATA[<p><img src="/images/2019/201908181800.jpg" alt="201908181800.jpg"></p>
<p>🙏『千里之行，始于足下』，掌握高频使用的命令也不例外。积铢累寸，总有一天，你终会在命令行中游刃有余。</p>
<span id="more"></span>
<h2 id="让终端说英语"><a href="#让终端说英语" class="headerlink" title="让终端说英语"></a>让终端说英语</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ say hello</span><br><span class="line"></span><br><span class="line">// 让程序执行完了说一声</span><br><span class="line">$ sleep 5 &amp;&amp; say <span class="string">&quot;this is a test&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="标记文件或者文件夹，用-Spotlight-打开"><a href="#标记文件或者文件夹，用-Spotlight-打开" class="headerlink" title="标记文件或者文件夹，用 Spotlight 打开"></a>标记文件或者文件夹，用 <code>Spotlight</code> 打开</h2><p>选中一个文件或者文件夹，<code>Command+I</code> 打开简介，在添加标记中输入关键词，关闭简介窗口。打开 <code>Spotlight</code> 输入刚才的关键词，可以准确定位</p>
<h2 id="使用-sips-命令批量处理图片"><a href="#使用-sips-命令批量处理图片" class="headerlink" title="使用 sips 命令批量处理图片"></a>使用 <code>sips</code> 命令批量处理图片</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 将图片宽度缩小为 800px，高度按比例缩放</span><br><span class="line">$ sips -Z 800 ~/001.jpg</span><br><span class="line"></span><br><span class="line">// 顺时针旋转 90 度</span><br><span class="line">$ sips -r 90 ~/001.jpg</span><br><span class="line"></span><br><span class="line">// 垂直反转</span><br><span class="line">$ sips -f vertical ~/001.jpg</span><br></pre></td></tr></table></figure>
<h2 id="把当前网页附加到待发送邮件中"><a href="#把当前网页附加到待发送邮件中" class="headerlink" title="把当前网页附加到待发送邮件中"></a>把当前网页附加到待发送邮件中</h2><p>在 <code>Safari</code> 浏览器中浏览网页时，通过 <code>Command+I</code> 可以直接打开邮件并把当前网页附加到待发送的邮件中</p>
<h2 id="删除文件和清空纸篓"><a href="#删除文件和清空纸篓" class="headerlink" title="删除文件和清空纸篓"></a>删除文件和清空纸篓</h2><p>删除文件：<code>Command+Delete</code><br>彻底删除：<code>Command+Alt+Delete</code></p>
<h2 id="安装-Go2Shell，快速在当前目录打开终端的工具"><a href="#安装-Go2Shell，快速在当前目录打开终端的工具" class="headerlink" title="安装 Go2Shell，快速在当前目录打开终端的工具"></a>安装 <code>Go2Shell</code>，快速在当前目录打开终端的工具</h2><blockquote>
<p>默认情况下是打开系统终端，这里配置成用 <code>iTerm2</code> 打开终端</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ open -a Go2Shell --args config</span><br></pre></td></tr></table></figure>
<h2 id="修改终端电脑名称"><a href="#修改终端电脑名称" class="headerlink" title="修改终端电脑名称"></a>修改终端电脑名称</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo scutil --<span class="built_in">set</span> HostName your-host-name</span><br><span class="line">$ hostname // 查看 `hostname`</span><br></pre></td></tr></table></figure>
<h2 id="快速复制和粘贴"><a href="#快速复制和粘贴" class="headerlink" title="快速复制和粘贴"></a>快速复制和粘贴</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 将列出的主目录复制到剪贴板</span><br><span class="line">$ ls ~ | pbcopy</span><br><span class="line"></span><br><span class="line">// 文件的内容读入剪贴板</span><br><span class="line">$ pbcopy &lt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">// 将剪贴板的内容写入到文件中</span><br><span class="line">$ pbpaste &gt;&gt; ~/demo.php</span><br></pre></td></tr></table></figure>
<h2 id="找回任何来源选项"><a href="#找回任何来源选项" class="headerlink" title="找回任何来源选项"></a>找回任何来源选项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 找回安全与隐私中的信任 <span class="string">&quot;任何来源&quot;</span> 选项</span><br><span class="line">$ sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<h2 id="快速查看日历"><a href="#快速查看日历" class="headerlink" title="快速查看日历"></a>快速查看日历</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cal</span><br><span class="line">或</span><br><span class="line">$ cal 2018</span><br></pre></td></tr></table></figure>
<h2 id="Xcode-Command-Line-Tools"><a href="#Xcode-Command-Line-Tools" class="headerlink" title="Xcode Command Line Tools"></a>Xcode Command Line Tools</h2><h3 id="检查-Xcode-安装包是否已经被安装"><a href="#检查-Xcode-安装包是否已经被安装" class="headerlink" title="检查 Xcode 安装包是否已经被安装"></a>检查 <code>Xcode</code> 安装包是否已经被安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xcode-select -p</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure>
<h2 id="Mac-的启动组合键"><a href="#Mac-的启动组合键" class="headerlink" title="Mac 的启动组合键"></a>Mac 的启动组合键</h2><blockquote>
<p>这些组合键适用于<a href="https://support.apple.com/zh-cn/HT201580">基于 Intel 的 Mac 电脑</a>。在 Mac 启动后，可以使用其他 Mac 键盘快捷键</p>
</blockquote>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Shift (⇧)</code></td>
<td>以<a href="https://support.apple.com/zh-cn/HT201262">安全模式</a>启动</td>
</tr>
<tr>
<td><code>Option (⌥)</code></td>
<td>启动进入<a href="https://support.apple.com/zh-cn/HT202796">启动管理器</a></td>
</tr>
<tr>
<td><code>D</code></td>
<td>从内建的 <code>Apple Hardware Test</code> 或 <code>Apple Diagnostics</code> 实用工具启动，具体取决于 <code>Mac</code> 机型</td>
</tr>
<tr>
<td><code>N</code></td>
<td>从兼容的 <code>NetBoot</code> 服务器（若可用）启动。要使用 <code>NetBoot</code> 服务器上默认的引导映像，则请按住 <code>Option-N</code></td>
</tr>
<tr>
<td><code>Command+R</code></td>
<td>从内建的 <a href="https://support.apple.com/zh-cn/HT201314"><code>macOS</code> 恢复</a>系统启动。或者可以使用 <code>Option+Command+R</code> 或 <code>Shift+Option+Command+R</code> 以通过互联网从 <code>macOS</code> 恢复功能启动</td>
</tr>
<tr>
<td><code>Option+Command+P+R</code></td>
<td><a href="https://support.apple.com/zh-cn/HT204063">重置 <code>NVRAM</code></a>（或 <code>PRAM</code>）</td>
</tr>
<tr>
<td><code>Command+S</code></td>
<td>以<a href="https://support.apple.com/zh-cn/HT201573">单用户模式</a>启动</td>
</tr>
<tr>
<td><code>T</code></td>
<td>以<a href="https://support.apple.com/zh-cn/HT201462">目标磁盘模式</a>启动</td>
</tr>
<tr>
<td><code>Command+V</code></td>
<td>以<a href="https://support.apple.com/zh-cn/HT201573">详细模式</a>启动</td>
</tr>
<tr>
<td>推出键 (⏏)、F12、鼠标键或触控板按钮</td>
<td>推出可移动介质</td>
</tr>
</tbody>
</table>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 缺失的包管理 Homebrew</title>
    <url>/2018/01/26/mac-homebrew/</url>
    <content><![CDATA[<p>官方的说法是 <code>macOS</code> 缺失的软件包管理器，个人认为这也许是 <code>macOS</code> 上最好的包管理器。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<ul>
<li><a href="https://brew.sh/">Homebrew Website</a></li>
<li><a href="https://github.com/Homebrew/brew/">Homebrew Github</a></li>
<li><a href="https://docs.brew.sh/">Homebrew Documentation</a></li>
</ul>
</blockquote>
<p>The missing package manager for macOS.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>当然也可以下载 <a href="https://raw.githubusercontent.com/Homebrew/install/master/uninstall">卸载脚本</a>，然后运行 <code>./uninstall --help</code> 去查看更多卸载选项。</p>
<h2 id="更新公式"><a href="#更新公式" class="headerlink" title="更新公式"></a>更新公式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure>
<h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><h3 id="查找过期的包"><a href="#查找过期的包" class="headerlink" title="查找过期的包"></a>查找过期的包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew outdated</span><br></pre></td></tr></table></figure>
<h3 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 升级所有的包</span><br><span class="line">$ brew upgrade</span><br><span class="line">or</span><br><span class="line">// 升级指定的包</span><br><span class="line">$ brew upgrade &lt;formula&gt;</span><br></pre></td></tr></table></figure>
<h3 id="安装某个包"><a href="#安装某个包" class="headerlink" title="安装某个包"></a>安装某个包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install &lt;formula&gt;</span><br></pre></td></tr></table></figure>
<h3 id="卸载某个包"><a href="#卸载某个包" class="headerlink" title="卸载某个包"></a>卸载某个包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew uninstall &lt;formula&gt;</span><br></pre></td></tr></table></figure>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><blockquote>
<p>By default, Homebrew does not uninstall old versions of a formula, so over time you will accumulate old versions.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 清理指定的包</span><br><span class="line">$ brew cleanup &lt;formula&gt;</span><br><span class="line">or</span><br><span class="line">// 清静所有的包</span><br><span class="line">$ brew cleanup</span><br></pre></td></tr></table></figure>
<h3 id="破坏的链接清除"><a href="#破坏的链接清除" class="headerlink" title="破坏的链接清除"></a>破坏的链接清除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew prune</span><br></pre></td></tr></table></figure>
<h3 id="快速预览文件内容插件"><a href="#快速预览文件内容插件" class="headerlink" title="快速预览文件内容插件"></a>快速预览文件内容插件</h3><blockquote>
<p><a href="https://github.com/sindresorhus/quick-look-plugins">Quick Look plugins</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package</span><br></pre></td></tr></table></figure>
<h3 id="不能更新的问题"><a href="#不能更新的问题" class="headerlink" title="不能更新的问题"></a>不能更新的问题</h3><p>Cannot “brew update” anymore</p>
<blockquote>
<p><a href="https://github.com/Homebrew/legacy-homebrew/issues/11448">fails to git pull formulas</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> `brew --prefix`</span><br><span class="line">$ git remote add origin https://github.com/mxcl/homebrew.git</span><br><span class="line">$ git fetch origin</span><br><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 打造 PHP 开发环境</title>
    <url>/2018/01/21/mac-mnmp/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><code>MNMP</code> 是 <code>macOS</code>, <code>Nginx</code>, <code>MySQL</code>, <code>PHP</code> 组合开发环境的简称</p>
</blockquote>
<h2 id="Mac-准备"><a href="#Mac-准备" class="headerlink" title="Mac 准备"></a><code>Mac</code> 准备</h2><blockquote>
<p>请先安装 <a href="https://brew.sh/"><code>Homebrew - The missing package manager for macOS</code></a></p>
</blockquote>
<h3 id="旧的安装方式"><a href="#旧的安装方式" class="headerlink" title="旧的安装方式"></a>旧的安装方式</h3><blockquote>
<p><a href="https://github.com/Homebrew/homebrew-php/issues/4721">Homebrew/php deprecation #4721</a></p>
</blockquote>
<p>这种安装方式已经不被推荐，相关的 <code>Formula</code> 已经被迁移到 <a href="https://github.com/Homebrew/homebrew-core">homebrew-core</a> 下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap homebrew/dupes</span><br><span class="line">$ brew tap homebrew/versions</span><br><span class="line">$ brew tap homebrew/php</span><br><span class="line">$ brew tap homebrew/homebrew-php</span><br></pre></td></tr></table></figure>
<h3 id="新的安装方式"><a href="#新的安装方式" class="headerlink" title="新的安装方式"></a>新的安装方式</h3><blockquote>
<p><a href="https://github.com/Homebrew/homebrew-core/pull/16067">php: import from homebrew/php #16067</a></p>
</blockquote>
<ul>
<li>默认了一些必要的扩展（<code>opcache/openssl</code> 等）</li>
<li>其它扩展通过 <code>pecl</code> 去安装</li>
</ul>
<h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a><code>Nginx</code> 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew info nginx</span><br><span class="line">$ brew install nginx</span><br></pre></td></tr></table></figure>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo brew services start nginx</span><br><span class="line">$ sudo brew services restart nginx</span><br><span class="line">$ sudo brew services stop nginx</span><br></pre></td></tr></table></figure>
<h3 id="开机运行"><a href="#开机运行" class="headerlink" title="开机运行"></a>开机运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/opt/nginx/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/</span><br><span class="line">$ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<ul>
<li><a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/">Full Example Configuration</a></li>
</ul>
</blockquote>
<h2 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a><code>MySQL</code> 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install mysql</span><br><span class="line">$ <span class="built_in">unset</span> TMPDIR</span><br><span class="line">$ mysqld --initialize-insecure --explicit_defaults_for_timestamp=1 --user=`whoami` --basedir=<span class="string">&quot;<span class="subst">$(brew --prefix mysql)</span>&quot;</span> --datadir=/usr/<span class="built_in">local</span>/var/mysql --tmpdir=/tmp</span><br><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h2 id="PHP-安装"><a href="#PHP-安装" class="headerlink" title="PHP 安装"></a><code>PHP</code> 安装</h2><h3 id="旧的安装方式-1"><a href="#旧的安装方式-1" class="headerlink" title="旧的安装方式"></a>旧的安装方式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew info php71</span><br><span class="line">$ brew install php71</span><br></pre></td></tr></table></figure>
<h3 id="新的安装方式-1"><a href="#新的安装方式-1" class="headerlink" title="新的安装方式"></a>新的安装方式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew info php@7.1</span><br><span class="line">$ brew install php@7.1</span><br></pre></td></tr></table></figure>
<h3 id="PHP-FPM-Configuration-the-Listen-Directive"><a href="#PHP-FPM-Configuration-the-Listen-Directive" class="headerlink" title="PHP-FPM: Configuration the Listen Directive"></a>PHP-FPM: Configuration the Listen Directive</h3><blockquote>
<p><a href="https://serversforhackers.com/c/php-fpm-configuration-the-listen-directive">PHP-FPM: Configuration the Listen Directive</a></p>
</blockquote>
<h4 id="Unix-Sockets"><a href="#Unix-Sockets" class="headerlink" title="Unix Sockets"></a>Unix Sockets</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// www.conf</span><br><span class="line">listen = /var/run/php71-fpm.sock</span><br><span class="line">listen.owner = www-data</span><br><span class="line">listen.group = www-data</span><br><span class="line"></span><br><span class="line">// nginx.conf</span><br><span class="line">fastcgi_pass unix:/var/run/php71-fpm.sock;</span><br></pre></td></tr></table></figure>
<h4 id="TCP-Sockets"><a href="#TCP-Sockets" class="headerlink" title="TCP Sockets"></a>TCP Sockets</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// www.conf</span><br><span class="line">Listen 127.0.0.1:9000</span><br><span class="line">listen.allowed_clients = 127.0.0.1</span><br><span class="line"></span><br><span class="line">// nginx.conf</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br></pre></td></tr></table></figure>
<h3 id="扩展安装"><a href="#扩展安装" class="headerlink" title="扩展安装"></a>扩展安装</h3><h4 id="旧的扩展安装方式"><a href="#旧的扩展安装方式" class="headerlink" title="旧的扩展安装方式"></a>旧的扩展安装方式</h4><ul>
<li>正常扩展的安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Redis</span><br><span class="line">$ brew install --HEAD homebrew/php/php71-redis</span><br><span class="line"></span><br><span class="line">// Memcached</span><br><span class="line">$ brew install --HEAD homebrew/php/php71-memcached</span><br><span class="line"></span><br><span class="line">// Opcache</span><br><span class="line">$ brew install php71-opcache</span><br><span class="line"></span><br><span class="line">// Phalcon</span><br><span class="line">$ brew install php71-phalcon</span><br><span class="line"></span><br><span class="line">// Mongodb</span><br><span class="line">$ brew install php71-mongodb</span><br></pre></td></tr></table></figure>
<ul>
<li>特殊扩展的安装</li>
</ul>
<p><code>Intl</code> 扩展安装</p>
<blockquote>
<ul>
<li><a href="https://github.com/Homebrew/homebrew-php/issues/4386">#4386 php70-intl</a></li>
<li><a href="https://github.com/Homebrew/homebrew-php/issues/4139">#4139 php70-intl sierra bottle not installing config file</a></li>
<li><a href="https://github.com/Homebrew/homebrew-php/issues/2544">#2544 php**-intl broken after ﻿﻿icu4c upgrade</a></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// php71</span><br><span class="line">$ brew install php71-intl</span><br><span class="line"></span><br><span class="line">// php70</span><br><span class="line">$ brew install -s php70-intl</span><br></pre></td></tr></table></figure>
<h5 id="新的扩展安装方式"><a href="#新的扩展安装方式" class="headerlink" title="新的扩展安装方式"></a>新的扩展安装方式</h5><ul>
<li>正常扩展的安装</li>
</ul>
<blockquote>
<p>必要是请使用 <code>sudo</code> 执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Igbinary</span><br><span class="line">$ pecl install igbinary</span><br><span class="line"></span><br><span class="line">// Mongodb</span><br><span class="line">$ pecl install mongodb</span><br><span class="line"></span><br><span class="line">// Redis</span><br><span class="line">$ pecl install redis</span><br><span class="line"></span><br><span class="line">// Memcached</span><br><span class="line">$ pecl install memcached</span><br><span class="line"></span><br><span class="line">// Xdebug</span><br><span class="line">$ pecl install xdebug</span><br></pre></td></tr></table></figure>
<ul>
<li>特殊扩展的安装</li>
</ul>
<p><code>Phalcon</code> 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> php</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/phalcon/cphalcon</span><br><span class="line">$ <span class="built_in">cd</span> cphalcon/build/php7/64bits</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/opt/php@7.1/bin/phpize</span><br><span class="line">$ sudo ./configure --with-php-config=/usr/<span class="built_in">local</span>/opt/php@7.1/bin/php-config</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/include</span><br><span class="line">$ ls -s ../opt/openssl/include/openssl .</span><br><span class="line">$ <span class="built_in">cd</span> -</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>将环境变量添加到 <code>~/.zshrc</code> 或者 <code>~/.bashrc</code> 中并进行 <code>source ~/.zshrc</code> 或者 <code>source ~/.bashrc</code></p>
<h3 id="旧的路径"><a href="#旧的路径" class="headerlink" title="旧的路径"></a>旧的路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="subst">$(brew --prefix homebrew/php/php71)</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="subst">$(brew --prefix php71)</span>/sbin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="新的路径"><a href="#新的路径" class="headerlink" title="新的路径"></a>新的路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/opt/php@7.1/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/opt/php@7.1/sbin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew services start php71</span><br><span class="line">$ brew services restart php71</span><br><span class="line">$ brew services stop php71</span><br></pre></td></tr></table></figure>
<h3 id="开机运行-1"><a href="#开机运行-1" class="headerlink" title="开机运行"></a>开机运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/opt/php71/homebrew.mxcl.php71.plist ~/Library/LaunchAgents/</span><br><span class="line">$ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plist</span><br></pre></td></tr></table></figure>
<h3 id="多版本-PHP"><a href="#多版本-PHP" class="headerlink" title="多版本 PHP"></a>多版本 <code>PHP</code></h3><h4 id="安装多版本-PHP"><a href="#安装多版本-PHP" class="headerlink" title="安装多版本 PHP"></a>安装多版本 <code>PHP</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew unlink php[55,56,70,71...]</span><br><span class="line">$ brew install php[55,56,70,71...]</span><br></pre></td></tr></table></figure>
<h4 id="切换-PHP-版本"><a href="#切换-PHP-版本" class="headerlink" title="切换 PHP 版本"></a>切换 <code>PHP</code> 版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew-php-switcher [55,56,70,71...] -s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 搭建 Homestead 集成开发环境</title>
    <url>/2018/01/21/mac-homestead/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><a href="https://laravel.com/docs/master/homestead">Homestead 英文官网</a></li>
<li><a href="https://docs.golaravel.com/docs/5.0/homestead/">HomeStead 中文网站</a></li>
<li><a href="https://github.com/laravel/homestead">HomeStead GitHub</a></li>
</ul>
</blockquote>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Laravel 致力于使整个 PHP 开发体验变得愉快，包括你的本地开发环境。<a href="https://www.vagrantup.com/"><code>Vagrant</code></a> 提供了一个简单、优雅的方式来管理和配置虚拟机。</p>
<p>Laravel Homestead 是一个官方预载的 <code>Vagrant</code> 盒子，旨在提供你一个美好的开发环境，而不需要在你的本地机器 中去安装 PHP，Web 服务器和其它任何服务软件。再也不用担心会搞乱你的操作系统！Vagrant 盒子完全是一次性的。如果出现问题，你可以在几分钟内销毁并重新创建它！</p>
<p>Homestead 运行在任何 Windows，Mac，或者 Linux 系统上，并包含 Nginx Web 服务器，PHP 7.2，PHP 7.1，PHP 5.6，MySQL，Redis，Memcached，Node，以及开发令人惊叹的 Laravel 应用程序所需的所有其他好东西。</p>
<div class="note danger">
            <p>如果你使用 Windows，你需要开启硬件虚拟化（<code>VT-x</code>）。它通常是通过你的 BIOS 去开启。如果你在一个 UEFI 系统上使用 Hyper-V，为了访问 VT-x，你可能还需要去禁用 Hyper-V。</p>
          </div>
<h2 id="内置软件"><a href="#内置软件" class="headerlink" title="内置软件"></a>内置软件</h2><ul>
<li>Ubuntu 18.04</li>
<li>Git</li>
<li>PHP 7.2</li>
<li>PHP 7.1</li>
<li>PHP 7.0</li>
<li>PHP 5.6</li>
<li>Nginx</li>
<li>Apache（可选）</li>
<li>MySQL</li>
<li>MariaDB（可选）</li>
<li>Sqlite3</li>
<li>PostgreSQL</li>
<li>Composer</li>
<li>Node（Yarn，Bower，Grunt 和 Gulp）</li>
<li>Redis</li>
<li>Memcached</li>
<li>Beanstalkd</li>
<li>Mailhog</li>
<li>Neo4j（可选）</li>
<li>MongoDB（可选）</li>
<li>Elasticsearch（可选）</li>
<li>ngrok</li>
<li>wp-cli</li>
<li>Zend Z-Ray</li>
<li>Go</li>
<li>Minio</li>
</ul>
<p>总之一句话，巨牛逼。如果这些东西让你自己折腾，怎么着也得大半天吧。想想我朝这个网络，你能顺利的搞定那简直就是牛逼中的战斗机。</p>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>在启动 Homestead 环境之前，你必须安装 <a href="https://www.virtualbox.org/wiki/Downloads"><code>VirtualBox 5.2</code></a>，<a href="https://www.vmware.com/"><code>VMWare</code></a>，<a href="https://www.parallels.com/products/desktop/"><code>Parallels</code></a> 或者 <a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v"><code>Hyper-V</code></a> 以及 <a href="https://www.vagrantup.com/downloads.jhtml"><code>Vagrant</code></a>。所有这些软件包都为所有流行的操作系统提供了易于使用的可视化安装程序。</p>
<p>为了使用 VMware 提供者，你将需要去购买 VMware Fusion / Workstation 和 <a href="https://www.vagrantup.com/vmware/"><code>VMware Vagrant plug-in</code></a>。尽管它不是免费的，VMware 比其它盒子能提供更快的共享文件夹性能。</p>
<p>为了使用 Parallels 提供者，你将需要安装 <a href="https://github.com/Parallels/vagrant-parallels"><code>Parallels Vagrant plug-in</code></a>，它是免费的。</p>
<p>因为 <a href="https://www.vagrantup.com/docs/hyperv/limitations.html"><code>Vagrant limitations</code></a>，Hyper-V 提供者将忽略所有的网络设置。</p>
<h3 id="安装-Homestead-Vagrant-盒子"><a href="#安装-Homestead-Vagrant-盒子" class="headerlink" title="安装 Homestead Vagrant 盒子"></a>安装 Homestead Vagrant 盒子</h3><p>一旦 VirtualBox / VMware 和 Vagrant 被安装，你应当在你的终端中使用如下的命令将 <code>laravel/homestead</code> 添加到你的 Vagrant 安装中。下载盒子耗费的时间取决于你的网速：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant box add laravel/homestead</span><br><span class="line">==&gt; vagrant: A new version of Vagrant is available: 2.1.4!</span><br><span class="line">==&gt; vagrant: To upgrade visit: https://www.vagrantup.com/downloads.html</span><br></pre></td></tr></table></figure>
<p>如果此命令失败，确保你安装的 Vagrant 是最新的。</p>
<h3 id="安装-Homestead"><a href="#安装-Homestead" class="headerlink" title="安装 Homestead"></a>安装 Homestead</h3><p>你可以安装 Homestead 通过克隆仓库。考虑克隆仓库到你的『home』目录下的一个 <code>Homestead</code> 文件夹下，这样 Homestead 盒子服务将作为你的所有 Laravel 项目的主机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/laravel/homestead.git ~/Homestead</span><br><span class="line">Cloning into <span class="string">&#x27;Homestead&#x27;</span>...</span><br></pre></td></tr></table></figure>
<p>你应当检查 Homestead 的标记版本，因为 <code>master</code> 分支不总是稳定的。你能在 <a href="https://github.com/laravel/homestead/releases"><code>GitHub Release Page</code></a> 找到最新的稳定版：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Homestead</span><br><span class="line"></span><br><span class="line">// Clone the desired release...</span><br><span class="line">$ git checkout v7.14.2</span><br></pre></td></tr></table></figure>
<p>一旦你克隆克隆了 Homestead 仓库，从 Homestead 目录运行 <code>bash init.sh</code> 命令去创建 <code>Homestead.yaml</code> 配置文件。此 <code>Homestead.yaml</code> 文件将位于 Homestead 目录中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Mac / Linux...</span><br><span class="line">$ bash init.sh</span><br><span class="line"></span><br><span class="line">// Windows...</span><br><span class="line">&gt; init.bat</span><br></pre></td></tr></table></figure>
<h2 id="配置-Homestead"><a href="#配置-Homestead" class="headerlink" title="配置 Homestead"></a>配置 Homestead</h2><h3 id="设置你的提供者"><a href="#设置你的提供者" class="headerlink" title="设置你的提供者"></a>设置你的提供者</h3><p>在你的 <code>Homestead.yaml</code> 文件中的 <code>provider</code> 键名表示哪个 Vagrant 提供者应当被使用：<code>virtualbox</code>，<code>vmware_fusion</code>，<code>vmware_workstation</code>，<code>parallels</code> 或者 <code>hyperv</code>。你可以设置你偏好的提供者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">provider: virtualbox</span><br></pre></td></tr></table></figure>
<h3 id="配置共享文件夹"><a href="#配置共享文件夹" class="headerlink" title="配置共享文件夹"></a>配置共享文件夹</h3><p><code>Homestead.yaml</code> 文件中的 <code>folders</code> 属性列出了你希望与你的 Homestead 环境共享的所有文件夹。在这些文件夹下的文件发生改变时，他们将在你的本地机器和 Homestead 环境之间保持同步。你可以根据需要去配置任意数量的共享文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">folders:</span><br><span class="line">    - map: ~/code</span><br><span class="line">        to: /home/vagrant/code</span><br></pre></td></tr></table></figure>
<p>如果你仅仅创建一些站点，这个能用的映射将正常工作。然而，随着站点数量的不断增加，你可能会遇到性能问题。在包含大量文件的低端机器或者项目中，这个问题可能非常明显。如果你遇到这个问题，尝试将每个项目映射到其自己的 Vagrant 文件夹下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">folders:</span><br><span class="line">    - map: ~/code/project1</span><br><span class="line">        to: /home/vagrant/code/project1</span><br><span class="line"></span><br><span class="line">    - map: ~/code/project2</span><br><span class="line">        to: /home/vagrant/code/project2</span><br></pre></td></tr></table></figure>
<p>要开启 <a href="https://www.vagrantup.com/docs/synced-folders/nfs.html"><code>NFS</code></a>，你仅仅需要增加一个简单的标志到你的同步文件配置中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">folders:</span><br><span class="line">    - map: ~/code</span><br><span class="line">        to: /home/vagrant/code</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">&quot;nfs&quot;</span></span><br></pre></td></tr></table></figure>
<div class="note danger">
            <p>当使用 NFS 时，你应当考虑安装 <a href="https://github.com/gael-ian/vagrant-bindfs"><code>vagrant-bindfs</code></a> 插件。这个插件将为 Homestead 盒子中的文件和目录维护正确的 user / group 权限。</p>
          </div>
<p>你也可以传递通过 <code>options</code> 键下列出它们的 Vagrant 的 <a href="https://www.vagrantup.com/docs/synced-folders/basic_usage.html"><code>Synced Folders</code></a> 所支持的任何选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">folders:</span><br><span class="line">    - map: ~/code</span><br><span class="line">    to: /home/vagrant/code</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&quot;rsync&quot;</span></span><br><span class="line">    options:</span><br><span class="line">        rsync__args: [<span class="string">&quot;--verbose&quot;</span>, <span class="string">&quot;--archive&quot;</span>, <span class="string">&quot;--delete&quot;</span>, <span class="string">&quot;-zz&quot;</span>]</span><br><span class="line">        rsync__exclude: [<span class="string">&quot;node_modules&quot;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="配置-Nginx-站点"><a href="#配置-Nginx-站点" class="headerlink" title="配置 Nginx 站点"></a>配置 Nginx 站点</h3><p>不熟悉 Nginx？没问题。<code>sites</code> 属性允许你轻松映射一个『domain』到你的 Homestead 环境的一个文件夹。在 <code>Homestead.yaml</code> 文件中包含一个示例站点配置，你可以根据需要添加许多站点到你的 Homestead 环境。Homestead 能作为一个方便的，虚拟化的环境为你工作的每一个 Laravel 项目服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.test</span><br><span class="line">        to: /home/vagrant/code/Laravel/public</span><br></pre></td></tr></table></figure>
<p>如果你改变 <code>sites</code> 属性在配置 Homestead 盒子后，你应当重新运行 <code>vagrant reload --provision</code> 去更新虚拟机中的 Nginx 配置。</p>
<h3 id="主机文件"><a href="#主机文件" class="headerlink" title="主机文件"></a>主机文件</h3><p>你必须在你机器的 <code>hosts</code> 文件中为 Nginx 站点添加『domains』。<code>hosts</code> 文件将把你的 Homestead 站点请求重定向到你的 Homestead 机器。在 Mac 和 Linux 中，这个文件位于 <code>/etc/hosts</code>。在 Windows 中，位于 <code>C:\Windows\System32\drivers\etc\hosts</code>。你添加到此文件中的行看起来像如下这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.10.10  homestead.test</span><br></pre></td></tr></table></figure>
<p>确保列出的 IP 地址是 <code>Homestead.yaml</code> 文件中设置的 IP 地址。一旦你添加域名到你的 <code>hosts</code> 文件，启动 Vagrant 盒子后你能在你的 Web 浏览器中访问它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://homestead.test</span><br></pre></td></tr></table></figure>
<h2 id="启动-Vagrant-盒子"><a href="#启动-Vagrant-盒子" class="headerlink" title="启动 Vagrant 盒子"></a>启动 Vagrant 盒子</h2><p>一旦你根据你的喜好编辑 <code>Homestead.yaml</code> 后，从你的 Homestead 目录运行 <code>vagrant up</code> 命令。Vagrant 将启动虚拟机并自动配置你的共享文件夹和 Nginx 站点。</p>
<p>在销毁虚拟机，你可以使用 <code>vagrant destroy --force</code> 命令。</p>
<h2 id="按项目安装"><a href="#按项目安装" class="headerlink" title="按项目安装"></a>按项目安装</h2><p>你可以为你所管理的每个项目配置配置一个 Homestead 实例，而不是在全局范围内安装 Homestead 并在所有的项目中共享相同的 Homestead 盒子。如果你希望随项目一起发送一个 <code>Vagrantfile</code>，那么为每个项目安装 Homestead 可能是大有裨益的，允许其它人在项目中 <code>vagrant up</code> 进行工作。</p>
<p>要直接将 Homestead 安装到你的项目，需要使用 Composer：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer require laravel/homestead --dev</span><br></pre></td></tr></table></figure>
<p>一旦 Homestead 被安装，使用 <code>make</code> 命令去生成 <code>Vagrantfile</code> 和 <code>Homestead.yaml</code> 文件在你的项目根目录。<code>make</code> 命令将自动配置 <code>site</code> 和 <code>folders</code> 指令在 <code>Homestead.yaml</code> 文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Mac / Linux</span><br><span class="line">$ php vendor/bin/homestead make</span><br><span class="line"></span><br><span class="line">// Windows</span><br><span class="line">$ vendor\\bin\\homestead make</span><br></pre></td></tr></table></figure>
<p>接下来，在终端中运行 <code>vagrant up</code> 命令并在浏览器中输入 <code>http://homestead.test</code> 去访问你的项目。记住，你将需要添加一个 <code>homestead.test</code> 到 <code>/etc/hosts</code> 文件中或者你自定义的域名。</p>
<h2 id="安装-MariaDB"><a href="#安装-MariaDB" class="headerlink" title="安装 MariaDB"></a>安装 MariaDB</h2><p>如果你偏好使用 MariaDB 而不是 MySQL，你可以在 <code>Homestead.yaml</code> 文件中添加 <code>mariadb</code> 选项。这个选项将移除 MySQL 并安装 MariaDB。MariaDB 服务作为 MySQL 的一个替代品，因此你仍然在你的应用程序数据库配置中使用 <code>mysql</code> 数据库驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">box: laravel/homestead</span><br><span class="line">ip: <span class="string">&quot;192.168.10.10&quot;</span></span><br><span class="line">memory: 2048</span><br><span class="line">cpus: 4</span><br><span class="line">provider: virtualbox</span><br><span class="line">mariadb: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h2><p>要安装 MongoDB 社区版，更新你的 <code>Homestead.yaml</code> 文件用如下的配置选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodb: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>默认的 MongoDB 安装将设置数据库用户名为 <code>homestead</code>，相应地密码为 <code>secret</code>。</p>
<h2 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h2><p>要安装 Elasticsearch，添加 <code>elasticsearch</code> 选项到你的 <code>Homestead.yaml</code> 文件并指定一个支持的版本，该版本可能是一个主版本或者一个精确的版本号（主版本号.次版本号.修复版本号）。默认安装将创建一个名为 <code>homestead</code> 的集群。你应当从不给 Elasticsearch 超过操作系统一半的内存，所以要确保你的 Homestead 机器至少有两倍的 Elasticsearch 分配的内存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">box: laravel/homestead</span><br><span class="line">ip: <span class="string">&quot;192.168.10.10&quot;</span></span><br><span class="line">memory: 4096</span><br><span class="line">cpus: 4</span><br><span class="line">provider: virtualbox</span><br><span class="line">elasticsearch: 6</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>查阅 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current">Elasticsearch documentation</a> 去学习如何自定义你的配置。</p>
          </div>
<h2 id="安装-Neo4j"><a href="#安装-Neo4j" class="headerlink" title="安装 Neo4j"></a>安装 Neo4j</h2><p><code>Neo4j</code> 是一个图形数据库管理系统。要安装 Neo4j 社区版，更新你的 <code>Homestead.yaml</code> 文件用如下的配置选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">neo4j: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>默认的 Neo4j 安装将设置数据库的用户名为 <code>homestead</code>，相应的密码为 <code>secret</code>。要访问 Neo4j，用浏览器访问 <code>http://homestead.test:7474</code> 地址。你的端口 <code>7687</code>（Bolt），<code>7474</code>（HTTP），<code>7473</code>（HTTPS）是准备好服务来自 Neo4j 客户端的请求的。</p>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>你可以通过在你的 Homestead 目录下修改 <code>aliases</code> 文件添加 Bash 别名到你的 Homestead 机器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> c=<span class="string">&#x27;clear&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure>
<p>随后你需要更新 <code>aliases</code> 文件，你应当使用 <code>vagrant reload --provision</code> 命令重新配置 Homestead 机器。这将确保在机器中你的新别名可用。</p>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="装载-Homestead-镜像"><a href="#装载-Homestead-镜像" class="headerlink" title="装载 Homestead 镜像"></a>装载 Homestead 镜像</h3><p>官方的命令是这样的，如果你觉得执行下面命令没问题，那你真是 <code>too young too simple</code>，我可是踩过坑的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure>
<p>执行上面命令后，你在 <code>vagrant up</code> 是时会遇到 <code>Box &#39;laravel/homestead&#39; could not be found</code> 这个不是问题的问题，怎么办，不能凉拌吧。也好办，不就搜索吗? 别搜了，跟我上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -pv ~/Homestead</span><br><span class="line">$ <span class="built_in">cd</span> ~/Homestead</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/laravel/homestead.git</span><br></pre></td></tr></table></figure>
<p>查看你的 <code>box</code> 列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// `virtualbox` 版本为 `0`</span><br><span class="line">$ vagrant box list</span><br><span class="line">laravel/homestead (virtualbox, 0)</span><br><span class="line"></span><br><span class="line">// 删除这个添加的 `box`</span><br><span class="line">$ vagrant box remove laravel/homestead</span><br></pre></td></tr></table></figure>
<p>在 <code>~/Homestead/scripts/homestead.rb</code> 文件中有这么一行，要求版本必须是大于 <code>4.0.0</code>，怎么样，我没骗你吧，版本居然不一致。小意思，改下版本号嘛，可别，咱能不碰代码就不碰：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.box_version = settings[<span class="string">&quot;version&quot;</span>] ||= <span class="string">&quot;&gt;= 4.0.0&quot;</span></span><br></pre></td></tr></table></figure>
<p>打开克隆的项目，根目录创建 <code>Homestead.json</code> 文件，文件填入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;laravel/homestead&quot;</span>,</span><br><span class="line">    <span class="string">&quot;versions&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: <span class="string">&quot;5.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;providers&quot;</span>: [&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;virtualbox&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;file:///path/to/homestead-virtualbox.box&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，走一个试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant box add Homestead.json</span><br><span class="line">$ vagrant box list</span><br><span class="line">laravel/homestead (virtualbox, 5.0.1)</span><br></pre></td></tr></table></figure>
<p>必须卧槽呀，版本号回来了，好了，我们出发</p>
<h3 id="生成-key"><a href="#生成-key" class="headerlink" title="生成 key"></a>生成 key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -pv ~/.ssh/homestead</span><br><span class="line"></span><br><span class="line">// 文件路径及名称为: ~/.ssh/homestead/homestead_rsa</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;lumen@homestead&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这个基本上是在修改 <code>~/Homestead/Vagrantfile</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">ip: <span class="string">&quot;192.168.10.10&quot;</span></span><br><span class="line">memory: 2048</span><br><span class="line">cpus: 1</span><br><span class="line">provider: virtualbox</span><br><span class="line"></span><br><span class="line">authorize: ~/.ssh/homestead/homestead_rsa.pub</span><br><span class="line"></span><br><span class="line">keys:</span><br><span class="line">    - ~/.ssh/homestead/homestead_rsa</span><br><span class="line"></span><br><span class="line">folders:</span><br><span class="line">    - map: ~/Codes</span><br><span class="line">      to: /home/vagrant/workspace</span><br><span class="line"></span><br><span class="line">sites:</span><br><span class="line">    - map: dev.lumen.com</span><br><span class="line">      to: /home/vagrant/workspace/lumen/public</span><br><span class="line"></span><br><span class="line">databases:</span><br><span class="line">    - homestead</span><br><span class="line"></span><br><span class="line"><span class="comment"># blackfire:</span></span><br><span class="line"><span class="comment">#     - id: foo</span></span><br><span class="line"><span class="comment">#       token: bar</span></span><br><span class="line"><span class="comment">#       client-id: foo</span></span><br><span class="line"><span class="comment">#       client-token: bar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ports:</span></span><br><span class="line"><span class="comment">#     - send: 50000</span></span><br><span class="line"><span class="comment">#       to: 5000</span></span><br><span class="line"><span class="comment">#     - send: 7777</span></span><br><span class="line"><span class="comment">#       to: 777</span></span><br><span class="line"><span class="comment">#       protocol: udp</span></span><br></pre></td></tr></table></figure>
<h3 id="启动并进入虚拟机"><a href="#启动并进入虚拟机" class="headerlink" title="启动并进入虚拟机"></a>启动并进入虚拟机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 启动</span><br><span class="line">$ vagrant up</span><br><span class="line"></span><br><span class="line">// 登录虚拟机</span><br><span class="line">$ vagrant ssh</span><br><span class="line">Welcome to Ubuntu 16.04.5 LTS (GNU/Linux 4.4.0-101-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">102 packages can be updated.</span><br><span class="line">29 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Thu Aug 30 13:32:04 2018 from 10.0.2.2</span><br></pre></td></tr></table></figure>
<h1 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h1><h2 id="全局访问-Homestead"><a href="#全局访问-Homestead" class="headerlink" title="全局访问 Homestead"></a>全局访问 Homestead</h2><p>有时你想文件系统的任何地方 <code>vagrant up</code> 你的 Homestead 机器。你能这样做，在 Mac / Linux 系统上通过添加一个 Bash 函数到你的 Bash 简介中。在 Windows 中，你可以通过添加一个『batch』文件到 <code>PATH</code> 来完成这个操作。这些脚本将允许你在你的系统的任何地方运行任何 Vagrant 命令，并自动将该命令指向你的 Homestead 安装目录：</p>
<h3 id="Mac-Linux"><a href="#Mac-Linux" class="headerlink" title="Mac / Linux"></a>Mac / Linux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">homestead</span></span>() &#123;</span><br><span class="line">    ( <span class="built_in">cd</span> ~/Homestead &amp;&amp; vagrant $* )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>确保函数中的 <code>~/Homestead</code> 路径调整到实际 的 Homestead 安装的位置。一旦该函数被安装，你可以从你的系统的任何位置运行像 <code>homestead up</code> 或者 <code>homestead ssh</code> 命令。</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在你的机器的任何位置创建一个如下内容的 <code>homestead.bat</code> 批处理文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> cwd=%<span class="built_in">cd</span>%</span><br><span class="line"><span class="built_in">set</span> homesteadVagrant=C:\Homestead</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %homesteadVagrant% &amp;&amp; vagrant %*</span><br><span class="line"><span class="built_in">cd</span> /d %cwd%</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> cwd=</span><br><span class="line"><span class="built_in">set</span> homesteadVagrant=</span><br></pre></td></tr></table></figure>
<p>确保在脚本中的实例 <code>C:\Homestead</code> 路径调整为 Homestead 实际安装的位置。创建文件之后，针文件添加到 <code>PATH</code> 中。然后，你可以在你的系统的任何地方运行像 <code>homestead up</code> 或者 <code>homestead ssh</code> 之类的命令。</p>
<h2 id="通过-SSH-连接"><a href="#通过-SSH-连接" class="headerlink" title="通过 SSH 连接"></a>通过 SSH 连接</h2><p>你能从你的 Homestead 目录中通过在终端中发送 <code>vagrant ssh</code> 命令来 SSH 到你的虚拟机中。</p>
<p>但是，由于你可能需要经常 SSH 到你的 Homestead 机器，考虑将上面的『function』 添加到主机以快速 SSH 到 Homestead 盒子中。</p>
<h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p>一个 <code>homestead</code> 数据库配置了开箱即用的 MySQL 和 PostgreSQL。为了更加方便，Laravel 的 <code>.env</code> 文件配置到框架以开箱即用此数据库。</p>
<p>要从你的主机的数据库客户端连接到你的 MySQL 或者 PostgreSQL 数据库，你应当连接 <code>127.0.0.1</code> 和端口为 <code>33060</code>（MySQL）或者 <code>54320</code>（PostgreSQL）。两个数据库的用户名和密码是 <code>homestead</code> / <code>secret</code>。</p>
<div class="note danger">
            <p>当从你的主机连接到数据库时，你应当仅使用这些非标准端口。由于 Laravel 在虚拟机中运行。你将在你的 Laravel 数据库配置文件中使用默认的 3306 和 5532 端口。</p>
          </div>
<h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><p>当你的 Vagrant 盒子销毁时，Homestead 能自动备份你的数据库。为了使用这个功能，你必须使用 Vagrant 2.1.0 或者更高的版本。或者，如果你使用一个旧版本的 Vagrant，你必须安装 <code>vagrant-triggers</code> 插件。为了开启自动数据库备份，添加如下的行到你的 <code>Homestead.yaml</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">backup: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>一旦配置了，当 <code>vagrant destroy</code> 命令被执行时，Homestead 将导出你的数据库到 <code>mysql_backup</code> 和 <code>postgres_backup</code> 目录。如果你使用 <a href="https://laravel.com/docs/5.7/homestead#per-project-installation"><code>per project installation</code></a> 方法，则可以在克隆的 Homestead 或者在你的项目根目录中找到这些目录。</p>
<h2 id="添加额外的站点"><a href="#添加额外的站点" class="headerlink" title="添加额外的站点"></a>添加额外的站点</h2><p>一旦你的 Homestead 环境已配置并运行，你可以为你的 Laravel 应用添加额外的 Nginx 站点。你能在你希望的单个 Homestead 环境运行多个 Laravel 安装。要添加额外的站点，在你的 <code>Homestead.yaml</code> 文件中添加站点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.test</span><br><span class="line">      to: /home/vagrant/code/Laravel/public</span><br><span class="line">    - map: another.test</span><br><span class="line">      to: /home/vagrant/code/another/public</span><br></pre></td></tr></table></figure>
<p>如果 Vagrant 不能自动管理你的『hosts』文件，你可能还需要添加新的站点到该文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.10.10  homestead.test</span><br><span class="line">192.168.10.10  another.test</span><br></pre></td></tr></table></figure>
<p>一旦这个站点被添加，从你的 Homestead 目录运行 <code>vagrant reload --provision</code> 命令。</p>
<h3 id="站点类型"><a href="#站点类型" class="headerlink" title="站点类型"></a>站点类型</h3><p>Homestead 支持多种类型的站点，允许你轻松运行不是基于 Laravel 的项目。例如，我们可以使用 <code>symfony2</code> 站点类型轻松地添加一个 Symfony 应用到 Homestead：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: symfony2.test</span><br><span class="line">      to: /home/vagrant/code/Symfony/web</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;symfony2&quot;</span></span><br></pre></td></tr></table></figure>
<p>可用的站点类型是：<code>apache</code>，<code>apigility</code>，<code>expressive</code>，<code>laravel</code>（默认），<code>proxy</code>，<code>silverstripe</code>，<code>statamic</code>，<code>symfony2</code>，<code>symfony4</code>，和 <code>zf</code>。</p>
<h3 id="站点参数"><a href="#站点参数" class="headerlink" title="站点参数"></a>站点参数</h3><p>你可以通过 <code>params</code> 站点指令添加额外的 Nginx <code>fastcgi_param</code> 值到你的站点。例如，我们添加一个值为 <code>BAR</code> 的 <code>Foo</code> 参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.test</span><br><span class="line">      to: /home/vagrant/code/Laravel/public</span><br><span class="line">      params:</span><br><span class="line">          - key: FOO</span><br><span class="line">            value: BAR</span><br></pre></td></tr></table></figure>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>你能通过添加如下的值到 <code>Homestead.yaml</code> 文件来设置全局环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">    - key: APP_ENV</span><br><span class="line">      value: <span class="built_in">local</span></span><br><span class="line">    - key: FOO</span><br><span class="line">      value: bar</span><br></pre></td></tr></table></figure>
<p>更新 <code>Homestead.yaml</code> 文件之后，确保通过运行 <code>vagrant reload --provision</code> 命令重新配置机器。这个将更新所有安装 的 PHP 版本的 PHP-FPM 配置并为 <code>vagrant</code> 用户更新环境。</p>
<h2 id="配置定时计划"><a href="#配置定时计划" class="headerlink" title="配置定时计划"></a>配置定时计划</h2><p>Laravel 提供了一种通过单个计划将每分钟运行 <code>schedule:run</code> Artisan 命令 <a href="https://laravel.com/docs/5.7/scheduling"><code>schedule Cron jobs</code></a> 的便捷方式。<code>schedule:run</code> 命令将检查在你的 <code>App\Console\Kernel</code> 类中定义的计划来决定哪个工作应当被运行。</p>
<p>如果你想为一个 Homestead 站点的 <code>schedule:run</code> 命令去运行，当定义站点时，你可以设置 <code>schedule</code> 选项为 <code>true</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.test</span><br><span class="line">      to: /home/vagrant/code/Laravel/public</span><br><span class="line">      schedule: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>站点的 Cron 工作将被定义在虚机的 <code>/etc/cron.d</code> 文件夹下。</p>
<h2 id="配置-Mailhog"><a href="#配置-Mailhog" class="headerlink" title="配置 Mailhog"></a>配置 Mailhog</h2><p>Mailhog 允许你轻松地捕获外发的电子邮件并进行检查它，而实际上没有将发送邮件给收件人。开始使用时，更新你的 <code>.env</code> 文件以使用以下的邮件设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=localhost</span><br><span class="line">MAIL_PORT=1025</span><br><span class="line">MAIL_USERNAME=null</span><br><span class="line">MAIL_PASSWORD=null</span><br><span class="line">MAIL_ENCRYPTION=null</span><br></pre></td></tr></table></figure>
<h2 id="配置-Minio"><a href="#配置-Minio" class="headerlink" title="配置 Minio"></a>配置 Minio</h2><p>Minio 是一个开源的对象存储服务器，具有与 Amazon S3 兼容的 API。要安装 Minio，用以下的配置选项更新你的 <code>Homestead.yaml</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minio: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，Minio 为端口 9600 上可用。你可以访问 Minio 控制面板通过访问 <code>http://homestead:9600</code>。默认访问的键名是 <code>homestead</code>，同时默认的密钥是 <code>secretkey</code>。当访问 Minio，你应当总是使用 <code>us-east-1</code>。</p>
<p>为了使用 Minio，你将需要在你的 <code>config/filesystems.php</code> 配置文件中调整 S3 磁盘配置。你将需要添加 <code>use_path_style_endpoint</code> 选项到磁盘配置，并将 <code>url</code> 键更改为 <code>endpoint</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;s3&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;s3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_ACCESS_KEY_ID&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;secret&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_SECRET_ACCESS_KEY&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;region&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_DEFAULT_REGION&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;bucket&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_BUCKET&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;endpoint&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_URL&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;use_path_style_endpoint&#x27;</span> =&gt; <span class="literal">true</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>最后，确保你的 <code>.env</code> 文件有如下的选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AWS_ACCESS_KEY_ID=homestead</span><br><span class="line">AWS_SECRET_ACCESS_KEY=secretkey</span><br><span class="line">AWS_DEFAULT_REGION=us-east-1</span><br><span class="line">AWS_URL=http://homestead:9600</span><br></pre></td></tr></table></figure>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>默认情况下，如下的端口将转发到你的 Homestead 环境：</p>
<ul>
<li><strong>SSH</strong>：2222 -&gt; 22</li>
<li><strong>ngrok UI</strong>：4040 -&gt; 4040</li>
<li><strong>HTTP</strong>：8000 -&gt; 80</li>
<li><strong>HTTPS</strong>：44300 -&gt; 443</li>
<li><strong>MySQL</strong>：33060 -&gt; 3306</li>
<li><strong>PostgreSQL</strong>：54320 -&gt; 5432</li>
<li><strong>MongoDB</strong>：27017 -&gt; 27017</li>
<li><strong>Mailhog</strong>：8025 -&gt; 8025</li>
<li><strong>Minio</strong>：9600 -&gt; 9600</li>
</ul>
<h3 id="转发额外的端口"><a href="#转发额外的端口" class="headerlink" title="转发额外的端口"></a>转发额外的端口</h3><p>如果你愿意，你可以转发额外的端口到 Vagrant 盒子，同时也指定他们的协议：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">    - send: 50000</span><br><span class="line">      to: 5000</span><br><span class="line">    - send: 7777</span><br><span class="line">      to: 777</span><br><span class="line">      protocol: udp</span><br></pre></td></tr></table></figure>
<h2 id="共享你的环境"><a href="#共享你的环境" class="headerlink" title="共享你的环境"></a>共享你的环境</h2><p>有时你希望共享你当前工作的内容跟同事或客户。Vagrant 有内置的方法通过 <code>vagrant share</code> 去支持这个；然而，如果你有多个站点在你的 <code>Homestead.yaml</code> 文件中配置过，这个将不会工作。</p>
<p>为了解决这个问题，Homestead 包含它自己的 <code>share</code> 命令。开始，通过 SSH 即 <code>vagrant ssh</code> 命令进入到你的 Homestead 机器并运行 <code>share homestead.test</code>。这个将从你的 <code>Homestead.yaml</code> 配置文件中分享 <code>homestead.test</code> 站点。当然，你可以将任何其它配置的站点替换为 <code>homestead.test</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">share homestead.test</span><br></pre></td></tr></table></figure>
<p>运行此命令之后，你将看到一个 Ngrok 屏幕出现，其中包含了活动日志和共享站点的可访问的 URL。如果你想指定一个自定义的区域，子域，或者其它 Ngrok 运行时选项，你可以添加他们到你的 <code>share</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">share homestead.test -region=eu -subdomain=laravel</span><br></pre></td></tr></table></figure>
<div class="note danger">
            <p>记住，Vagrant 本质上是不安全的，并且在运行 <code>share</code> 时将虚拟机显露给互联网。</p>
          </div>
<h2 id="多版本-PHP"><a href="#多版本-PHP" class="headerlink" title="多版本 PHP"></a>多版本 PHP</h2><div class="note danger">
            <p>这个功能仅兼容 Nginx。</p>
          </div>
<p>Homestead 6 在同一个虚拟机上引入了对多个 PHP 版本的支持。你可以在你的 <code>Homestead.yaml</code> 文件中指定要用于给定站点的 PHP 版本。可用的 PHP 版本是：『5.6』，『7.0』，『7.1』和『7.2』（默认）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.test</span><br><span class="line">      to: /home/vagrant/code/Laravel/public</span><br><span class="line">      php: <span class="string">&quot;5.6&quot;</span></span><br></pre></td></tr></table></figure>
<p>另外，你可以通过 CLI 使用任何 PHP 支持的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php5.6 artisan list</span><br><span class="line">php7.0 artisan list</span><br><span class="line">php7.1 artisan list</span><br><span class="line">php7.2 artisan list</span><br></pre></td></tr></table></figure>
<p>设置 Cli 下默认的 PHP 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看所有 php 版本和当前版本</span><br><span class="line">update-alternatives --display php</span><br><span class="line"></span><br><span class="line">// 执行后，会列出当前 php 所有版本和编号，输入编号，切换到执行的版本</span><br><span class="line">update-alternatives --config php</span><br></pre></td></tr></table></figure>
<h2 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h2><p>默认情况下，Homestead 使用 Nginx Web 服务器。然而，如果 <code>apache</code> 是指定的一个站点类型，它能安装 Apache。同时两个 Web 服务器在同时被安装，他们不能同时运行。<code>flip</code> 脚本命令可用来易于处理 Web 服务器之间的切换。<code>flip</code> 命令自动确定正在运行的 Web 服务器，将其关闭。然后启动别一台服务器。要使用这个命令，SSH 进入到你的 Homestead 机器并在终端运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flip</span><br></pre></td></tr></table></figure>
<h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><p>Homestead 包括 Postfix 邮件传输代理，默认监听 <code>1025</code> 端口。因此，你可以指示你的应用程序在 <code>localhost</code> 端口 <code>1025</code> 上使用 <code>smtp</code> 邮件驱动。所有发送的邮件将由 Postfix 处理并由 Mailhog 捕获。要查看已发送的邮件，在 Web 浏览器中打开 <code>http://localhost:8025</code>。</p>
<h1 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h1><p><code>Homestead.yaml</code> 中的 <code>networks</code> 属性为你的 Homestead 环境配置网络接口。你可以根据需要配置多个接口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">networks:</span><br><span class="line">    - <span class="built_in">type</span>: <span class="string">&quot;private_network&quot;</span></span><br><span class="line">      ip: <span class="string">&quot;192.168.10.20&quot;</span></span><br></pre></td></tr></table></figure>
<p>要开启一个 <a href="https://www.vagrantup.com/docs/networking/public_network.html"><code>bridged</code></a> 接口，配置 <code>bridge</code> 设置并改变 <code>public_network</code> 网络类型：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">networks:</span><br><span class="line">    - <span class="built_in">type</span>: <span class="string">&quot;public_network&quot;</span></span><br><span class="line">      ip: <span class="string">&quot;192.168.10.20&quot;</span></span><br><span class="line">      bridge: <span class="string">&quot;en1: Wi-Fi (AirPort)&quot;</span></span><br></pre></td></tr></table></figure>
<p>要开启 <a href="https://www.vagrantup.com/docs/networking/public_network.html"><code>DHCP</code></a>，仅从你的配置中移除 <code>ip</code> 选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">networks:</span><br><span class="line">    - <span class="built_in">type</span>: <span class="string">&quot;public_network&quot;</span></span><br><span class="line">      bridge: <span class="string">&quot;en1: Wi-Fi (AirPort)&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="更新-Homestead"><a href="#更新-Homestead" class="headerlink" title="更新 Homestead"></a>更新 Homestead</h1><p>你能通过两个简单的步骤更新 Homestead。首先，你应当更新 Vagrant 盒子使用 <code>vagrant box update</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant box update</span><br></pre></td></tr></table></figure>
<p>接下来，你需要去更新 Homestead 源代码。如果你克隆过仓库，你能在最初克隆仓库的位置 <code>git pull origin master</code>。</p>
<p>如果你通过你的项目的 <code>composer.json</code> 安装 Homestead，你应当确保你的 <code>composer.json</code> 包含 <code>&quot;laravel/homestead&quot;: &quot;^7&quot;</code> 并更新你的依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer update</span><br></pre></td></tr></table></figure>
<h1 id="提供指定的设置"><a href="#提供指定的设置" class="headerlink" title="提供指定的设置"></a>提供指定的设置</h1><h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h2><p>默认情况下，Homestead 将 <code>natdnshostresolver</code> 配置设置为 <code>on</code>。这允许 Homestead 去使用你的主机操作系统的 DNS 设置。如果你不想覆盖这个行为，添加如下的行到你的 <code>Homestead.yaml</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">provider: virtualbox</span><br><span class="line">natdnshostresolver: off</span><br></pre></td></tr></table></figure>
<h3 id="符号链接在-Windows"><a href="#符号链接在-Windows" class="headerlink" title="符号链接在 Windows"></a>符号链接在 Windows</h3><p>如果符号链接在你的 Windows 机器上无法正常工作，你可能需要添加以下的块到 <code>Vagrantfile</code> 文件：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">    v.customize [<span class="string">&quot;setextradata&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>linux</tag>
        <tag>mac</tag>
        <tag>devtools</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 那些居家必备的工具</title>
    <url>/2018/02/04/mac-necessary-tools/</url>
    <content><![CDATA[<p>以前用 <code>Windows</code> 的时候几乎不怎么关注效率，什么什么软件有多牛逼呀这种事情（当然我不是说 <code>Windows</code> 不牛逼，他们都特么牛逼）基本上是以完成任务为目标，除了开发工具其它的都不怎么折腾。后来有个同事做 <code>iOS</code> 开发的，由于 <code>iOS</code> 没有项目可做，就转做 <code>PHP</code>，偶尔去他哪儿调试个东西什么的，这样一来二去就摸到他的 <code>Mac Book Pro</code>，当时我想当然的 <code>Ctrl+C</code> 和 <code>Ctrl+V</code>，特么的不起作用，什么情况？据说是快捷键不一样，本来想显摆一下的，结果弄巧成拙了，尴尬呀（此处略去一万个字），你看，即时这样简单的操作也会难到一个一米八的汉子，卧槽，这还了得，谁能告诉我这不是 <code>🍎</code> 的错？</p>
<p>你看，人有时候会在这样微不足道的地方跟自己较劲的，这算心胸狭隘么？于是我就了解了下这个号称坚不可摧的笔记本，巧的是，我搜索出了池建强老师的博客 - <a href="http://macshuo.com/"><code>MacTalk-池建强的随想录</code></a>，这真是 <code>macOS</code> 当仁不让的布道师，这个号称站在科技和人文路口的 70 后最美的最有魅力的最有才华的最潇洒的老程序员用生命谱写了《MacTalk·人生元编程》《MacTalk·跨越边界》，我想问池老您开的是什么挂？</p>
<p>对了，多说一下，2017年7月31日，池老发布了一款给程序员使用的搜索引擎<a href="https://s.geekbang.org/">「极客搜索」</a>，毫秒级的速度，卧槽，这个速度媲美池老犀利的眼神呀。你看，还得多像池老这样多读书，不然就像我这样张口闭口只有卧槽了</p>
<p>就这样，我默默地阅完池老的书，用信用卡刷了人生的第一台 <code>Mac Book Pro</code>，是 13 寸的，童叟无欺，踏上了 <code>macOS</code> 的不归路，至今未曾后悔。</p>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h3><h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h4><blockquote>
<ul>
<li><a href="https://brew.sh/">Homebrew Website</a></li>
<li><a href="https://github.com/Homebrew/brew/">Homebrew GitHub</a></li>
<li><a href="https://docs.brew.sh/">Homebrew Documentation</a></li>
<li><a href="http://formulae.brew.sh/">Homebrew Formulae</a></li>
</ul>
</blockquote>
<p>The missing package manager for macOS.</p>
<p>可能是 <code>macOS</code> 最好用的包管理器，我不管，我就是这么认为的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装</span><br><span class="line">$ /usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">// 卸载</span><br><span class="line">$ /usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h4><blockquote>
<ul>
<li><a href="http://ohmyz.sh/">Oh My Zsh Website</a></li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh">Oh My Zsh GitHub</a></li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh/wiki">Oh My Zsh Documentation</a></li>
<li><a href="https://www.zhihu.com/question/21418449">为什么说 zsh 是 shell 中的极品？</a></li>
</ul>
</blockquote>
<p>Your terminal never felt this good before.</p>
<p>池老说过，这是终极 <code>shell</code>，很多人都认为它是 <code>shell</code> 中的极品</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装：curl 或者 wget 方式</span><br><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line">或</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">// 卸载</span><br><span class="line">$ uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure>
<h4 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h4><blockquote>
<ul>
<li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions GitHub</a></li>
<li><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">zsh-autosuggestions Documentation</a></li>
</ul>
</blockquote>
<p>强大 <code>Zsh</code> 的命令提示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install zsh-autosuggestions</span><br><span class="line">$ vim ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h4 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h4><blockquote>
<ul>
<li><a href="https://www.iterm2.com/">iTerm2 Website</a></li>
<li><a href="https://github.com/gnachman/iTerm2">iTerm2 GitHub</a></li>
<li><a href="https://www.iterm2.com/documentation.html">iTerm2 Documentation</a></li>
<li><a href="http://iterm2.com/downloads.html">iTerm2 Downloads</a></li>
</ul>
</blockquote>
<p>iTerm2 is a terminal emulator for macOS that does amazing things.</p>
<p>不能没有的仿真终端，而且还是免费的，良心软件呀！</p>
<h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4><blockquote>
<ul>
<li><a href="http://vim.spf13.com/">Ultimate Vim Website</a></li>
<li><a href="https://github.com/spf13/spf13-vim">Ultimate Vim GitHub</a></li>
<li><a href="https://github.com/spf13/spf13-vim/wiki">Ultimate Vim Documentation</a></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装</span><br><span class="line">$ curl http://j.mp/spf13-vim3 -L -o - | sh</span><br><span class="line">或者</span><br><span class="line">$ curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</span><br><span class="line"></span><br><span class="line">// 卸载</span><br><span class="line">$ sh ~/.spf13-vim-3/uninstall.sh</span><br></pre></td></tr></table></figure>
<p>The Ultimate Vim Distribution.</p>
<p>用过 <code>Vim</code>，但想用终级 <code>Vim</code>，你就试试。</p>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><blockquote>
<p><a href="https://git-scm.com/"><code>Git</code></a> - Git is a <a href="https://git-scm.com/about/free-and-open-source">free and open source</a> distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is <a href="https://git-scm.com/documentation">easy to learn</a> and has a <a href="https://git-scm.com/about/small-and-fast">tiny footprint with lightning fast performance</a>. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like <a href="https://git-scm.com/about/branching-and-merging">cheap local branching</a>, convenient <a href="https://git-scm.com/about/staging-area">staging areas</a>, and <a href="https://git-scm.com/about/distributed">multiple workflows</a>.</p>
</blockquote>
<p>这个年头你要是不会用 <code>git</code>，出门会被人嘲笑的，尤其是程序员。</p>
<div class="note warning">
            <p>一般情况下，不需要安装，因为 <code>Xcode Command Line Tools</code> 就自带。</p>
          </div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装</span><br><span class="line">$ brew install git</span><br><span class="line"></span><br><span class="line">// 卸载</span><br><span class="line">$ brew uninstall git</span><br></pre></td></tr></table></figure>
<h4 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h4><blockquote>
<p><a href="https://curl.haxx.se/"><code>Curl</code></a> - Command line tool and library for transferring data with URLs. curl is used in command lines or scripts to transfer data. It is also used in cars, television sets, routers, printers, audio equipment, mobile phones, tablets, settop boxes, media players and is the internet transfer backbone for thousands of software applications affecting billions of humans daily.</p>
</blockquote>
<p>不会使用这个工具，你也配谈互联网，别回头，说的就是你</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装</span><br><span class="line">$ brew install curl</span><br><span class="line"></span><br><span class="line">// 卸载</span><br><span class="line">$ brew uninstall curl</span><br></pre></td></tr></table></figure>
<h2 id="窗体工具"><a href="#窗体工具" class="headerlink" title="窗体工具"></a>窗体工具</h2><h3 id="效率工具-1"><a href="#效率工具-1" class="headerlink" title="效率工具"></a>效率工具</h3><blockquote>
<p><code>@hzlzh</code> 已经做过一个非常优秀的食谱 - <a href="https://github.com/hzlzh/Best-App"><code>Best App</code></a>，里面列出了很多优秀的软件，但是呢，这个太多了，我是断不可能把这么多软件都用的出神入化，能常用的可能真没几个，也可能是我孤陋寡闻，没见过真正的大神是怎么把这么多工具用的登峰造极的，不过感谢 <code>@hzlzh</code> 和维护这份食谱的伙伴们，有你们这样的极客，才成就了更多人的方便</p>
</blockquote>
<h4 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h4><blockquote>
<p><a href="https://www.alfredapp.com"><code>Alfred</code></a> is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</p>
</blockquote>
<p><code>macOS</code> 的神兵利器，迄今为止最具效率的软件，没有之一，不解释</p>
<p><code>Alfred Workflow</code> 让你随心所欲：</p>
<ul>
<li><a href="https://www.zhihu.com/question/22301362">如何编写 <code>Alfred</code> 使用的 <code>Workflow</code>，需要掌握哪些知识？</a></li>
<li><a href="https://www.zhihu.com/question/20656680">借助 <code>Alfred</code> 的 <code>Workflows</code> 功能可以做哪些好玩的事情？</a></li>
<li><a href="http://alfredworkflow.com">写不了 <code>Workflows</code> 我就用别人的 <code>Workflows</code>，我有点无耻</a></li>
</ul>
<h4 id="1Password"><a href="#1Password" class="headerlink" title="1Password"></a>1Password</h4><blockquote>
<p><a href="https://1password.com"><code>1Password</code></a> remembers them all for you. Save your passwords and log in to sites with a single click. It’s that simple.</p>
</blockquote>
<p>原来管理密码账号也那么轻松呀，谁用谁知道，不解释</p>
<h4 id="iStat-Menus-6"><a href="#iStat-Menus-6" class="headerlink" title="iStat Menus 6"></a>iStat Menus 6</h4><blockquote>
<p><a href="https://bjango.com/mac/istatmenus/"><code>iStat Menus 6</code></a> - An advanced Mac system monitor for your menubar.</p>
</blockquote>
<p>菜单栏监视系统运行状况，强迫症必备</p>
<h4 id="Bartender-3"><a href="#Bartender-3" class="headerlink" title="Bartender 3"></a>Bartender 3</h4><blockquote>
<p><a href="https://www.macbartender.com"><code>Bartender 3</code></a> - Organize your menu bar apps. <code>Bartender 3</code> lets you organize your menu bar apps, by hiding them, rearranging them, or moving them to the Bartender Items. You can display the full menu bar, set options to have menu bar items show in the menu bar when they have updated, or have them visible in the Bartender Items whenever you want.</p>
</blockquote>
<p>聚合菜单栏图标，强迫症必备</p>
<h4 id="CleanMyMac-3"><a href="#CleanMyMac-3" class="headerlink" title="CleanMyMac 3"></a>CleanMyMac 3</h4><blockquote>
<p><a href="https://macpaw.com/cleanmymac"><code>CleanMyMac 3</code></a> - Clean, optimize, and maintain your Mac with the all-new CleanMyMac 3. It scans every inch of your system, removes gigabytes of junk in just two clicks, and monitors the health of your Mac.</p>
</blockquote>
<p>清理、优化、维护系统，但比流氓的节操要高，有底线</p>
<h4 id="Paste"><a href="#Paste" class="headerlink" title="Paste"></a>Paste</h4><blockquote>
<p><a href="https://pasteapp.me"><code>Paste</code></a> - Never lose anything you’ve copied on your Mac again. Paste automatically stores everything you copy across all your devices and keeps your clipboard history organized.</p>
</blockquote>
<p>运维的最爱，当然，它也可以是你的真爱，<code>Time machine for your clipboard</code>，不是盖的，从此复制粘贴如行云流水</p>
<h4 id="aText"><a href="#aText" class="headerlink" title="aText"></a>aText</h4><blockquote>
<p><a href="http://www.trankynam.com/atext/"><code>aText Typing Accelerator</code></a> - aText accelerates your typing by replacing abbreviations with frequently used phrases you define.</p>
</blockquote>
<p>羡慕过别人的输入速度，你是不是也蠢蠢欲动，try 一下这个，你也可以的</p>
<h4 id="MWeb"><a href="#MWeb" class="headerlink" title="MWeb"></a>MWeb</h4><blockquote>
<p><a href="http://zh.mweb.im"><code>Mweb</code></a> - <code>MWeb</code> for Mac, iPad and iPhone，专业的 <code>Markdown</code> 写作、记笔记、静态博客生成软件</p>
</blockquote>
<p>最好的 <code>Markdown</code> 写作软件之一</p>
<p>是的，<code>Markdown</code> 写作软件比较多，各人有各人的喜好吧，像我偏爱 <code>Mweb</code> 多一点而已。每个人的使用场景不尽相同，所以呢，自己挑吧，反正有这么多选择呢，友情提示：不要挑花眼了，选一两个就好，毕竟写才是目的嘛</p>
<p>同样在使用同样的工具，有些人真就把工具用出了花，这个境界，我也得试一下</p>
<ul>
<li><a href="https://sspai.com/post/32483">码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点</a></li>
<li><a href="http://www.ifanr.com/app/665209">让你爱上写作的 11 款 Markdown 工具 | 专题 · 写作</a></li>
<li><a href="https://www.zhihu.com/question/19637157">用 Markdown 写作用什么文本编辑器？</a></li>
</ul>
<h4 id="Quick-Look-Plugin"><a href="#Quick-Look-Plugin" class="headerlink" title="Quick Look Plugin"></a>Quick Look Plugin</h4><blockquote>
<p><a href="https://github.com/sindresorhus/quick-look-plugins"><code>Quick Look Plugin</code></a></p>
</blockquote>
<p>快速预览的插件，无论图片、文本，不试一下怎么知道呢？请先安装 <a href="https://caskroom.github.io/"><code>Homebrew Cask</code></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize webpquicklook suspicious-package quicklookase qlvideo</span><br></pre></td></tr></table></figure>
<h3 id="开发工具-1"><a href="#开发工具-1" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="JetBrains-IDE"><a href="#JetBrains-IDE" class="headerlink" title="JetBrains IDE"></a><code>JetBrains IDE</code></h4><blockquote>
<p><a href="https://www.jetbrains.com/products.html?fromMenu"><code>JetBrains</code> 全家桶</a> - Whichever technologies you use, there’s a JetBrains tool to match.</p>
</blockquote>
<p>你就对号入座吧，我是 <code>PHPer</code>，我选 <code>PhpStorm</code></p>
<h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a><code>Visual Studio Code</code></h4><blockquote>
<p><a href="https://code.visualstudio.com/"><code>Visual Studio Code</code></a> - Code editing. Redefined. Free. Open source. Runs everywhere. Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). Begin your journey with VS Code with these <a href="https://code.visualstudio.com/docs/getstarted/introvideos">introductory videos</a>.</p>
</blockquote>
<p>宇宙最强的编辑器难道不是 <code>Vim or Emacs</code>，<code>NO NO NO</code>，你也看见了，微软向来不服呀</p>
<h4 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a><code>Sublime Text 3</code></h4><blockquote>
<p><a href="https://www.sublimetext.com/"><code>Sublime Text 3</code></a> - A sophisticated text editor for code, markup and prose.</p>
</blockquote>
<p>这个我就不说了，快捷键设置的最为优雅，所以我把 <code>PhpStorm</code> 和 <code>Visual Studio Code</code> 的快捷键都映射成了 <code>Sublime</code> 这个德性，一套快捷键一统江湖</p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Homebrew Cask</title>
    <url>/2018/02/05/mac-homebrew-cask/</url>
    <content><![CDATA[<p>一行命令搞定你要安装的软件，省掉了自己去下载、解压、拖拽这些操作，<code>Cask</code> 你值得拥有</p>
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<ul>
<li><a href="https://caskroom.github.io/">Homebrew Cask Website</a></li>
<li><a href="https://github.com/caskroom/homebrew-cask">Homebrew Cask GitHub</a></li>
<li><a href="https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md">Homebrew Cask Documentation</a></li>
<li><a href="https://caskroom.github.io/search">Homebrew Cask Package Search</a></li>
</ul>
</blockquote>
<p>A CLI workflow for the administration of macOS applications distributed as binaries.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap caskroom/cask</span><br></pre></td></tr></table></figure>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装应用软件</span><br><span class="line">$ brew cask install package-name</span><br><span class="line"></span><br><span class="line">// 卸载应用软件</span><br><span class="line">$ brew cask uninstall package-name</span><br><span class="line"></span><br><span class="line">// 更新应用软件</span><br><span class="line">$ brew cask reinstall package-name</span><br><span class="line"></span><br><span class="line">// 搜索应用软件</span><br><span class="line">$ brew cask search package-name</span><br><span class="line"></span><br><span class="line">// 查看应用软件详情</span><br><span class="line">$ brew cask info package-name</span><br><span class="line"></span><br><span class="line">// 查看安装软件列表</span><br><span class="line">$ brew cask list</span><br><span class="line"></span><br><span class="line">// 检查配置问题</span><br><span class="line">$ brew cask doctor</span><br><span class="line"></span><br><span class="line">// 清理缓存下载和跟踪符号链接</span><br><span class="line">$ brew cask cleanup</span><br><span class="line"></span><br><span class="line">// 转到主页</span><br><span class="line">$ brew cask home</span><br><span class="line"></span><br><span class="line">// 查看版本</span><br><span class="line">$ brew cask --version</span><br><span class="line"></span><br><span class="line">// 查看帮助命令</span><br><span class="line">$ brew cask <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://www.zhihu.com/question/22624898"><code>brew</code> 和 <code>brew cask</code> 有什么区别？</a><br><a href="https://zhuanlan.zhihu.com/p/28208648"><code>Homebrew cask</code> 让 <code>macOS</code> 锦上添花</a></p>
</blockquote>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac VSCode 基本操作</title>
    <url>/2018/12/03/mac-vscode-basic/</url>
    <content><![CDATA[<p><img src="/images/2019/201906201022.jpg" alt="201906201022.jpg"></p>
<p>🈂️经常码字少不了快捷键的帮衬，有些神奇的效果居然是在误按之下出现，着实把我惊呆了，还有这种操作之状此起彼伏。经常在误操作后记不得对应的快捷键，瞎激动一会儿后又嘎然而止。为了避免这种几度的尴尬窘境，我还是决定动动懒笔头记一记，万一哪天想起这种操作了呢？</p>
<span id="more"></span>
<h1 id="基础操作法"><a href="#基础操作法" class="headerlink" title="基础操作法"></a>基础操作法</h1><h2 id="光标操作"><a href="#光标操作" class="headerlink" title="光标操作"></a>光标操作</h2><ul>
<li>单词粒度的光标移动：左移 <code>Alt+⬅️</code>；右移 <code>Alt+➡️</code></li>
<li>行首行尾的光标移动：行首 <code>Cmd+⬅️</code>；行尾 <code>Cmd+➡️</code></li>
<li>代码块间的光标移动：按下 <code>Shift+Cmd+\</code> 后再左右闭合标签之前来回移动</li>
<li>文档首尾的光标移动：文档首部 <code>Cmd+⬆️</code>；文档尾部 <code>Cmd+⬇️</code></li>
<li>某行文本前后插入空行：某行文本前一行插入空行 <code>Shift+Cmd+Enter</code>；某行文本后一行插入空行 <code>Cmd+Enter</code></li>
</ul>
<h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><ul>
<li>选中光标前后的单词：选中光标之前的单词 <code>Shift+Alt+⬅️</code>，继续按左方向键选中更多的单词；选中光标之后的单词 <code>Shift+All+➡️</code>，继续按右方向键选中更多的单词</li>
<li>选中光标前后的整行：选中光标之前的整行 <code>Shift+Cmd+⬅️</code>；选中光标之后的整行 <code>Shift+Cmd+➡️</code></li>
<li>选中光标所在的某个闭合标签中的代码：<code>Ctrl+Shift+Cmd+➡️</code>，继续按右方向键扩大选择范围，按左方向键缩小选择范围</li>
<li>连同闭合标签一起选中，按 <code>Shift+Cmd+P</code>，输入 <code>Select to Bracket</code></li>
<li>选中整行：按 <code>Cmd+I</code> 直接选中整行；按 <code>Cmd+⬅️</code> 或 <code>Cmd+➡️</code> 将光标定位到行首或者行尾，然后按 <code>Shift+Cmd+➡️</code> 或 <code>Shift+Cmd+⬅️</code></li>
<li>删除光标前后的单词：删除光标前的单词 <code>Alt+Delete</code>；删除光标后的单词 <code>fn+Alt+Delete</code></li>
<li>删除光标前后的整行：删除光标前的文本 <code>Cmd+Delete</code>；删除光标后的文本 <code>fn+Cmd+Delete</code></li>
<li>删除整行：按 <code>Cmd+X</code> 将整行剪切掉；按 <code>Ctrl+Shift+K</code> 删除掉整行；先选中一行，再按 <code>Delete</code> 删除整行</li>
<li>单行文本移动：单行文本向上移动 <code>Alt+⬆️</code>；单行文本向下移动 <code>Alt+⬇️</code></li>
<li>多行文本移动：选中多行文本并按 <code>Alt+⬆️</code>；选中多行文本并按 <code>Alt+⬇️</code></li>
<li>单行文本复制：单行文本向上复制 <code>Shift+Alt+⬆️</code>；单行文本向下复制 <code>Shift+Alt+⬇️</code></li>
<li>多行文本复制：选中复制的文本后按 <code>Shift+Alt+⬆️</code>；选中复制的文本后按 <code>Shift+Alt+⬇️</code></li>
<li>代码注释：单行注释 <code>Cmd+/</code>；多行注释 <code>Alt+Shift+A</code></li>
<li>代码格式化：选中格式化 <code>Cmd+K Cmd+F</code>；文档格式化 <code>Alt+Shift+F</code></li>
<li>代码缩进：左缩进 <code>Cmd+[</code>；右缩进 <code>Cmd+]</code></li>
<li>调换字符的位置：<code>Ctrl+T</code></li>
<li>调整字符的大小写：转换为大写，按 <code>Shift+Cmd+P</code> 后输入 <code>Transform to Uppercase</code>；转换为小写，按 <code>Shift+Cmd+P</code> 后输入 <code>Transform to Lowercase</code>。更高级的转换使用 <a href="https://github.com/wmaurer/vscode-change-case">Change Case Extension for Visual Studio Code</a> 插件</li>
<li>合并到一行：按 <code>Ctrl+J</code></li>
<li>CSS 属性排序：升序排列，按 <code>Shift+Cmd+P</code> 后输入 <code>Sort Lines Ascending</code>；降序排列，按 <code>Shift+Cmd+P</code> 后输入 <code>Sort Lines Descending</code></li>
<li>撤销光标的移动和选择：按 <code>Cmd+U</code></li>
<li>创建多光标：针对相同的文本按 <code>Cmd+D</code> 依次创建光标；针对不同的文本，先选中操作的文本，然后按 <code>Alt+Shift+I</code> 将光标定位到选中的所有文本末尾；针对要操作的一块文本，按 <code>Alt+Cmd+⬇️</code> 向下依次创建光标，按 <code>Alt+Cmd+⬆️</code> 向上依次创建光标</li>
</ul>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul>
<li>当前打开的文件间跳转：按 <code>Ctrl+Tab</code> 打开已经打开的文件列表，接着按到想要定位的文件后松手</li>
<li>最近打开的文件间跳转：按 <code>Cmd+P</code> 打开最近打开过的文件列表，接着不要松开 <code>Cmd</code> 键直接按 <code>P</code> 定位到文件后松手，或者直接在输入框中模糊搜索；在文件列表很长时，跳过了将要选中的文件，可以按上下方向键回去</li>
<li>在新标签中打开定位的文件：在 <code>Cmd+P</code> 模糊搜索加持下定位到想打开的文件，按 <code>Cmd+Enter</code> 将拆分当前窗口打开定位的文件；在 <code>Cmd+P</code> 循环加持下定位到想打开的文件，需要鼠标点击拆分窗口按钮</li>
<li>行间跳转：按 <code>Ctrl+G</code> 输入等号，当然也可以在行号后加 <code>:</code> 再输入列号</li>
<li>精确跳转到文件的指定行列：<code>Cmd+P</code> 搜索到文件后输入 <code>:行号:列号</code> 即可</li>
<li>仅当前文件符号跳转：按 <code>Cmd+R</code> 打开文件中的所有符号列表；输入 <code>:</code> 后将分类列出符号列表；按上下方向键将实时预览相应的代码块</li>
<li>工作区文件符号跳转：按 <code>Cmd+T</code> 就可以在工作区文件间搜索符号列表，不过速度堪忧</li>
<li>定义跳转：按 <code>F12</code>，需要相关语言的支持</li>
<li>实现跳转：按 <code>Cmd+F12</code></li>
<li>引用跳转：按 <code>Shift+F12</code> 查看符号被引用的列表</li>
<li>选中文本拖拽：选中一块文本后，直接鼠标拖拽到对应的地方</li>
<li>代码跳转：按住 <code>Alt</code> 后鼠标点击要跳转的代码</li>
<li>链接跳转：按住 <code>Cmd</code> 后鼠标点击就打开相关链接</li>
<li>自动补全：输入要补全的对象后，一般情况下编辑会自动提示要补全的符号列表，按上下方向键选中回车；在输入要补全的对象后，按 <code>Tab</code> 直到想要的补全出现为止</li>
<li>关闭和显示补全列表：按 <code>Esc</code> 关闭补全列表；按 <code>Cmd+Space</code> 显示补全列表；此键原本是 <code>Ctrl+Space</code> 与系统输入法切换冲突，改为 <code>Cmd+Space</code> 是遵循就近原则</li>
<li>快速预览符号信息：在补全列表中选中要补全的符号，按 <code>Cmd+Space</code> 来回切换回显</li>
<li>快速提示符号参数信息：按 <code>Shift+Cmd+Space</code>，按 <code>Esc</code> 关闭提示</li>
<li>自动更正单词拼写：在错误单词上按 <code>Cmd+.</code> 选择正确的进行替换，需要相关语言支持</li>
<li>符号名称重构：按 <code>Cmd+F2</code> 批量重构符号名称</li>
</ul>
<h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><blockquote>
<p>以下给出的命令栏中的搜索只需输入关键字搜索即可，不用刻意完全输入。</p>
</blockquote>
<h2 id="工作区定制"><a href="#工作区定制" class="headerlink" title="工作区定制"></a>工作区定制</h2><blockquote>
<p>修改值请按 <code>Cmd+,</code> 后在用户设置文件 <code>settings.json</code> 文件中添加，相关值的含义请参照默认用户设置值注释文档。</p>
</blockquote>
<ul>
<li>切换状态栏可见性：修改 <code>&quot;workbench.statusBar.visible&quot;</code></li>
<li>切换活动栏可见性：修改 <code>&quot;workbench.activityBar.visible&quot;</code></li>
<li>关闭活动栏打开编辑数量：修改 <code>&quot;explorer.openEditors.visible&quot;</code></li>
<li>切换小地图：修改 <code>&quot;editor.minimap.enabled&quot;</code></li>
<li>切换边栏位置：修改 <code>&quot;workbench.sideBar.location&quot;</code></li>
</ul>
<h2 id="编辑区定制"><a href="#编辑区定制" class="headerlink" title="编辑区定制"></a>编辑区定制</h2><ul>
<li>启用 Tab 补全：修改 <code>&quot;editor.tabCompletion&quot;</code> 的值为 <code>&quot;on&quot;</code></li>
</ul>
<h2 id="常用命令切换"><a href="#常用命令切换" class="headerlink" title="常用命令切换"></a>常用命令切换</h2><ul>
<li>切换状态栏可见性：在命令栏中搜索 <code>View: Toggle Status Bar Visibility</code> 回车切换</li>
<li>切换活动栏可见性：在命令栏中搜索 <code>View: Toggle Activity Bar Visibility</code> 回车切换</li>
<li>切换小地图：在命令栏中搜索 <code>View: Toggle Minimap</code> 回车切换</li>
<li>切换边栏位置：在命令栏中搜索 <code>View: Toggle Side Bar Position</code> 回车切换</li>
<li>切换问题（错误、警告、信息）视图：在命令栏中搜索 <code>View: Toggle Problems</code> 回车切换</li>
<li>切换输出：在命令栏中搜索 <code>View: Toggle Output</code> 回车切换</li>
<li>切换自动换行：在命令栏中搜索 <code>View: Toggle Word Wrap</code> 回车切换</li>
<li>切换开发人员工具：在命令栏中搜索 <code>View: Toggle Developer Tools</code> 回车切换</li>
<li>侧边条形图：在命令栏中搜索 <code>View: Open Next Side Bar View</code> 回车</li>
<li>关闭所有编辑器：<code>View: Close All Editors</code> 回车</li>
<li>关闭所有编辑器组：<code>View: Close All Editor Group</code> 回车</li>
</ul>
<p>更新中……</p>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>devtools</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac VSCode 效率扩展</title>
    <url>/2018/12/04/mac-vscode-extension/</url>
    <content><![CDATA[<p><img src="/images/2019/201906121939.png" alt="201906121939.png"></p>
<p>🎉VSCode 的强大离不开庞大的扩展市场，在 VSCode marketplace 上只有你想不到的，没有你找不到的。在经历一番折腾后少不了对它的评头论足，有那么些扩展确实有一种相见恨晚之感，当然也不能太贪，装几个高频的就好，毕竟装多了之后扩展的激活和加载也费时间，所谓『效率』也需要那么点权衡呀。</p>
<h1 id="操作类扩展"><a href="#操作类扩展" class="headerlink" title="操作类扩展"></a>操作类扩展</h1><h2 id="文件操作扩展"><a href="#文件操作扩展" class="headerlink" title="文件操作扩展"></a>文件操作扩展</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file">VSCode Advanced New File</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils">File Utils - Visual Studio Code Extension</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">VSCodeVim</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case">Change Case Extension for Visual Studio Code</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets">Rainbow Brackets</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Bracket Pair Colorizer 2</a></li>
</ul>
<h2 id="工程增强扩展"><a href="#工程增强扩展" class="headerlink" title="工程增强扩展"></a>工程增强扩展</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese (Simplified) Language Pack for Visual Studio Code</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager">Project Manager</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig for VS Code</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv">DotENV</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml">YAML Support by Red Hat</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore">gitignore extension for Visual Studio Code</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-database">vscode-database</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=DotJoshJohnson.xml">XML Tools</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments">Better Comments</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file">VSCode Advanced New File</a></li>
</ul>
<h2 id="Git-增强扩展"><a href="#Git-增强扩展" class="headerlink" title="Git 增强扩展"></a>Git 增强扩展</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens — Git supercharged</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory">Git History</a></li>
</ul>
<h1 id="主题类扩展"><a href="#主题类扩展" class="headerlink" title="主题类扩展"></a>主题类扩展</h1><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme">Material Theme</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons">vscode-icons</a></li>
</ul>
<h1 id="开发类扩展"><a href="#开发类扩展" class="headerlink" title="开发类扩展"></a>开发类扩展</h1><h2 id="前端扩展"><a href="#前端扩展" class="headerlink" title="前端扩展"></a>前端扩展</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome">Debugger for Chrome</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css">HTML CSS Support</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion">IntelliSense for CSS class names in HTML</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Compulim.compulim-vscode-closetag">Close HTML/XML tag</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script">npm</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">npm Intellisense</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify">Beautify</a></li>
</ul>
<h2 id="PHP-扩展"><a href="#PHP-扩展" class="headerlink" title="PHP 扩展"></a>PHP 扩展</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client">PHP Intelephense</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=MehediDracula.php-namespace-resolver">PHP Namespace Resolver</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=neilbrayfield.php-docblocker">PHP DocBlocker</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug">PHP Debug</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=junstyle.php-cs-fixer">php cs fixer</a></li>
</ul>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>devtools</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 万能编辑器 Sublime Text</title>
    <url>/2018/05/26/mac-sublime-text/</url>
    <content><![CDATA[<p>如果说 <code>VSCode</code> 是编辑器的集大成者。那么 <code>Sublime Text</code> 绝对是编辑器中的一股清流，虽然闭源，但丝毫不影响它力压群雄。它们是编辑器中的双子星，足以裹挟一众码农驰骋码场，逐鹿万千码海。</p>
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>A sophisticated text editor for code, markup and prose.</p>
</blockquote>
<p>短小精悍的简介，<code>Sublime Text</code> 深深打动我的是速度和易用性，无论是打开项目还是众多的项目间来回切换，还是日常编辑，它从来都没让我失望过，它以其速度碾压了绝大多数 <code>Editor</code> 和 <code>IDE</code>，其不足 <code>15 MB</code> 的安装包体积和流畅的表现，让人难以置信。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><a href="https://www.sublimetext.com/">Sublime Text 官网</a></li>
<li><a href="https://www.sublimetext.com/3">Sublime Text 下载</a></li>
<li><a href="https://packagecontrol.io/">Package Control</a></li>
</ul>
<h2 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h2><p><code>Package Control</code>- 姑且称它为插件管理器吧，它本身也是一款插件。</p>
<p>大部分的教程都提到安装 <code>Package Control</code> 时，按 <code>Ctrl+~</code> 粘贴一堆代码到控制台，回车后完成安装。这里我们采用 <code>Sublime Text</code> 自带的命令来完成安装，根本不用粘贴代码。按 <code>Command+Shift+P</code>，在命令框中输入 <code>install package control</code> 回车即可，看图：</p>
<p><img src="http://om804c7s2.bkt.clouddn.com/2018-05-28-sublime-package-control.jpg" alt="sublime-package-control"></p>
<p>完成后如下图提示：</p>
<p><img src="http://om804c7s2.bkt.clouddn.com/2018-05-28-sublime-package-control-installed.png" alt="sublime-package-control-installed"></p>
<p>安装完成后，重启 <code>Sublime Text</code>，我们通过 <code>Package Control: Install Package</code> 来安装其它插件。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li><a href="https://github.com/sergeche/emmet-sublime"><code>Emmet</code></a>：从此编写 <code>HTML</code> 和 <code>CSS</code> 代码健步如飞。</li>
<li><a href="https://github.com/randy3k/ProjectManager"><code>Project Manager</code></a>：在不同的项目或工程间飞速的切换。</li>
<li><a href="https://github.com/SideBarEnhancements-org/SideBarEnhancements"><code>SideBarEnhancements</code></a>：增强右键菜单功能。</li>
<li><a href="https://github.com/sindresorhus/editorconfig-sublime"><code>EditorConfig</code></a>：统一不同编辑器和 <code>IDE</code> 之间的编码风格。</li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter"><code>SublimeLinter</code></a>：代码检测框架。</li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter-php"><code>SublimeLinter-php</code></a>：<code>PHP</code> 代码检测。</li>
<li><a href="https://github.com/skuroda/Sublime-AdvancedNewFile"><code>AdvancedNewFile</code></a>：高级的文件新建方式。</li>
<li><a href="https://github.com/TheSpyder/SyncedSideBar"><code>SyncedSideBar</code></a>：自动定位当前文件在左边文件夹树中的位置。</li>
<li><a href="https://github.com/Colorsublime/Colorsublime-Plugin"><code>Colorsublime</code></a>：代码主题管理器，总有一款主题适合你。</li>
<li><a href="https://github.com/equinusocio/material-theme"><code>Material Themel</code></a>：绚丽夺目的编辑器主题。</li>
<li><a href="https://github.com/jisaacks/GitGutter"><code>GitGutter</code></a>：标记代码中做的更新。</li>
<li><a href="https://github.com/spadgos/sublime-jsdocs"><code>DocBlockr</code></a>：自动生成 <code>PHPDoc</code> 风格的注释。</li>
<li><a href="https://github.com/seanliang/ConvertToUTF8"><code>ConvertToUTF8</code></a>：支持其它文件编码格式。</li>
<li><a href="https://github.com/facelessuser/BracketHighlighter"><code>BracketHighlighter</code></a>：匹配成对标签。</li>
<li><a href="https://github.com/SublimeText/TrailingSpaces"><code>TrailingSpaces</code></a>：检测代码中尾随的多余空格并干掉它们。</li>
<li><a href="https://github.com/kemayo/sublime-text-git"><code>Git</code></a>：<code>Git</code> 版本控制。</li>
<li><a href="https://github.com/SublimeCodeIntel/SublimeCodeIntel"><code>SublimeCodeIntel</code></a>：代码智能提示。</li>
<li><a href="https://github.com/BoundInCode/AutoFileName"><code>AutoFileName</code></a>：自动补全文件路径。</li>
<li><a href="https://github.com/lunixbochs/actualvim"><code>ActualVim</code></a>：像 <code>Vim</code> 那样操作 <code>Sublime Text</code>。</li>
</ul>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>devtools</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 中让开发更加容易的 Vagrant</title>
    <url>/2018/01/21/mac-vagrant/</url>
    <content><![CDATA[<p><img src="/images/2018/201801211811.png" alt="201801211811.png"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装-VirtualBox"><a href="#安装-VirtualBox" class="headerlink" title="安装 VirtualBox"></a>安装 VirtualBox</h2><blockquote>
<ul>
<li><a href="https://www.virtualbox.org/">VirtualBox</a> 或者 <a href="https://www.parallels.com/uk/">Parallels</a> 安装其一就可以了</li>
<li><a href="https://www.virtualbox.org/wiki/Downloads">Download VirtualBox</a></li>
</ul>
</blockquote>
<h2 id="安装-Parallels"><a href="#安装-Parallels" class="headerlink" title="安装 Parallels"></a>安装 Parallels</h2><p><a href="https://github.com/Parallels/vagrant-parallels">Vagrant Parallels Plugin</a></p>
<h2 id="安装-Vagrant"><a href="#安装-Vagrant" class="headerlink" title="安装 Vagrant"></a>安装 Vagrant</h2><blockquote>
<ul>
<li><a href="https://www.vagrantup.com/">官网</a></li>
<li><a href="https://github.com/mitchellh/vagrant">GitHub</a></li>
</ul>
</blockquote>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 添加镜像到 Vagrant</span><br><span class="line">vagrant box add centos ~/.vagrant.d/boxes/vagrant-centos-7.1.box</span><br><span class="line"></span><br><span class="line">// 创建开发目录, 切换目录</span><br><span class="line">mkdir -pv ~/Vagrant/centos</span><br><span class="line"><span class="built_in">cd</span> ~/Vagrant/centos</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">vagrant init centos</span><br><span class="line"></span><br><span class="line">// 启动环境</span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line">// 登录虚拟机</span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line">// 将虚拟机挂起, 虚拟机内存都保存到硬盘上, 下次可以快速恢复</span><br><span class="line">vagrant <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line">// 将虚拟机关闭, 虚拟机内存释放, 下次启动要慢一点</span><br><span class="line">vagrant halt</span><br><span class="line"></span><br><span class="line">// 将虚拟机删除, 所有变更都丢失, 下次启动要重新克隆一个 VagrantBox</span><br><span class="line">vagrant destroy</span><br><span class="line"></span><br><span class="line">// 移除虚拟机</span><br><span class="line">vagrant box remove centos</span><br><span class="line"></span><br><span class="line">// 虚拟机打包之前删除下面的文件</span><br><span class="line">sudo rm -rf /etc/udev/rules.d/70-persistent-ipoib(net).rules</span><br><span class="line"></span><br><span class="line">// 虚拟机打包</span><br><span class="line">vagrant package --base centos --output centos.box</span><br></pre></td></tr></table></figure>
<h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 添加别名为 centos 的镜像</span><br><span class="line">vagrant box add centos ~/.vagrant.d/boxes/vagrant-centos-7.1.box</span><br><span class="line"></span><br><span class="line">// 查看所有添加的镜像</span><br><span class="line">vagrant box list</span><br><span class="line"></span><br><span class="line">// 移除别名为 centos 的镜像</span><br><span class="line">vagrant box remove centos</span><br><span class="line"></span><br><span class="line">// 移除名称为 bento/centos-7.2，版本为 2.3.0 的镜像</span><br><span class="line">vagrant box remove bento/centos-7.2 --box-version 2.3.0</span><br><span class="line"></span><br><span class="line">// 重载虚拟机</span><br><span class="line">vagrant reload</span><br><span class="line"></span><br><span class="line">// 重启虚拟机并应用对 Vagrantfile 的更改</span><br><span class="line">vagrant reload --provision</span><br><span class="line"></span><br><span class="line">// 恢复虚拟机状态</span><br><span class="line">vagrant resume</span><br><span class="line"></span><br><span class="line">// 登录虚拟机</span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line">// 查看虚拟机状态</span><br><span class="line">vagrant status</span><br><span class="line"></span><br><span class="line">// 暂停虚拟机, 保存状态</span><br><span class="line">vagrant <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line">// 查看全局状态</span><br><span class="line">vagrant global-status</span><br><span class="line"></span><br><span class="line">// 销毁指定的虚拟机（慎用，一旦执行，创建的虚拟机就灰飞烟灭了）</span><br><span class="line">vagrant destroy 1a2b3c4d</span><br><span class="line"></span><br><span class="line">// 升级所有 Box</span><br><span class="line">vagrant box update</span><br></pre></td></tr></table></figure>
<h1 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h1><p><a href="https://docs.oracle.com/en/virtualization/virtualbox/6.1/user/vboxmanage.html">VBoxManage User Manual</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 列出当前系统中所有可用的虚拟机</span><br><span class="line">VBoxManage list vms</span><br><span class="line"><span class="string">&quot;&lt;inaccessible&gt;&quot;</span> &#123;b457c29d-3eaf-4d19-8f38-7991c85aa43a&#125;</span><br><span class="line"><span class="string">&quot;ubuntu_default_1588584023862_25557&quot;</span> &#123;eee17f07-35dc-4c48-bff9-8006bf3df55c&#125;</span><br><span class="line"><span class="string">&quot;centos_default_1588597614517_34912&quot;</span> &#123;3c640794-da30-40b2-a155-c76b42c5cac7&#125;</span><br><span class="line"></span><br><span class="line">// 克隆虚拟机</span><br><span class="line">VBoxManage clonevm --register ubuntu_default_1588584023862_25557 --name Ubuntu</span><br><span class="line">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br><span class="line">Machine has been successfully cloned as <span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line"></span><br><span class="line">// 将本地虚拟机导出为一个使用开放虚拟化格式（OVF - Open Virtualization Format）文件</span><br><span class="line">VBoxManage <span class="built_in">export</span> ubuntu_default_1588584023862_25557 -o Ubuntu.ova</span><br><span class="line">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br><span class="line">Successfully exported 1 machine(s).</span><br><span class="line"></span><br><span class="line">// 删除克隆的虚拟机</span><br><span class="line">VBoxManage unregistervm --delete <span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br><span class="line"></span><br><span class="line">// 导入虚拟机</span><br><span class="line">VBoxManage import Ubuntu.ova --vsys 0 --vmname Ubuntu18</span><br><span class="line">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br><span class="line">Interpreting /Users/majinyun/Downloads/qiniu/Ubuntu.ova...</span><br><span class="line">OK.</span><br><span class="line">Disks:</span><br><span class="line">  vmdisk1 10737418240 -1 http://www.vmware.com/interfaces/specifications/vmdk.html<span class="comment">#streamOptimized Ubuntu-disk001.vmdk -1 -1</span></span><br><span class="line">  vmdisk2 10485760 -1 http://www.vmware.com/interfaces/specifications/vmdk.html<span class="comment">#streamOptimized Ubuntu-disk002.vmdk -1 -1</span></span><br><span class="line"></span><br><span class="line">Virtual system 0:</span><br><span class="line"> 0: Suggested OS <span class="built_in">type</span>: <span class="string">&quot;Ubuntu_64&quot;</span></span><br><span class="line">    (change with <span class="string">&quot;--vsys 0 --ostype &lt;type&gt;&quot;</span>; use <span class="string">&quot;list ostypes&quot;</span> to list all possible values)</span><br><span class="line"> 1: VM name specified with --vmname: <span class="string">&quot;Ubuntu18&quot;</span></span><br><span class="line"> 2: Suggested VM group <span class="string">&quot;/&quot;</span></span><br><span class="line">    (change with <span class="string">&quot;--vsys 0 --group &lt;group&gt;&quot;</span>)</span><br><span class="line"> 3: Suggested VM settings file name <span class="string">&quot;/Users/majinyun/VirtualBoxVMs/ubuntu_default_1588584023862_25557 2/ubuntu_default_1588584023862_25557 2.vbox&quot;</span></span><br><span class="line">    (change with <span class="string">&quot;--vsys 0 --settingsfile &lt;filename&gt;&quot;</span>)</span><br><span class="line"> 4: Suggested VM base folder <span class="string">&quot;/Users/majinyun/VirtualBoxVMs&quot;</span></span><br><span class="line">    (change with <span class="string">&quot;--vsys 0 --basefolder &lt;path&gt;&quot;</span>)</span><br><span class="line"> 5: Number of CPUs: 2</span><br><span class="line">    (change with <span class="string">&quot;--vsys 0 --cpus &lt;n&gt;&quot;</span>)</span><br><span class="line"> 6: Guest memory: 1024 MB</span><br><span class="line">    (change with <span class="string">&quot;--vsys 0 --memory &lt;MB&gt;&quot;</span>)</span><br><span class="line"> 7: Sound card (appliance expects <span class="string">&quot;&quot;</span>, can change on import)</span><br><span class="line">    (<span class="built_in">disable</span> with <span class="string">&quot;--vsys 0 --unit 7 --ignore&quot;</span>)</span><br><span class="line"> 8: Network adapter: orig NAT, config 3, extra slot=0;<span class="built_in">type</span>=NAT</span><br><span class="line"> 9: Network adapter: orig HostOnly, config 3, extra slot=1;<span class="built_in">type</span>=HostOnly</span><br><span class="line">10: IDE controller, <span class="built_in">type</span> PIIX4</span><br><span class="line">    (<span class="built_in">disable</span> with <span class="string">&quot;--vsys 0 --unit 10 --ignore&quot;</span>)</span><br><span class="line">11: IDE controller, <span class="built_in">type</span> PIIX4</span><br><span class="line">    (<span class="built_in">disable</span> with <span class="string">&quot;--vsys 0 --unit 11 --ignore&quot;</span>)</span><br><span class="line">12: SCSI controller, <span class="built_in">type</span> LsiLogic</span><br><span class="line">    (change with <span class="string">&quot;--vsys 0 --unit 12 --scsitype &#123;BusLogic|LsiLogic&#125;&quot;</span>;</span><br><span class="line">    <span class="built_in">disable</span> with <span class="string">&quot;--vsys 0 --unit 12 --ignore&quot;</span>)</span><br><span class="line">13: Hard disk image: <span class="built_in">source</span> image=Ubuntu-disk001.vmdk, target path=Ubuntu-disk001.vmdk, controller=12;channel=0</span><br><span class="line">    (change target path with <span class="string">&quot;--vsys 0 --unit 13 --disk path&quot;</span>;</span><br><span class="line">    <span class="built_in">disable</span> with <span class="string">&quot;--vsys 0 --unit 13 --ignore&quot;</span>)</span><br><span class="line">14: Hard disk image: <span class="built_in">source</span> image=Ubuntu-disk002.vmdk, target path=Ubuntu-disk002.vmdk, controller=12;channel=1</span><br><span class="line">    (change target path with <span class="string">&quot;--vsys 0 --unit 14 --disk path&quot;</span>;</span><br><span class="line">    <span class="built_in">disable</span> with <span class="string">&quot;--vsys 0 --unit 14 --ignore&quot;</span>)</span><br><span class="line">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br><span class="line">Successfully imported the appliance.</span><br><span class="line"></span><br><span class="line">// 显示指定虚拟机的详细信息</span><br><span class="line">VBoxManage showvminfo <span class="string">&quot;Ubuntu18&quot;</span></span><br><span class="line">Name:                        Ubuntu18</span><br><span class="line">Groups:                      /</span><br><span class="line">Guest OS:                    Ubuntu (64-bit)</span><br><span class="line">UUID:                        03d737bc-2e47-4130-aa0b-b6a80767b474</span><br><span class="line">Config file:                 /Users/majinyun/VirtualBoxVMs/Ubuntu18/Ubuntu18.vbox</span><br><span class="line">Snapshot folder:             /Users/majinyun/VirtualBoxVMs/Ubuntu18/Snapshots</span><br><span class="line">Log folder:                  /Users/majinyun/VirtualBoxVMs/Ubuntu18/Logs</span><br><span class="line">Hardware UUID:               03d737bc-2e47-4130-aa0b-b6a80767b474</span><br><span class="line">Memory size                  1024MB</span><br><span class="line">Page Fusion:                 disabled</span><br><span class="line">VRAM size:                   16MB</span><br><span class="line">CPU <span class="built_in">exec</span> <span class="built_in">cap</span>:                100%</span><br><span class="line">HPET:                        disabled</span><br><span class="line">CPUProfile:                  host</span><br><span class="line">Chipset:                     piix3</span><br><span class="line">Firmware:                    BIOS</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">// 启动虚拟机</span><br><span class="line">VBoxManage startvm Ubuntu18</span><br><span class="line">Waiting <span class="keyword">for</span> VM <span class="string">&quot;Ubuntu18&quot;</span> to power on...</span><br><span class="line">VM <span class="string">&quot;Ubuntu18&quot;</span> has been successfully started.</span><br><span class="line"></span><br><span class="line">// 关闭虚拟机</span><br><span class="line">VBoxManage controlvm Ubuntu18 poweroff</span><br><span class="line">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br><span class="line"></span><br><span class="line">// 删除导入的虚拟机</span><br><span class="line">VBoxManage unregistervm --delete <span class="string">&quot;Ubuntu18&quot;</span></span><br><span class="line">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br></pre></td></tr></table></figure>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="解决系统更新后不能挂载共享目录"><a href="#解决系统更新后不能挂载共享目录" class="headerlink" title="解决系统更新后不能挂载共享目录"></a>解决系统更新后不能挂载共享目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 解决 yum update 更新后 vagrant reload 不能挂载共享目录</span><br><span class="line">sudo /etc/init.d/vboxadd setup</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><a href="http://www.iamle.com/archives/1908.html">共享目录不能挂载到 vagrant 目录</a></li>
<li><a href="https://github.com/LKI/Blogs/issues/2">vagrant up 遇到 mount no such device 的问题</a></li>
<li><a href="http://able.cd/b/2012/04/09/vagrant-broken-networking-when-packaging-ubuntu-boxes/">broken networking when packaging ubuntu boxes</a></li>
</ul>
</blockquote>
<h2 id="解决-VBoxManage-error-Failed-to-create-the-host-only-adapter"><a href="#解决-VBoxManage-error-Failed-to-create-the-host-only-adapter" class="headerlink" title="解决 VBoxManage: error: Failed to create the host-only adapter"></a>解决 VBoxManage: error: Failed to create the host-only adapter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 解决 CleanMyMacX 智能清理后不能启动 vagrant 虚拟机</span><br><span class="line">sudo /Library/Application\ Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh restart</span><br></pre></td></tr></table></figure>
<h2 id="解决-sbin-mount-vboxsf-mounting-failed-with-the-error-No-such-device"><a href="#解决-sbin-mount-vboxsf-mounting-failed-with-the-error-No-such-device" class="headerlink" title="解决 /sbin/mount.vboxsf: mounting failed with the error: No such device"></a>解决 /sbin/mount.vboxsf: mounting failed with the error: No such device</h2><blockquote>
<p><a href="https://github.com/CentOS/sig-cloud-instance-build/issues/27#issuecomment-166960158"><code>VirtualBox Guest Additions in Vagrant image</code></a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant plugin install vagrant-vbguest</span><br><span class="line">vagrant vbguest</span><br><span class="line">vagrant ssh</span><br><span class="line"><span class="built_in">cd</span> /opt/VBoxGuestAdditions-5.2.4/init/</span><br><span class="line">sudo ./vboxadd setup</span><br><span class="line">sudo yum -y install kernel kernel-devel</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vagrant reload</span><br></pre></td></tr></table></figure>
<h2 id="增加-Vagrant-磁盘空间"><a href="#增加-Vagrant-磁盘空间" class="headerlink" title="增加 Vagrant 磁盘空间"></a>增加 Vagrant 磁盘空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VBoxManage clonehd centos-vm-disk1.vmdk centos-vm-disk1.vdi --format VDI</span><br><span class="line">VBoxManage modifyhd centos-vm-disk1.vdi --resize 20480</span><br><span class="line">VBoxManage clonehd centos-vm-disk1.vdi centos-vm-disk.vmdk --format VMDK</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><a href="http://blog.lenss.nl/2012/09/resize-a-vagrant-vmdk-drive/">RESIZE A VAGRANT VMDK DRIVE</a></li>
<li><a href="https://github.com/mitchellh/vagrant/issues/2339#">Add some way to increase disk space from Vagrantfile</a></li>
<li><a href="http://www.digitesters.com/manage-a-virtualbox-headless-system-stop-and-remove-a-vm/">Manage a VirtualBox-headless system: stop and remove a VM</a></li>
</ul>
</blockquote>
<h2 id="更新-VirtualBox-和-Vagrant-后无法启动"><a href="#更新-VirtualBox-和-Vagrant-后无法启动" class="headerlink" title="更新 VirtualBox 和 Vagrant 后无法启动"></a>更新 VirtualBox 和 Vagrant 后无法启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br><span class="line">Vagrant failed to initialize at a very early stage:</span><br><span class="line"></span><br><span class="line">The plugins failed to initialize correctly. This may be due to manual</span><br><span class="line">modifications made within the Vagrant home directory. Vagrant can</span><br><span class="line">attempt to automatically correct this issue by running:</span><br><span class="line"></span><br><span class="line">vagrant plugin repair</span><br><span class="line"></span><br><span class="line">If Vagrant was recently updated, this error may be due to incompatible</span><br><span class="line">versions of dependencies. To fix this problem please remove and re-install</span><br><span class="line">all plugins. Vagrant can attempt to <span class="keyword">do</span> this automatically by running:</span><br><span class="line"></span><br><span class="line">vagrant plugin expunge --reinstall</span><br><span class="line"></span><br><span class="line">Or you may want to try updating the installed plugins to their latest</span><br><span class="line">versions:</span><br><span class="line"></span><br><span class="line">vagrant plugin update</span><br><span class="line"></span><br><span class="line">Error message given during initialization: Unable to resolve dependency: user requested <span class="string">&#x27;vagrant-parallels (&gt; 0)&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="更新-VirtualBox-后-Vagrant-提示需要更新版本"><a href="#更新-VirtualBox-后-Vagrant-提示需要更新版本" class="headerlink" title="更新 VirtualBox 后 Vagrant 提示需要更新版本"></a>更新 VirtualBox 后 Vagrant 提示需要更新版本</h2><p><a href="https://github.com/hashicorp/vagrant/issues/11249#issuecomment-565736894">I patched Vagrant on macOS with this script</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br><span class="line">The provider <span class="string">&#x27;virtualbox&#x27;</span> that was requested to back the machine</span><br><span class="line"><span class="string">&#x27;default&#x27;</span> is reporting that it isn<span class="string">&#x27;t usable on this system. The</span></span><br><span class="line"><span class="string">reason is shown below:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Vagrant has detected that you have a version of VirtualBox installed</span></span><br><span class="line"><span class="string">that is not supported by this version of Vagrant. Please install one of</span></span><br><span class="line"><span class="string">the supported versions listed below to use Vagrant:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.0, 4.1, 4.2, 4.3, 5.0, 5.1, 5.2, 6.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A Vagrant update may also be available that adds support for the version</span></span><br><span class="line"><span class="string">you specified. Please check www.vagrantup.com/downloads.html to download</span></span><br><span class="line"><span class="string">the latest version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">curl https://github.com/briancain/vagrant/commit/fb4e6985e142da56bad143d70600cd3695c91757.patch &gt; /tmp/vagrant_226_virtualbox_610.patch</span></span><br><span class="line"><span class="string">cd /opt/vagrant/embedded/gems/2.2.6/gems/vagrant-2.2.6</span></span><br><span class="line"><span class="string">sudo git apply --verbose --exclude=&#x27;</span>website/*<span class="string">&#x27; /tmp/vagrant_226_virtualbox_610.patch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Password:</span></span><br><span class="line"><span class="string">Skipped patch &#x27;</span>website/<span class="built_in">source</span>/docs/virtualbox/index.html.md<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">Checking patch plugins/providers/virtualbox/driver/meta.rb...</span></span><br><span class="line"><span class="string">Checking patch plugins/providers/virtualbox/driver/version_6_1.rb...</span></span><br><span class="line"><span class="string">Checking patch plugins/providers/virtualbox/plugin.rb...</span></span><br><span class="line"><span class="string">Applied patch plugins/providers/virtualbox/driver/meta.rb cleanly.</span></span><br><span class="line"><span class="string">Applied patch plugins/providers/virtualbox/driver/version_6_1.rb cleanly.</span></span><br><span class="line"><span class="string">Applied patch plugins/providers/virtualbox/plugin.rb cleanly.</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://www.vagrantup.com/">Vagrant 官网</a></li>
<li><a href="https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;vagrantcloud=1">About Vagrant Cloud and Atlas</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mac</tag>
        <tag>devtools</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac VSCode 快捷键</title>
    <url>/2018/12/02/mac-vscode-keyboard/</url>
    <content><![CDATA[<p><img src="/images/2019/201904191912.jpg" alt="201904191912.jpg"></p>
<p>💥VScode 内置的快捷键之多让人瞠目结舌，作为一名卖弄风骚的 VSCoder 把常用的一些快捷键手到擒来也并非难事。相声讲究学说逗唱，编辑器自然是增删改查，加之长年吃符号的亏上字母的当硬是逼着我学会了复制粘贴大法，在此法的怂恿之下我又忍不住折腾起来，一开始没觉着，一段时间以后竟神不知鬼不觉的提高了一下码字效率，窃喜。当然这也没什么，只不过刻意练习了几个快捷键而已。</p>
<span id="more"></span>
<h1 id="定制快捷键"><a href="#定制快捷键" class="headerlink" title="定制快捷键"></a>定制快捷键</h1><h2 id="修改某个动作快捷键"><a href="#修改某个动作快捷键" class="headerlink" title="修改某个动作快捷键"></a>修改某个动作快捷键</h2><p>按 <code>Cmd+K Cmd+S</code> 跳转到快捷键配置页面，找到要改的命令快捷键，选中后按右键或者 <code>Cmd+K Cmd+K</code> 在弹出框中输入自定义的快捷键回车即可。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/vscode/vscode-modify-keyboard.jpg" alt="vscode-modify-keyboard.jpg"></p>
<h2 id="定制某个动作的快捷键"><a href="#定制某个动作的快捷键" class="headerlink" title="定制某个动作的快捷键"></a>定制某个动作的快捷键</h2><p>打开 <code>keyboard.json</code> 文件，在其中输入如下配置保存即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 比如将 Cmd+D 快捷键修改为添加下一个匹配项</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;cmd+d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;command&quot;</span>: <span class="string">&quot;editor.action.addSelectionToNextFindMatch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;when&quot;</span>: <span class="string">&quot;editorFocus&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="我的快捷键"><a href="#我的快捷键" class="headerlink" title="我的快捷键"></a>我的快捷键</h1><blockquote>
<p>部分快捷键本人根据自己的使用习惯进行了定制。</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>Cmd+,</code></strong></td>
<td>设置</td>
<td>Settings</td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+X</code></strong></td>
<td>扩展</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+K Cmd+S</code></strong></td>
<td>键盘快捷方式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+K Cmd+M</code></strong></td>
<td>按键映射</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+T</code></td>
<td>颜色主题</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+H</code></td>
<td>隐藏 VSCode</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Cmd+H</code></td>
<td>隐藏 VSCode</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+Q</code></td>
<td>退出 VSCode</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>Cmd+N</code></strong></td>
<td>新建文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+Shift+N</code></strong></td>
<td>新建窗口</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+O</code></strong></td>
<td>打开文件或文件夹</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+T</code></strong></td>
<td>重新打开已关闭的编辑文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+S</code></td>
<td>保存</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+S</code></td>
<td>另存为</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Cmd+S</code></td>
<td>全部保存</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+W</code></td>
<td>关闭当前窗口，没有窗口就关闭编辑器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K F</code></td>
<td>关闭当前工程，关闭文件夹</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>Cmd+Z</code></strong></td>
<td>撤销</td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+Z</code></strong></td>
<td>恢复</td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+X</code></strong></td>
<td>剪切</td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+C</code></strong></td>
<td>复制</td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+V</code></strong></td>
<td>粘贴</td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+F</code></strong></td>
<td>查找/替换</td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+F</code></strong></td>
<td>在文件中查找</td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+H</code></strong></td>
<td>在文件中替换</td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+/</code></strong></td>
<td>切换行注释</td>
<td></td>
</tr>
<tr>
<td><strong><code>Alt+Shift+A</code></strong></td>
<td>切换块注释</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Cmd+Space</code></td>
<td>表情与符号</td>
</tr>
</tbody>
</table>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Cmd+A</code></td>
<td>全选</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Shift+Cmd+➡️</code></td>
<td>展开选定内容</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Shift+Cmd+⬅️</code></td>
<td>缩小选定内容</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Shift+⬆️</code></td>
<td>向上复制一行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Shift+⬇️</code></td>
<td>向下复制一行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+⬆️</code></td>
<td>向上移动一行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+⬇️</code></td>
<td>向下移动一行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Cmd+⬆️</code></td>
<td>在上面添加光标</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Cmd+⬇️</code></td>
<td>在下面添加光标</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+D</code></td>
<td>添加下一个匹配项</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+L</code></td>
<td>选择所有匹配项</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>Shift+Cmd+P</code></strong></td>
<td>命令面板</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Cmd+F</code></td>
<td>切换全屏</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Z</code></td>
<td>切换 <code>Zen</code> 模式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+B</code></strong></td>
<td>切换侧边栏</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+J</code></td>
<td>切换面板</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+=</code></td>
<td>放大</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+-</code></td>
<td>缩小</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+0</code></td>
<td>重置缩放</td>
<td></td>
<td>原 <strong><code>Cmd+NumPad0</code></strong></td>
</tr>
<tr>
<td><code>Alt+Cmd+0</code></td>
<td>翻转布局</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+E</code></strong></td>
<td>资源管理器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+F</code></strong></td>
<td>文件中搜索</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Shift+G</code></td>
<td>源代码管理</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+D</code></td>
<td>调试</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+X</code></td>
<td>扩展</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+U</code></td>
<td>输出</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Shift+Cmd+M</code></strong></td>
<td>问题</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+Y</code></td>
<td>调试控制台</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Ctrl+`</code></strong></td>
<td>打开集成终端</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+\</code></strong></td>
<td>竖向拆分编辑器（最多 <code>3</code> 个）</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Alt+Z</code></strong></td>
<td>切换自动换行</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="转到"><a href="#转到" class="headerlink" title="转到"></a>转到</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>Cmd+-</code></strong></td>
<td>后退</td>
<td></td>
<td>原 <strong><code>Ctrl+-</code></strong></td>
</tr>
<tr>
<td><strong><code>Cmd+=</code></strong></td>
<td>前进</td>
<td></td>
<td>原 <strong><code>Ctrl+Shift+-</code></strong></td>
</tr>
<tr>
<td><code>Alt+Cmd+➡️</code></td>
<td>下一个编辑器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Cmd+⬅️</code></td>
<td>上一个编辑器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+➡️</code></td>
<td>组中下一个使用过的编辑器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Shift+➡️</code></td>
<td>组中上一个使用过的编辑器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+1</code></td>
<td>切换到第一组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+2</code></td>
<td>切换到第二组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+3</code></td>
<td>切换到第三组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+4</code></td>
<td>切换到第四组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+5</code></td>
<td>切换到第五组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+⬅️</code></td>
<td>左侧组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+➡️</code></td>
<td>右侧组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+⬆️</code></td>
<td>上方组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+⬇️</code></td>
<td>下方组</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+P</code></strong></td>
<td>转到文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Cmd+R</code></strong></td>
<td>转到文件中的符号</td>
<td></td>
<td>原 <strong><code>Shift+Cmd+O</code></strong></td>
</tr>
<tr>
<td><code>Shift+Cmd+R</code></td>
<td>转到工作区中的符号</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+O</code></td>
<td>转到文件中的符号</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+T</code></td>
<td>转到工作区中的符号</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>F12</code></strong></td>
<td>转到定义</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+F12</code></td>
<td>转到实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><code>Ctrl+G</code></strong></td>
<td>转到行</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>F5</code></td>
<td>启动调试，重复按继续调试</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+F5</code></td>
<td>非调试启动</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+F5</code></td>
<td>停止调试</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+F5</code></td>
<td>重启调试</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>F10</code></td>
<td>单步跳过</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>F11</code></td>
<td>单步执行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+F11</code></td>
<td>单步跳出</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>F5</code></td>
<td>继续</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>F9</code></td>
<td>切换断点</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+F9</code></td>
<td>内联断点</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>Ctrl+~</code></strong></td>
<td>新建终端</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+\</code></td>
<td>拆分终端</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+B</code></td>
<td>运行生成任务</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Cmd+M</code></td>
<td>最小化窗口</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+W</code></td>
<td>切换窗口</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Shift+Cmd+/</code></td>
<td>显示帮助</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><blockquote>
<p>诚然，VSCode 并没有把所有的快捷键列到菜单栏中，好多快捷键自有其使用上下文，且列一下其它的快捷键。</p>
</blockquote>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>中文说明</th>
<th>英文说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl+Tab</code></td>
<td>在历史打开文件之间切换</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+~</code></td>
<td>在打开的多个窗口之间切换</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+[</code></td>
<td>代码左缩进</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+]</code></td>
<td>代码右缩进</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Alt+F</code></td>
<td>格式化代码，或者 <code>Shift+Cmd+P</code> 后输入 <code>Format Document</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+Enter</code></td>
<td>当前行之后插入一个空行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+Enter</code></td>
<td>当前行之前插入一个空行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+⬆️</code></td>
<td>移动光标到当前文件首行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+️⬇️</code></td>
<td>移动光标到当前文件尾行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+⬅️</code></td>
<td>移动光标到当前行首</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+➡️</code></td>
<td>移动光标到当前行尾</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+⬅️</code></td>
<td>向左移动光标一个单词（连字）</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+➡️</code></td>
<td>向右移动光标一个单词（连字）</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+⬆️</code></td>
<td>选中从首行到光标处的文档</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+⬇️</code></td>
<td>选中从光标到尾行处的文档</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+⬅️</code></td>
<td>选中光标处到行首</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+➡️</code></td>
<td>选中光标处到行尾</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+I</code></td>
<td>选中当前行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+Delete</code></td>
<td>删除光标处到行首</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+F2</code></td>
<td>光标先移动到单词上，然后按 <code>Cmd+F2</code> 后可以进行批量重命名</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K V</code></td>
<td><code>Markdown</code> 文档预览</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+K</code></td>
<td>删除当前行</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+\</code></td>
<td>在匹配的括号之前跳转</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+[</code></td>
<td>跳转到上一个编辑窗口</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+]</code></td>
<td>跳转到下一个编辑窗口</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+0</code></td>
<td>折叠所有代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+1</code></td>
<td>折叠第一层代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+2</code></td>
<td>折叠第二层代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+3</code></td>
<td>折叠第三层代码</td>
<td></td>
<td>层数受制于代码层级</td>
</tr>
<tr>
<td><code>Cmd+K Cmd+[</code></td>
<td>折叠所有代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+]</code></td>
<td>展开所有代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+C</code></td>
<td>添加当前行代码注释</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+K Cmd+U</code></td>
<td>取消当前行代码注释</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+/</code></td>
<td>当前行注释切换</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Shift+I</code></td>
<td>在所选行的行尾插入光标</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+L</code></td>
<td>选中所有与当前选中内容相同的部分</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt+Shift+光标拖动</code></td>
<td>选中代码块</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Cmd+G</code></td>
<td>查找下一个</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Shift+Cmd+G</code></td>
<td>查找下一个</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="快捷键定制"><a href="#快捷键定制" class="headerlink" title="快捷键定制"></a>快捷键定制</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将按键绑定配置放入此文件中即可覆盖默认值</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;alt+cmd+up&quot;</span>, <span class="comment">// 向上插入多个光标</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.insertCursorAbove&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;alt+cmd+down&quot;</span>, <span class="comment">// 向下插入多个光标</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.insertCursorBelow&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;cmd+d&quot;</span>, <span class="comment">// 添加下一个匹配项</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.addSelectionToNextFindMatch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;shift+cmd+0&quot;</span>, <span class="comment">// 重置缩放</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;workbench.action.zoomReset&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;cmd+-&quot;</span>, <span class="comment">// 后退</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;workbench.action.navigateBack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;cmd+=&quot;</span>, <span class="comment">// 前进</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;workbench.action.navigateForward&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;cmd+r&quot;</span>, <span class="comment">// 符号跳转</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;workbench.action.gotoSymbol&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;cmd+space&quot;</span>, <span class="comment">// 触发建义提示</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.triggerSuggest&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorHasCompletionItemProvider &amp;&amp; textInputFocus &amp;&amp; !editorReadonly&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;shift+cmd+space&quot;</span>, <span class="comment">// 触发参数提示</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.triggerParameterHints&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorHasSignatureHelpProvider &amp;&amp; editorTextFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;alt+enter&quot;</span>, <span class="comment">// 打开右键菜单</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.showContextMenu&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;textInputFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;shift+;&quot;</span>, <span class="comment">// ZenMode 显示命令提示框</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;vim.showQuickpickCmdLine&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;inZenMode &amp;&amp; vim.mode != &#x27;Insert&#x27;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;ctrl+j&quot;</span>, <span class="comment">// 合并到一行</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.joinLines&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus &amp;&amp; !editorReadonly&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;ctrl+t&quot;</span>, <span class="comment">// 调换字符位置</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.transposeLetters&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;textInputFocus &amp;&amp; !editorReadonly&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;shift+cmd+space&quot;</span>, <span class="comment">// 触发参数提示信息</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.action.triggerParameterHints&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorHasSignatureHelpProvider &amp;&amp; editorTextFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;ctrl+alt+i&quot;</span>, <span class="comment">// 导入类的命名空间</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;namespaceResolver.import&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;ctrl+alt+e&quot;</span>, <span class="comment">// 展开类的命名空间</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;namespaceResolver.expand&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;ctrl+alt+s&quot;</span>, <span class="comment">// 命名空间排序</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;namespaceResolver.sort&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>devtools</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac VSCode 代码片段</title>
    <url>/2018/12/05/mac-vscode-snippets/</url>
    <content><![CDATA[<p><img src="/images/2019/201905191910.jpg" alt="201905191910.jpg"></p>
<p>🚀早年有位同僚 Sublime 使的巨溜无比，各种文件切换、命令操作、文本编辑等在其指间飞舞，往来冲突，如入无人之境。顿时暗自称奇，虽诺诺问其故，道曰，此不过配以插件及代码片段，手熟罢了。卧槽，原来如此，虽暗下决心，他日策吾 Mac 扬指期间，必当远甚今日矣。自此，染指各种时髦编辑器及 IDE，乐不思蜀，竟忘了干正事了，不多逼逼了，先撩一撩代码片段。</p>
<h1 id="自定义本地代码片段"><a href="#自定义本地代码片段" class="headerlink" title="自定义本地代码片段"></a>自定义本地代码片段</h1><p>点击 VScode 菜单栏中的 <code>Code</code> 在下拉的 <strong>首选项</strong> 菜单中点击 <strong>用户代码片段</strong> 并在输入框中输入适合的语言开始创建代码片段。</p>
<h2 id="代码片段字段"><a href="#代码片段字段" class="headerlink" title="代码片段字段"></a>代码片段字段</h2><ul>
<li>代码片段的名称：尽量起的有意义即可</li>
<li><code>prefix</code>：触发代码片段的前缀</li>
<li><code>body</code>：代码片段的主体。<code>$0</code> 表示光标的最终位置；<code>$1~$N</code> 表示每次按 <code>Tab</code> 键后光标定位的位置；<code>$&#123;N:placeholder&#125;</code> 表示占位，多个占位符请使用相同的标识 IDs</li>
<li><code>description</code>：代码片段的描述</li>
</ul>
<h2 id="代码片段实例"><a href="#代码片段实例" class="headerlink" title="代码片段实例"></a>代码片段实例</h2><blockquote>
<p>有时候定义了多个光标插入点，按快了 <code>Tab</code> 键可能跳过了正当输入的位置，此时亦可按 <code>Shift+Tab</code> 回跳到上一个跳过的位置处，多按可往回退。</p>
</blockquote>
<p>以下是一个以 PHP 为例的代码片段。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 代码片段的名称</span></span><br><span class="line">    <span class="attr">&quot;PHPClass&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 按键触发的前缀</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;class&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发后展开的代码主体</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;$&#123;1:namespace $&#123;2:App&#125;&#125;;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;class $&#123;3:ClassName&#125; $&#123;4:extends $&#123;5:AnotherClass&#125;&#125; $&#123;6:implements $&#123;7:Interface&#125;&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t$0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span></span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码片段的描述</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;PHP class&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="写扩展分享代码片段"><a href="#写扩展分享代码片段" class="headerlink" title="写扩展分享代码片段"></a>写扩展分享代码片段</h1><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>到 <a href="https://marketplace.visualstudio.com/">Extensions for the Visual Studio family of products</a> 上注册属于自己的账号。</p>
<h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><h3 id="安装开发辅助扩展"><a href="#安装开发辅助扩展" class="headerlink" title="安装开发辅助扩展"></a>安装开发辅助扩展</h3><ul>
<li><a href="https://github.com/Microsoft/vscode-generator-code">Yo Code - Extension and Customization Generator</a></li>
<li><a href="https://code.visualstudio.com/docs/extensions/yocode">VSCode Yo Code Documentation</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 yo</span><br><span class="line">$ npm install -g yo</span><br><span class="line">npm WARN deprecated cross-spawn-async@2.2.5: cross-spawn no longer requires a build toolchain, use it instead</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/yo -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/yo/lib/cli.js</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/yo-complete -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/yo/lib/completion/index.js</span><br><span class="line"></span><br><span class="line">&gt; spawn-sync@1.0.15 postinstall /usr/<span class="built_in">local</span>/lib/node_modules/yo/node_modules/spawn-sync</span><br><span class="line">&gt; node postinstall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; yo@2.0.5 postinstall /usr/<span class="built_in">local</span>/lib/node_modules/yo</span><br><span class="line">&gt; yodoctor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yeoman Doctor</span><br><span class="line">Running sanity checks on your system</span><br><span class="line"></span><br><span class="line">✔ Global configuration file is valid</span><br><span class="line">✔ NODE_PATH matches the npm root</span><br><span class="line">✔ Node.js version</span><br><span class="line">✔ No .bowerrc file <span class="keyword">in</span> home directory</span><br><span class="line">✔ No .yo-rc.json file <span class="keyword">in</span> home directory</span><br><span class="line">✔ npm version</span><br><span class="line">✔ yo version</span><br><span class="line"></span><br><span class="line">Everything looks all right!</span><br><span class="line">+ yo@2.0.5</span><br><span class="line">added 537 packages from 265 contributors <span class="keyword">in</span> 36.448s</span><br><span class="line"></span><br><span class="line">// 安装 generator-code</span><br><span class="line">$ npm install -g generator-code</span><br><span class="line">+ generator-code@1.1.43</span><br><span class="line">added 381 packages from 284 contributors <span class="keyword">in</span> 61.462s</span><br><span class="line"></span><br><span class="line">// 安装 vsce</span><br><span class="line">$ npm install -g vsce</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/vsce -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/vsce/out/vsce</span><br><span class="line">+ vsce@1.53.2</span><br><span class="line">added 60 packages from 67 contributors <span class="keyword">in</span> 7.519s</span><br></pre></td></tr></table></figure>
<h3 id="运行开发扩展命令"><a href="#运行开发扩展命令" class="headerlink" title="运行开发扩展命令"></a>运行开发扩展命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yo code</span><br><span class="line"></span><br><span class="line">     _-----_     ╭──────────────────────────╮</span><br><span class="line">    |       |    │   Welcome to the Visual  │</span><br><span class="line">    |--(o)--|    │   Studio Code Extension  │</span><br><span class="line">   `---------´   │        generator!        │</span><br><span class="line">    ( _´U`_ )    ╰──────────────────────────╯</span><br><span class="line">    /___A___\   /</span><br><span class="line">     |  ~  |</span><br><span class="line">   __<span class="string">&#x27;.___.&#x27;</span>__</span><br><span class="line"> ´   `  |° ´ Y `</span><br><span class="line"></span><br><span class="line">? What <span class="built_in">type</span> of extension <span class="keyword">do</span> you want to create? (Use arrow keys)</span><br><span class="line">❯ New Extension (TypeScript)</span><br><span class="line">  New Extension (JavaScript)</span><br><span class="line">  New Color Theme</span><br><span class="line">  New Language Support</span><br><span class="line">  New Code Snippets</span><br><span class="line">  New Keymap</span><br><span class="line">  New Extension Pack</span><br><span class="line">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure>
<h2 id="创建代码片段项目"><a href="#创建代码片段项目" class="headerlink" title="创建代码片段项目"></a>创建代码片段项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yo code your-project-name</span><br><span class="line"></span><br><span class="line">     _-----_     ╭──────────────────────────╮</span><br><span class="line">    |       |    │   Welcome to the Visual  │</span><br><span class="line">    |--(o)--|    │   Studio Code Extension  │</span><br><span class="line">   `---------´   │        generator!        │</span><br><span class="line">    ( _´U`_ )    ╰──────────────────────────╯</span><br><span class="line">    /___A___\   /</span><br><span class="line">     |  ~  |</span><br><span class="line">   __<span class="string">&#x27;.___.&#x27;</span>__</span><br><span class="line"> ´   `  |° ´ Y `</span><br><span class="line"></span><br><span class="line">? What <span class="built_in">type</span> of extension <span class="keyword">do</span> you want to create? New Code Snippets</span><br><span class="line">Folder location that contains Text Mate (.tmSnippet) and Sublime snippets (.sublime-snippet) or press ENTER to start with a new snippet file.</span><br><span class="line">? Folder name <span class="keyword">for</span> import or none <span class="keyword">for</span> new:</span><br><span class="line">? What<span class="string">&#x27;s the name of your extension? your-project-name</span></span><br><span class="line"><span class="string">? What&#x27;</span>s the identifier of your extension? your-project-name</span><br><span class="line">? What<span class="string">&#x27;s the description of your extension? VSCode PHP Snippets</span></span><br><span class="line"><span class="string">Enter the language for which the snippets should appear. The id is an identifier and is single, lower-case name such as &#x27;</span>php<span class="string">&#x27;, &#x27;</span>javascript<span class="string">&#x27;</span></span><br><span class="line"><span class="string">? Language id: php</span></span><br><span class="line"><span class="string">   create your-project-name/.vscode/launch.json</span></span><br><span class="line"><span class="string">   create your-project-name/package.json</span></span><br><span class="line"><span class="string">   create your-project-name/vsc-extension-quickstart.md</span></span><br><span class="line"><span class="string">   create your-project-name/README.md</span></span><br><span class="line"><span class="string">   create your-project-name/CHANGELOG.md</span></span><br><span class="line"><span class="string">   create your-project-name/snippets/snippets.json</span></span><br><span class="line"><span class="string">   create your-project-name/.vscodeignore</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your extension your-project-name has been created!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To start editing with Visual Studio Code, use the following commands:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     cd your-project-name</span></span><br><span class="line"><span class="string">     code .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Open vsc-extension-quickstart.md inside the new extension for further instructions</span></span><br><span class="line"><span class="string">on how to modify, test and publish your extension.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more information, also visit http://code.visualstudio.com and follow us @code.</span></span><br></pre></td></tr></table></figure>
<h2 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h2><blockquote>
<p><code>package.json</code> 文件的编写完善请参见相关文档。</p>
</blockquote>
<p><a href="https://code.visualstudio.com/docs/extensions/publish-extension">Publishing Extensions</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建发布者</span><br><span class="line">$ vsce create-publisher your-publisher-name</span><br><span class="line"></span><br><span class="line">// 以发布者身份登录，需要在 Azure DevOps 提前创建令牌</span><br><span class="line">$ vsce login your-publisher-name</span><br><span class="line">Publisher <span class="string">&#x27;your-publisher-name&#x27;</span> is already known</span><br><span class="line">Do you want to overwrite its PAT? [y/N] y</span><br><span class="line">Personal Access Token <span class="keyword">for</span> publisher <span class="string">&#x27;your-publisher-name&#x27;</span>: ****</span><br><span class="line"></span><br><span class="line">// 发布，视情况发布</span><br><span class="line">$ vsce publish major|minor|patch</span><br><span class="line"></span><br><span class="line">// vsce 命令</span><br><span class="line">$ vsce --<span class="built_in">help</span></span><br><span class="line">Usage: vsce [options] [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                        output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>                           output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  ls [options]                         Lists all the files that will be published</span><br><span class="line">  package [options]                    Packages an extension</span><br><span class="line">  publish [options] [&lt;version&gt;]        Publishes an extension</span><br><span class="line">  unpublish [options] [&lt;extensionid&gt;]  Unpublishes an extension. Example extension id: microsoft.csharp.</span><br><span class="line">  list &lt;publisher&gt;                     Lists all extensions published by the given publisher</span><br><span class="line">  ls-publishers                        List all known publishers</span><br><span class="line">  create-publisher &lt;publisher&gt;         Creates a new publisher</span><br><span class="line">  delete-publisher &lt;publisher&gt;         Deletes a publisher</span><br><span class="line">  login &lt;publisher&gt;                    Add a publisher to the known publishers list</span><br><span class="line">  <span class="built_in">logout</span> &lt;publisher&gt;                   Remove a publisher from the known publishers list</span><br><span class="line">  show [options] &lt;extensionid&gt;         Show extension metadata</span><br><span class="line">  search [options] &lt;text&gt;              search extension gallery</span><br><span class="line">  *</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>devtools</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac VSCode 起步</title>
    <url>/2018/12/01/mac-vscode-started/</url>
    <content><![CDATA[<p><img src="/images/2019/201905093011.png" alt="201905093011.png"></p>
<p>💫编辑器的集大成者，免费，高颜值。轻量级的跨平台 <code>Web</code> 集成开发环境，比 <code>Sublime</code> 开源，比 <code>Atom</code> 更快，比 <code>JetBrains</code> 全家桶更轻，就冲微软的这个情怀，我特么果断入坑。当然熟练使用一款代码编辑器并不是什么了不起的技能，但请别忘了『工欲善其事，必先利其器』，其不闻人之能在于善假于物也。选择适合自己的代码编辑器一直是有追求的码农的生活方式，不知何故，每每看到那些惊艳的主题、敲击一个字符恨不得把整个世界给你的编辑器亦或 IDE，我就格外的喜悦，果然懂码农者唯编辑器尔（😄 编程语言当然也不例外）。历尽一番折腾后，VSCode 那风骚的操作令人欲罢不能，为了能系统地学习下这些操作，记录下这些操作指令，我觉得需要记录点什么。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Code editing. Redefined. Free. Open source. Runs everywhere.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<ul>
<li><a href="https://code.visualstudio.com/">VSCode Website</a></li>
<li><a href="https://github.com/Microsoft/vscode">VSCode GitHub</a></li>
<li><a href="https://code.visualstudio.com/docs/getstarted/introvideos">VSCode Videos</a></li>
<li><a href="https://code.visualstudio.com/docs">VSCode Documentation</a></li>
</ul>
</blockquote>
<p>没什么好说的，直接上官网下载对应系统安装包，开箱即用。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><a href="https://marketplace.visualstudio.com/">Extensions for the Visual Studio family of products</a></p>
<p>果然还是得插件者得天下，庞大的插件足以让 VSCode 傲视群雄。</p>
<h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><h2 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h2><p>按 <code>Shift+Cmd+P</code> 进入命令面板，调用各种命令。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/vscode/vscode-command-panel.jpg" alt="vscode-command-panel.jpg"></p>
<p>快捷入口 - <code>Cmd+P</code></p>
<blockquote>
<p>以下快捷键为默认快捷键</p>
</blockquote>
<ul>
<li>直接输入文件名，快速打开文件</li>
<li>显示最近打开过的文件</li>
<li>重复按下后在最近打开过的文件之间切换</li>
<li>键入 <code>?</code> 查看相关帮助，列出当前可执行的动作</li>
<li>键入 <code>!</code> 显示 <code>Errors</code> 或 <code>Warnings</code>，也可以 <code>Ctrl+Shift+M</code></li>
<li>键入 <code>:</code> 跳转到行数，也可以 <code>Ctrl+G</code> 直接进入</li>
<li>键入 <code>@</code> 跳转到 <code>symbol</code>（搜索变量或者函数），也可以 <code>Ctrl+Shift+O</code> 直接进入</li>
<li>键入 <code>@:</code> 根据分类跳转 <code>symbol</code>（查找属性或函数），也可以 <code>Ctrl+Shift+O</code> 后输入 <code>:</code> 进入</li>
<li>键入 <code>#</code> 根据名字查找 <code>symbol</code>，也可以 <code>Ctrl+T</code></li>
</ul>
<h2 id="界面概览"><a href="#界面概览" class="headerlink" title="界面概览"></a>界面概览</h2><p>点击『学习』下面的『界面概览』。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/vscode/vscode-interface-overview.jpg" alt="vscode-interface-overview.jpg"></p>
<h2 id="交互式演练场"><a href="#交互式演练场" class="headerlink" title="交互式演练场"></a>交互式演练场</h2><p>点击『学习』下面的『交互式演练场』。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/vscode/vscode-playground.jpg" alt="vscode-playground.jpg"></p>
<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="命令行命令安装"><a href="#命令行命令安装" class="headerlink" title="命令行命令安装"></a>命令行命令安装</h2><p>安装 VSCode Shell 命令，按 <code>Shift+Cmd+P</code> 搜索 <code>shell command install</code> 回车即可。</p>
<h2 id="命令行帮助"><a href="#命令行帮助" class="headerlink" title="命令行帮助"></a>命令行帮助</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code --<span class="built_in">help</span></span><br><span class="line">Visual Studio Code 1.30.0</span><br><span class="line"></span><br><span class="line">Usage: code [options] [paths...]</span><br><span class="line"></span><br><span class="line">To <span class="built_in">read</span> from stdin, append <span class="string">&#x27;-&#x27;</span> (e.g. <span class="string">&#x27;ps aux | grep code | code -&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -d, --diff &lt;file&gt; &lt;file&gt;           Compare two files with each other.</span><br><span class="line">  -a, --add &lt;dir&gt;                    Add folder(s) to the last active window.</span><br><span class="line">  -g, --goto &lt;file:line[:character]&gt; Open a file at the path on the specified line and character position.</span><br><span class="line">  -n, --new-window                   Force to open a new window.</span><br><span class="line">  -r, --reuse-window                 Force to open a file or folder <span class="keyword">in</span> an already opened window.</span><br><span class="line">  -w, --<span class="built_in">wait</span>                         Wait <span class="keyword">for</span> the files to be closed before returning.</span><br><span class="line">  --locale &lt;locale&gt;                  The locale to use (e.g. en-US or zh-TW).</span><br><span class="line">  --user-data-dir &lt;dir&gt;              Specifies the directory that user data is kept <span class="keyword">in</span>. Can be used to open multiple distinct</span><br><span class="line">                                     instances of Code.</span><br><span class="line">  -v, --version                      Print version.</span><br><span class="line">  -h, --<span class="built_in">help</span>                         Print usage.</span><br><span class="line"></span><br><span class="line">Extensions Management:</span><br><span class="line">  --extensions-dir &lt;dir&gt;                                         Set the root path <span class="keyword">for</span> extensions.</span><br><span class="line">  --list-extensions                                              List the installed extensions.</span><br><span class="line">  --show-versions                                                Show versions of installed extensions, when using</span><br><span class="line">                                                                 --list-extension.</span><br><span class="line">  --uninstall-extension (&lt;extension-id&gt; | &lt;extension-vsix-path&gt;) Uninstalls an extension.</span><br><span class="line">  --install-extension (&lt;extension-id&gt; | &lt;extension-vsix-path&gt;)   Installs or updates the extension. Use `--force` argument to</span><br><span class="line">                                                                 avoid prompts.</span><br><span class="line">  --enable-proposed-api (&lt;extension-id&gt;)                         Enables proposed API features <span class="keyword">for</span> extensions. Can receive</span><br><span class="line">                                                                 one or more extension IDs to <span class="built_in">enable</span> individually.</span><br><span class="line"></span><br><span class="line">Troubleshooting:</span><br><span class="line">  --verbose                          Print verbose output (implies --<span class="built_in">wait</span>).</span><br><span class="line">  --<span class="built_in">log</span> &lt;level&gt;                      Log level to use. Default is <span class="string">&#x27;info&#x27;</span>. Allowed values are <span class="string">&#x27;critical&#x27;</span>, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">                                     <span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;off&#x27;</span>.</span><br><span class="line">  -s, --status                       Print process usage and diagnostics information.</span><br><span class="line">  -p, --performance                  Start with the <span class="string">&#x27;Developer: Startup Performance&#x27;</span> <span class="built_in">command</span> enabled.</span><br><span class="line">  --prof-startup                     Run CPU profiler during startup</span><br><span class="line">  --disable-extensions               Disable all installed extensions.</span><br><span class="line">  --disable-extension &lt;extension-id&gt; Disable an extension.</span><br><span class="line">  --inspect-extensions               Allow debugging and profiling of extensions. Check the developer tools <span class="keyword">for</span> the</span><br><span class="line">                                     connection URI.</span><br><span class="line">  --inspect-brk-extensions           Allow debugging and profiling of extensions with the extension host being paused after</span><br><span class="line">                                     start. Check the developer tools <span class="keyword">for</span> the connection URI.</span><br><span class="line">  --disable-gpu                      Disable GPU hardware acceleration.</span><br><span class="line">  --upload-logs                      Uploads logs from current session to a secure endpoint.</span><br><span class="line">  --max-memory                       Max memory size <span class="keyword">for</span> a window (<span class="keyword">in</span> Mbytes).</span><br></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在 VSCode 中打开当前目录</span><br><span class="line">code .</span><br><span class="line"></span><br><span class="line">// 在最近使用过的 VSCode 窗口打开当前目录</span><br><span class="line">code -r .</span><br><span class="line"></span><br><span class="line">// 创建新的窗口</span><br><span class="line">code -n</span><br><span class="line">code --new-window</span><br><span class="line"></span><br><span class="line">// 更改语言</span><br><span class="line">code --locale=es</span><br><span class="line"></span><br><span class="line">// 跳转到指定文件的指定行列，相当于跳转到指定文件的指定行的从左到右第几个字符上</span><br><span class="line">code -g /path/to/&lt;file&gt;:10:10</span><br><span class="line">code --goto /path/to/&lt;file&gt;:10:20</span><br><span class="line"></span><br><span class="line">// 打开 diff 编辑器比较文件</span><br><span class="line">code -d &lt;file1&gt; &lt;file2&gt;</span><br><span class="line">code --diff &lt;file1&gt; &lt;file2&gt;</span><br><span class="line"></span><br><span class="line">// 查看帮助选项</span><br><span class="line">code --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">// 禁用所有扩展</span><br><span class="line">code --disable-extensions</span><br></pre></td></tr></table></figure>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><blockquote>
<p>以下字体安装其一就好，安装完成重启 VSCode 即可。</p>
</blockquote>
<h3 id="Cascadia-Code-字体"><a href="#Cascadia-Code-字体" class="headerlink" title="Cascadia Code 字体"></a>Cascadia Code 字体</h3><ul>
<li><a href="https://github.com/microsoft/cascadia-code">Github</a></li>
<li><a href="https://github.com/microsoft/cascadia-code/releases">到 Releases 标签页下载 Cascadia Code 压缩包解压并安装</a></li>
</ul>
<p>按 <code>Cmd+,</code> 搜索并配置 <code>editor.fontFamily</code> 和 <code>editor.fontLigatures</code> 即可：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;Cascadia Code&quot;</span>,</span><br><span class="line"><span class="string">&quot;editor.fontLigatures&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>
<h3 id="Fire-Code-字体"><a href="#Fire-Code-字体" class="headerlink" title="Fire Code 字体"></a>Fire Code 字体</h3><ul>
<li><a href="https://github.com/tonsky/FiraCode">GitHub</a></li>
<li><a href="https://github.com/tonsky/FiraCode/wiki">FiraCode Wiki</a></li>
<li><a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions">VS Code Instructions</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew cask install font-fira-code</span><br></pre></td></tr></table></figure>
<p>按 <code>Cmd+,</code> 搜索并配置 <code>editor.fontFamily</code> 和 <code>editor.fontLigatures</code> 即可：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;Fira Code&quot;</span>,</span><br><span class="line"><span class="string">&quot;editor.fontLigatures&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li><code>Could not create temporary directory: 权限被拒绝</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown <span class="variable">$USER</span> ~/Library/Caches/com.microsoft.VSCode.ShipIt/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>devtools</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 起步</title>
    <url>/2019/11/24/mongodb-get-started/</url>
    <content><![CDATA[<p><img src="/images/2019/201911241722.jpg" alt="201911241722.jpg"></p>
<p><a href="https://www.mongodb.com/cn">MongoDB</a> 是一种面向文档的数据库管理系统，用 C++ 等语言撰写而成，以此来解决应用程序开发社区中的大量现实问题。2007 年 10 月，MongoDB 由 <a href="https://coolshell.cn/tag/10gen">10gen</a> 团队所发展。2009 年 2 月首度推出。</p>
<span id="more"></span>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><blockquote>
<p>此处以 <a href="https://docs.mongodb.com/manual/administration/install-community/">MongoDB 社区版</a> 为例。</p>
</blockquote>
<ul>
<li><a href="https://github.com/mongodb/homebrew-brew">The Official MongoDB Software Homebrew Tap</a></li>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/">Install MongoDB Community Edition on macOS</a></li>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-os-x/">Install MongoDB Enterprise on macOS</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 打开终端添加自定义 tap</span><br><span class="line">brew tap mongodb/brew</span><br><span class="line"></span><br><span class="line">// 安装最近最新版本</span><br><span class="line">brew install mongodb-community</span><br></pre></td></tr></table></figure>
<p>文件路径：</p>
<ul>
<li>配置文件：<code>/usr/local/etc/mongod.conf</code></li>
<li>日志文件：<code>/usr/local/var/log/mongodb</code></li>
<li>数据文件：<code>/usr/local/var/log/mongodb</code></li>
</ul>
<p>服务操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 开启服务</span><br><span class="line">brew services start mongodb-community</span><br><span class="line"></span><br><span class="line">// 关闭服务</span><br><span class="line">brew services stop mongodb-community</span><br></pre></td></tr></table></figure>
<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span></span><br><span class="line">    db.help()                    <span class="built_in">help</span> on db methods</span><br><span class="line">    db.mycoll.help()             <span class="built_in">help</span> on collection methods</span><br><span class="line">    sh.help()                    sharding helpers</span><br><span class="line">    rs.help()                    replica <span class="built_in">set</span> helpers</span><br><span class="line">    <span class="built_in">help</span> admin                   administrative <span class="built_in">help</span></span><br><span class="line">    <span class="built_in">help</span> connect                 connecting to a db <span class="built_in">help</span></span><br><span class="line">    <span class="built_in">help</span> keys                    key shortcuts</span><br><span class="line">    <span class="built_in">help</span> misc                    misc things to know</span><br><span class="line">    <span class="built_in">help</span> mr                      mapreduce</span><br><span class="line"></span><br><span class="line">    show dbs                     show database names</span><br><span class="line">    show collections             show collections <span class="keyword">in</span> current database</span><br><span class="line">    show users                   show users <span class="keyword">in</span> current database</span><br><span class="line">    show profile                 show most recent system.profile entries with time &gt;= 1ms</span><br><span class="line">    show logs                    show the accessible logger names</span><br><span class="line">    show <span class="built_in">log</span> [name]              prints out the last segment of <span class="built_in">log</span> <span class="keyword">in</span> memory, <span class="string">&#x27;global&#x27;</span> is default</span><br><span class="line">    use &lt;db_name&gt;                <span class="built_in">set</span> current database</span><br><span class="line">    db.foo.find()                list objects <span class="keyword">in</span> collection foo</span><br><span class="line">    db.foo.find( &#123; a : 1 &#125; )     list objects <span class="keyword">in</span> foo <span class="built_in">where</span> a == 1</span><br><span class="line">    it                           result of the last line evaluated; use to further iterate</span><br><span class="line">    DBQuery.shellBatchSize = x   <span class="built_in">set</span> default number of items to display on shell</span><br><span class="line">    <span class="built_in">exit</span>                         quit the mongo shell</span><br></pre></td></tr></table></figure>
<h2 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br></pre></td></tr></table></figure>
<h2 id="切换-amp-创建数据库"><a href="#切换-amp-创建数据库" class="headerlink" title="切换 &amp; 创建数据库"></a>切换 &amp; 创建数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use <span class="built_in">test</span></span><br><span class="line">switched to db <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h2 id="查看当前使用的数据库"><a href="#查看当前使用的数据库" class="headerlink" title="查看当前使用的数据库"></a>查看当前使用的数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.getName()</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">或</span><br><span class="line">db</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h2 id="显示当前-DB-状态"><a href="#显示当前-DB-状态" class="headerlink" title="显示当前 DB 状态"></a>显示当前 DB 状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.<span class="function"><span class="title">stats</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;db&quot;</span> : <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;collections&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;views&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;objects&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;avgObjSize&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;dataSize&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;storageSize&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;numExtents&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;indexes&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;indexSize&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;scaleFactor&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;fileSize&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;fsUsedSize&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;fsTotalSize&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修复当前数据库"><a href="#修复当前数据库" class="headerlink" title="修复当前数据库"></a>修复当前数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看当前 DB 版本</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">db.version()</span><br><span class="line">4.2.1</span><br></pre></td></tr></table></figure>
<h2 id="查看当前-DB-的链接机器地址"><a href="#查看当前-DB-的链接机器地址" class="headerlink" title="查看当前 DB 的链接机器地址"></a>查看当前 DB 的链接机器地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.getMongo()</span><br><span class="line">connection to 127.0.0.1:27017</span><br></pre></td></tr></table></figure>
<h2 id="删除当前使用的数据库"><a href="#删除当前使用的数据库" class="headerlink" title="删除当前使用的数据库"></a>删除当前使用的数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.<span class="function"><span class="title">dropDatabase</span></span>()</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 数据类型</title>
    <url>/2019/11/17/mysql-data-types/</url>
    <content><![CDATA[<p><img src="/images/2019/201911171605.jpg" alt="201911171605.jpg"></p>
<p>👋 使用 MySQL 这么长时间了，经常使用的情况时，除了自增主键和日期时间之外 ，能 Varchar 的基本上都给 Varchar 了。团队内部还出现过 VARCHAR(2)、VARCHAT(4)、…、VARCHAT(2^N) 的情况，现在看来确实有点搞笑。</p>
<span id="more"></span>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul>
<li>数值类型<ul>
<li>整数：<code>tinyint</code>、<code>smallint</code>、<code>mediumint</code>、<code>int</code>、<code>bigint</code></li>
<li>小数：<code>float</code>、<code>double</code>、<code>real</code>、<code>decimal</code></li>
</ul>
</li>
<li>日期和时间类型：<code>date</code>、<code>time</code>、<code>datetime</code>、<code>timestamp</code>、<code>year</code></li>
<li>字符串类型<ul>
<li>字符串：<code>char</code>、<code>varchat</code></li>
<li>大文本：<code>tinytext</code>、<code>text</code>、<code>mediumtext</code>、<code>longtext</code></li>
<li>其他：<code>enum</code>、<code>set</code></li>
</ul>
</li>
<li>二进制类型：<code>tinyblob</code>、<code>blob</code>、<code>mediumblob</code>、<code>longblob</code></li>
<li>空间数据类型：<code>geometry</code>、<code>geometrycollection</code>、<code>point</code>、<code>linestring</code></li>
<li>JSON 数据类型：</li>
</ul>
<h1 id="各个类型详情"><a href="#各个类型详情" class="headerlink" title="各个类型详情"></a>各个类型详情</h1><p><a href="https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html#data-types-storage-reqs-innodb">Data Type Storage Requirements</a></p>
<h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>存储空间(Bytes)</th>
<th>有符号最小值与最大值</th>
<th>无符号最小值与最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tinyint</code></td>
<td><code>1</code></td>
<td><code>-128~127</code> 或 <code>-2^7~2^7-1</code></td>
<td><code>0~255</code> 或 <code>0~2^8-1</code></td>
</tr>
<tr>
<td><code>smallint</code></td>
<td><code>2</code></td>
<td><code>-32768~32767</code> 或 <code>-2^15~2^15-1</code></td>
<td><code>0~65535</code> 或 <code>0~2^16-1</code></td>
</tr>
<tr>
<td><code>mediumint</code></td>
<td><code>3</code></td>
<td><code>-8388608~8388607</code> 或 <code>-2^23~2^23-1</code></td>
<td><code>0~16777215</code> 或 <code>0~2^24-1</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>4</code></td>
<td><code>-2147483648~2147483647</code> 或 <code>-2^31~^31-1</code></td>
<td><code>0~4294967295</code> 或 <code>0~2^32-1</code></td>
</tr>
<tr>
<td><code>bigint</code></td>
<td><code>8</code></td>
<td><code>-9223372036854775808~9223372036854775807</code> 或 <code>-2^63~2^63-1</code></td>
<td><code>0~1.8446744e+19</code> 或 <code>0~2^64-1</code></td>
</tr>
</tbody>
</table>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>存储空间(Bytes)</th>
<th>有符号最小值与最大值</th>
<th>无符号最小值与最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>float(M, D)</code></td>
<td><code>4</code></td>
<td><code>-3.402823466E+38~-1.175494351E-38</code></td>
<td><code>1.175494351E-38~3.402823466E+38</code></td>
</tr>
<tr>
<td><code>double(M, D)</code></td>
<td><code>8</code></td>
<td><code>-1.7976931348623157E+308~-2.2250738585072014E-308</code></td>
<td><code>0</code> 和 <code>2.2250738585072014E-308~1.7976931348623157E+308</code></td>
</tr>
</tbody>
</table>
<h2 id="定点型"><a href="#定点型" class="headerlink" title="定点型"></a>定点型</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/precision-math-decimal-characteristics.html">DECIMAL 范围</a></p>
<p>这里我复制一下官方文档的解释：</p>
<blockquote>
<p>The declaration syntax for a DECIMAL column is DECIMAL(M,D). The ranges of values for the arguments are as follows:</p>
<ul>
<li>M is the maximum number of digits (the precision). It has a range of 1 to 65.</li>
<li>D is the number of digits to the right of the decimal point (the scale). It has a range of 0 to 30 and must be no larger than M.</li>
</ul>
<p>If D is omitted, the default is 0. If M is omitted, the default is 10.</p>
</blockquote>
<ul>
<li>高精度的数据类型，常用来存储交易相关的数据</li>
<li><code>decimal(M, D)</code> 解释：<code>M</code> 代表总精度（小数点前后数字总个数），<code>D</code> 代表刻度（小数点后的位数）。比如：<code>decimal(5, 2)</code> 表示存储范围为 <code>-999.99~999.99</code></li>
<li><code>decimal(M, D)</code> 范围：<code>1&lt;= M &lt;= 65</code>、<code>0 &lt;= D &lt;= 30</code></li>
<li>如果省略 <code>D</code>，默认值是 <code>0</code>。如果省略 <code>M</code>，默认值是 <code>10</code></li>
<li>存储空间变长（<code>M+2</code> bytes）</li>
</ul>
<h2 id="日期与时间型"><a href="#日期与时间型" class="headerlink" title="日期与时间型"></a>日期与时间型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>存储空间(Bytes)</th>
<th>格式</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>year</code></td>
<td><code>1</code></td>
<td><code>YYYY</code></td>
<td><code>1901~2155</code></td>
</tr>
<tr>
<td><code>date</code></td>
<td><code>3</code></td>
<td><code>YYYY-MM-DD</code></td>
<td><code>1000-01-01~9999-12-31</code></td>
</tr>
<tr>
<td><code>time</code></td>
<td><code>3</code></td>
<td><code>hh:mm:ss</code></td>
<td><code>-838:59:59~838:59:59</code></td>
</tr>
<tr>
<td><code>datetime</code></td>
<td><code>8</code></td>
<td><code>yyyy-mm-dd hh:mm:ss</code></td>
<td><code>1000-01-01 00:00:00~9999-12-31 23:59:59&#39;</code></td>
</tr>
<tr>
<td><code>timestamp</code></td>
<td><code>4</code></td>
<td><code>YYYYMMDDhhmmss</code></td>
<td>UTC: <code>1970-01-01 00:00:01~2038-01-19 03:14:07</code></td>
</tr>
</tbody>
</table>
<p>包含两位数年份值的日期是模糊的，因为世纪是未知的。MySQL 使用这些规则解释两位数的年值：</p>
<ul>
<li><code>00~69</code> 范围内的年份值被转换为 <code>2000~2069</code></li>
<li><code>70~99</code> 范围内的年份值被转换为 <code>1970~1999</code></li>
</ul>
<h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>char(M)</code></td>
<td>固定长度的字符串（可以包含字母，数字和特殊字符）。 <code>M</code> 参数指定以 <strong>字符</strong> 为单位的列长度（范围：<code>0~255</code>）。默认值为 <code>1</code></td>
</tr>
<tr>
<td><code>varchat(M)</code></td>
<td>长度可变的字符串（可以包含字母，数字和特殊字符）。 <code>M</code> 参数指定以 <strong>字符</strong> 为单位的最大列长度（范围：<code>0~65525</code>）</td>
</tr>
<tr>
<td><code>binary(M)</code></td>
<td>等于 <code>char(M)</code>，但存储二进制 <strong>字节</strong> 字符串。 <code>M</code> 参数指定以 <strong>字节</strong> 为单位的列长度。 默认为 <code>1</code></td>
</tr>
<tr>
<td><code>varbinary</code></td>
<td>等于 <code>varchat(M)</code>，但存储二进制 <strong>字节</strong> 字符串。 <code>M</code> 参数指定最大列长度。</td>
</tr>
<tr>
<td><code>tinyblob</code></td>
<td>用户 <code>BLOB</code>（二进制大对象）。最大长度 <code>255</code> 个 <strong>字节</strong></td>
</tr>
<tr>
<td><code>tinytext</code></td>
<td>包含最大长度为 <code>255</code>（255B）个 <strong>字符</strong> 的字符串</td>
</tr>
<tr>
<td><code>blob(M)</code></td>
<td>对于 <code>BLOB</code>（二进制大对象）。最多可容纳 <code>65535</code> 个 <strong>字节</strong> 的数据</td>
</tr>
<tr>
<td><code>text(M)</code></td>
<td>容纳最大长度为 <code>65535</code>（64KB）个 <strong>字符</strong> 的字符串</td>
</tr>
<tr>
<td><code>mediumblob</code></td>
<td>对于 <code>BLOB</code>（二进制大对象）。最多容纳 <code>16777215</code> 个 <strong>字节</strong> 的数据</td>
</tr>
<tr>
<td><code>mediumtext</code></td>
<td>容纳最大长度为 <code>16777215</code>（16MB）个 <strong>字符</strong> 的字符串</td>
</tr>
<tr>
<td><code>longblob</code></td>
<td>对于 <code>BLOB</code>（二进制大对象）。最多可容纳 <code>4294967295</code> 个 <strong>字节</strong> 的数据</td>
</tr>
<tr>
<td><code>longtext</code></td>
<td>包含最大长度为 <code>4294967295</code>（4GB）个 <strong>字符</strong> 的字符串</td>
</tr>
<tr>
<td><code>enum(&#39;v1&#39;, &#39;v2&#39;, ...)</code></td>
<td>从可能值列表中选择的只能有一个值的字符串对象。你可以在 <code>ENUM</code> 列表中最多列出 <code>65535</code> 个值。如果插入的值不在列表中，则将插入空白值。值按输入顺序排序</td>
</tr>
<tr>
<td><code>set(v1, v2, v3, ...)</code></td>
<td>从可能值列表中选择的可以具有 0 个或多个值的字符串对象。你可以在 SET 列表中最多列出 <code>64</code> 个值</td>
</tr>
</tbody>
</table>
<p>关于 <code>char(M)</code>、<code>varchar(M)</code> 和 <code>text</code> 的问题：</p>
<ul>
<li><code>char(M)</code> 和 <code>varchar(M)</code> 中 <code>M</code> 代表 <strong>字符个数</strong>，并不是字节个数。当使用 UTF-8 时意味着可以插入 <code>M</code> 个字符，但实际会占用 <code>M*3</code> 个字节</li>
<li><code>char(M)</code> 不管实际值都会占用 <code>M</code> 个字符的空间，页 <code>varchar(M)</code> 只会占用实际字符应该占用的空间 <code>+1</code>，并且实际空间为 <code>+1 &lt;= M</code></li>
<li>超过 <code>char(M)</code> 和 <code>varchar(M)</code> 的 <code>M</code> 设置后，字符串会被截断</li>
<li><code>char</code> 的上限为 <code>255</code> 字符，<code>varchar</code> 和 <code>text</code> 的上限 <code>65535</code> 字符</li>
<li><code>char</code> 在存储的时候会截断尾部的空格，<code>varchar</code> 和 <code>text</code> 不会</li>
<li><code>varchar</code> 会使用 <code>1~3</code> 个字节来存储长度，而 <code>text</code> 不会</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>char(4)</th>
<th>存储需要</th>
<th>varchat(4)</th>
<th>存储需要</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&#39;&#39;</code></td>
<td><code>&#39;    &#39;</code></td>
<td>4 bytes</td>
<td><code>&#39;&#39;</code></td>
<td>1 bytes</td>
</tr>
<tr>
<td><code>&#39;ab&#39;</code></td>
<td><code>&#39;ab  &#39;</code></td>
<td>4 bytes</td>
<td><code>&#39;ab&#39;</code></td>
<td>3 bytes</td>
</tr>
<tr>
<td><code>&#39;abcd&#39;</code></td>
<td><code>&#39;abcd&#39;</code></td>
<td>4 bytes</td>
<td><code>&#39;abcd&#39;</code></td>
<td>5 bytes</td>
</tr>
<tr>
<td><code>&#39;abcdefgh&#39;</code></td>
<td><code>&#39;abcd&#39;</code></td>
<td>4 bytes</td>
<td><code>&#39;abcd&#39;</code></td>
<td>5 bytes</td>
</tr>
</tbody>
</table>
<p>如上所述：</p>
<ul>
<li><code>char</code> 存定长，速度快，存在空间浪费的可能，会处理尾部空格，上限 <code>255</code></li>
<li><code>varchar</code> 存变长，速度慢，不存在空间浪费，不处理尾部空格，上限 <code>65535</code>，但是有存储长度实际 <code>65532</code> 最大可用</li>
<li><code>text</code>，存变长大数据，速度慢，不存在空间浪费，不处理尾部空格，上限 <code>65535</code>，会用额外空间存放数据长度，因此可以全部使用 <code>65535</code></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 日期时间函数</title>
    <url>/2018/01/20/mysql-datetime-functions/</url>
    <content><![CDATA[<p><code>MySQL</code> 日期和时间函数</p>
<span id="more"></span>
<h2 id="常用日期时间函数"><a href="#常用日期时间函数" class="headerlink" title="常用日期时间函数"></a>常用日期时间函数</h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ADDDATE()</code></td>
<td>添加日期</td>
<td></td>
</tr>
<tr>
<td><code>ADDTIME()</code></td>
<td>添加时间</td>
<td></td>
</tr>
<tr>
<td><code>CONVERT_TZ()</code></td>
<td>转换不同时区</td>
<td></td>
</tr>
<tr>
<td><code>CURDATE()</code></td>
<td>返回当前日期</td>
<td></td>
</tr>
<tr>
<td><code>CURRENT_DATE()</code> 和 <code>CURRENT_DATE</code></td>
<td>等同于 <code>CURDATE()</code></td>
<td></td>
</tr>
<tr>
<td><code>CURRENT_TIME()</code> 和 <code>CURRENT_TIME</code></td>
<td>等同于 <code>CURTIME()</code></td>
<td></td>
</tr>
<tr>
<td><code>CURRENT_TIMESTAMP()</code> 和 <code>CURRENT_TIMESTAMP</code></td>
<td>等同于 <code>NOW()</code></td>
<td></td>
</tr>
<tr>
<td><code>CURTIME()</code></td>
<td>返回当前时间</td>
<td></td>
</tr>
<tr>
<td><code>DATE_ADD()</code></td>
<td>添加两个日期</td>
<td></td>
</tr>
<tr>
<td><code>DATE_FORMAT()</code></td>
<td>按指定方式格式化日期</td>
<td></td>
</tr>
<tr>
<td><code>DATE_SUB()</code></td>
<td>求解两个日期的间隔</td>
<td></td>
</tr>
<tr>
<td><code>DATE()</code></td>
<td>提取日期或日期时间表达式中的日期部分</td>
<td></td>
</tr>
<tr>
<td><code>DATEDIFF()</code></td>
<td>求解两个日期的间隔</td>
<td></td>
</tr>
<tr>
<td><code>DAY()</code></td>
<td>等同于 <code>DAYOFMONTH()</code></td>
<td></td>
</tr>
<tr>
<td><code>DAYNAME()</code></td>
<td>返回星期中某天的名称</td>
<td></td>
</tr>
<tr>
<td><code>DAYOFMONTH()</code></td>
<td>返回一月中某天的序号(1-31)</td>
<td></td>
</tr>
<tr>
<td><code>DAYOFWEEK()</code></td>
<td>返回参数所指定的一周中某天的索引值</td>
<td></td>
</tr>
<tr>
<td><code>DAYOFYEAR()</code></td>
<td>返回一年中某天的序号(1-366)</td>
<td></td>
</tr>
<tr>
<td><code>EXTRACT</code></td>
<td>提取日期中的相应部分</td>
<td></td>
</tr>
<tr>
<td><code>FROM_DAYS()</code></td>
<td>将一个天数序号转变为日期值</td>
<td></td>
</tr>
<tr>
<td><code>FROM_UNIXTIME()</code></td>
<td>将日期格式化为 UNIX 的时间戳</td>
<td></td>
</tr>
<tr>
<td><code>HOUR()</code></td>
<td>提取时间</td>
<td></td>
</tr>
<tr>
<td><code>LAST_DAY</code></td>
<td>根据参数, 返回月中最后一天</td>
<td></td>
</tr>
<tr>
<td><code>LOCALTIME()</code> 和 <code>LOCALTIME</code></td>
<td>等同于 <code>NOW()</code></td>
<td></td>
</tr>
<tr>
<td><code>LOCALTIMESTAMP</code> 和 <code>LOCALTIMESTAMP()</code></td>
<td>等同于 <code>NOW()</code></td>
<td></td>
</tr>
<tr>
<td><code>MAKEDATE()</code></td>
<td>基于给定参数年份和所在年中的天数序号, 返回一个日期</td>
<td></td>
</tr>
<tr>
<td><code>MAKETIME</code></td>
<td>根据给定小时, 分, 秒返回一个格式时间</td>
<td></td>
</tr>
<tr>
<td><code>MICROSECOND()</code></td>
<td>返回参数所对应的毫秒数</td>
<td></td>
</tr>
<tr>
<td><code>MINUTE()</code></td>
<td>返回参数对应的分钟数</td>
<td></td>
</tr>
<tr>
<td><code>MONTH()</code></td>
<td>返回传入日期所对应的月序数</td>
<td></td>
</tr>
<tr>
<td><code>MONTHNAME()</code></td>
<td>返回月的名称</td>
<td></td>
</tr>
<tr>
<td><code>NOW()</code></td>
<td>返回当前日期与时间</td>
<td></td>
</tr>
<tr>
<td><code>PERIOD_ADD()</code></td>
<td>为年-月组合日期添加一个时段</td>
<td></td>
</tr>
<tr>
<td><code>PERIOD_DIFF()</code></td>
<td>返回两个时段之间的月份差值</td>
<td></td>
</tr>
<tr>
<td><code>QUARTER()</code></td>
<td>返回日期参数所对应的季度序号</td>
<td></td>
</tr>
<tr>
<td><code>SEC_TO_TIME()</code></td>
<td>将描述转变成 <code>HH:MM:SS</code> 的格式</td>
<td></td>
</tr>
<tr>
<td><code>SECOND()</code></td>
<td>返回秒序号(0-59</td>
<td></td>
</tr>
<tr>
<td><code>STR_TO_DATE()</code></td>
<td>将字符串转变为日期</td>
<td></td>
</tr>
<tr>
<td><code>SUBDATE()</code></td>
<td>从给定的日期中减去一个时间区间, 相当于 <code>DATE_SUB()</code></td>
<td></td>
</tr>
<tr>
<td><code>SUBTIME()</code></td>
<td>计算时间差值</td>
<td></td>
</tr>
<tr>
<td><code>SYSDATE()</code></td>
<td>返回函数执行时的时间</td>
<td></td>
</tr>
<tr>
<td><code>TIME_FORMAT()</code></td>
<td>提取参数中的时间部分</td>
<td></td>
</tr>
<tr>
<td><code>TIME_TO_SEC()</code></td>
<td>将参数转化为秒数</td>
<td></td>
</tr>
<tr>
<td><code>TIME()</code></td>
<td>提取传入表达式的时间部分</td>
<td></td>
</tr>
<tr>
<td><code>TIMEDIFF()</code></td>
<td>计算时间差值</td>
<td></td>
</tr>
<tr>
<td><code>TIMESTAMP()</code></td>
<td>单个参数时, 函数返回日期或日期时间表达式; 有 2 个参数时, 将参数求和</td>
<td></td>
</tr>
<tr>
<td><code>TIMESTAMPADD()</code></td>
<td>为日期时间表达式添加一个间隔 <code>INTERVAL</code></td>
<td></td>
</tr>
<tr>
<td><code>TIMESTAMPDIFF()</code></td>
<td>从日期时间表达式中减去一个间隔 <code>INTERVAL</code></td>
<td></td>
</tr>
<tr>
<td><code>TO_DAYS()</code></td>
<td>返回转换成天数的日期参数</td>
<td></td>
</tr>
<tr>
<td><code>UNIX_TIMESTAMP()</code></td>
<td>返回一个 UNIX 时间戳</td>
<td></td>
</tr>
<tr>
<td><code>UTC_DATE()</code></td>
<td>返回当前的 UTC 日期</td>
<td></td>
</tr>
<tr>
<td><code>UTC_TIME()</code></td>
<td>返回当前的 UTC 时间</td>
<td></td>
</tr>
<tr>
<td><code>UTC_TIMESTAMP()</code></td>
<td>返回当前的 UTC 时间与日期</td>
<td></td>
</tr>
<tr>
<td><code>WEEK()</code></td>
<td>返回周序号</td>
<td></td>
</tr>
<tr>
<td><code>WEEKDAY()</code></td>
<td>返回某天在星期中的索引值</td>
<td></td>
</tr>
<tr>
<td><code>WEEKOFYEAR()</code></td>
<td>返回日期所对应的星期在一年当中的序号(1-53)</td>
<td></td>
</tr>
<tr>
<td><code>YEAR()</code></td>
<td>返回年份</td>
<td></td>
</tr>
<tr>
<td><code>YEARWEEK()</code></td>
<td>返回年份及星期序号</td>
</tr>
</tbody>
</table>
<h2 id="日期时间函数用法"><a href="#日期时间函数用法" class="headerlink" title="日期时间函数用法"></a>日期时间函数用法</h2><h3 id="DATE-ADD-函数"><a href="#DATE-ADD-函数" class="headerlink" title="DATE_ADD() 函数"></a><code>DATE_ADD()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">&#x27;2017-11-11&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">31</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(<span class="string">&#x27;2017-11-11&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">31</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(<span class="string">&#x27;2017-11-11&#x27;</span>, <span class="number">31</span>);</span><br></pre></td></tr></table></figure>
<h3 id="ADDTIME-函数"><a href="#ADDTIME-函数" class="headerlink" title="ADDTIME() 函数"></a><code>ADDTIME()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ADDTIME(<span class="string">&#x27;2017-12-31 23:59:59.999999&#x27;</span>, <span class="string">&#x27;0 0:0:0.000001&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="CONVERT-TZ-函数"><a href="#CONVERT-TZ-函数" class="headerlink" title="CONVERT_TZ() 函数"></a><code>CONVERT_TZ()</code> 函数</h3><blockquote>
<ul>
<li><a href="http://stackoverflow.com/questions/18216198/unable-to-load-timezones">Unable to load timezones?</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html">MySQL Server Time Zone Support</a></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 导入时区数据</span><br><span class="line">$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -uroot -p -S /usr/<span class="built_in">local</span>/var/run/mysql/mysql.sock --force mysql</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 设置全局时区</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> time_zone <span class="operator">=</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查看系统时区</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.time_zone, @<span class="variable">@session</span>.time_zone;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 时区相关的表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.time_zone;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.time_zone_transition_type;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.time_zone_transition;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.time_zone_name;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.time_zone_leap_second;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONVERT_TZ(NOW(), <span class="string">&#x27;Asia/Shanghai&#x27;</span>, <span class="string">&#x27;GMT&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> CONVERT_TZ(NOW(), <span class="string">&#x27;+08:00&#x27;</span>, <span class="string">&#x27;+00:00&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="CURRENT-DATE-CURRENT-DATE-函数"><a href="#CURRENT-DATE-CURRENT-DATE-函数" class="headerlink" title="CURRENT_DATE(), CURRENT_DATE 函数"></a><code>CURRENT_DATE()</code>, <code>CURRENT_DATE</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>() <span class="operator">+</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span> <span class="operator">+</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="CURRENT-TIME-CURRENT-TIME-函数"><a href="#CURRENT-TIME-CURRENT-TIME-函数" class="headerlink" title="CURRENT_TIME(), CURRENT_TIME 函数"></a><code>CURRENT_TIME()</code>, <code>CURRENT_TIME</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>() <span class="operator">+</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span> <span class="operator">+</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="NOW-CURRENT-TIMESTAMP-CURRENT-TIMESTAMP-LOCALTIMESTAMP-LOCALTIMESTAMP-LOCALTIME-LOCALTIME-函数"><a href="#NOW-CURRENT-TIMESTAMP-CURRENT-TIMESTAMP-LOCALTIMESTAMP-LOCALTIMESTAMP-LOCALTIME-LOCALTIME-函数" class="headerlink" title="NOW(), CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP, LOCALTIMESTAMP(), LOCALTIMESTAMP, LOCALTIME(), LOCALTIME 函数"></a><code>NOW()</code>, <code>CURRENT_TIMESTAMP()</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIMESTAMP()</code>, <code>LOCALTIMESTAMP</code>, <code>LOCALTIME()</code>, <code>LOCALTIME</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIMESTAMP</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIMESTAMP</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>;</span><br></pre></td></tr></table></figure>
<h3 id="DATE-ADD-函数-1"><a href="#DATE-ADD-函数-1" class="headerlink" title="DATE_ADD() 函数"></a><code>DATE_ADD()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">YEAR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> QUARTER);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">HOUR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">MINUTE</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">60</span> <span class="keyword">SECOND</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">5000</span> MICROSECOND);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">YEAR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> WEEK);</span><br></pre></td></tr></table></figure>
<h3 id="DATE-FORMAT-STR-TO-DATE-函数"><a href="#DATE-FORMAT-STR-TO-DATE-函数" class="headerlink" title="DATE_FORMAT(), STR_TO_DATE() 函数"></a><code>DATE_FORMAT()</code>, <code>STR_TO_DATE()</code> 函数</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%a</code></td>
<td>一星期中每天名称的缩写(Sun…Sat)</td>
<td></td>
</tr>
<tr>
<td><code>%b</code></td>
<td>月份的缩写(Jan…Dec)</td>
<td></td>
</tr>
<tr>
<td><code>%c</code></td>
<td>月份的数字表现形式(0…12)</td>
<td></td>
</tr>
<tr>
<td><code>%D</code></td>
<td>带有英语后缀的一个月中的每一天的名称(0th、1st、2nd、3rd)</td>
<td></td>
</tr>
<tr>
<td><code>%d</code></td>
<td>用数字形式表现的每月中的每一天(00…31)</td>
<td></td>
</tr>
<tr>
<td><code>%e</code></td>
<td>用数字形式表现的每月中的每一天(0…31)</td>
<td></td>
</tr>
<tr>
<td><code>%f</code></td>
<td>毫秒(000000…999999)</td>
<td></td>
</tr>
<tr>
<td><code>%H</code></td>
<td>24 时制显示的小时(00…23)</td>
<td></td>
</tr>
<tr>
<td><code>%h</code></td>
<td>12 时制显示的小时(01…12)</td>
<td></td>
</tr>
<tr>
<td><code>%I</code></td>
<td>12 时制显示的小时(01…12)</td>
<td></td>
</tr>
<tr>
<td><code>%i</code></td>
<td>以数字形式表现的分钟数(00…59)</td>
<td></td>
</tr>
<tr>
<td><code>%j</code></td>
<td>一年中的每一天(001…366)</td>
<td></td>
</tr>
<tr>
<td><code>%k</code></td>
<td>24 时制小时的另一种表现格式(0…23)</td>
<td></td>
</tr>
<tr>
<td><code>%l</code></td>
<td>12 时制小时的另一种表现格式(1…12)</td>
<td></td>
</tr>
<tr>
<td><code>%M</code></td>
<td>用完整英文名称表示的月份(January…December)</td>
<td></td>
</tr>
<tr>
<td><code>%m</code></td>
<td>用数字表现的月份(00…12)</td>
<td></td>
</tr>
<tr>
<td><code>%p</code></td>
<td>上午(AM)或下午(PM)</td>
<td></td>
</tr>
<tr>
<td><code>%r</code></td>
<td>12 时制的时间值(hh:mm:ss, 后跟 AM 或 PM)</td>
<td></td>
</tr>
<tr>
<td><code>%S</code></td>
<td>秒(00…59)</td>
<td></td>
</tr>
<tr>
<td><code>%s</code></td>
<td>秒(00…59)</td>
<td></td>
</tr>
<tr>
<td><code>%T</code></td>
<td>24 时制的小时(hh:mm:ss)</td>
<td></td>
</tr>
<tr>
<td><code>%U</code></td>
<td>星期(00…53), 其中星期天是每星期的开始日</td>
<td></td>
</tr>
<tr>
<td><code>%u</code></td>
<td>星期(00…53), 其中星期一是每星期的开始日</td>
<td></td>
</tr>
<tr>
<td><code>%V</code></td>
<td>星期(01…53), 其中星期天是每星期的开始日, 和 %X 一起使用</td>
<td></td>
</tr>
<tr>
<td><code>%v</code></td>
<td>星期(01…53), 其中星期一是每星期的开始日, 和 %x 一起使用</td>
<td></td>
</tr>
<tr>
<td><code>%W</code></td>
<td>一星期中各日名称(Sunday…Saturday)</td>
<td></td>
</tr>
<tr>
<td><code>%w</code></td>
<td>一星期中各日名称(0 代表星期日, 6 代表星期六, 以此类推)</td>
<td></td>
</tr>
<tr>
<td><code>%X</code></td>
<td>某星期所处年份. 其中, 星期天是每星期的开始日, 采用 4 位数字形式表现, 和 %V一起使用</td>
<td></td>
</tr>
<tr>
<td><code>%x</code></td>
<td>某星期所处年份. 其中, 星期一是每星期的开始日, 采用 4 位数字形式表现, 和 %V 一起使用</td>
<td></td>
</tr>
<tr>
<td><code>%Y</code></td>
<td>4 位数字表示的年份</td>
<td></td>
</tr>
<tr>
<td><code>%y</code></td>
<td>2 位数字表示的年份</td>
<td></td>
</tr>
<tr>
<td><code>%%</code></td>
<td>符号 % 的字面值</td>
<td></td>
</tr>
<tr>
<td><code>%x(x为斜体)</code></td>
<td>字符 x 的字面值, x 指以上未列出的任何字符</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y年-%m月-%d号 %p %H时%i分%s秒&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y %M %D %p %H:%m:%s %W %u %j&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;February 1 2018&#x27;</span>, <span class="string">&#x27;%M %d %Y&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;March,8,2018&#x27;</span>, <span class="string">&#x27;%M,%e,%Y&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;Friday, July 28, 2018&#x27;</span>, <span class="string">&#x27;%W, %M %e, %Y&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;2018,10,1 9&#x27;</span>, <span class="string">&#x27;%Y,%m,%d %h&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;2018,6,2 21,30,01&#x27;</span>, <span class="string">&#x27;%Y,%m,%d %H,%i,%s&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;16,3,33&#x27;</span>, <span class="string">&#x27;%H,%i,%s&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="DATE-SUB-SUBDATE-函数"><a href="#DATE-SUB-SUBDATE-函数" class="headerlink" title="DATE_SUB(), SUBDATE() 函数"></a><code>DATE_SUB()</code>, <code>SUBDATE()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">YEAR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> QUARTER);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">HOUR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">MINUTE</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">60</span> <span class="keyword">SECOND</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">5000</span> MICROSECOND);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">YEAR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> WEEK);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>), <span class="type">INTERVAL</span> <span class="number">4</span> MICROSECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(NOW(), <span class="type">INTERVAL</span> <span class="number">60</span> <span class="keyword">SECOND</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">LOCALTIMESTAMP</span>(), <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">MINUTE</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">LOCALTIME</span>(), <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">HOUR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">CURRENT_DATE</span>(), <span class="number">10</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="number">4</span> WEEK);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="number">2</span> QUARTER);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="string">&#x27;2019-01-01 00:00:10.000001&#x27;</span>, <span class="type">INTERVAL</span> <span class="string">&#x27;10.000001&#x27;</span> SECOND_MICROSECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="string">&#x27;2019-01-01 00:02:10.000001&#x27;</span>, <span class="type">INTERVAL</span> <span class="string">&#x27;2:10.000001&#x27;</span> MINUTE_MICROSECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(NOW(), <span class="type">INTERVAL</span> <span class="string">&#x27;3:30&#x27;</span> MINUTE_SECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="string">&#x27;2019-01-01 01:03:10.000001&#x27;</span>, <span class="type">INTERVAL</span> <span class="string">&#x27;1:03:10.000001&#x27;</span> HOUR_MICROSECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(NOW(), <span class="type">INTERVAL</span> <span class="string">&#x27;1:30:30&#x27;</span> HOUR_SECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(NOW(), <span class="type">INTERVAL</span> <span class="string">&#x27;1:01&#x27;</span> HOUR_MINUTE);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="string">&#x27;2019-01-01 00:02:10.000001&#x27;</span>, <span class="type">INTERVAL</span> <span class="string">&#x27;10 1:03:12.000001&#x27;</span> DAY_MICROSECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(NOW(), <span class="type">INTERVAL</span> <span class="string">&#x27;7 1:30:30&#x27;</span> DAY_SECOND);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">CURRENT_TIMESTAMP</span>(), <span class="type">INTERVAL</span> <span class="string">&#x27;7 1:30&#x27;</span> DAY_MINUTE);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(<span class="built_in">LOCALTIME</span>(), <span class="type">INTERVAL</span> <span class="string">&#x27;7 1&#x27;</span> DAY_HOUR);</span><br><span class="line"><span class="keyword">SELECT</span> SUBDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="string">&#x27;5-3&#x27;</span> YEAR_MONTH);</span><br></pre></td></tr></table></figure>
<h3 id="DATEDIFF-函数"><a href="#DATEDIFF-函数" class="headerlink" title="DATEDIFF() 函数"></a><code>DATEDIFF()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATEDIFF(DATE_ADD(CURDATE(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">DAY</span>), CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(DATE_ADD(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">DAY</span>), <span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(DATE_ADD(CURTIME(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">DAY</span>), CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(DATE_ADD(<span class="built_in">CURRENT_TIME</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">DAY</span>), <span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(CURDATE(), DATE_SUB(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">DAY</span>));</span><br></pre></td></tr></table></figure>
<h3 id="DAY-DAYOFMONTH-函数"><a href="#DAY-DAYOFMONTH-函数" class="headerlink" title="DAY(), DAYOFMONTH() 函数"></a><code>DAY()</code>, <code>DAYOFMONTH()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="string">&#x27;2016-12-31 23:59:59&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFMONTH(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFMONTH(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFMONTH(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFMONTH(<span class="string">&#x27;2016-12-31 23:59:59&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="DAYNAME-函数"><a href="#DAYNAME-函数" class="headerlink" title="DAYNAME() 函数"></a><code>DAYNAME()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DAYNAME(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> DAYNAME(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DAYNAME(CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> DAYNAME(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DAYNAME(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DAYNAME(NOW());</span><br></pre></td></tr></table></figure>
<h3 id="DAYOFWEEK-函数"><a href="#DAYOFWEEK-函数" class="headerlink" title="DAYOFWEEK() 函数"></a><code>DAYOFWEEK()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DAYOFWEEK(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFWEEK(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFWEEK(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFWEEK(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="DAYOFYEAR-函数"><a href="#DAYOFYEAR-函数" class="headerlink" title="DAYOFYEAR() 函数"></a><code>DAYOFYEAR()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DAYOFYEAR(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFYEAR(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFYEAR(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> DAYOFYEAR(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="EXTRACT-函数"><a href="#EXTRACT-函数" class="headerlink" title="EXTRACT() 函数"></a><code>EXTRACT()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(MICROSECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">SECOND</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">MINUTE</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">HOUR</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">DAY</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(WEEK <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">MONTH</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(QUARTER <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">YEAR</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(SECOND_MICROSECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(MINUTE_MICROSECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(MINUTE_SECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(HOUR_MICROSECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(HOUR_SECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(HOUR_MINUTE <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(DAY_MICROSECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(DAY_SECOND <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(DAY_MINUTE <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(DAY_HOUR <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(YEAR_MONTH <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>
<h3 id="FROM-DAYS-函数"><a href="#FROM-DAYS-函数" class="headerlink" title="FROM_DAYS() 函数"></a><code>FROM_DAYS()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FROM_DAYS(<span class="string">&#x27;736644&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> FROM_DAYS(<span class="string">&#x27;737009&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> FROM_DAYS(<span class="string">&#x27;737374&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="HOUR-函数"><a href="#HOUR-函数" class="headerlink" title="HOUR() 函数"></a><code>HOUR()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="LAST-DAY-函数"><a href="#LAST-DAY-函数" class="headerlink" title="LAST_DAY() 函数"></a><code>LAST_DAY()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LAST_DAY(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> LAST_DAY(DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">YEAR</span>));</span><br><span class="line"><span class="keyword">SELECT</span> LAST_DAY(DATE_ADD(CURDATE(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> QUARTER));</span><br></pre></td></tr></table></figure>
<h3 id="MAKEDATE-函数"><a href="#MAKEDATE-函数" class="headerlink" title="MAKEDATE() 函数"></a><code>MAKEDATE()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@YEAR</span> <span class="operator">=</span> <span class="string">&#x27;2018&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> MAKEDATE(<span class="variable">@YEAR</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKEDATE(<span class="variable">@YEAR</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKEDATE(<span class="variable">@YEAR</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKEDATE(<span class="variable">@YEAR</span>, <span class="number">365</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKEDATE(<span class="variable">@YEAR</span>, <span class="number">366</span>);</span><br></pre></td></tr></table></figure>
<h3 id="MAKETIME-函数"><a href="#MAKETIME-函数" class="headerlink" title="MAKETIME() 函数"></a><code>MAKETIME()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MAKETIME(<span class="number">11</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKETIME(<span class="number">16</span>, <span class="number">59</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKETIME(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKETIME(<span class="number">2017</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MAKETIME(<span class="number">-2017</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br></pre></td></tr></table></figure>
<h3 id="MICROSECOND-函数"><a href="#MICROSECOND-函数" class="headerlink" title="MICROSECOND() 函数"></a><code>MICROSECOND()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MICROSECOND(<span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> MICROSECOND(<span class="string">&#x27;2018-12-31 23:59:59.000001&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MICROSECOND(<span class="string">&#x27;2018-12-31 23:59:59.999999&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MICROSECOND(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> MICROSECOND(<span class="string">&#x27;12:59:59.141592&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> MICROSECOND(<span class="string">&#x27;838:58:59.001234&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="MINUTE-函数"><a href="#MINUTE-函数" class="headerlink" title="MINUTE() 函数"></a><code>MINUTE()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(<span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(<span class="string">&#x27;2018:59:59.001234&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(<span class="built_in">LOCALTIME</span>());</span><br></pre></td></tr></table></figure>
<h3 id="MONTH-函数"><a href="#MONTH-函数" class="headerlink" title="MONTH() 函数"></a><code>MONTH()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="MONTHNAME-函数"><a href="#MONTHNAME-函数" class="headerlink" title="MONTHNAME() 函数"></a><code>MONTHNAME()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MONTHNAME(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="PERIOD-ADD-函数"><a href="#PERIOD-ADD-函数" class="headerlink" title="PERIOD_ADD() 函数"></a><code>PERIOD_ADD()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@YEAR</span> <span class="operator">=</span> <span class="string">&#x27;201806&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_ADD(<span class="variable">@YEAR</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_ADD(<span class="variable">@YEAR</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_ADD(<span class="variable">@YEAR</span>, <span class="number">-7</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_ADD(<span class="string">&#x27;1806&#x27;</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_ADD(<span class="string">&#x27;1806&#x27;</span>, <span class="number">-7</span>);</span><br></pre></td></tr></table></figure>
<h3 id="PERIOD-DIFF-函数"><a href="#PERIOD-DIFF-函数" class="headerlink" title="PERIOD_DIFF() 函数"></a><code>PERIOD_DIFF()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PERIOD_DIFF(<span class="number">201806</span>, <span class="number">201804</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_DIFF(<span class="number">201806</span>, <span class="number">201812</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_DIFF(<span class="number">1806</span>, <span class="number">1812</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_DIFF(<span class="number">1806</span>, <span class="number">200812</span>);</span><br><span class="line"><span class="keyword">SELECT</span> PERIOD_DIFF(<span class="number">201806</span>, <span class="number">0812</span>);</span><br></pre></td></tr></table></figure>
<h3 id="QUARTER-函数"><a href="#QUARTER-函数" class="headerlink" title="QUARTER() 函数"></a><code>QUARTER()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> QUARTER(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> QUARTER(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> QUARTER(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> QUARTER(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> QUARTER(<span class="built_in">LOCALTIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> QUARTER(<span class="built_in">LOCALTIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> QUARTER(DATE_ADD(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">6</span> <span class="keyword">MONTH</span>));</span><br><span class="line"><span class="keyword">SELECT</span> QUARTER(DATE_SUB(<span class="built_in">CURRENT_DATE</span>(), <span class="type">INTERVAL</span> <span class="number">-3</span> <span class="keyword">MONTH</span>));</span><br></pre></td></tr></table></figure>
<h3 id="SECOND-函数"><a href="#SECOND-函数" class="headerlink" title="SECOND() 函数"></a><code>SECOND()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="built_in">LOCALTIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="SEC-TO-TIME-函数"><a href="#SEC-TO-TIME-函数" class="headerlink" title="SEC_TO_TIME() 函数"></a><code>SEC_TO_TIME()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SEC_TO_TIME(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SEC_TO_TIME(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SEC_TO_TIME(<span class="number">3600</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SEC_TO_TIME(<span class="number">360000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SEC_TO_TIME(<span class="number">5000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SEC_TO_TIME(<span class="number">-5000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="SECOND-函数-1"><a href="#SECOND-函数-1" class="headerlink" title="SECOND() 函数"></a><code>SECOND()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="string">&#x27;3600:11:59&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="SUBTIME-函数"><a href="#SUBTIME-函数" class="headerlink" title="SUBTIME() 函数"></a><code>SUBTIME()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;2019-01-01 00:00:10.000001&#x27;</span>, <span class="string">&#x27;2.000001&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;2019-01-01 00:00:10.000001&#x27;</span>, <span class="string">&#x27;3:2.000001&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;2019-01-01 00:00:10.000001&#x27;</span>, <span class="string">&#x27;4:3:2.000001&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;2019-01-01 00:00:10.000001&#x27;</span>, <span class="string">&#x27;5 4:3:2.000001&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;12:59:59.999999&#x27;</span>, <span class="string">&#x27;0.000001&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;01:01:01.999998&#x27;</span>, <span class="string">&#x27;5.000001&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;01:01:01.000001&#x27;</span>, <span class="string">&#x27;8:01:01.003441&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBTIME(<span class="string">&#x27;01:02:03.000001&#x27;</span>, <span class="string">&#x27;-8:01:01.003441&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="SYSDATE-函数"><a href="#SYSDATE-函数" class="headerlink" title="SYSDATE() 函数"></a><code>SYSDATE()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SYSDATE();</span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE() <span class="operator">+</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE() <span class="operator">+</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="TIME-函数"><a href="#TIME-函数" class="headerlink" title="TIME() 函数"></a><code>TIME()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span>(<span class="built_in">LOCALTIMESTAMP</span>(<span class="number">6</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span>(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span>(<span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>
<h3 id="TIME-FORMAT-函数"><a href="#TIME-FORMAT-函数" class="headerlink" title="TIME_FORMAT() 函数"></a><code>TIME_FORMAT()</code> 函数</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%f</code></td>
<td>毫秒(000000…999999)</td>
<td></td>
</tr>
<tr>
<td><code>%H</code></td>
<td>24 时制显示的小时(00…23)</td>
<td></td>
</tr>
<tr>
<td><code>%h</code></td>
<td>12 时制显示的小时(01…12)</td>
<td></td>
</tr>
<tr>
<td><code>%I</code></td>
<td>12 时制显示的小时(01…12)</td>
<td></td>
</tr>
<tr>
<td><code>%i</code></td>
<td>以数字形式表现的分钟数(00…59)</td>
<td></td>
</tr>
<tr>
<td><code>%p</code></td>
<td>上午(AM)或下午(PM)</td>
<td></td>
</tr>
<tr>
<td><code>%r</code></td>
<td>12 时制的时间值(hh:mm:ss, 后跟 AM 或 PM)</td>
<td></td>
</tr>
<tr>
<td><code>%S</code></td>
<td>秒(00…59)</td>
<td></td>
</tr>
<tr>
<td><code>%s</code></td>
<td>秒(00…59)</td>
<td></td>
</tr>
<tr>
<td><code>%T</code></td>
<td>24 时制的小时(hh:mm:ss)</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIME_FORMAT(CURTIME(), <span class="string">&#x27;%H %i %s&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_FORMAT(<span class="built_in">CURRENT_TIME</span>(), <span class="string">&#x27;%h:%i:%s %p&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_FORMAT(<span class="built_in">CURRENT_TIME</span>, <span class="string">&#x27;%h:%i %p&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_FORMAT(<span class="string">&#x27;18:50:30.000001&#x27;</span>, <span class="string">&#x27;%r&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_FORMAT(<span class="string">&#x27;18:50:30.000001&#x27;</span>, <span class="string">&#x27;%T&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_FORMAT(<span class="string">&#x27;18:50:30.000001&#x27;</span>, <span class="string">&#x27;%f&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="TIME-TO-SEC-函数"><a href="#TIME-TO-SEC-函数" class="headerlink" title="TIME_TO_SEC() 函数"></a><code>TIME_TO_SEC()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(<span class="string">&#x27;00:00:01&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(<span class="string">&#x27;00:00:01.999999&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(<span class="string">&#x27;00:00:02&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(<span class="string">&#x27;-1:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="TIMEDIFF-函数"><a href="#TIMEDIFF-函数" class="headerlink" title="TIMEDIFF() 函数"></a><code>TIMEDIFF()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(NOW(), SUBDATE(<span class="built_in">LOCALTIME</span>(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>));</span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(CURTIME(), SUBTIME(CURTIME(), <span class="string">&#x27;1:00:00&#x27;</span>));</span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(SUBTIME(CURTIME(), <span class="string">&#x27;1:00:00&#x27;</span>), CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(NOW(), CURTIME());</span><br></pre></td></tr></table></figure>
<h3 id="TIMESTAMP-函数"><a href="#TIMESTAMP-函数" class="headerlink" title="TIMESTAMP() 函数"></a><code>TIMESTAMP()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">TIMESTAMP</span>(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIMESTAMP</span>(CURDATE(), CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIMESTAMP</span>(NOW(), <span class="string">&#x27;02:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="TIMESTAMPADD-函数"><a href="#TIMESTAMPADD-函数" class="headerlink" title="TIMESTAMPADD() 函数"></a><code>TIMESTAMPADD()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(<span class="keyword">SECOND</span>, <span class="number">3600</span>, CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(<span class="keyword">MINUTE</span>, <span class="number">60</span>, CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(<span class="keyword">HOUR</span>, <span class="number">1</span>, CURTIME());</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(<span class="keyword">DAY</span>, <span class="number">1</span>, CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(WEEK, <span class="number">1</span>, CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(<span class="keyword">MONTH</span>, <span class="number">1</span>, CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(QUARTER, <span class="number">1</span>, CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPADD(<span class="keyword">YEAR</span>, <span class="number">1</span>, CURDATE());</span><br></pre></td></tr></table></figure>
<h3 id="TIMESTAMPDIFF-函数"><a href="#TIMESTAMPDIFF-函数" class="headerlink" title="TIMESTAMPDIFF() 函数"></a><code>TIMESTAMPDIFF()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF(<span class="keyword">SECOND</span>, CURDATE(), ADDDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">3600</span> <span class="keyword">SECOND</span>));</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF(<span class="keyword">MINUTE</span>, CURDATE(), ADDDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">60</span> <span class="keyword">MINUTE</span>));</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF(<span class="keyword">HOUR</span>, CURDATE(), ADDDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">HOUR</span>));</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF(<span class="keyword">DAY</span>, CURDATE(), ADDDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>));</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF(WEEK, CURDATE(), ADDDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>));</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF(<span class="keyword">MONTH</span>, CURDATE(), ADDDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> QUARTER));</span><br><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF(<span class="keyword">YEAR</span>, CURDATE(), ADDDATE(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>));</span><br></pre></td></tr></table></figure>
<h3 id="TO-DAYS-函数"><a href="#TO-DAYS-函数" class="headerlink" title="TO_DAYS() 函数"></a><code>TO_DAYS()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_DAYS(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> TO_DAYS(<span class="string">&#x27;19-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TO_DAYS(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> TO_DAYS(<span class="string">&#x27;0000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> TO_DAYS(<span class="string">&#x27;0000-00-00&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="WEEK-函数"><a href="#WEEK-函数" class="headerlink" title="WEEK() 函数"></a><code>WEEK()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> WEEK(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> WEEK(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEK(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEK(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> WEEK(<span class="built_in">LOCALTIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEK(<span class="built_in">LOCALTIMESTAMP</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="WEEKDAY-函数"><a href="#WEEKDAY-函数" class="headerlink" title="WEEKDAY() 函数"></a><code>WEEKDAY()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> WEEKDAY(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKDAY(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKDAY(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKDAY(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKDAY(<span class="built_in">LOCALTIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKDAY(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="WEEKOFYEAR-函数"><a href="#WEEKOFYEAR-函数" class="headerlink" title="WEEKOFYEAR() 函数"></a><code>WEEKOFYEAR()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> WEEKOFYEAR(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKOFYEAR(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKOFYEAR(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKOFYEAR(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKOFYEAR(<span class="built_in">LOCALTIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> WEEKOFYEAR(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="YEAR-函数"><a href="#YEAR-函数" class="headerlink" title="YEAR() 函数"></a><code>YEAR()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="built_in">LOCALTIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="YEARWEEK-函数"><a href="#YEARWEEK-函数" class="headerlink" title="YEARWEEK() 函数"></a><code>YEARWEEK()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> YEARWEEK(CURDATE());</span><br><span class="line"><span class="keyword">SELECT</span> YEARWEEK(<span class="built_in">CURRENT_DATE</span>());</span><br><span class="line"><span class="keyword">SELECT</span> YEARWEEK(<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> YEARWEEK(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> YEARWEEK(<span class="built_in">LOCALTIME</span>());</span><br><span class="line"><span class="keyword">SELECT</span> YEARWEEK(<span class="built_in">LOCALTIMESTAMP</span>());</span><br></pre></td></tr></table></figure>
<h3 id="UTC-DATE-UTC-TIME-UTC-TIMESTAMP-函数"><a href="#UTC-DATE-UTC-TIME-UTC-TIMESTAMP-函数" class="headerlink" title="UTC_DATE(), UTC_TIME(), UTC_TIMESTAMP() 函数"></a><code>UTC_DATE()</code>, <code>UTC_TIME()</code>, <code>UTC_TIMESTAMP()</code> 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UTC_DATE();</span><br><span class="line"><span class="keyword">SELECT</span> UTC_TIME();</span><br><span class="line"><span class="keyword">SELECT</span> UTC_TIMESTAMP();</span><br></pre></td></tr></table></figure>
<h2 id="日期时间和时间戳转换"><a href="#日期时间和时间戳转换" class="headerlink" title="日期时间和时间戳转换"></a>日期时间和时间戳转换</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 当前日期时间转换为时间戳</span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP(NOW());</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 时间戳转换为日期时间</span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="string">&#x27;1478793600&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.techonthenet.com/mysql/functions/adddate.php">Date/Time Functions</a></li>
<li><a href="http://www.w3resource.com/mysql/date-and-time-functions/date-and-time-functions.php">MySQL Date and Time functions</a></li>
<li><a href="https://www.tutorialspoint.com/mysql/mysql-date-time-functions.htm">MySQL Date and Time Functions</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 隔离级别及其脏读不可重复读幻读</title>
    <url>/2019/11/07/mysql-isolation-level/</url>
    <content><![CDATA[<p><img src="/images/2019/201911071832.jpg" alt="201911071832.jpg"></p>
<p>🍓 MySQL 中，InnoDB 所提供的事务符合 ACID 的要求，而事务通过事务日志中的 <code>redo log</code> 和 <code>undo log</code> 满足了原子性、一致性、持久性，事务还会通过锁机制满足隔离性，在 InnoDB 存储引擎中，有不同的隔离级别，它们有着不同的隔离性。</p>
<span id="more"></span>
<h1 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h1><ul>
<li><strong>原子性</strong>（<strong><code>Atomicity</code></strong> - [ˌætəˈmɪsəti] ）：一个事务（Transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即指处于同一个事务中的多条语句是不可分割的</li>
<li><strong>一致性</strong>（<strong><code>Consistency</code></strong> - [kənˈsɪstənsi]）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。即事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li>
<li><strong>隔离性</strong>（<strong><code>Isolation</code></strong> - [ˌaɪsəˈleɪʃn]）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。即指多线程环境下，一个线程中的事务不能被其他线程中的事务打扰</li>
<li><strong>持久性</strong>（<strong><code>Durability</code></strong> - [dərəˈbɪlɪti]）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。即事务一旦提交，就应该被永久保存起来</li>
</ul>
<h1 id="事务的组成部分"><a href="#事务的组成部分" class="headerlink" title="事务的组成部分"></a>事务的组成部分</h1><blockquote>
<p>顺便提一下 DQL（数据查询语言：Data Query Language）。</p>
</blockquote>
<ul>
<li>一个或多个 DML（<code>Data Manipulation Language</code>） 语句，比如：INSERT、UPDATE、SELECT、DELETE 等</li>
<li>一个 DDL（数据定义语言：<code>Data Definition Language</code>）语句，比如：CREATE、ALTER、DROP 等</li>
<li>一个 DCL（数据控制语言：<code>Data Control Language</code>）语句，比如：GRANT、DENY、REVOKE 等</li>
</ul>
<h1 id="不隔离事务带来的问题"><a href="#不隔离事务带来的问题" class="headerlink" title="不隔离事务带来的问题"></a>不隔离事务带来的问题</h1><ul>
<li>脏读（<code>Drity Read</code>）：一个事务读取到另一个事务未提交的数据，侧重点在 <strong>事务未提交</strong></li>
<li>不可重复读（<code>Non-Repeatable Read</code>）：一个事务对同一行数据重复读取两次，但得到的结果不同，侧重点在 <strong>更新修改</strong></li>
<li>幻读或虚读（<code>Phantom Read</code>）：一个事务执行两次查询，第二次查询时，莫名的多出了一些之前不存在数据，或者莫名的不见了一些数据，侧重点在 <strong>新增删除</strong></li>
<li>丢失更新（<code>Lost Update</code>）：两个事务同时更新一行数据，后提交（或撤销）的事务将之前事务提交的数据覆盖了</li>
</ul>
<p>丢失更新可分为两类，分别是第一类丢失更新和第二类丢失更新：</p>
<ul>
<li>第一类丢失更新：指两个事务同时操作同一个数据时，当第一个事务撤销时，把已经提交的第二个事务的更新数据覆盖了，第二个事务就造成了数据丢失</li>
<li>第二类丢失更新：指当两个事务同时操作同一个数据时，第一个事务将修改结果成功提交后，对第二个事务已经提交的修改结果进行了覆盖，对第二个事务造成了数据丢失</li>
</ul>
<h1 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h1><ul>
<li>读未提交（<code>Read Uncommitted</code>）：一个事务在执行过程中，既可以访问其他事务未提交的新插入的数据，又可以访问未提交的修改数据。如果一个事务已经开始写数据，则另外一个事务不允许同时进行写操作，但允许其他事务读此行数据，即一个事务读取到另一个事务中未提交的数据。<strong>此隔离级别可防止丢失更新</strong></li>
<li>读已提交（<code>Read Committed</code>）：一个事务在执行过程中，既可以访问其他事务成功提交的新插入的数据，又可以访问成功修改的数据。读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行，即一个事务读取到另一个事务中已提交的数据。<strong>此隔离级别可有效防止脏读</strong></li>
<li>可重复读（<code>Repeatable Read</code>）：一个事务在执行过程中，可以访问其他事务成功提交的新插入的数据，但不可以访问成功修改的数据。读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务，即一个事务可以重复读，每次读取的结果集都相同，而不管其他事务有没有提交。<strong>此隔离级别可有效防止不可重复读和脏读</strong></li>
<li>可串行化（<code>Serializable</code>）：提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行。<strong>此隔离级别可有效防止脏读、不可重复读和幻读</strong>。但这个级别可能导致大量的超时现象和锁竞争，在实际应用中很少使用</li>
</ul>
<p>隔离级别表（级别越高，数据越安全，但性能越低）：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>读未提交</td>
<td>有可能</td>
<td>有可能</td>
<td>有可能</td>
</tr>
<tr>
<td>读已提交</td>
<td>不可能</td>
<td>有可能</td>
<td>有可能</td>
</tr>
<tr>
<td>可重复读</td>
<td>不可能</td>
<td>不可能</td>
<td>有可能</td>
</tr>
<tr>
<td>可串行化</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
</tbody>
</table>
<h1 id="事务处理的方式"><a href="#事务处理的方式" class="headerlink" title="事务处理的方式"></a>事务处理的方式</h1><h2 id="显示局部设置"><a href="#显示局部设置" class="headerlink" title="显示局部设置"></a>显示局部设置</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 开启一个事务</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"># 事务回滚</span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure>
<h2 id="隐式全局设置"><a href="#隐式全局设置" class="headerlink" title="隐式全局设置"></a>隐式全局设置</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 禁止自动提交</span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT<span class="operator">=</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 开启自动提交</span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="隔离级别操作"><a href="#隔离级别操作" class="headerlink" title="隔离级别操作"></a>隔离级别操作</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看事务隔离级别</span><br><span class="line">mysql root@localhost:mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span></span><br><span class="line">Time: 0.017s</span><br><span class="line"></span><br><span class="line">// 设置当前会话隔离级别为读未提交</span><br><span class="line">mysql root@localhost:mysql&gt; <span class="built_in">set</span> session transaction isolation level <span class="built_in">read</span> uncommitted;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">Time: 0.043s</span><br><span class="line"></span><br><span class="line">// 设置当前会话隔离级别为读已提交</span><br><span class="line">mysql root@localhost:mysql&gt; <span class="built_in">set</span> session transaction isolation level <span class="built_in">read</span> committed;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">Time: 0.043s</span><br><span class="line"></span><br><span class="line">// 设置当前会话隔离级别为可重复读</span><br><span class="line">mysql root@localhost:mysql&gt; <span class="built_in">set</span> session transaction isolation level repeatable <span class="built_in">read</span>;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">Time: 0.043s</span><br><span class="line"></span><br><span class="line">// 设置当前会话隔离级别为可串行化</span><br><span class="line">mysql root@localhost:mysql&gt; <span class="built_in">set</span> session transaction isolation level serializable;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">Time: 0.043s</span><br><span class="line"></span><br><span class="line">// 查看当前 Session 的事务隔离级别</span><br><span class="line">mysql root@localhost:mysql&gt; show variables like <span class="string">&#x27;%transaction_isolation%&#x27;</span>;</span><br><span class="line">+-----------------------+------------------+</span><br><span class="line">| Variable_name         | Value            |</span><br><span class="line">+-----------------------+------------------+</span><br><span class="line">| transaction_isolation | READ-UNCOMMITTED |</span><br><span class="line">+-----------------------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span></span><br><span class="line">Time: 0.067s</span><br><span class="line"></span><br><span class="line">// 查看全局的事务隔离级别</span><br><span class="line">mysql root@localhost:mysql&gt; show global variables like <span class="string">&#x27;%transaction_isolation%&#x27;</span>;</span><br><span class="line">+-----------------------+-----------------+</span><br><span class="line">| Variable_name         | Value           |</span><br><span class="line">+-----------------------+-----------------+</span><br><span class="line">| transaction_isolation | REPEATABLE-READ |</span><br><span class="line">+-----------------------+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span></span><br><span class="line">Time: 0.016s</span><br></pre></td></tr></table></figure>
<p>实验环节待续中。。。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 联合查询</title>
    <url>/2018/01/20/mysql-join-query/</url>
    <content><![CDATA[<p>联合查询语句牵扯到多张表，多表查询有多种语法，多种使用场景，不同的场景需要不同的语法。</p>
<span id="more"></span>
<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50718</span></span><br><span class="line"><span class="comment"> Source Host           : 127.0.0.1</span></span><br><span class="line"><span class="comment"> Source Database       : test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50718</span></span><br><span class="line"><span class="comment"> File Encoding         : utf-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 05/16/2017 08:44:43 AM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `course`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `course`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `course` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键 ID&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;课程标题名称&#x27;</span>,</span><br><span class="line">  `englishName` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;英文名称&#x27;</span>,</span><br><span class="line">  `createdAt` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;创建时间戳&#x27;</span>,</span><br><span class="line">  `updatedAt` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;更新时间戳&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `course`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;Mathematics&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>, <span class="string">&#x27;History&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;政治&#x27;</span>, <span class="string">&#x27;Politics&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;地理&#x27;</span>, <span class="string">&#x27;Geography&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;物理&#x27;</span>, <span class="string">&#x27;Physics&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;化学&#x27;</span>, <span class="string">&#x27;Chemistry&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;生物&#x27;</span>, <span class="string">&#x27;Biology&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;体育&#x27;</span>, <span class="string">&#x27;Sports&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `lesson`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `lesson`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `lesson` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键 ID&#x27;</span>,</span><br><span class="line">  `courseId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;所属课程 ID&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;课时标题名称&#x27;</span>,</span><br><span class="line">  `tags` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;所属标签&#x27;</span>,</span><br><span class="line">  `createdAt` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;创建时间戳&#x27;</span>,</span><br><span class="line">  `updatedAt` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;更新时间戳&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">31</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `lesson`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `lesson` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;高中一年级语文&#x27;</span>, <span class="string">&#x27;高一语文&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;高中二年级语文&#x27;</span>, <span class="string">&#x27;高二语文&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;高中三年级语文&#x27;</span>, <span class="string">&#x27;高三语文&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中一年级数学&#x27;</span>, <span class="string">&#x27;高一数学&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中二年级数学&#x27;</span>, <span class="string">&#x27;高二数学&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中三年级数学&#x27;</span>, <span class="string">&#x27;高三数学&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;高中一年级英语&#x27;</span>, <span class="string">&#x27;高一英语&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;高中二年级英语&#x27;</span>, <span class="string">&#x27;高二英语&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;高中三年级英语&#x27;</span>, <span class="string">&#x27;高三英语&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中一年级历史&#x27;</span>, <span class="string">&#x27;高一历史&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中二年级历史&#x27;</span>, <span class="string">&#x27;高二历史&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中三年级历史&#x27;</span>, <span class="string">&#x27;高三历史&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;高中一年级政治&#x27;</span>, <span class="string">&#x27;高一政治&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;高中二年级政治&#x27;</span>, <span class="string">&#x27;高二政治&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;高中三年级政治&#x27;</span>, <span class="string">&#x27;高三政治&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中一年级地理&#x27;</span>, <span class="string">&#x27;高一地理&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中二年级地理&#x27;</span>, <span class="string">&#x27;高二地理&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中三年级地理&#x27;</span>, <span class="string">&#x27;高三地理&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;高中一年级物理&#x27;</span>, <span class="string">&#x27;高一物理&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;高中二年级物理&#x27;</span>, <span class="string">&#x27;高二物理&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;高中三年级物理&#x27;</span>, <span class="string">&#x27;高三物理&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中一年级化学&#x27;</span>, <span class="string">&#x27;高一化学&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中二年级化学&#x27;</span>, <span class="string">&#x27;高二化学&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中三年级化学&#x27;</span>, <span class="string">&#x27;高三化学&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;高中一年级生物&#x27;</span>, <span class="string">&#x27;高一生物&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;高中二年级生物&#x27;</span>, <span class="string">&#x27;高二生物&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;27&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;高中三年级生物&#x27;</span>, <span class="string">&#x27;高三生物&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中一年级体育&#x27;</span>, <span class="string">&#x27;高一体育&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中二年级体育&#x27;</span>, <span class="string">&#x27;高二体育&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;高中三年级体育&#x27;</span>, <span class="string">&#x27;高三体育&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><h2 id="INNER-JOIN-内连接"><a href="#INNER-JOIN-内连接" class="headerlink" title="INNER JOIN - 内连接"></a>INNER JOIN - 内连接</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/mysql/201812/mysql-inner-join.png" alt="mysql-inner-join.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`;</span><br></pre></td></tr></table></figure>
<h2 id="OUTER-JOIN-外连接"><a href="#OUTER-JOIN-外连接" class="headerlink" title="OUTER JOIN - 外连接"></a>OUTER JOIN - 外连接</h2><blockquote>
<p><code>MySQL</code> 并不支持 <code>FULL OUTER JOIN</code> 语法。</p>
</blockquote>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/mysql/201812/mysql-outer-join.png" alt="mysql-outer-join.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`;</span><br></pre></td></tr></table></figure>
<h2 id="LEFT-JOIN-左连接"><a href="#LEFT-JOIN-左连接" class="headerlink" title="LEFT JOIN - 左连接"></a>LEFT JOIN - 左连接</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/mysql/201812/mysql-left-join.png" alt="mysql-left-join.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`;</span><br></pre></td></tr></table></figure>
<h2 id="RIGHT-JOIN-右连接"><a href="#RIGHT-JOIN-右连接" class="headerlink" title="RIGHT JOIN 右连接"></a>RIGHT JOIN 右连接</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/mysql/201812/mysql-right-join.png" alt="mysql-right-join.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`;</span><br></pre></td></tr></table></figure>
<h2 id="LEFT-JOIN-EXCLUDING-INNER-JOIN"><a href="#LEFT-JOIN-EXCLUDING-INNER-JOIN" class="headerlink" title="LEFT JOIN EXCLUDING INNER JOIN"></a>LEFT JOIN EXCLUDING INNER JOIN</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/mysql/201812/mysql-left-excluding-join.png" alt="mysql-left-excluding-join.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  b.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<h2 id="RIGHT-JOIN-EXCLUDING-INNER-JOIN"><a href="#RIGHT-JOIN-EXCLUDING-INNER-JOIN" class="headerlink" title="RIGHT JOIN EXCLUDING INNER JOIN"></a>RIGHT JOIN EXCLUDING INNER JOIN</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/mysql/201812/mysql-right-excluding-join.png" alt="mysql-right-excluding-join.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  a.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<h2 id="OUTER-JOIN-EXCLUDING-INNER-JOIN"><a href="#OUTER-JOIN-EXCLUDING-INNER-JOIN" class="headerlink" title="OUTER JOIN EXCLUDING INNER JOIN"></a>OUTER JOIN EXCLUDING INNER JOIN</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/mysql/201812/mysql-outer-excluding-join.png" alt="mysql-outer-excluding-join.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  b.`courseId` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b <span class="keyword">ON</span> a.`id` <span class="operator">=</span> b.`courseId`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  a.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<h2 id="CROSS-JOIN"><a href="#CROSS-JOIN" class="headerlink" title="CROSS JOIN"></a>CROSS JOIN</h2><blockquote>
<p>笛卡尔积, 即 <code>N * M</code><br>三种表示方法: <code>CROSS JOIN</code>, <code>JOIN</code>, <code>,</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">JOIN</span> test.`lesson` <span class="keyword">AS</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`    <span class="keyword">AS</span> courseId,</span><br><span class="line">  a.`title` <span class="keyword">AS</span> courseTitle,</span><br><span class="line">  a.`englishName`,</span><br><span class="line">  b.`id`    <span class="keyword">AS</span> lessonId,</span><br><span class="line">  b.`title` <span class="keyword">AS</span> lessonTitle,</span><br><span class="line">  b.`tags`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.`course` <span class="keyword">AS</span> a,</span><br><span class="line">  test.`lesson` <span class="keyword">AS</span> b;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 关键字查询</title>
    <url>/2018/01/20/mysql-keywords-query/</url>
    <content><![CDATA[<p><code>MySQL</code> 关键字通过 <code>LIKE</code> 和正则查询。</p>
<span id="more"></span>
<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50714</span></span><br><span class="line"><span class="comment"> Source Host           : 127.0.0.1</span></span><br><span class="line"><span class="comment"> Source Database       : test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50714</span></span><br><span class="line"><span class="comment"> File Encoding         : utf-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 03/08/2017 22:41:15 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `test`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `test`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键 ID&#x27;</span>,</span><br><span class="line">  `key` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;键名&#x27;</span>,</span><br><span class="line">  `val` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;键值&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">38</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;测试表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `test`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;chenyulong&#x27;</span>, <span class="string">&#x27;56&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;maxiaoming&#x27;</span>, <span class="string">&#x27;33&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;huxiaofeng&#x27;</span>, <span class="string">&#x27;23&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;huangyi&#x27;</span>, <span class="string">&#x27;38&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;MAYUN&#x27;</span>, <span class="string">&#x27;58&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;CHENLONG&#x27;</span>, <span class="string">&#x27;64&#x27;</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;HUZHEN&#x27;</span>, <span class="string">&#x27;27&#x27;</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;LeiXiaoFei&#x27;</span>, <span class="string">&#x27;32&#x27;</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;Sunli&#x27;</span>, <span class="string">&#x27;42&#x27;</span>), (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;sunhong&#x27;</span>, <span class="string">&#x27;30&#x27;</span>), (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;Maoyouming&#x27;</span>, <span class="string">&#x27;33&#x27;</span>), (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;Maming&#x27;</span>, <span class="string">&#x27;43&#x27;</span>), (<span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;HUANGyu&#x27;</span>, <span class="string">&#x27;38&#x27;</span>), (<span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;maJINren&#x27;</span>, <span class="string">&#x27;34&#x27;</span>), (<span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;Lixiao&#x27;</span>, <span class="string">&#x27;33&#x27;</span>), (<span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;LIXIAOLI&#x27;</span>, <span class="string">&#x27;49&#x27;</span>), (<span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;sunYU&#x27;</span>, <span class="string">&#x27;50&#x27;</span>), (<span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;Liaihua&#x27;</span>, <span class="string">&#x27;54&#x27;</span>), (<span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;huXIaoYang&#x27;</span>, <span class="string">&#x27;44&#x27;</span>), (<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;chenxiaoXIAO&#x27;</span>, <span class="string">&#x27;34&#x27;</span>), (<span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;wangjun&#x27;</span>, <span class="string">&#x27;90%&#x27;</span>), (<span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;zhaoqian&#x27;</span>, <span class="string">&#x27;_mysql&#x27;</span>), (<span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;%88&#x27;</span>), (<span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;lixiang&#x27;</span>, <span class="string">&#x27;mysql_&#x27;</span>), (<span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;lianxiang&#x27;</span>, <span class="string">&#x27;_php&#x27;</span>), (<span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;lianyue&#x27;</span>, <span class="string">&#x27;php_&#x27;</span>), (<span class="string">&#x27;27&#x27;</span>, <span class="string">&#x27;houxiaojun&#x27;</span>, <span class="string">&#x27;80%&#x27;</span>), (<span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;suNxiaOhua&#x27;</span>, <span class="string">&#x27;_phper&#x27;</span>), (<span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;jieXiaoguo&#x27;</span>, <span class="string">&#x27;mysqler_&#x27;</span>), (<span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;sunming&#x27;</span>, <span class="string">&#x27;%66&#x27;</span>), (<span class="string">&#x27;31&#x27;</span>, <span class="string">&#x27;yingzheng&#x27;</span>, <span class="string">&#x27;%888&#x27;</span>), (<span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;piaojinhui&#x27;</span>, <span class="string">&#x27;900%&#x27;</span>), (<span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;jinzhengnan&#x27;</span>, <span class="string">&#x27;800%&#x27;</span>), (<span class="string">&#x27;34&#x27;</span>, <span class="string">&#x27;quanzhilong&#x27;</span>, <span class="string">&#x27;%666&#x27;</span>), (<span class="string">&#x27;35&#x27;</span>, <span class="string">&#x27;zhangquan&#x27;</span>, <span class="string">&#x27;__php&#x27;</span>), (<span class="string">&#x27;36&#x27;</span>, <span class="string">&#x27;zhangyu&#x27;</span>, <span class="string">&#x27;__mysql&#x27;</span>), (<span class="string">&#x27;37&#x27;</span>, <span class="string">&#x27;liyifeng&#x27;</span>, <span class="string">&#x27;mysqler__&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h1 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h1><blockquote>
<p><code>SQL</code> 的模式缺省是忽略大小写的。</p>
</blockquote>
<h2 id="SQL-匹配模式"><a href="#SQL-匹配模式" class="headerlink" title="SQL 匹配模式"></a>SQL 匹配模式</h2><ul>
<li><code>%</code>: 表示任意个（包括 <code>0</code> 个）或多个字符，可匹配任意类型和长度的字符</li>
<li><code>_</code>: 表示任意单个字符，匹配单个任意字符，它常用来限制表达式的字符长度语句</li>
</ul>
<h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询以 <span class="number">90</span><span class="operator">%</span> 结尾的数据</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`val` <span class="keyword">LIKE</span> <span class="string">&#x27;%90/%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询以 <span class="number">80</span> 开头匹配任意字符串并以 <span class="operator">%</span> 结尾的数据</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`val` <span class="keyword">LIKE</span> <span class="string">&#x27;80%/%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询以 <span class="operator">%</span><span class="number">88</span> 开头的数据</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`val` <span class="keyword">LIKE</span> <span class="string">&#x27;/%88%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询以 _php 开头的数据</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`val` <span class="keyword">LIKE</span> <span class="string">&#x27;/_php%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;/&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="正则匹配模式"><a href="#正则匹配模式" class="headerlink" title="正则匹配模式"></a>正则匹配模式</h2><ul>
<li><code>.</code>: 匹配任意单个字符</li>
<li><code>?</code>: 匹配前面的子表达式 <code>0</code> 次或 <code>1</code> 次</li>
<li><code>+</code>: 匹配前面的子表达式 <code>1</code> 次或多次</li>
<li><code>*</code>: 匹配前面的子表达式 <code>0</code> 次或多次</li>
<li><code>^</code>: 表示匹配开始位置</li>
<li><code>$</code>: 表示匹配结束位置</li>
<li><code>[]</code>: 表示一个集合</li>
<li><code>&#123;&#125;</code>: 表示重复的次数</li>
</ul>
<h1 id="查询实例"><a href="#查询实例" class="headerlink" title="查询实例"></a>查询实例</h1><h2 id="查询以-ma-字符串开头的数据"><a href="#查询以-ma-字符串开头的数据" class="headerlink" title="查询以 ma 字符串开头的数据"></a>查询以 ma 字符串开头的数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` <span class="keyword">LIKE</span> <span class="string">&#x27;ma%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` REGEXP <span class="string">&#x27;^ma&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="查询以-ming-字符串结尾的数据"><a href="#查询以-ming-字符串结尾的数据" class="headerlink" title="查询以 ming 字符串结尾的数据"></a>查询以 ming 字符串结尾的数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` <span class="keyword">LIKE</span> <span class="string">&#x27;%ming&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` REGEXP <span class="string">&#x27;ming$&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="查询包含-xiao-字符串的数据"><a href="#查询包含-xiao-字符串的数据" class="headerlink" title="查询包含 xiao 字符串的数据"></a>查询包含 xiao 字符串的数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` <span class="keyword">LIKE</span> <span class="string">&#x27;%xiao%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` REGEXP <span class="string">&#x27;xiao&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="查询长度为-10-中间包含-xiao-字符串的数据"><a href="#查询长度为-10-中间包含-xiao-字符串的数据" class="headerlink" title="查询长度为 10, 中间包含 xiao 字符串的数据"></a>查询长度为 10, 中间包含 xiao 字符串的数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` <span class="keyword">LIKE</span> <span class="string">&#x27;___xiao___&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="literal">TRUE</span></span><br><span class="line">  <span class="keyword">AND</span> a.`key` REGEXP <span class="string">&#x27;^[a-zA-Z]&#123;3&#125;xiao[a-zA-Z]&#123;3&#125;$&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 最值查询</title>
    <url>/2018/01/18/mysql-max-min-query/</url>
    <content><![CDATA[<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><blockquote>
<p>查询前请先导入实例数据，此实例数据由 <code>Navicat</code> 客户端导出。</p>
</blockquote>
<span id="more"></span>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50714</span></span><br><span class="line"><span class="comment"> Source Host           : 127.0.0.1</span></span><br><span class="line"><span class="comment"> Source Database       : test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50714</span></span><br><span class="line"><span class="comment"> File Encoding         : utf-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 03/07/2017 21:29:35 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `test`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `test`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键 Id&#x27;</span>,</span><br><span class="line">  `key` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;键名&#x27;</span>,</span><br><span class="line">  `val` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;键值&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">33</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;测试表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `test`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;10&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;11&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;12&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;13&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;14&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;15&#x27;</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;16&#x27;</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;17&#x27;</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;18&#x27;</span>), (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;19&#x27;</span>), (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;20&#x27;</span>), (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;21&#x27;</span>), (<span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;22&#x27;</span>), (<span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;23&#x27;</span>), (<span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;24&#x27;</span>), (<span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;25&#x27;</span>), (<span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;26&#x27;</span>), (<span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;27&#x27;</span>), (<span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;28&#x27;</span>), (<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;29&#x27;</span>), (<span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;30&#x27;</span>), (<span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;31&#x27;</span>), (<span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;32&#x27;</span>), (<span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;33&#x27;</span>), (<span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;34&#x27;</span>), (<span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;35&#x27;</span>), (<span class="string">&#x27;27&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;40&#x27;</span>), (<span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;41&#x27;</span>), (<span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;42&#x27;</span>), (<span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;43&#x27;</span>), (<span class="string">&#x27;31&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;44&#x27;</span>), (<span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;45&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h1 id="按-key-分组取-val-最大的值所在行的记录"><a href="#按-key-分组取-val-最大的值所在行的记录" class="headerlink" title="按 key 分组取 val 最大的值所在行的记录"></a>按 key 分组取 val 最大的值所在行的记录</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  <span class="built_in">MAX</span>(a.`val`) <span class="keyword">AS</span> val</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  a.`val` <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(b.`val`)</span><br><span class="line">             <span class="keyword">FROM</span> test.test <span class="keyword">AS</span> b</span><br><span class="line">             <span class="keyword">WHERE</span> b.`key` <span class="operator">=</span> a.`key`)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">             <span class="keyword">FROM</span> test.test <span class="keyword">AS</span> b</span><br><span class="line">             <span class="keyword">WHERE</span> b.`key` <span class="operator">=</span> a.`key` <span class="keyword">AND</span> b.`val` <span class="operator">&gt;</span> a.`val`);</span><br></pre></td></tr></table></figure>
<h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a,</span><br><span class="line">  (<span class="keyword">SELECT</span></span><br><span class="line">     `key`,</span><br><span class="line">     <span class="built_in">MAX</span>(`val`) <span class="keyword">AS</span> val</span><br><span class="line">   <span class="keyword">FROM</span> test.test</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> `key`) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  a.`key` <span class="operator">=</span> b.`key`</span><br><span class="line">  <span class="keyword">AND</span> a.`val` <span class="operator">=</span> b.`val`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">                `key`,</span><br><span class="line">                <span class="built_in">MAX</span>(`val`) <span class="keyword">AS</span> `val`</span><br><span class="line">              <span class="keyword">FROM</span> test.test</span><br><span class="line">              <span class="keyword">GROUP</span> <span class="keyword">BY</span> `key`) <span class="keyword">AS</span> b <span class="keyword">ON</span> b.`key` <span class="operator">=</span> a.`key`</span><br><span class="line">                                      <span class="keyword">AND</span> b.`val` <span class="operator">=</span> a.`val`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法六"><a href="#方法六" class="headerlink" title="方法六"></a>方法六</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">       <span class="keyword">FROM</span> test.test <span class="keyword">AS</span> b</span><br><span class="line">       <span class="keyword">WHERE</span> b.`key` <span class="operator">=</span> a.`key` <span class="keyword">AND</span> b.`val` <span class="operator">&gt;</span> a.`val`)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h1 id="按-key-分组取-val-最小的值所在行的数据"><a href="#按-key-分组取-val-最小的值所在行的数据" class="headerlink" title="按 key 分组取 val 最小的值所在行的数据"></a>按 key 分组取 val 最小的值所在行的数据</h1><h2 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  <span class="built_in">MIN</span>(a.`val`) <span class="keyword">AS</span> val</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  a.`val` <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(b.`val`)</span><br><span class="line">             <span class="keyword">FROM</span> test.test <span class="keyword">AS</span> b</span><br><span class="line">             <span class="keyword">WHERE</span> b.`key` <span class="operator">=</span> a.`key`)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法三-1"><a href="#方法三-1" class="headerlink" title="方法三"></a>方法三</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">             <span class="keyword">FROM</span> test.test <span class="keyword">AS</span> b</span><br><span class="line">             <span class="keyword">WHERE</span> b.`key` <span class="operator">=</span> a.`key` <span class="keyword">AND</span> b.`val` <span class="operator">&lt;</span> a.`val`);</span><br></pre></td></tr></table></figure>
<h2 id="方法四-1"><a href="#方法四-1" class="headerlink" title="方法四"></a>方法四</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a,</span><br><span class="line">  (<span class="keyword">SELECT</span></span><br><span class="line">     `key`,</span><br><span class="line">     <span class="built_in">MIN</span>(`val`) <span class="keyword">AS</span> val</span><br><span class="line">   <span class="keyword">FROM</span> test.test</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> `key`) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  a.`key` <span class="operator">=</span> b.`key`</span><br><span class="line">  <span class="keyword">AND</span> a.`val` <span class="operator">=</span> b.`val`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法五-1"><a href="#方法五-1" class="headerlink" title="方法五"></a>方法五</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">                `key`,</span><br><span class="line">                <span class="built_in">MIN</span>(`val`) <span class="keyword">AS</span> val</span><br><span class="line">              <span class="keyword">FROM</span> test.test</span><br><span class="line">              <span class="keyword">GROUP</span> <span class="keyword">BY</span> `key`) <span class="keyword">AS</span> b <span class="keyword">ON</span> b.`key` <span class="operator">=</span> a.`key`</span><br><span class="line">                                      <span class="keyword">AND</span> b.`val` <span class="operator">=</span> a.`val`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法六-1"><a href="#方法六-1" class="headerlink" title="方法六"></a>方法六</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">       <span class="keyword">FROM</span> test.test <span class="keyword">AS</span> b</span><br><span class="line">       <span class="keyword">WHERE</span> b.`key` <span class="operator">=</span> a.`key` <span class="keyword">AND</span> b.`val` <span class="operator">&lt;</span> a.`val`)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h1 id="按-key-分组取最大的两个-val-所在行的数据"><a href="#按-key-分组取最大的两个-val-所在行的数据" class="headerlink" title="按 key 分组取最大的两个 val 所在行的数据"></a>按 key 分组取最大的两个 val 所在行的数据</h1><h2 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="number">2</span> <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">       <span class="keyword">FROM</span> test.test <span class="keyword">AS</span> b</span><br><span class="line">       <span class="keyword">WHERE</span> b.`key` <span class="operator">=</span> a.`key` <span class="keyword">AND</span> b.`val` <span class="operator">&gt;</span> a.`val`)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法二-2"><a href="#方法二-2" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">EXISTS</span>(</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        test.test <span class="keyword">AS</span> b</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        b.`key` <span class="operator">=</span> a.`key`</span><br><span class="line">        <span class="keyword">AND</span> b.`val` <span class="operator">&gt;</span> a.`val`</span><br><span class="line">      <span class="keyword">HAVING</span></span><br><span class="line">        <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&lt;</span> <span class="number">2</span></span><br><span class="line">  )</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h1 id="按-key-分组取最小的两个-val-所在行的数据"><a href="#按-key-分组取最小的两个-val-所在行的数据" class="headerlink" title="按 key 分组取最小的两个 val 所在行的数据"></a>按 key 分组取最小的两个 val 所在行的数据</h1><h2 id="方法一-3"><a href="#方法一-3" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="number">2</span> <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      test.test <span class="keyword">AS</span> b</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">      b.`key` <span class="operator">=</span> a.`key`</span><br><span class="line">      <span class="keyword">AND</span> b.`val` <span class="operator">&lt;</span> a.`val`</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
<h2 id="方法二-3"><a href="#方法二-3" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  a.`id`,</span><br><span class="line">  a.`key`,</span><br><span class="line">  a.`val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  test.test <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">EXISTS</span>(</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        test.test <span class="keyword">AS</span> b</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        b.`key` <span class="operator">=</span> a.`key`</span><br><span class="line">        <span class="keyword">AND</span> b.`val` <span class="operator">&lt;</span> a.`val`</span><br><span class="line">      <span class="keyword">HAVING</span></span><br><span class="line">        <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&lt;</span> <span class="number">2</span></span><br><span class="line">  )</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  a.`key`;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 忘记 root 密码后进行重置</title>
    <url>/2018/04/15/mysql-reset-root-password/</url>
    <content><![CDATA[<p>前段时间在 <code>Vagrant</code> 中安装了 <code>CentOS 7.2</code> 系统，然后部署了一套 <code>lnmp</code> 环境，数据库安装了 <code>MariaDB 10.3.4</code>，安装完成后，随机生成了一个 <code>MariaDB</code> 密码，后来就把这事给忘了。今天闲来无事，准备导入一些数据时悲剧了。密码早就忘的一干二净了，唉，郁闷呀，于是就想起来重置一下密码。</p>
<h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 停止 MariaDB 服务</span><br><span class="line">$ sudo systemctl stop mariadb.service</span><br></pre></td></tr></table></figure>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>在 <code>MariaDB</code> 的配置文件中 <code>[mysqld]</code> 后面添加如下两项配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/my.cnf.d/server.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">skip-grant-tables</span><br><span class="line">skip-networking</span><br></pre></td></tr></table></figure>
<div class="note info">
            <ul><li><code>skip-grant-tables</code>: 此选项允许任何人不需密码登陆 <code>MariaDB</code> 数据库并且拥有所有特权，但是它禁止了账户管理命令如：<code>ALTER USER</code>，<code>SET PASSWORD</code></li><li><code>skip-networking</code>: 此选项不允许远程客户端连接数据库</li></ul>
          </div>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 启动 MariaDB 服务</span><br><span class="line">$ sudo systemctl start mariadb.service</span><br></pre></td></tr></table></figure>
<h2 id="使用客户端连接数据库服务器"><a href="#使用客户端连接数据库服务器" class="headerlink" title="使用客户端连接数据库服务器"></a>使用客户端连接数据库服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 8</span><br><span class="line">Server version: 10.3.4-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; USE mysql;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; UPDATE user SET password=PASSWORD(<span class="string">&#x27;your password&#x27;</span>) \</span><br><span class="line">    -&gt; WHERE User=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line">Rows matched: 3  Changed: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; <span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>
<h2 id="移除配置并重启服务"><a href="#移除配置并重启服务" class="headerlink" title="移除配置并重启服务"></a>移除配置并重启服务</h2><p>将刚才添加的配置从配置文件移除掉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart mariadb.service</span><br></pre></td></tr></table></figure>
<h2 id="测试登录"><a href="#测试登录" class="headerlink" title="测试登录"></a>测试登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 10</span><br><span class="line">Server version: 10.3.4-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html">How to Reset the Root Password</a></li>
<li><a href="https://mariadb.com/kb/zh-cn/set-password/">SET PASSWORD</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 存储引擎</title>
    <url>/2018/01/20/mysql-storage-engine/</url>
    <content><![CDATA[<h1 id="MySQL-的存储引擎"><a href="#MySQL-的存储引擎" class="headerlink" title="MySQL 的存储引擎"></a>MySQL 的存储引擎</h1><ul>
<li><code>Archive</code>：用于数据存档的引擎（数据行被插入后就不能再修改了）。非常适合存储大量的独立的，作为历史记录的数据。因为它们不经常被读取。<code>Archive</code> 拥有高效的插入速度，但其对查询的支持相对较差</li>
<li><code>BDB</code>：源自 <code>Berkeley DB</code>，事务型数据库的另一种选择，支持 <code>COMMIT</code> 和 <code>ROLLBACK</code> 等其他事务特性</li>
<li><code>BlackHole</code>：黑洞引擎(写操作是删除数据，读操作是返回空白记录)。由于写入的任何数据都会消失。一般用于记录 <code>binlog</code> 做复制的中继</li>
<li><code>CSV</code>：逻辑上由逗号分割数据的存储引擎。它会在数据库子目录里为每个数据表创建一个 <code>.CSV</code> 文件。这是一种普通文本文件，每个数据行占用一个文本行。<code>CSV</code> 存储引擎不支持索引</li>
<li><code>Example</code>：实例(存根)存储引擎。官方实例</li>
<li><code>Falcon</code>：用来进行事务处理的存储引擎</li>
<li><code>Federated</code>：用来访问远程数据表的存储引擎。将不同的 <code>MySQL</code> 服务器联合起来，逻辑上组成一个完整的数据库。非常适合分布式应用</li>
<li><code>InnoDB</code>：具备外键支持功能的事务处理引擎。<code>MySQL-5.5</code> 版本后 <code>MySQL</code> 的默认数据库引擎，是专为事务设计的存储引擎，支持 <code>ACID</code> 事务，支持外键和行级锁定，拥有高并发处理能力。但是，<code>InnoDB</code> 在创建索引和加载数据时，比 <code>MyISAM</code> 慢</li>
<li><code>Memory</code>：内存引擎。所有数据置于内存，表结构不是存储在内存中的存储引擎，查询时不需要执行磁盘 <code>I/O</code> 操作，所以要比 <code>MyISAM</code> 和 <code>InnoDB</code> 快很多倍。但是会占用和数据量成正比的内存空间。并且其内容会在 <code>MySQL</code> 重新启动时丢失，表结构不会丢失</li>
<li><code>Merge/MRG_MYISAM</code>：管理由多个 <code>MyISAM</code> 数据表构成的数据表集合。将一定数量的 <code>MyISAM</code> 表联合而成一个整体，在超大规模数据存储时很有用</li>
<li><code>MyISAM</code>：不支持事务和行级锁，所以 <code>MyISAM</code> 引擎速度很快，性能优秀。<code>MyISAM</code> 可以对整张表加锁，支持并发插入，支持全文索引</li>
<li><code>NDB/Cluster</code>：<code>MySQL Cluster</code> 专用存储引擎。高冗余的存储引擎，用多台数据机器联合提供服务以提高整体性能和安全性。适合数据量大，安全和性能要求高的应用</li>
<li><code>PERFORMANCE_SCHEMA</code>：Performance Schema</li>
</ul>
<h1 id="查看数据库支持的引擎"><a href="#查看数据库支持的引擎" class="headerlink" title="查看数据库支持的引擎"></a>查看数据库支持的引擎</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br></pre></td></tr></table></figure>
<h1 id="MyISAM-和-InnoDB"><a href="#MyISAM-和-InnoDB" class="headerlink" title="MyISAM 和 InnoDB"></a>MyISAM 和 InnoDB</h1><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left"><code>MyISAM</code></th>
<th style="text-align:left"><code>InnoDB</code></th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">使用场景</td>
<td style="text-align:left">为速度而设计，和 <code>SELECT</code> 搭配使用更好</td>
<td style="text-align:left">为高可靠性和高性能而设计，适合处理大量数据</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">表锁类型</td>
<td style="text-align:left">表级锁，特定的操作会将整张表锁起来，上锁期间，表中的数据不能进行其它操作。偏向静态数据，动态数据会影响性能</td>
<td style="text-align:left">行级锁，只对 <code>SELECT，UPDATE，DELETE</code> 操作的特定数据加上行锁，上锁期间，表中的其它数据依然能被操作</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">外键支持</td>
<td style="text-align:left">不支持</td>
<td style="text-align:left">支持，对外键和引用完整性支持，包括递归式删除和更新</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">事务支持</td>
<td style="text-align:left">不支持，没有 <code>COMMIT</code> 和 <code>ROLLBACK</code>，对操作没有回退的余地</td>
<td style="text-align:left">支持，执行 <code>COMMIT</code> 和 <code>ROLLBACK</code> 操作，可以将事务中的数据变化进行回滚，崩溃后的自动恢复</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">集群支持</td>
<td style="text-align:left">不支持</td>
<td style="text-align:left">并不完全支持。可以将表转换为 <code>NDB</code> 存储引擎而用在集群环境中</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">数据操作</td>
<td style="text-align:left">数据压缩，自我复制，查询缓存，数据加密</td>
<td style="text-align:left">数据压缩，自我复制，查询缓存，数据加密</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">全文索引</td>
<td style="text-align:left">支持全文检索，需要通过 <code>FULLTEXT</code> 索引来实现</td>
<td style="text-align:left">不支持 <code>FULLTEXT</code> 类型的全文索引，但是 <code>InnoDB</code> 可以使用 <code>sphinx</code> 插件支持全文索引，并且效果更好</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">存储结构</td>
<td style="text-align:left">每个 <code>MyISAM</code> 在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。<code>.frm</code> 文件存储表定义。数据文件的扩展名为 <code>.MYD - MYData</code>。索引文件的扩展名是 <code>.MYI - MYIndex</code></td>
<td style="text-align:left">所有的表都保存在同一个数据文件中(也可能是多个文件，或者是独立的表空间文件)，<code>InnoDB</code> 表的大小只受限于操作系统文件的大小，一般为 <code>2GB</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">存储空间</td>
<td style="text-align:left">可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)，动态表，压缩表</td>
<td style="text-align:left">需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>AUTO_INCREMENT</code></td>
<td style="text-align:left">可以和其他字段一起建立联合索引。引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增</td>
<td style="text-align:left"><code>InnoDB</code> 中必须包含只有该字段的索引。引擎的自动增长列必须是索引，如果是组合索引也必须是组合索引的第一列</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">表主键</td>
<td style="text-align:left">允许没有任何索引和主键的表存在，索引都是保存行的地址</td>
<td style="text-align:left">如果没有设定主键或者非空唯一索引，就会自动生成一个 <code>6</code> 字节的主键(用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">表的行数</td>
<td style="text-align:left">保存有表的总行数，如果 <code>SELECT COUNT(*) FROM table;</code> 会直接取出出该值</td>
<td style="text-align:left">没有保存表的总行数，如果 <code>SELECT COUNT(*) FROM table;</code> 就会遍历整个表，消耗相当大，但是在加了 <code>wehre</code> 条件后，<code>MyISAM</code> 和 <code>InnoDB</code> 处理的方式都一样</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">其它支持</td>
<td style="text-align:left">支持空间数据类型和 <code>SPATIAL</code> 索引</td>
<td style="text-align:left"><code>InnoDB</code> 存储引擎会把数据表集中存储在一个共享的表空间里</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 字符串连接函数</title>
    <url>/2018/01/20/mysql-string-functions/</url>
    <content><![CDATA[<p>如果结果的长度大于 <code>max_allowed_pa​​cket</code> 系统变量的值，则字符串值函数将返回 <code>NULL</code>。看 <a href="https://dev.mysql.com/doc/refman/5.7/en/server-configuration.html">Configuring the Server</a></p>
<span id="more"></span>
<h1 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h1><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>LEFT()</code></td>
<td>从左边截取指定的字符串</td>
<td></td>
</tr>
<tr>
<td><code>MID()</code></td>
<td>从指定的位置截取字符串</td>
<td></td>
</tr>
<tr>
<td><code>RIGHT()</code></td>
<td>从右边截取指定的字符串</td>
<td></td>
</tr>
<tr>
<td><code>TRIM()</code></td>
<td>移除字符串两端的空格</td>
<td></td>
</tr>
<tr>
<td><code>SUBSTR()</code></td>
<td>截取指定的字符串</td>
<td></td>
</tr>
<tr>
<td><code>SUBSTRING()</code></td>
<td>截取指定的字符串</td>
<td></td>
</tr>
<tr>
<td><code>SUBSTRING_INDEX()</code></td>
<td>截取指定的定界符出现的次数之前的字符串</td>
</tr>
</tbody>
</table>
<h1 id="字符串函数用法"><a href="#字符串函数用法" class="headerlink" title="字符串函数用法"></a>字符串函数用法</h1><h2 id="LEFT-和-RIGHT-函数"><a href="#LEFT-和-RIGHT-函数" class="headerlink" title="LEFT 和 RIGHT 函数"></a>LEFT 和 RIGHT 函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;hello world, hello mysql&#x27;</span>, <span class="number">5</span>) <span class="keyword">AS</span> url;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello world, hello mysql&#x27;</span>, <span class="number">5</span>) <span class="keyword">AS</span> url;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">hello</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
<h2 id="TRIM-函数"><a href="#TRIM-函数" class="headerlink" title="TRIM 函数"></a>TRIM 函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;  http://www.mysql.com  &#x27;</span>) <span class="keyword">AS</span> url;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="keyword">LEADING</span> <span class="string">&#x27;xyz&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;xyzxyzxyzhello world&#x27;</span>) <span class="keyword">AS</span> url;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="keyword">BOTH</span> <span class="string">&#x27;z&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;zzzzzhello worldzzzzz&#x27;</span>) <span class="keyword">AS</span> url;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="keyword">TRAILING</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;hello worldtest&#x27;</span>) <span class="keyword">AS</span> url;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span>www.mysql.com</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h2 id="SUBSTR-和-SUBSTRING-和-MID-函数"><a href="#SUBSTR-和-SUBSTRING-和-MID-函数" class="headerlink" title="SUBSTR 和 SUBSTRING 和 MID 函数"></a>SUBSTR 和 SUBSTRING 和 MID 函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@url</span> <span class="operator">=</span> <span class="string">&#x27;http://www.mysql.com/&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> MID(<span class="variable">@url</span>, <span class="number">8</span>, <span class="number">13</span>) <span class="keyword">AS</span> url;</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="variable">@url</span>, <span class="number">8</span>, <span class="number">13</span>) <span class="keyword">AS</span> url;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="variable">@url</span> , <span class="number">-14</span>, <span class="number">13</span>) <span class="keyword">AS</span> url;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">www.mysql.com</span><br><span class="line">www.mysql.com</span><br><span class="line">www.mysql.com</span><br></pre></td></tr></table></figure>
<h2 id="SUBSTRING-INDEX-函数"><a href="#SUBSTRING-INDEX-函数" class="headerlink" title="SUBSTRING_INDEX 函数"></a>SUBSTRING_INDEX 函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;www.mysql.com.cn&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="number">3</span>) <span class="keyword">AS</span> url;</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;hello world, hello mysql&#x27;</span>, <span class="string">&#x27;mysql &#x27;</span>, <span class="number">1</span>) <span class="keyword">AS</span> url;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">www.mysql.com</span><br><span class="line">hello world, hello mysql</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/string-functions.html">String Functions</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 字符串连接函数</title>
    <url>/2018/01/20/mysql-string-concat-functions/</url>
    <content><![CDATA[<p><code>MySQL</code> 的字符串连接函数 <code>CONCAT</code>，<code>CONCAT_WS</code>，<code>GROUP_CONTACT</code>。</p>
<span id="more"></span>
<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50718</span></span><br><span class="line"><span class="comment"> Source Host           : 127.0.0.1</span></span><br><span class="line"><span class="comment"> Source Database       : test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50718</span></span><br><span class="line"><span class="comment"> File Encoding         : utf-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 07/14/2017 23:53:40 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `demo`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `demo`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `demo` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键 ID&#x27;</span>,</span><br><span class="line">  `key` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `val` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户姓&#x27;</span>,</span><br><span class="line">  `createdAt` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;创建时间戳&#x27;</span>,</span><br><span class="line">  `updatedAt` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;更新时间戳&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">26</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `demo`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `demo` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;31&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;41&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;42&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;43&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;51&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;52&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;53&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;54&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;61&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;62&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;63&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;64&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;65&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h1 id="GROUP-CONCAT-列转行"><a href="#GROUP-CONCAT-列转行" class="headerlink" title="GROUP_CONCAT() - 列转行"></a>GROUP_CONCAT() - 列转行</h1><h2 id="将-key-和-val-用空格连接，用冒号加空格连成一行，按-id-降序，并按-key-进行分组"><a href="#将-key-和-val-用空格连接，用冒号加空格连成一行，按-id-降序，并按-key-进行分组" class="headerlink" title="将 key 和 val 用空格连接，用冒号加空格连成一行，按 id 降序，并按 key 进行分组"></a>将 key 和 val 用空格连接，用冒号加空格连成一行，按 id 降序，并按 key 进行分组</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(</span><br><span class="line">           CONCAT_WS(<span class="string">&#x27;: &#x27;</span>, `key`, `val`)</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">           `id` <span class="keyword">DESC</span> SEPARATOR <span class="string">&#x27;, &#x27;</span></span><br><span class="line">       ) <span class="keyword">AS</span> info</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  demo</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  `key`;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">A: <span class="number">10</span></span><br><span class="line">B: <span class="number">21</span>, B: <span class="number">20</span></span><br><span class="line">C: <span class="number">32</span>, C: <span class="number">31</span>, C: <span class="number">30</span></span><br><span class="line">D: <span class="number">43</span>, D: <span class="number">42</span>, D: <span class="number">41</span>, D: <span class="number">40</span></span><br><span class="line">E: <span class="number">54</span>, E: <span class="number">53</span>, E: <span class="number">52</span>, E: <span class="number">51</span>, E: <span class="number">50</span></span><br><span class="line">F: <span class="number">65</span>, F: <span class="number">64</span>, F: <span class="number">63</span>, F: <span class="number">62</span>, F: <span class="number">61</span>, F: <span class="number">60</span></span><br></pre></td></tr></table></figure>
<h2 id="将所有的-val-去重后连成一行，并按-key-分组"><a href="#将所有的-val-去重后连成一行，并按-key-分组" class="headerlink" title="将所有的 val 去重后连成一行，并按 key 分组"></a>将所有的 val 去重后连成一行，并按 key 分组</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(<span class="keyword">DISTINCT</span> `val`) <span class="keyword">AS</span> `vals`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  demo</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  `key`;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span>,<span class="number">21</span></span><br><span class="line"><span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span></span><br><span class="line"><span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span></span><br><span class="line"><span class="number">50</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">54</span></span><br><span class="line"><span class="number">60</span>,<span class="number">61</span>,<span class="number">62</span>,<span class="number">63</span>,<span class="number">64</span>,<span class="number">65</span></span><br></pre></td></tr></table></figure>
<h1 id="CONCAT-连接字符串"><a href="#CONCAT-连接字符串" class="headerlink" title="CONCAT() - 连接字符串"></a>CONCAT() - 连接字符串</h1><blockquote>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_concat">CONCAT(str1,str2,…)</a></li>
</ul>
</blockquote>
<h2 id="CONCAT-函数在连接字符串的时候，只要其中一个是-NULL，那么将返回-NULL"><a href="#CONCAT-函数在连接字符串的时候，只要其中一个是-NULL，那么将返回-NULL" class="headerlink" title="CONCAT() 函数在连接字符串的时候，只要其中一个是 NULL，那么将返回 NULL"></a>CONCAT() 函数在连接字符串的时候，只要其中一个是 NULL，那么将返回 NULL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="keyword">NULL</span>) <span class="keyword">AS</span> string;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line"><span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<h1 id="CONCAT-WS-按指定符号连接字符串"><a href="#CONCAT-WS-按指定符号连接字符串" class="headerlink" title="CONCAT_WS() - 按指定符号连接字符串"></a>CONCAT_WS() - 按指定符号连接字符串</h1><blockquote>
<ul>
<li>即 <code>CONCAT With Separator</code>，是 <code>CONCAT()</code> 的特殊形式</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_concat-ws">CONCAT_WS(separator,str1,str2,…)</a></li>
</ul>
</blockquote>
<h2 id="和-CONCAT-函数不同的是，CONCAT-WS-函数在执行的时候，不会因为-NULL-值而返回-NULL"><a href="#和-CONCAT-函数不同的是，CONCAT-WS-函数在执行的时候，不会因为-NULL-值而返回-NULL" class="headerlink" title="和 CONCAT() 函数不同的是，CONCAT_WS() 函数在执行的时候，不会因为 NULL 值而返回 NULL"></a>和 CONCAT() 函数不同的是，CONCAT_WS() 函数在执行的时候，不会因为 NULL 值而返回 NULL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT_WS(</span><br><span class="line">           <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">           <span class="keyword">NULL</span>,</span><br><span class="line">           <span class="literal">FALSE</span>,</span><br><span class="line">           <span class="literal">TRUE</span></span><br><span class="line">       ) <span class="keyword">AS</span> string;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">abc01</span><br></pre></td></tr></table></figure>
<h2 id="将每个-val-用-连接起来，并按-key-分组"><a href="#将每个-val-用-连接起来，并按-key-分组" class="headerlink" title="将每个 val 用 | 连接起来，并按 key 分组"></a>将每个 val 用 | 连接起来，并按 key 分组</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT_WS(<span class="string">&#x27;|&#x27;</span>, `key`, `val`) <span class="keyword">AS</span> info</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  demo;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">A<span class="operator">|</span><span class="number">10</span></span><br><span class="line">B<span class="operator">|</span><span class="number">20</span></span><br><span class="line">B<span class="operator">|</span><span class="number">21</span></span><br><span class="line">C<span class="operator">|</span><span class="number">30</span></span><br><span class="line">C<span class="operator">|</span><span class="number">31</span></span><br><span class="line">C<span class="operator">|</span><span class="number">32</span></span><br><span class="line">D<span class="operator">|</span><span class="number">40</span></span><br><span class="line">D<span class="operator">|</span><span class="number">41</span></span><br><span class="line">D<span class="operator">|</span><span class="number">42</span></span><br><span class="line">D<span class="operator">|</span><span class="number">43</span></span><br><span class="line">E<span class="operator">|</span><span class="number">50</span></span><br><span class="line">E<span class="operator">|</span><span class="number">51</span></span><br><span class="line">E<span class="operator">|</span><span class="number">52</span></span><br><span class="line">E<span class="operator">|</span><span class="number">53</span></span><br><span class="line">E<span class="operator">|</span><span class="number">54</span></span><br><span class="line">F<span class="operator">|</span><span class="number">60</span></span><br><span class="line">F<span class="operator">|</span><span class="number">61</span></span><br><span class="line">F<span class="operator">|</span><span class="number">62</span></span><br><span class="line">F<span class="operator">|</span><span class="number">63</span></span><br><span class="line">F<span class="operator">|</span><span class="number">64</span></span><br><span class="line">F<span class="operator">|</span><span class="number">65</span></span><br></pre></td></tr></table></figure>
<h2 id="按-key-分组，将-val-的值按逗号空格分隔后连接到-key-字段中"><a href="#按-key-分组，将-val-的值按逗号空格分隔后连接到-key-字段中" class="headerlink" title="按 key 分组，将 val 的值按逗号空格分隔后连接到 key 字段中"></a>按 key 分组，将 val 的值按逗号空格分隔后连接到 key 字段中</h2><p>如: <code>F: 60, 61, 62, 63, 64, 65</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(`key` SEPARATOR <span class="string">&#x27;,&#x27;</span>) <span class="keyword">AS</span> `val`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span> CONCAT(</span><br><span class="line">               `key`,</span><br><span class="line">               <span class="string">&#x27;: &#x27;</span>,</span><br><span class="line">               GROUP_CONCAT(`val` SEPARATOR <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">           ) <span class="keyword">AS</span> `key`</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      demo</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">      `key`</span><br><span class="line">  ) custom</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  `key`;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">A: <span class="number">10</span></span><br><span class="line">B: <span class="number">20</span>, <span class="number">21</span></span><br><span class="line">C: <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span></span><br><span class="line">D: <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span></span><br><span class="line">E: <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span></span><br><span class="line">F: <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws">Difference between GROUP_CONCAT() and CONCAT_WS()</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 499 状态码</title>
    <url>/2019/11/15/nginx-499-faq/</url>
    <content><![CDATA[<p><img src="/images/2019/201911151505.jpg" alt="201911151505.jpg"></p>
<p>🧨 第一次听说 499 状态码是去新浪阅读的一次面试，后来在参加 PHP 开发者年会时，王晶老师现场做了一次提问分享，再后来我就记不清了，只有它认识我，我不认识它。有些问题因为自己偷懒而一知半解，直到再次被虐。</p>
<span id="more"></span>
<h1 id="什么是-Nginx-499-错误"><a href="#什么是-Nginx-499-错误" class="headerlink" title="什么是 Nginx 499 错误"></a>什么是 Nginx 499 错误</h1><p><a href="http://nginx.org/">Nginx</a> 源码中对 <a href="https://github.com/nginx/nginx/blob/release-1.17.5/src/http/ngx_http_request.h#L127~L133"><code>499</code></a> 状态码的定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * HTTP does not define the code for the case when a client closed</span></span><br><span class="line"><span class="comment"> * the connection while we are processing its request so we introduce</span></span><br><span class="line"><span class="comment"> * own code to log such situation when a client has closed the connection</span></span><br><span class="line"><span class="comment"> * before we even try to send the HTTP header to it</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_HTTP_CLIENT_CLOSED_REQUEST     499</span></span><br></pre></td></tr></table></figure>
<p>翻译成人话就是：</p>
<p>当一个客户端关闭时，HTTP 不为这种情形定义代码。同时我们处理它的请求时，我们引入了当一个客户端在我们尝试向其发送 HTTP 头之前关闭连接时，使用自己的代码（也就是 <a href="https://httpstatuses.com/499"><code>499</code></a> 状态码）来记录这种情况。</p>
<p>进一步理解就是：我们特么的也不知道这种情况该怎样弄，于是乎我们就决定定义一种状态码来记录一下，至于这种情况怎么处理，你看着办吧！</p>
<p>总结一下：</p>
<ul>
<li><code>499</code> 状态码不是 <a href="https://httpstatuses.com/">HTTP 的标准代码</a></li>
<li><code>499</code> 状态码是 Nginx 自己定义，用来 <strong>记录</strong>（你没看错，就是记录一下） 服务端向客户端发送 HTTP 请求头之前，客户端已经关闭连接的一种情况</li>
<li>最常见的场景就是 <code>timeout</code> 设置不合理，Nginx 把请求转发上游服务器，上游服务器慢吞吞的处理，客户端等不及了主动断开链接，Nginx 就负责记录了 <code>499</code></li>
</ul>
<h1 id="什么情况-Nginx-记录-499-错误日志"><a href="#什么情况-Nginx-记录-499-错误日志" class="headerlink" title="什么情况 Nginx 记录 499 错误日志"></a>什么情况 Nginx 记录 499 错误日志</h1><blockquote>
<p>这里我们使用 <a href="https://curl.haxx.se/"><code>curl</code></a> 模拟请求一下，更多 <code>curl</code> 的骚操作请访问 <a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南</a>。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 10); <span class="keyword">do</span> curl -m 2 http://api.example.test; <span class="keyword">done</span></span><br><span class="line">curl: (28) Operation timed out after 2000 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2004 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2004 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2001 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2000 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2003 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2002 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2005 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2000 milliseconds with 0 bytes received</span><br><span class="line">curl: (28) Operation timed out after 2001 milliseconds with 0 bytes received</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/nginx/apiexample.access.log</span><br><span class="line"></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:19 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:22 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:24 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:26 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:28 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:30 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:32 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:34 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:36 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br><span class="line">172.19.0.1 - - [15/Nov/2019:06:32:38 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 499 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.67.0&quot;</span></span><br></pre></td></tr></table></figure>
<p>如上所见，使用 <code>Timeout</code> 很容易模拟出 <code>499</code> 这种情形。</p>
<p>记录 <code>499</code> 的情形：</p>
<ul>
<li>如上所示，数据传输的最大允许时间超时的话，Curl 断开了请求，而 Web 服务器如 Nginx 还在处理的话，则 Nginx 会记录 <code>499</code></li>
<li>如果 Nginx 作为反向代理时，Nginx 将请求分发至对应的处理服务器时，有两对超时参数的设置：<code>proxy_send_timeout</code> 和 <code>proxy_read_timeout</code>、<code>fastcgi_send_timeout</code> 和 <code>fastcgi_read_timeout</code>。两对参数默认的超时时间都是 <code>60s</code>。在 Nginx 出现 <code>499</code> 的情况下，可以结合请求断开前的耗时和这两对设定的时间进行对比，看一下是不是在 <code>proxy_pass</code> 或者 <code>fastcgi_pass</code> 处理时，设置的超时时间短了</li>
<li>如果 PHP 操作超时。打开 <code>php.ini</code> 查看 <code>max_execution_time</code> 和 <code>max_input_time</code> 两个参数。两者分别是 <code>PHP</code> 程序执行的最长时间和表单提交的最长时间</li>
<li>如果两次提交 POST 过快就会出现 <code>499</code> 的情况，Nginx 认为是不安全的连接，主动拒绝了客户端的连接</li>
<li>相关负载均衡配置等</li>
</ul>
<h1 id="如何有效防止-Nginx-记录-499-错误"><a href="#如何有效防止-Nginx-记录-499-错误" class="headerlink" title="如何有效防止 Nginx 记录 499 错误"></a>如何有效防止 Nginx 记录 499 错误</h1><p>综上所述，我们可以得出一个结论，HTTP 请求在指定的时间内没能拿到响应而关闭了连接，就会发生 Nginx 记录 <code>499</code> 错误的情况。这个涉及到两个重要的问题：<strong>时间问题</strong> 和 <strong>性能问题</strong>（性能问题太过宽泛就不提及了），所以解决这个问题也就从这两方面入手。</p>
<p>当然还有配置 <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ignore_client_abort"><code>proxy_ignore_client_abort</code></a> 参数为 <code>on</code> 来解决的（让代理服务端不要主动关闭客户端的连接）。但是这样也有一定的风险，会拖垮服务器。发生这个错误，如果服务器 CPU 和 Memory 不算太高，一般是数据库和程序的问题，数据库处理较慢或者程序线程较低。结合情况调整，比如读写分离或者程序线程数调高。</p>
<p>文档中对 <code>proxy_ignore_client_abort</code> 参数的说明：</p>
<blockquote>
<p>Determines whether the connection with a proxied server should be closed when a client closes the connection without waiting for a response.</p>
</blockquote>
<p>翻译：当一个客户端关闭连接而不等待响应时，确定与代理服务器的连接是否应该关闭。</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 支持 emoji 图标的设置</title>
    <url>/2018/01/21/mysql-support-emoji/</url>
    <content><![CDATA[<h1 id="常用字符集"><a href="#常用字符集" class="headerlink" title="常用字符集"></a>常用字符集</h1><blockquote>
<p><code>Unicode</code>：是字符集，而没有编码方式<br><code>UTF-8</code>：是一种 <code>Unicode</code> 字符集的编码方式，其他还有 <code>UTF-16</code>，<code>UTF-32</code> 等</p>
</blockquote>
<ul>
<li><code>ASCII</code> - <code>American Standard Code for Information Interchange</code>：美国信息交换标准代码，主要用于显示现代英语和其他西欧语言。<strong>单字节</strong>编码，<code>7</code> 位表示一个字符，共 <code>128</code> 个字符</li>
<li><code>GBK</code> - <code>Chinese Internal Code Specification</code>：汉字内码扩展规范。<strong>双字节</strong>编码，共收录了 <code>21003</code> 个汉字，共有 <code>21885</code> 个字符，兼容 <code>GB2312-80</code> 标准</li>
<li><code>UTF-8</code> - <code>8-bit Unicode Transformation Format</code>：针对 <code>Unicode</code> 的可变长度字符编码，又称万国码。<code>UTF-8</code> 用 <code>1</code> 到 <code>6</code> 个字节编码 <code>Unicode</code> 字符，如果 <code>UNICODE</code> 字符由 <code>2</code> 个字节表示，则编码成 <code>UTF-8</code> 很可能需要 <code>3</code> 个字节。而如果 <code>UNICODE</code> 字符由 <code>4</code> 个字节表示，则编码成 <code>UTF-8</code> 可能需要 <code>6</code> 个字节。<code>Unicode</code> 一个中文字符占 <code>2</code> 个字节，而 <code>UTF-8</code> 一个中文字符占 <code>3</code> 个字节</li>
<li><code>utf8mb4</code> - <code>8-bit Unicode Transformation Format</code>：<code>utf8mb4</code> 兼容 <code>utf8</code>，能支持更多的字符集，<code>MySQL</code> 在 <code>5.5.3</code> 之后增加了这个编码。<code>most bytes 4</code> 是专门用来兼容四字节的 <code>Unicode</code>，也就是说能存储四个字节，处理 <code>emoji</code> 表情毫无压力</li>
</ul>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><blockquote>
<p>设置成 <code>utf8mb4</code> 请根据实际情况而定，没有必要全部都设置为 <code>utf8mb4</code>。</p>
</blockquote>
<h2 id="将数据库，数据表，数据表字段设置为-utf8mb4"><a href="#将数据库，数据表，数据表字段设置为-utf8mb4" class="headerlink" title="将数据库，数据表，数据表字段设置为 utf8mb4"></a>将数据库，数据表，数据表字段设置为 <code>utf8mb4</code></h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 更改数据库的编码方式</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE test <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 更改数据表的编码方式</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test.demo <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 更改数据表的字段编码方式</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test.demo</span><br><span class="line">  CHANGE `title` `title` <span class="type">VARCHAR</span>(<span class="number">80</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4</span><br><span class="line"><span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test.demo</span><br><span class="line">  MODIFY `title` <span class="type">VARCHAR</span>(<span class="number">80</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4</span><br><span class="line"><span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="查看设置"><a href="#查看设置" class="headerlink" title="查看设置"></a>查看设置</h2><h3 id="查看数据库设置情况"><a href="#查看数据库设置情况" class="headerlink" title="查看数据库设置情况"></a>查看数据库设置情况</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES</span><br><span class="line"><span class="keyword">WHERE</span> Variable_name <span class="keyword">LIKE</span> <span class="string">&#x27;character\_set\_%&#x27;</span> <span class="keyword">OR</span> Variable_name <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 结果</span><br><span class="line">character_set_client     utf8mb4</span><br><span class="line">character_set_connection utf8mb4</span><br><span class="line">character_set_database	 utf8mb4</span><br><span class="line">character_set_filesystem <span class="type">binary</span></span><br><span class="line">character_set_results	 utf8mb4</span><br><span class="line">character_set_server	 utf8mb4</span><br><span class="line">character_set_system     utf8</span><br><span class="line">collation_connection     utf8mb4_general_ci</span><br><span class="line">collation_database       utf8mb4_general_ci</span><br><span class="line">collation_server         utf8mb4_general_ci</span><br></pre></td></tr></table></figure>
<h3 id="查看数据表设置情况"><a href="#查看数据表设置情况" class="headerlink" title="查看数据表设置情况"></a>查看数据表设置情况</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> test.demo;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://www.zhihu.com/question/23374078">Unicode 和 UTF-8 有何区别</a></li>
<li><a href="http://ourmysql.com/archives/1402">清官谈 mysql 中 utf8 和 utf8mb4 区别</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 冒泡排序</title>
    <url>/2018/04/14/php-bubble-sort/</url>
    <content><![CDATA[<p>冒泡排序是几乎是面试和稍懂点算法以及资深人士的口头禅，身为程序员，你要是不知道这个排序，就会被严重鄙视的。笔者以前也不会这个排序，更不知道这个排序有什么卵用，但听那么多高手和大牛说这些基础很重要，也就硬着头皮啃了，毕竟多学习一丁点东西，总归没什么害处</p>
<span id="more"></span>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>冒泡排序 - <code>Bubble Sort</code>：是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢『浮』到数列的顶端。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数</li>
<li>针对所有的元素重复以上的步骤，除了最后一个</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$count</span> - <span class="variable">$i</span> - <span class="number">1</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$x</span> ^= <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> ^= <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> ^= <span class="variable">$y</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BubbleSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">9</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">656</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">755</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">879</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">3578</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">3812</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">5139</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">6412</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">8804</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">9458</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>标志变量用于记录每趟冒泡排序是否发生数据元素位置交换。如果没有发生交换，说明序列已经有序了，不必继续进行下去了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>);</span><br><span class="line">        <span class="variable">$isSwapped</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span> &amp;&amp; <span class="variable">$isSwapped</span> === <span class="literal">true</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$isSwapped</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$count</span> - <span class="variable">$i</span> - <span class="number">1</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]);</span><br><span class="line">                    <span class="variable">$isSwapped</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BubbleSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">129</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">140</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">141</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">150</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">152</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">159</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">165</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">175</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">191</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">199</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><div class="note success">
            <p>鸡尾酒排序 - <code>Cocktail Sort</code>：也就是定向冒泡排序，鸡尾酒搅拌排序，搅拌排序（也可以视作选择排序的一种变形），涟漪排序，来回排序或快乐小时排序，是冒泡排序的一种变形。此算法与冒泡排序的不同处在于排序时是以双向在序列中进行排序</p>
          </div>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CocktailSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鸡尾酒排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = count(<span class="variable">$array</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$left</span>; <span class="variable">$j</span> &lt; <span class="variable">$right</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$right</span>--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$right</span>; <span class="variable">$j</span> &gt; <span class="variable">$left</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$left</span>++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CocktailSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">4596</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2439</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3177</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3424</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">6605</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">6629</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">7526</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">8666</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">8854</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">9986</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 用户管理</title>
    <url>/2018/01/20/mysql-user-manager/</url>
    <content><![CDATA[<p>在很多时候，我们并不会直接利用 <code>MySQL</code> 的 <code>root</code> 用户进行项目的开发，一般的，我们都会创建一个具有部分权限的用户</p>
<span id="more"></span>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><blockquote>
<ul>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/adding-users.html">Adding User Accounts</a></li>
</ul>
</blockquote>
<h3 id="创建本地用户"><a href="#创建本地用户" class="headerlink" title="创建本地用户"></a>创建本地用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;develop&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="创建远程用户"><a href="#创建远程用户" class="headerlink" title="创建远程用户"></a>创建远程用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 从 <span class="number">192.168</span><span class="number">.10</span><span class="number">.10</span> <span class="operator">/</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.11</span> 登陆的用户</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;develop&#x27;</span>@<span class="string">&#x27;192.168.10.10&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;develop&#x27;</span>@<span class="string">&#x27;192.168.10.11&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 从任意 IP 登陆的用户</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;develop&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 不做指定默认为 <span class="string">&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;develop&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询用户</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">User</span>, Host, HEX(authentication_string) <span class="keyword">FROM</span> mysql.user;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">user</span> <span class="string">&#x27;develop&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>;</span><br><span class="line">或者</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">SET</span> authentication_string <span class="operator">=</span> PASSWORD(<span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>), password_expired <span class="operator">=</span> <span class="string">&#x27;N&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">User</span> <span class="operator">=</span> <span class="string">&#x27;develop&#x27;</span> <span class="keyword">AND</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `<span class="keyword">user</span>` <span class="operator">=</span> <span class="string">&#x27;develop&#x27;</span> <span class="keyword">AND</span> `host` <span class="operator">=</span> <span class="string">&#x27;192.168.10.11&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<h2 id="赋予用户权限"><a href="#赋予用户权限" class="headerlink" title="赋予用户权限"></a>赋予用户权限</h2><blockquote>
<p>其中的 <code>test.*</code> 表示对 <code>test</code> 数据库的所有操作授予提供的权限</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 赋予部分权限</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">DELETE</span>, UPDATE, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">TO</span> develop@<span class="string">&#x27;192.168.10.10&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;]8Mgbs6m&#123;4)z?DYJU8XA&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 赋予所有权限</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;develop&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;develop&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<h2 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查看本地 develop 的权限，没有指定后面的 localhost 则默认为 <span class="string">&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> develop@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查看指定 host 的 develop 的权限</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> develop@<span class="string">&#x27;192.168.10.10&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 撤销 <span class="keyword">INSERT</span> 权限</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">FROM</span> develop@<span class="string">&#x27;192.168.10.10&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 撤销所有权限</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">FROM</span> develop@<span class="string">&#x27;192.168.10.10&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>CakePHP3 应用中实用 Redis 实现 SESSION 共享</title>
    <url>/2018/01/22/php-cakephp-session-sharing/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><blockquote>
<p>负载均衡的场景自行模拟搭建。</p>
</blockquote>
<p>由于负载均衡器会把请求分发到不同的服务器，而 <code>SESSION</code> 是存储在服务器端的，如果用户请求登录访问被分发到 <code>A</code> 服务器，那么用户的 <code>SESSION</code> 信息就会被存储到 <code>A</code> 服务器，后续的某个请求可能会分发到 <code>B</code> 或其它服务器，这时 <code>B</code> 或其它服务器就会获取不到之前的用户 <code>SESSION</code> 信息，为了应对这种情况就需要做 <code>SESSION</code> 共享。</p>
<h2 id="以下是-PHP-中-默认的-SESSION-相关的所有配置"><a href="#以下是-PHP-中-默认的-SESSION-相关的所有配置" class="headerlink" title="以下是 PHP 中 默认的 SESSION 相关的所有配置"></a>以下是 PHP 中 默认的 SESSION 相关的所有配置</h2><ul>
<li><code>session.save_handler</code>: <code>SESSION</code> 的存储处理器，默认为文件存储方式</li>
<li><code>session.save_path</code>: <code>SESSION</code> 的存储路径，默认为 <code>/tmp</code></li>
<li><code>session.name = PHPSESSID</code>: <code>SESSION</code> 的名称，默认为 <code>PHPSESSID</code></li>
<li><code>session.cookie_path</code>: <code>SESSION</code> 依附的 <code>COOKIE</code> 的名称路径，默认为当前域名</li>
<li><code>session.cookie_domain</code>: <code>SESSION</code> 依附的 <code>COOKIE</code> 的有效域名，默认为 <code>/</code></li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Session]</span></span><br><span class="line"><span class="comment">; Handler used to store/retrieve data.</span></span><br><span class="line"><span class="comment">; http://php.net/session.save-handler</span></span><br><span class="line"><span class="attr">session.save_handler</span> = files</span><br><span class="line"></span><br><span class="line"><span class="comment">; Argument passed to save_handler.  In the case of files, this is the path</span></span><br><span class="line"><span class="comment">; where data files are stored. <span class="doctag">Note:</span> Windows users have to change this</span></span><br><span class="line"><span class="comment">; variable in order to use PHP&#x27;s session functions.</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; The path can be defined as:</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">;     session.save_path = &quot;N;/path&quot;</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; where N is an integer.  Instead of storing all the session files in</span></span><br><span class="line"><span class="comment">; /path, what this will do is use subdirectories N-levels deep, and</span></span><br><span class="line"><span class="comment">; store the session data in those directories.  This is useful if</span></span><br><span class="line"><span class="comment">; your OS has problems with many files in one directory, and is</span></span><br><span class="line"><span class="comment">; a more efficient layout for servers that handle many sessions.</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; NOTE 1: PHP will not create this directory structure automatically.</span></span><br><span class="line"><span class="comment">;         You can use the script in the ext/session dir for that purpose.</span></span><br><span class="line"><span class="comment">; NOTE 2: See the section on garbage collection below if you choose to</span></span><br><span class="line"><span class="comment">;         use subdirectories for session storage</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; The file storage module creates files using mode 600 by default.</span></span><br><span class="line"><span class="comment">; You can change that by using</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">;     session.save_path = &quot;N;MODE;/path&quot;</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; where MODE is the octal representation of the mode. Note that this</span></span><br><span class="line"><span class="comment">; does not overwrite the process&#x27;s umask.</span></span><br><span class="line"><span class="comment">; http://php.net/session.save-path</span></span><br><span class="line"><span class="comment">;session.save_path = &quot;/tmp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Whether to use strict session mode.</span></span><br><span class="line"><span class="comment">; Strict session mode does not accept uninitialized session ID and regenerate</span></span><br><span class="line"><span class="comment">; session ID if browser sends uninitialized session ID. Strict mode protects</span></span><br><span class="line"><span class="comment">; applications from session fixation via session adoption vulnerability. It is</span></span><br><span class="line"><span class="comment">; disabled by default for maximum compatibility, but enabling it is encouraged.</span></span><br><span class="line"><span class="comment">; https://wiki.php.net/rfc/strict_sessions</span></span><br><span class="line"><span class="attr">session.use_strict_mode</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Whether to use cookies.</span></span><br><span class="line"><span class="comment">; http://php.net/session.use-cookies</span></span><br><span class="line"><span class="attr">session.use_cookies</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; http://php.net/session.cookie-secure</span></span><br><span class="line"><span class="comment">;session.cookie_secure =</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; This option forces PHP to fetch and use a cookie for storing and maintaining</span></span><br><span class="line"><span class="comment">; the session id. We encourage this operation as it&#x27;s very helpful in combating</span></span><br><span class="line"><span class="comment">; session hijacking when not specifying and managing your own session id. It is</span></span><br><span class="line"><span class="comment">; not the be-all and end-all of session hijacking defense, but it&#x27;s a good start.</span></span><br><span class="line"><span class="comment">; http://php.net/session.use-only-cookies</span></span><br><span class="line"><span class="attr">session.use_only_cookies</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Name of the session (used as cookie name).</span></span><br><span class="line"><span class="comment">; http://php.net/session.name</span></span><br><span class="line"><span class="attr">session.name</span> = PHPSESSID</span><br><span class="line"></span><br><span class="line"><span class="comment">; Initialize session on request startup.</span></span><br><span class="line"><span class="comment">; http://php.net/session.auto-start</span></span><br><span class="line"><span class="attr">session.auto_start</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Lifetime in seconds of cookie or, if 0, until browser is restarted.</span></span><br><span class="line"><span class="comment">; http://php.net/session.cookie-lifetime</span></span><br><span class="line"><span class="attr">session.cookie_lifetime</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The path for which the cookie is valid.</span></span><br><span class="line"><span class="comment">; http://php.net/session.cookie-path</span></span><br><span class="line"><span class="attr">session.cookie_path</span> = /</span><br><span class="line"></span><br><span class="line"><span class="comment">; The domain for which the cookie is valid.</span></span><br><span class="line"><span class="comment">; http://php.net/session.cookie-domain</span></span><br><span class="line"><span class="attr">session.cookie_domain</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to browser scripting languages such as JavaScript.</span></span><br><span class="line"><span class="comment">; http://php.net/session.cookie-httponly</span></span><br><span class="line"><span class="attr">session.cookie_httponly</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Handler used to serialize data.  php is the standard serializer of PHP.</span></span><br><span class="line"><span class="comment">; http://php.net/session.serialize-handler</span></span><br><span class="line"><span class="attr">session.serialize_handler</span> = php</span><br><span class="line"></span><br><span class="line"><span class="comment">; Defines the probability that the &#x27;garbage collection&#x27; process is started</span></span><br><span class="line"><span class="comment">; on every session initialization. The probability is calculated by using</span></span><br><span class="line"><span class="comment">; gc_probability/gc_divisor. Where session.gc_probability is the numerator</span></span><br><span class="line"><span class="comment">; and gc_divisor is the denominator in the equation. Setting this value to 1</span></span><br><span class="line"><span class="comment">; when the session.gc_divisor value is 100 will give you approximately a 1% chance</span></span><br><span class="line"><span class="comment">; the gc will run on any give request.</span></span><br><span class="line"><span class="comment">; Default Value: 1</span></span><br><span class="line"><span class="comment">; Development Value: 1</span></span><br><span class="line"><span class="comment">; Production Value: 1</span></span><br><span class="line"><span class="comment">; http://php.net/session.gc-probability</span></span><br><span class="line"><span class="attr">session.gc_probability</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Defines the probability that the &#x27;garbage collection&#x27; process is started on every</span></span><br><span class="line"><span class="comment">; session initialization. The probability is calculated by using the following equation:</span></span><br><span class="line"><span class="comment">; gc_probability/gc_divisor. Where session.gc_probability is the numerator and</span></span><br><span class="line"><span class="comment">; session.gc_divisor is the denominator in the equation. Setting this value to 1</span></span><br><span class="line"><span class="comment">; when the session.gc_divisor value is 100 will give you approximately a 1% chance</span></span><br><span class="line"><span class="comment">; the gc will run on any give request. Increasing this value to 1000 will give you</span></span><br><span class="line"><span class="comment">; a 0.1% chance the gc will run on any give request. For high volume production servers,</span></span><br><span class="line"><span class="comment">; this is a more efficient approach.</span></span><br><span class="line"><span class="comment">; Default Value: 100</span></span><br><span class="line"><span class="comment">; Development Value: 1000</span></span><br><span class="line"><span class="comment">; Production Value: 1000</span></span><br><span class="line"><span class="comment">; http://php.net/session.gc-divisor</span></span><br><span class="line"><span class="attr">session.gc_divisor</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; After this number of seconds, stored data will be seen as &#x27;garbage&#x27; and</span></span><br><span class="line"><span class="comment">; cleaned up by the garbage collection process.</span></span><br><span class="line"><span class="comment">; http://php.net/session.gc-maxlifetime</span></span><br><span class="line"><span class="attr">session.gc_maxlifetime</span> = <span class="number">1440</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; <span class="doctag">NOTE:</span> If you are using the subdirectory option for storing session files</span></span><br><span class="line"><span class="comment">;       (see session.save_path above), then garbage collection does *not*</span></span><br><span class="line"><span class="comment">;       happen automatically.  You will need to do your own garbage</span></span><br><span class="line"><span class="comment">;       collection through a shell script, cron entry, or some other method.</span></span><br><span class="line"><span class="comment">;       For example, the following script would is the equivalent of</span></span><br><span class="line"><span class="comment">;       setting session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):</span></span><br><span class="line"><span class="comment">;          find /path/to/sessions -cmin +24 -type f | xargs rm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Check HTTP Referer to invalidate externally stored URLs containing ids.</span></span><br><span class="line"><span class="comment">; HTTP_REFERER has to contain this substring for the session to be</span></span><br><span class="line"><span class="comment">; considered as valid.</span></span><br><span class="line"><span class="comment">; http://php.net/session.referer-check</span></span><br><span class="line"><span class="attr">session.referer_check</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Set to &#123;nocache,private,public,&#125; to determine HTTP caching aspects</span></span><br><span class="line"><span class="comment">; or leave this empty to avoid sending anti-caching headers.</span></span><br><span class="line"><span class="comment">; http://php.net/session.cache-limiter</span></span><br><span class="line"><span class="attr">session.cache_limiter</span> = nocache</span><br><span class="line"></span><br><span class="line"><span class="comment">; Document expires after n minutes.</span></span><br><span class="line"><span class="comment">; http://php.net/session.cache-expire</span></span><br><span class="line"><span class="attr">session.cache_expire</span> = <span class="number">180</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; trans sid support is disabled by default.</span></span><br><span class="line"><span class="comment">; Use of trans sid may risk your users&#x27; security.</span></span><br><span class="line"><span class="comment">; Use this option with caution.</span></span><br><span class="line"><span class="comment">; - User may send URL contains active session ID</span></span><br><span class="line"><span class="comment">;   to other person via. email/irc/etc.</span></span><br><span class="line"><span class="comment">; - URL that contains active session ID may be stored</span></span><br><span class="line"><span class="comment">;   in publicly accessible computer.</span></span><br><span class="line"><span class="comment">; - User may access your site with the same session ID</span></span><br><span class="line"><span class="comment">;   always using URL stored in browser&#x27;s history or bookmarks.</span></span><br><span class="line"><span class="comment">; http://php.net/session.use-trans-sid</span></span><br><span class="line"><span class="attr">session.use_trans_sid</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Set session ID character length. This value could be between 22 to 256.</span></span><br><span class="line"><span class="comment">; Shorter length than default is supported only for compatibility reason.</span></span><br><span class="line"><span class="comment">; Users should use 32 or more chars.</span></span><br><span class="line"><span class="comment">; http://php.net/session.sid-length</span></span><br><span class="line"><span class="comment">; Default Value: 32</span></span><br><span class="line"><span class="comment">; Development Value: 26</span></span><br><span class="line"><span class="comment">; Production Value: 26</span></span><br><span class="line"><span class="attr">session.sid_length</span> = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The URL rewriter will look for URLs in a defined set of HTML tags.</span></span><br><span class="line"><span class="comment">; &lt;form&gt; is special; if you include them here, the rewriter will</span></span><br><span class="line"><span class="comment">; add a hidden &lt;input&gt; field with the info which is otherwise appended</span></span><br><span class="line"><span class="comment">; to URLs. &lt;form&gt; tag&#x27;s action attribute URL will not be modified</span></span><br><span class="line"><span class="comment">; unless it is specified.</span></span><br><span class="line"><span class="comment">; Note that all valid entries require a &quot;=&quot;, even if no value follows.</span></span><br><span class="line"><span class="comment">; Default Value: &quot;a=href,area=href,frame=src,form=&quot;</span></span><br><span class="line"><span class="comment">; Development Value: &quot;a=href,area=href,frame=src,form=&quot;</span></span><br><span class="line"><span class="comment">; Production Value: &quot;a=href,area=href,frame=src,form=&quot;</span></span><br><span class="line"><span class="comment">; http://php.net/url-rewriter.tags</span></span><br><span class="line"><span class="attr">session.trans_sid_tags</span> = <span class="string">&quot;a=href,area=href,frame=src,form=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; URL rewriter does not rewrite absolute URLs by default.</span></span><br><span class="line"><span class="comment">; To enable rewrites for absolute pathes, target hosts must be specified</span></span><br><span class="line"><span class="comment">; at RUNTIME. i.e. use ini_set()</span></span><br><span class="line"><span class="comment">; &lt;form&gt; tags is special. PHP will check action attribute&#x27;s URL regardless</span></span><br><span class="line"><span class="comment">; of session.trans_sid_tags setting.</span></span><br><span class="line"><span class="comment">; If no host is defined, HTTP_HOST will be used for allowed host.</span></span><br><span class="line"><span class="comment">; Example value: php.net,www.php.net,wiki.php.net</span></span><br><span class="line"><span class="comment">; Use &quot;,&quot; for multiple hosts. No spaces are allowed.</span></span><br><span class="line"><span class="comment">; Default Value: &quot;&quot;</span></span><br><span class="line"><span class="comment">; Development Value: &quot;&quot;</span></span><br><span class="line"><span class="comment">; Production Value: &quot;&quot;</span></span><br><span class="line"><span class="comment">;session.trans_sid_hosts=&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Define how many bits are stored in each character when converting</span></span><br><span class="line"><span class="comment">; the binary hash data to something readable.</span></span><br><span class="line"><span class="comment">; Possible values:</span></span><br><span class="line"><span class="comment">;   4  (4 bits: 0-9, a-f)</span></span><br><span class="line"><span class="comment">;   5  (5 bits: 0-9, a-v)</span></span><br><span class="line"><span class="comment">;   6  (6 bits: 0-9, a-z, A-Z, &quot;-&quot;, &quot;,&quot;)</span></span><br><span class="line"><span class="comment">; Default Value: 4</span></span><br><span class="line"><span class="comment">; Development Value: 5</span></span><br><span class="line"><span class="comment">; Production Value: 5</span></span><br><span class="line"><span class="comment">; http://php.net/session.hash-bits-per-character</span></span><br><span class="line"><span class="attr">session.sid_bits_per_character</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Enable upload progress tracking in $_SESSION</span></span><br><span class="line"><span class="comment">; Default Value: On</span></span><br><span class="line"><span class="comment">; Development Value: On</span></span><br><span class="line"><span class="comment">; Production Value: On</span></span><br><span class="line"><span class="comment">; http://php.net/session.upload-progress.enabled</span></span><br><span class="line"><span class="comment">;session.upload_progress.enabled = On</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Cleanup the progress information as soon as all POST data has been read</span></span><br><span class="line"><span class="comment">; (i.e. upload completed).</span></span><br><span class="line"><span class="comment">; Default Value: On</span></span><br><span class="line"><span class="comment">; Development Value: On</span></span><br><span class="line"><span class="comment">; Production Value: On</span></span><br><span class="line"><span class="comment">; http://php.net/session.upload-progress.cleanup</span></span><br><span class="line"><span class="comment">;session.upload_progress.cleanup = On</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; A prefix used for the upload progress key in $_SESSION</span></span><br><span class="line"><span class="comment">; Default Value: &quot;upload_progress_&quot;</span></span><br><span class="line"><span class="comment">; Development Value: &quot;upload_progress_&quot;</span></span><br><span class="line"><span class="comment">; Production Value: &quot;upload_progress_&quot;</span></span><br><span class="line"><span class="comment">; http://php.net/session.upload-progress.prefix</span></span><br><span class="line"><span class="comment">;session.upload_progress.prefix = &quot;upload_progress_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The index name (concatenated with the prefix) in $_SESSION</span></span><br><span class="line"><span class="comment">; containing the upload progress information</span></span><br><span class="line"><span class="comment">; Default Value: &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"><span class="comment">; Development Value: &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"><span class="comment">; Production Value: &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"><span class="comment">; http://php.net/session.upload-progress.name</span></span><br><span class="line"><span class="comment">;session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; How frequently the upload progress should be updated.</span></span><br><span class="line"><span class="comment">; Given either in percentages (per-file), or in bytes</span></span><br><span class="line"><span class="comment">; Default Value: &quot;1%&quot;</span></span><br><span class="line"><span class="comment">; Development Value: &quot;1%&quot;</span></span><br><span class="line"><span class="comment">; Production Value: &quot;1%&quot;</span></span><br><span class="line"><span class="comment">; http://php.net/session.upload-progress.freq</span></span><br><span class="line"><span class="comment">;session.upload_progress.freq =  &quot;1%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The minimum delay between updates, in seconds</span></span><br><span class="line"><span class="comment">; Default Value: 1</span></span><br><span class="line"><span class="comment">; Development Value: 1</span></span><br><span class="line"><span class="comment">; Production Value: 1</span></span><br><span class="line"><span class="comment">; http://php.net/session.upload-progress.min-freq</span></span><br><span class="line"><span class="comment">;session.upload_progress.min_freq = &quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Only write session data when session data is changed. Enabled by default.</span></span><br><span class="line"><span class="comment">; http://php.net/session.lazy-write</span></span><br><span class="line"><span class="comment">;session.lazy_write = On</span></span><br></pre></td></tr></table></figure>
<h2 id="利用-Redis-实现-SESSION-共享"><a href="#利用-Redis-实现-SESSION-共享" class="headerlink" title="利用 Redis 实现 SESSION 共享"></a>利用 Redis 实现 SESSION 共享</h2><h3 id="安装-PhpRedis-扩展"><a href="#安装-PhpRedis-扩展" class="headerlink" title="安装 PhpRedis 扩展"></a>安装 PhpRedis 扩展</h3><blockquote>
<p><a href="https://github.com/phpredis/phpredis">PhpRedis GitHub</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 编译安装 PhpRedis</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/phpredis/phpredis.git</span><br><span class="line">$ <span class="built_in">cd</span> phpredis</span><br><span class="line">$ git checkout tags/3.1.6</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/bin/phpize</span><br><span class="line">$ sudo ./configure</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
<p>安装完成后将 <code>redis.so</code> 文件加入到 <code>php.ini</code> 扩展中，重启 <code>php-fpm</code>。</p>
<h3 id="使用-Redis-存储-SESSION-的配置"><a href="#使用-Redis-存储-SESSION-的配置" class="headerlink" title="使用 Redis 存储 SESSION 的配置"></a>使用 <code>Redis</code> 存储 <code>SESSION</code> 的配置</h3><blockquote>
<p>默认的 <code>SESSION</code> 前缀为 <code>PHPREDIS_SESSION:</code></p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">session.save_handler</span> = redis</span><br><span class="line"><span class="attr">session.save_path</span> = <span class="string">&quot;tcp://redis-server-host:6379&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用程序配置"><a href="#使用程序配置" class="headerlink" title="使用程序配置"></a>使用程序配置</h3><blockquote>
<p>在 <code>session_start()</code> 之前设置</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;session.save_handler&#x27;</span>, <span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.save_path&#x27;</span>, <span class="string">&#x27;tcp://your-redis-host:6379&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="基于-CakePHP3-应用的-SESSION-共享"><a href="#基于-CakePHP3-应用的-SESSION-共享" class="headerlink" title="基于 CakePHP3 应用的 SESSION 共享"></a>基于 CakePHP3 应用的 SESSION 共享</h1><h2 id="CakePHP3-框架支持的-SESSION-存储方式"><a href="#CakePHP3-框架支持的-SESSION-存储方式" class="headerlink" title="CakePHP3 框架支持的 SESSION 存储方式"></a>CakePHP3 框架支持的 SESSION 存储方式</h2><ul>
<li><code>php</code>: 使用 <code>php.ini</code> 文件中的标准设置住在会话</li>
<li><code>cake</code>: 将会话保存在 <code>tmp/sessions</code> 文件夹下。如果主机不允许你在自己的主目录之外写入，这是一个不错的选择</li>
<li><code>database</code>: 使用内置的数据库会话</li>
<li><code>cache</code>: 使用内置的缓存会话</li>
</ul>
<h2 id="基于-Cache-的-SESSION-共享"><a href="#基于-Cache-的-SESSION-共享" class="headerlink" title="基于 Cache 的 SESSION 共享"></a>基于 Cache 的 SESSION 共享</h2><blockquote>
<p>这里选择 Redis 存储用户 SESSION 信息，CakePHP 提供的缓存存储方式简单的令人发指。</p>
</blockquote>
<h3 id="配置-redis"><a href="#配置-redis" class="headerlink" title="配置 redis"></a>配置 redis</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configure the cache adapters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="string">&#x27;Cache&#x27;</span>          =&gt; [</span><br><span class="line">        <span class="string">&#x27;redis&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;className&#x27;</span> =&gt; <span class="string">&#x27;Redis&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;duration&#x27;</span> =&gt; <span class="string">&#x27;+1 hours&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&#x27;probability&#x27;</span> =&gt; <span class="number">100</span>,</span><br><span class="line">            <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&#x27;server&#x27;</span> =&gt; <span class="string">&#x27;redis-server-host&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;port&#x27;</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h3 id="配置-session"><a href="#配置-session" class="headerlink" title="配置 session"></a>配置 session</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Session configuration.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Contains an array of settings to use for session configuration. The</span></span><br><span class="line"><span class="comment">     * `defaults` key is used to define a default preset to use for sessions, any</span></span><br><span class="line"><span class="comment">     * settings declared here will override the settings of the default config.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ## Options</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - `cookie` - The name of the cookie to use. Defaults to &#x27;CAKEPHP&#x27;. Avoid using `.` in cookie names,</span></span><br><span class="line"><span class="comment">     *   as PHP will drop sessions from cookies with `.` in the name.</span></span><br><span class="line"><span class="comment">     * - `cookiePath` - The url path for which session cookie is set. Maps to the</span></span><br><span class="line"><span class="comment">     *   `session.cookie_path` php.ini config. Defaults to base path of app.</span></span><br><span class="line"><span class="comment">     * - `timeout` - The time in minutes the session should be valid for.</span></span><br><span class="line"><span class="comment">     *    Pass 0 to disable checking timeout.</span></span><br><span class="line"><span class="comment">     *    Please note that php.ini&#x27;s session.gc_maxlifetime must be equal to or greater</span></span><br><span class="line"><span class="comment">     *    than the largest Session[&#x27;timeout&#x27;] in all served websites for it to have the</span></span><br><span class="line"><span class="comment">     *    desired effect.</span></span><br><span class="line"><span class="comment">     * - `defaults` - The default configuration set to use as a basis for your session.</span></span><br><span class="line"><span class="comment">     *    There are four built-in options: php, cake, cache, database.</span></span><br><span class="line"><span class="comment">     * - `handler` - Can be used to enable a custom session handler. Expects an</span></span><br><span class="line"><span class="comment">     *    array with at least the `engine` key, being the name of the Session engine</span></span><br><span class="line"><span class="comment">     *    class to use for managing the session. CakePHP bundles the `CacheSession`</span></span><br><span class="line"><span class="comment">     *    and `DatabaseSession` engines.</span></span><br><span class="line"><span class="comment">     * - `ini` - An associative array of additional ini values to set.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The built-in `defaults` options are:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - &#x27;php&#x27; - Uses settings defined in your php.ini.</span></span><br><span class="line"><span class="comment">     * - &#x27;cake&#x27; - Saves session files in CakePHP&#x27;s /tmp directory.</span></span><br><span class="line"><span class="comment">     * - &#x27;database&#x27; - Uses CakePHP&#x27;s database sessions.</span></span><br><span class="line"><span class="comment">     * - &#x27;cache&#x27; - Use the Cache class to save sessions.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * To define a custom session handler, save it at src/Network/Session/&lt;name&gt;.php.</span></span><br><span class="line"><span class="comment">     * Make sure the class implements PHP&#x27;s `SessionHandlerInterface` and set</span></span><br><span class="line"><span class="comment">     * Session.handler to &lt;name&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * To use database sessions, load the SQL file located at config/schema/sessions.sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="string">&#x27;Session&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;defaults&#x27;</span> =&gt; <span class="string">&#x27;cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span> =&gt; <span class="string">&#x27;YOURSESSID&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;timeout&#x27;</span> =&gt; <span class="number">1800</span>,</span><br><span class="line">        <span class="string">&#x27;handler&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;engine&#x27;</span> =&gt; <span class="string">&#x27;CacheSession&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;config&#x27;</span> =&gt; <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;ini&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;session.cookie_path&#x27;</span> =&gt; <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;session.cookie_secure&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;session.cookie_domain&#x27;</span> =&gt; <span class="string">&#x27;.your-domain.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;session.cookie_lifetime&#x27;</span> =&gt; <span class="number">1800</span>,</span><br><span class="line">            <span class="string">&#x27;session.cookie_httponly&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;session.use_trans_sid&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;session.use_cookies&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;session.save_handler&#x27;</span> =&gt; <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;session.gc_maxlifetime&#x27;</span> =&gt; <span class="number">1800</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>正常情况下，配置好就可以用了</p>
<h2 id="基于-database-的-SESSION-共享"><a href="#基于-database-的-SESSION-共享" class="headerlink" title="基于 database 的 SESSION 共享"></a>基于 database 的 SESSION 共享</h2><blockquote>
<p>以后再抽空更新……</p>
</blockquote>
<h2 id="CakePHP3-管理-SESSION-的内部实现"><a href="#CakePHP3-管理-SESSION-的内部实现" class="headerlink" title="CakePHP3 管理 SESSION 的内部实现"></a>CakePHP3 管理 SESSION 的内部实现</h2><h3 id="配置-SESSION-存储方式为-Cache-后，需要提供处理的引擎和配置，默认为文件引擎处理"><a href="#配置-SESSION-存储方式为-Cache-后，需要提供处理的引擎和配置，默认为文件引擎处理" class="headerlink" title="配置 SESSION 存储方式为 Cache 后，需要提供处理的引擎和配置，默认为文件引擎处理"></a>配置 SESSION 存储方式为 Cache 后，需要提供处理的引擎和配置，默认为文件引擎处理</h3><blockquote>
<p>共有 <code>CakeSession</code> 和 <code>DatabaseSession</code> 两个 <code>SESSION</code> 操作支持类，引擎默认为 <code>CakeSession</code> 类，此类根据不同的配置选取不同的缓存处理引擎进行操作。</p>
</blockquote>
<p>支持的缓存引擎：</p>
<ul>
<li><code>Apc</code>: <code>APC</code> 缓存使用 <code>PHP</code> 的 <code>APCu</code> 扩展。该扩展使用 <code>Web</code> 服务器上的共享内存来存储对象。这使它非常快，并有能力提供原子读写功能</li>
<li><code>File</code>: 文件缓存是使用本地文件的简单缓存。这是最慢的缓存引擎，并不提供原子操作的这么功能。然而，由于磁盘通常非常便宜，因此存储大型对象，或者不经常写入的元素在文件中能很好工作</li>
<li><code>Memcached</code>: 使用 <code>Memcached</code> 扩展</li>
<li><code>Null</code>: 通过对缺失引擎对象的封装，以提供默认无任何行为的引擎对象替代品</li>
<li><code>Redis</code>: 使用 <code>phpredis</code> 扩展。<code>Redis</code> 提供了一个类似 <code>Memcached</code> 的快速和持久的缓存系统，也提供了原子操作</li>
<li><code>Wincache</code>: 使用 <code>Wincache</code> 扩展。<code>Wincache</code> 在功能和性能方面与 <code>APC</code> 相似，但针对 <code>Windows</code> 和 <code>IIS</code> 进行了优化</li>
<li><code>Xcache</code>: 一个 <code>PHP</code> 扩展，提供与 <code>APC</code> 类似的功能</li>
</ul>
<h3 id="RedisEngine-类"><a href="#RedisEngine-类" class="headerlink" title="RedisEngine 类"></a>RedisEngine 类</h3><blockquote>
<p><a href="https://github.com/cakephp/cakephp/blob/master/src/Cache/Engine/RedisEngine.php">RedisEngine Class</a></p>
</blockquote>
<p>继承 <code>CacheEngine</code> 抽象类，实现基类的 <code>write</code>，<code>read</code>，<code>increment</code>，<code>decrement</code>，<code>delete</code>，<code>clear</code> 抽象方法。</p>
<h3 id="CacheSession-类"><a href="#CacheSession-类" class="headerlink" title="CacheSession 类"></a>CacheSession 类</h3><blockquote>
<p><a href="http://php.net/manual/zh/class.sessionhandlerinterface.php">SessionHandlerInterface Class</a><br><a href="https://github.com/cakephp/cakephp/blob/master/src/Network/Session/CacheSession.php">CacheSession Class</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">SessionHandlerInterface</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">bool</span> close();</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">bool</span> destroy(<span class="keyword">string</span> <span class="variable">$session_id</span>);</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">bool</span> gc(<span class="keyword">int</span> <span class="variable">$maxlifetime</span>);</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">bool</span> open(<span class="keyword">string</span> <span class="variable">$save_path</span>, <span class="keyword">string</span> <span class="variable">$session_name</span>);</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">string</span> read(<span class="keyword">string</span> <span class="variable">$session_id</span>);</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">bool</span> write(<span class="keyword">string</span> <span class="variable">$session_id</span>, <span class="keyword">string</span> <span class="variable">$session_data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现 <code>SessionHandlerInterface</code> 接口</li>
<li>从配置的缓存引擎中操作相关的数据</li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>cakephp</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 支持 keep-alive 长连接</title>
    <url>/2018/01/13/nginx-keep-alive/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p><a href="https://tools.ietf.org/html/rfc2616"><code>Persistent HTTP connections have a number of advantages</code></a></p>
</blockquote>
<p><code>HTTP</code> 协议采用<strong>请求-应答</strong>模式，当使用普通模式，即非 <code>KeepAlive</code> 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（<code>HTTP</code> 协议为无连接的协议）；当使用 <code>Keep-Alive</code> 模式（又称持久连接/连接重用）时，<code>Keep-Alive</code> 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，<code>Keep-Alive</code> 功能避免了建立或者重新建立连接。</p>
<p><img src="http://om804c7s2.bkt.clouddn.com/2018-01-06-15152071602677.jpg" alt=""></p>
<h2 id="支持-keep-alive"><a href="#支持-keep-alive" class="headerlink" title="支持 keep alive"></a>支持 <code>keep alive</code></h2><h3 id="当使用-nginx-作为反向代理时，为了支持长连接，需要做到两点"><a href="#当使用-nginx-作为反向代理时，为了支持长连接，需要做到两点" class="headerlink" title="当使用 nginx 作为反向代理时，为了支持长连接，需要做到两点"></a>当使用 <code>nginx</code> 作为反向代理时，为了支持长连接，需要做到两点</h3><ul>
<li>从 <code>client</code> 到 <code>nginx</code> 的连接是长连接</li>
<li>从 <code>nginx</code> 到 <code>server</code> 的连接是长连接</li>
</ul>
<h3 id="保持和-client-的长连接"><a href="#保持和-client-的长连接" class="headerlink" title="保持和 client 的长连接"></a>保持和 <code>client</code> 的长连接</h3><ul>
<li><code>client</code> 发送的 <code>HTTP</code> 请求要求 <code>keep alive</code></li>
<li><code>nginx</code> 设置上支持 <code>keep alive</code></li>
</ul>
<h3 id="HTTP-配置"><a href="#HTTP-配置" class="headerlink" title="HTTP 配置"></a><code>HTTP</code> 配置</h3><h4 id="keepalive-timeout"><a href="#keepalive-timeout" class="headerlink" title="keepalive_timeout"></a><code>keepalive_timeout</code></h4><blockquote>
<p>默认 <code>75s</code>，一般情况下也够用，对于一些请求比较大的内部服务器通讯的场景，适当加大为 <code>120s</code> 或者 <code>300s</code>。第二个参数通常可以不用设置</p>
</blockquote>
<p>第一个参数设置 <code>keep-alive</code> 客户端连接在服务器端保持开启的超时值。值为 <code>0</code> 会禁用 <code>keep-alive</code> 客户端连接。可选的第二个参数在响应的 <code>header</code> 域中设置一个值 <code>Keep-Alive: timeout=time</code>。这两个参数可以不一样</p>
<h4 id="keepalive-requests"><a href="#keepalive-requests" class="headerlink" title="keepalive_requests"></a><code>keepalive_requests</code></h4><blockquote>
<p>默认 <code>100</code>，对于 <code>QPS</code> 较高的场景，非常有必要加大这个参数，以避免出现大量连接被生成再抛弃的情况，减少 <code>TIME_WAIT</code>。这个参数的真实含义是指一个 <code>keep alive</code> 建立之后，<code>nginx</code> 就会为这个连接设置一个计数器，记录这个 <code>keep alive</code> 的长连接上已经接收并处理的客户端请求的数量。如果达到这个参数设置的最大值时，则 <code>nginx</code> 会强行关闭这个长连接，逼迫客户端不得不重新建立新的长连接</p>
</blockquote>
<p>用于设置一个 <code>keep-alive</code> 连接上可以服务的请求的最大数量。当最大请求数量达到时，连接被关闭</p>
<h3 id="保持和-server-的长连接"><a href="#保持和-server-的长连接" class="headerlink" title="保持和 server 的长连接"></a>保持和 <code>server</code> 的长连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    keepalive_timeout 100s;</span><br><span class="line">    keepalive_requests 1000;</span><br><span class="line"></span><br><span class="line">    upstream dev.proxy.com &#123;</span><br><span class="line">        server 192.168.10.11:8081 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server 192.168.10.10:8081 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">        keepalive 300;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 ipv6only=on;</span><br><span class="line">        server_name dev.proxy.com;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            index index.php index.html index.htm;</span><br><span class="line">            proxy_pass http://dev.proxy.com/;</span><br><span class="line">            proxy_set_header Host <span class="variable">$Host</span>;</span><br><span class="line">            proxy_set_header x-forwarded-for <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            add_header Cache-Control no-store;</span><br><span class="line">            add_header Pragma no-cache;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            client_max_body_size 3072k;</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>合理的设置 <code>keep-alive</code> 值可以非常有效的缓冲请求和应答不均匀，缓解连接数量的反复震荡</p>
<p>连接数量震荡的两个表现</p>
<ul>
<li>连接不够用，造成新建连接</li>
<li>连接空闲，造成关闭连接</li>
</ul>
<h4 id="统计在一台前端机上高峰时间-TCP-连接的情况"><a href="#统计在一台前端机上高峰时间-TCP-连接的情况" class="headerlink" title="统计在一台前端机上高峰时间 TCP 连接的情况"></a>统计在一台前端机上高峰时间 TCP 连接的情况</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -n | awk <span class="string">&#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a,S[a]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="导致-nginx-端出现大量-TIME-WAIT-的两种情况"><a href="#导致-nginx-端出现大量-TIME-WAIT-的两种情况" class="headerlink" title="导致 nginx 端出现大量 TIME_WAIT 的两种情况"></a>导致 <code>nginx</code> 端出现大量 <code>TIME_WAIT</code> 的两种情况</h4><ul>
<li><code>keepalive_requests</code> 设置比较小，高并发下超过此值后 <code>nginx</code> 会强制关闭和客户端保持的<code>keepalive</code> 长连接(主动关闭连接后导致 <code>nginx</code> 出现 <code>TIME_WAIT</code>)</li>
<li><code>keepalive</code> 设置的比较小(空闲数太小)，导致高并发下 <code>nginx</code> 会频繁出现连接数震荡(超过该值会关闭连接)，不停的关闭开启和后端 <code>server</code> 保持的 <code>keep-alive</code> 长连接</li>
</ul>
<h4 id="导致后端-server-端出现大量-TIME-WAIT-的情况"><a href="#导致后端-server-端出现大量-TIME-WAIT-的情况" class="headerlink" title="导致后端 server 端出现大量 TIME_WAIT 的情况"></a>导致后端 <code>server</code> 端出现大量 <code>TIME_WAIT</code> 的情况</h4><ul>
<li><code>nginx</code> 没有打开和后端的长连接，即：没有设置 <code>proxy_http_version 1.1;</code> 和<code>proxy_set_header Connection &quot;&quot;;</code> 从而导致后端 <code>server</code> 每次关闭连接，高并发下就会出现 <code>server</code> 端出现大量 <code>TIME_WAIT</code></li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 数组排序</title>
    <url>/2018/02/25/php-array-sort/</url>
    <content><![CDATA[<p>在 PHP 中有很多针对数组的排序函数，非常方便。这些函数对一维数组进行关键字排序、按值排序、逆排序等。但对于多维数组的按需排序需要自己编写特定的函数去现实。</p>
<span id="more"></span>
<h2 id="数组值排序"><a href="#数组值排序" class="headerlink" title="数组值排序"></a>数组值排序</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">数组索引键保持</th>
<th style="text-align:left">顺序</th>
<th style="text-align:left">相关函数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">array_multisort()</td>
<td style="text-align:left">键值关联的保持，数字类型的不保持</td>
<td style="text-align:left">第一个数组或者由选项指定</td>
<td style="text-align:left">array_walk()</td>
</tr>
<tr>
<td style="text-align:left">asort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">由低到高</td>
<td style="text-align:left">arsort()</td>
</tr>
<tr>
<td style="text-align:left">arsort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">由高到低</td>
<td style="text-align:left">asort()</td>
</tr>
<tr>
<td style="text-align:left">natcasesort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">自然排序，大小写不敏感</td>
<td style="text-align:left">natsort()</td>
</tr>
<tr>
<td style="text-align:left">natsort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">自然排序</td>
<td style="text-align:left">natcasesort()</td>
</tr>
<tr>
<td style="text-align:left">rsort()</td>
<td style="text-align:left">否</td>
<td style="text-align:left">由高到低</td>
<td style="text-align:left">sort()</td>
</tr>
<tr>
<td style="text-align:left">sort()</td>
<td style="text-align:left">否</td>
<td style="text-align:left">由低到高</td>
<td style="text-align:left">rsort()</td>
</tr>
<tr>
<td style="text-align:left">shuffle()</td>
<td style="text-align:left">否</td>
<td style="text-align:left">随机</td>
<td style="text-align:left">array_rand()</td>
</tr>
<tr>
<td style="text-align:left">uasort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">由用户定义</td>
<td style="text-align:left">uksort()</td>
</tr>
<tr>
<td style="text-align:left">usort()</td>
<td style="text-align:left">否</td>
<td style="text-align:left">由用户定义</td>
<td style="text-align:left">uasort()</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span> =&gt; [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">4000</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Jack&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span> =&gt; [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2000</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Dane&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span> =&gt; [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1000</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Mark&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> =&gt; [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">5000</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Alan&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span> =&gt; [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3000</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Toby&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort_by_id</span>(<span class="params"><span class="variable">$left</span>, <span class="variable">$right</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$left</span>[<span class="string">&#x27;id&#x27;</span>] &lt;=&gt; <span class="variable">$right</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort_by_name</span>(<span class="params"><span class="variable">$left</span>, <span class="variable">$right</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strcasecmp(<span class="variable">$left</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$right</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="uasort"><a href="#uasort" class="headerlink" title="uasort"></a>uasort</h3><blockquote>
<p>使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</p>
</blockquote>
<h4 id="按-id-值由小到大排序"><a href="#按-id-值由小到大排序" class="headerlink" title="按 id 值由小到大排序"></a>按 id 值由小到大排序</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">uasort(<span class="variable">$array</span>, <span class="string">&#x27;sort_by_id&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [d] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">1000</span></span><br><span class="line">            [name] =&gt; Mark</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [e] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">2000</span></span><br><span class="line">            [name] =&gt; Dane</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [b] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">3000</span></span><br><span class="line">            [name] =&gt; Toby</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [c] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">4000</span></span><br><span class="line">            [name] =&gt; Jack</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [a] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">5000</span></span><br><span class="line">            [name] =&gt; Alan</span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="按-name-值依字母表顺序排序"><a href="#按-name-值依字母表顺序排序" class="headerlink" title="按 name 值依字母表顺序排序"></a>按 name 值依字母表顺序排序</h4><blockquote>
<p><code>strcasecmp()</code> - 二进制安全比较字符串（不区分大小写）<br><code>strcmp()</code> - 二进制安全比较字符串（区分大小写）</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">uasort(<span class="variable">$array</span>, <span class="string">&#x27;sort_by_name&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [d] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">1000</span></span><br><span class="line">            [name] =&gt; Mark</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [e] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">2000</span></span><br><span class="line">            [name] =&gt; Dane</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [b] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">3000</span></span><br><span class="line">            [name] =&gt; Toby</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [c] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">4000</span></span><br><span class="line">            [name] =&gt; Jack</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [a] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">5000</span></span><br><span class="line">            [name] =&gt; Alan</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [a] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">5000</span></span><br><span class="line">            [name] =&gt; Alan</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [e] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">2000</span></span><br><span class="line">            [name] =&gt; Dane</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [c] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">4000</span></span><br><span class="line">            [name] =&gt; Jack</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [d] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">1000</span></span><br><span class="line">            [name] =&gt; Mark</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [b] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">3000</span></span><br><span class="line">            [name] =&gt; Toby</span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="usort"><a href="#usort" class="headerlink" title="usort"></a>usort</h3><blockquote>
<p>使用用户自定义的比较函数对数组中的值进行排序，此函数为 <code>array</code> 中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序</p>
</blockquote>
<h4 id="按-id-值由小到大排序-1"><a href="#按-id-值由小到大排序-1" class="headerlink" title="按 id 值由小到大排序"></a>按 id 值由小到大排序</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">usort(<span class="variable">$array</span>, <span class="string">&#x27;sort_by_id&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">1000</span></span><br><span class="line">            [name] =&gt; Mark</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">2000</span></span><br><span class="line">            [name] =&gt; Dane</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">3000</span></span><br><span class="line">            [name] =&gt; Toby</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">4000</span></span><br><span class="line">            [name] =&gt; Jack</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">5000</span></span><br><span class="line">            [name] =&gt; Alan</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="按-name-值依字母表顺序排序-1"><a href="#按-name-值依字母表顺序排序-1" class="headerlink" title="按 name 值依字母表顺序排序"></a>按 name 值依字母表顺序排序</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">usort(<span class="variable">$array</span>, <span class="string">&#x27;sort_by_name&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">5000</span></span><br><span class="line">            [name] =&gt; Alan</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">2000</span></span><br><span class="line">            [name] =&gt; Dane</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">4000</span></span><br><span class="line">            [name] =&gt; Jack</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">1000</span></span><br><span class="line">            [name] =&gt; Mark</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">3000</span></span><br><span class="line">            [name] =&gt; Toby</span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="数组键排序"><a href="#数组键排序" class="headerlink" title="数组键排序"></a>数组键排序</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">数组索引键保持</th>
<th style="text-align:left">顺序</th>
<th style="text-align:left">相关函数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">krsort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">由高到低</td>
<td style="text-align:left">ksort()</td>
</tr>
<tr>
<td style="text-align:left">ksort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">由低到高</td>
<td style="text-align:left">asort()</td>
</tr>
<tr>
<td style="text-align:left">uksort()</td>
<td style="text-align:left">是</td>
<td style="text-align:left">由用户定义</td>
<td style="text-align:left">uasort()</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$array = [</span><br><span class="line">    &#x27;b&#x27; =&gt; [&#x27;a&#x27; =&gt; 1, &#x27;c&#x27; =&gt; 0.01, &#x27;b&#x27; =&gt; null],</span><br><span class="line">    &#x27;a&#x27; =&gt; [&#x27;b&#x27; =&gt; 3, &#x27;a&#x27; =&gt; 0.03, &#x27;c&#x27; =&gt; null],</span><br><span class="line">    &#x27;c&#x27; =&gt; [&#x27;c&#x27; =&gt; 2, &#x27;b&#x27; =&gt; 0.02, &#x27;a&#x27; =&gt; null],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function sort_by_key($left, $right)</span><br><span class="line">&#123;</span><br><span class="line">    return strcasecmp($left, $right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="uksort"><a href="#uksort" class="headerlink" title="uksort"></a>uksort</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">uksort(<span class="variable">$array</span>, <span class="string">&#x27;sort_by_key&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [a] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [b] =&gt; <span class="number">3</span></span><br><span class="line">            [a] =&gt; <span class="number">0.03</span></span><br><span class="line">            [c] =&gt;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [b] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [a] =&gt; <span class="number">1</span></span><br><span class="line">            [c] =&gt; <span class="number">0.01</span></span><br><span class="line">            [b] =&gt;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [c] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [c] =&gt; <span class="number">2</span></span><br><span class="line">            [b] =&gt; <span class="number">0.02</span></span><br><span class="line">            [a] =&gt;</span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 计算出两个日期之间的差值</title>
    <url>/2018/01/15/php-calculate-the-difference-between-two-dates/</url>
    <content><![CDATA[<p>PHP 实现两个日期之间相差的几年、几月、几日……，可以采用 PHP 内置的类 <code>DateTime</code> 和函数 <code>strtotime()</code> 实现，推荐使用内置类 <code>DateTime</code> 去实现，<code>DateTime</code> 把每个月天数的差异自动处理了，使用 <code>strtotime()</code> 函数需要自行处理。</p>
<span id="more"></span>
<h1 id="计算出两个日期之间的差值"><a href="#计算出两个日期之间的差值" class="headerlink" title="计算出两个日期之间的差值"></a>计算出两个日期之间的差值</h1><blockquote>
<p><a href="http://php.net/manual/zh/class.datetime.php"><code>Representation of date and time</code></a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDateDiff</span>(<span class="params"><span class="variable">$date1</span>, <span class="variable">$date2</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$datetime1</span> = <span class="keyword">new</span> \DateTime(<span class="variable">$date1</span>);</span><br><span class="line">    <span class="variable">$datetime2</span> = <span class="keyword">new</span> \DateTime(<span class="variable">$date2</span>);</span><br><span class="line">    <span class="variable">$interval</span> = <span class="variable">$datetime1</span>-&gt;diff(<span class="variable">$datetime2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$datetime</span> = [];</span><br><span class="line">    <span class="variable">$items</span> = [</span><br><span class="line">        <span class="string">&#x27;year&#x27;</span>   =&gt; <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;month&#x27;</span>  =&gt; <span class="string">&#x27;m&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;day&#x27;</span>    =&gt; <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hour&#x27;</span>   =&gt; <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;minute&#x27;</span> =&gt; <span class="string">&#x27;i&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;second&#x27;</span> =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;days&#x27;</span>   =&gt; <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$items</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$format</span>) &#123;</span><br><span class="line">        <span class="variable">$datetime</span>[<span class="variable">$key</span>] = <span class="variable">$interval</span>-&gt;format(<span class="string">&quot;%<span class="subst">&#123;$format&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$datetime</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$date1</span> = <span class="string">&#x27;2016-12-12 09:45:45&#x27;</span>;</span><br><span class="line"><span class="variable">$date2</span> = <span class="string">&#x27;2018-01-15 10:55:55&#x27;</span>;</span><br><span class="line"><span class="variable">$array</span> = getDateDiff(<span class="variable">$date1</span>, <span class="variable">$date2</span>);</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [year] =&gt; <span class="number">1</span></span><br><span class="line">    [month] =&gt; <span class="number">1</span></span><br><span class="line">    [day] =&gt; <span class="number">3</span></span><br><span class="line">    [hour] =&gt; <span class="number">01</span></span><br><span class="line">    [minute] =&gt; <span class="number">10</span></span><br><span class="line">    [second] =&gt; <span class="number">10</span></span><br><span class="line">    [days] =&gt; <span class="number">399</span></span><br><span class="line">)</span><br><span class="line">也就是说这两个日期之间的差值为：<span class="number">1</span> 年 <span class="number">1</span> 个月 <span class="number">3</span> 天 <span class="number">1</span> 小时 <span class="number">10</span> 分钟 <span class="number">10</span> 秒，总共 <span class="number">399</span> 天</span><br></pre></td></tr></table></figure>
<h1 id="计算两个时期之间的月份数"><a href="#计算两个时期之间的月份数" class="headerlink" title="计算两个时期之间的月份数"></a>计算两个时期之间的月份数</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$date1</span> = <span class="string">&#x27;2018-12-12 09:45:45&#x27;</span>;</span><br><span class="line"><span class="variable">$date2</span> = <span class="string">&#x27;2020-01-12 09:45:44&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$d1</span> = new \DateTime(<span class="variable">$date1</span>);</span><br><span class="line"><span class="variable">$d2</span> = new \DateTime(<span class="variable">$date2</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$d1</span>-&gt;diff(<span class="variable">$d2</span>)-&gt;m + (<span class="variable">$d1</span>-&gt;diff(<span class="variable">$d2</span>)-&gt;y * 12);</span><br><span class="line"></span><br><span class="line">// 结果</span><br><span class="line">12</span><br><span class="line">从结果来看，不足一月会自动舍去</span><br></pre></td></tr></table></figure>
<h1 id="扩展的日期时间类"><a href="#扩展的日期时间类" class="headerlink" title="扩展的日期时间类"></a>扩展的日期时间类</h1><blockquote>
<p><a href="https://github.com/briannesbitt/carbon">Carbon GitHub</a><br><a href="http://carbon.nesbot.com/">Carbon Website</a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 使用 composer 安装</span><br><span class="line">$ composer require nesbot/carbon</span><br></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>更多使用实例请参见<a href="http://carbon.nesbot.com/">官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">use Carbon\Carbon;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now: %s&quot;</span>, Carbon::now());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 查询当前年、季、月、周的第一天和最后一天</title>
    <url>/2018/01/20/mysql-year-quarter-month-week-query/</url>
    <content><![CDATA[<p>MySQL 查询当前年份的第一天和最后一天、当前季度的第一天和最后一天、当前月份的第一天和最后一天、当前周的第一天和最后一天</p>
<span id="more"></span>
<h2 id="年份"><a href="#年份" class="headerlink" title="年份"></a>年份</h2><h3 id="当前年份第一天"><a href="#当前年份第一天" class="headerlink" title="当前年份第一天"></a>当前年份第一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> DAYOFYEAR(NOW()) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> <span class="string">&#x27;当前年份的第一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="当前年份最后一天"><a href="#当前年份最后一天" class="headerlink" title="当前年份最后一天"></a>当前年份最后一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="keyword">YEAR</span>(NOW()), <span class="string">&#x27;-12-31&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;当前年份的最后一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="季度"><a href="#季度" class="headerlink" title="季度"></a>季度</h2><h3 id="当前季度第一天"><a href="#当前季度第一天" class="headerlink" title="当前季度第一天"></a>当前季度第一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MAKEDATE(<span class="keyword">YEAR</span>(CURDATE()), <span class="number">1</span>) <span class="operator">+</span> <span class="type">INTERVAL</span> QUARTER(CURDATE()) QUARTER <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> QUARTER <span class="operator">-</span></span><br><span class="line">       <span class="type">INTERVAL</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">MONTH</span> <span class="keyword">AS</span> <span class="string">&#x27;当前季度的第一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="当前季度最后一天"><a href="#当前季度最后一天" class="headerlink" title="当前季度最后一天"></a>当前季度最后一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LAST_DAY(MAKEDATE(<span class="built_in">EXTRACT</span>(<span class="keyword">YEAR</span> <span class="keyword">FROM</span> CURDATE()), <span class="number">1</span>) <span class="operator">+</span> <span class="type">INTERVAL</span> QUARTER(CURDATE()) <span class="operator">*</span> <span class="number">3</span> <span class="operator">-</span> <span class="number">1</span> <span class="keyword">MONTH</span>) <span class="keyword">AS</span> <span class="string">&#x27;当前季度的最后一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="当前月份"><a href="#当前月份" class="headerlink" title="当前月份"></a>当前月份</h2><h3 id="当前月份的第一天"><a href="#当前月份的第一天" class="headerlink" title="当前月份的第一天"></a>当前月份的第一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> DAYOFMONTH(NOW()) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> <span class="string">&#x27;当前月份的第一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="当前月份的最后一天"><a href="#当前月份的最后一天" class="headerlink" title="当前月份的最后一天"></a>当前月份的最后一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LAST_DAY(NOW()) <span class="keyword">AS</span> <span class="string">&#x27;当前月份的最后一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="当前周"><a href="#当前周" class="headerlink" title="当前周"></a>当前周</h2><h3 id="当前周的第一天"><a href="#当前周的第一天" class="headerlink" title="当前周的第一天"></a>当前周的第一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> WEEKDAY(CURDATE()) <span class="operator">+</span> <span class="number">0</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> <span class="string">&#x27;当前周的第一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="当前周的最后一天"><a href="#当前周的最后一天" class="headerlink" title="当前周的最后一天"></a>当前周的最后一天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> WEEKDAY(CURDATE()) <span class="operator">-</span> <span class="number">6</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> <span class="string">&#x27;当前周的最后一天&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Command Line Interface</title>
    <url>/2018/01/18/php-cli/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>PHP</code> 提供了一种 <code>CLI SAPI - Server Application Programming Interface</code>，服务端应用编程接口的支持，意为 <code>CLI - Command Line Interface</code>，即命令行接口。也是 <code>Web</code> 脚本语言 <code>PHP</code> 在系统命令行（<code>Shell</code>）下的另一种形式，用户可以在系统命令中使用 <code>PHP</code> 编写交互代码</p>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>开发外壳应用</p>
<h1 id="CLI-SAPI-和其它-SAPI-模块的区别"><a href="#CLI-SAPI-和其它-SAPI-模块的区别" class="headerlink" title="CLI SAPI 和其它 SAPI 模块的区别"></a>CLI SAPI 和其它 SAPI 模块的区别</h1><ul>
<li>与 <code>CGI SAPI</code> 不同，其输出没有任何头信息</li>
<li><code>CLI SAPI</code> 强制覆盖了 <code>php.ini</code> 中的某些设置，因为这些设置在外壳环境下是没有意义</li>
<li>为了减轻外壳环境下的工作，定义了如下常量</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>STDIN</code></td>
<td>一个已打开的指向 <code>stdin</code> 的流，调用方法：<code>$stdin = fopen(&#39;php://stdin&#39;, &#39;r&#39;);</code></td>
<td></td>
</tr>
<tr>
<td><code>STDOUT</code></td>
<td>一个已打开的指向 <code>stdout</code> 的流，调用方法：$stdout = fopen(‘php://stdout’, ‘w’);</td>
<td></td>
</tr>
<tr>
<td><code>STDERR</code></td>
<td>一个已打开的指向 <code>stderr</code> 的流， 调用方法：$stderr = fopen(‘php://stderr’, ‘w’);</td>
</tr>
</tbody>
</table>
<ul>
<li><code>CLI SAPI</code> 不会将当前目录改为已运行的脚本所在的目录</li>
</ul>
<h1 id="CLI-SAPI-模块的三种运行方式"><a href="#CLI-SAPI-模块的三种运行方式" class="headerlink" title="CLI SAPI 模块的三种运行方式"></a>CLI SAPI 模块的三种运行方式</h1><h2 id="让-PHP-运行指定文件"><a href="#让-PHP-运行指定文件" class="headerlink" title="让 PHP 运行指定文件"></a>让 PHP 运行指定文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php test.php</span><br><span class="line">或者</span><br><span class="line">$ php -f test.php</span><br></pre></td></tr></table></figure>
<h2 id="在命令行直接运行-PHP-代码"><a href="#在命令行直接运行-PHP-代码" class="headerlink" title="在命令行直接运行 PHP 代码"></a>在命令行直接运行 PHP 代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php -r <span class="string">&#x27;print_r(get_defined_constants());&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过标准输入-stdin-提供需要运行的-PHP-代码"><a href="#通过标准输入-stdin-提供需要运行的-PHP-代码" class="headerlink" title="通过标准输入 stdin 提供需要运行的 PHP 代码"></a>通过标准输入 stdin 提供需要运行的 PHP 代码</h2><h1 id="PHP-CLI-应用场景"><a href="#PHP-CLI-应用场景" class="headerlink" title="PHP CLI 应用场景"></a>PHP CLI 应用场景</h1><h2 id="多线程应用"><a href="#多线程应用" class="headerlink" title="多线程应用"></a>多线程应用</h2><ul>
<li>使用多进程，子进程结束以后，内核会负责回收资源</li>
<li>使用多进程，子进程异常退出不会导致整个进程 <code>Thread</code> 退出，父进程还有机会重建流程</li>
<li>一个常驻主进程，只负责任务分发，逻辑理清楚</li>
</ul>
<h2 id="定时执行-PHP-程序"><a href="#定时执行-PHP-程序" class="headerlink" title="定时执行 PHP 程序"></a>定时执行 PHP 程序</h2><blockquote>
<p>利用 Linux 的 crontab 命令，文件路径建议使用绝对路径。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The task you plan to perform</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;PHP is the best programming language.&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">// 每分钟执行一次脚本并且输出</span><br><span class="line">* * * * * /usr/bin/php /usr/<span class="built_in">local</span>/src/test.php</span><br><span class="line"></span><br><span class="line">// 每分钟执行一次脚本并且在后台运行</span><br><span class="line">* * * * * /usr/bin/php /usr/<span class="built_in">local</span>/src/test.php &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<h2 id="开发桌面程序"><a href="#开发桌面程序" class="headerlink" title="开发桌面程序"></a>开发桌面程序</h2><blockquote>
<p>使用 PHP CLI 和 GTK 包。</p>
</blockquote>
<h2 id="Linux-下编写-PHP-的-Shell-脚本"><a href="#Linux-下编写-PHP-的-Shell-脚本" class="headerlink" title="Linux 下编写 PHP 的 Shell 脚本"></a>Linux 下编写 PHP 的 Shell 脚本</h2><h1 id="PHP-CLI-实例"><a href="#PHP-CLI-实例" class="headerlink" title="PHP CLI 实例"></a>PHP CLI 实例</h1><h1 id="PHP-CLI-进阶"><a href="#PHP-CLI-进阶" class="headerlink" title="PHP CLI 进阶"></a>PHP CLI 进阶</h1>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 依赖管理器</title>
    <url>/2018/01/18/php-composer/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><a href="https://getcomposer.org/">Composer Homepage</a></li>
<li><a href="https://github.com/composer/composer">Composer GitHub</a></li>
<li><a href="https://getcomposer.org/doc/">Composer 英文文档</a></li>
<li><a href="http://docs.phpcomposer.com/">Composer 中文文档</a></li>
<li><a href="https://pkg.phpcomposer.com/">Coomposer 中国全量镜像</a></li>
</ul>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Composer</code> 是 <code>PHP</code> 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h3><blockquote>
<p>局部安装一般指当前下载安装的目录。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 命令安装</span><br><span class="line">$ curl -sS https://getcomposer.org/installer | php</span><br><span class="line"></span><br><span class="line">// 获取更多的信息</span><br><span class="line">$ curl -sS https://getcomposer.org/installer | php -- --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果上述方法安装失败，可使用 <code>php</code> 命令下载安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php -r <span class="string">&quot;readfile(&#x27;https://getcomposer.org/installer&#x27;);&quot;</span> | php</span><br><span class="line">或者</span><br><span class="line">$ php -r <span class="string">&quot;copy(&#x27;https://getcomposer.org/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span></span><br><span class="line">$ php -r <span class="string">&quot;if (hash_file(&#x27;SHA384&#x27;, &#x27;composer-setup.php&#x27;) === &#x27;544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061&#x27;) &#123; echo &#x27;Installer verified&#x27;; &#125; else &#123; echo &#x27;Installer corrupt&#x27;; unlink(&#x27;composer-setup.php&#x27;); &#125; echo PHP_EOL;&quot;</span></span><br><span class="line">$ php composer-setup.php</span><br><span class="line">$ php -r <span class="string">&quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><blockquote>
<p>全局安装其实就是把 <code>composer</code> 命令放到环境系统变量识别的路径中。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure>
<p>如果命令因为权限执行失败，请使用 <code>sudo</code> 再次尝试运行 <code>mv</code> 那行命令。</p>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><blockquote>
<p>默认情况下，通过 <code>brew</code> 安装的可执行命令在 <code>/usr/local/bin</code> 目录中做了软链。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew search composer</span><br><span class="line">$ brew install composer</span><br><span class="line">$ composer -V</span><br></pre></td></tr></table></figure>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h3><p>下载 <code>Composer-Setup.exe</code>，双击直接安装即可</p>
<h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><blockquote>
<p>如果收到 <code>readfile</code> 错误提示，使用 <code>http</code> 链接或者在 <code>php.ini</code> 中开启 <code>php_openssl.dll</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\username&gt;<span class="built_in">cd</span> C:\bin</span><br><span class="line">C:\bin&gt;php -r <span class="string">&quot;readfile(&#x27;https://getcomposer.org/installer&#x27;);&quot;</span> | php</span><br></pre></td></tr></table></figure>
<p>在 <code>composer.phar</code> 同级目录下新建文件 <code>composer.bat</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\bin&gt;<span class="built_in">echo</span> @php <span class="string">&quot;%~dp0composer.phar&quot;</span> %*&gt;composer.bat</span><br></pre></td></tr></table></figure>
<p>关闭当前的命令行窗口，打开新的命令行窗口进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\username&gt;composer -V</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="创建项目依赖"><a href="#创建项目依赖" class="headerlink" title="创建项目依赖"></a>创建项目依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建 composer.json 文件</span><br><span class="line">$ composer init</span><br></pre></td></tr></table></figure>
<h2 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装依赖</span><br><span class="line">$ composer install</span><br></pre></td></tr></table></figure>
<h2 id="更新项目依赖"><a href="#更新项目依赖" class="headerlink" title="更新项目依赖"></a>更新项目依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 更新依赖</span><br><span class="line">$ composer update</span><br></pre></td></tr></table></figure>
<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><h2 id="启用镜像服务方式"><a href="#启用镜像服务方式" class="headerlink" title="启用镜像服务方式"></a>启用镜像服务方式</h2><h3 id="系统全局配置"><a href="#系统全局配置" class="headerlink" title="系统全局配置"></a>系统全局配置</h3><p>将配置信息添加到 <code>Composer</code> 的全局配置文件 <code>config.json</code> 中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure>
<h3 id="单个项目配置"><a href="#单个项目配置" class="headerlink" title="单个项目配置"></a>单个项目配置</h3><p>将配置信息添加到某个项目的 <code>composer.json</code> 文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer config repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure>
<p>上述命令将会在项目的 <code>composer.json</code> 文件的末尾自动添加镜像的配置信息：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;repositories&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;packagist&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;composer&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://packagist.phpcomposer.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 的奇技淫巧</title>
    <url>/2019/12/02/php-diabolic-tricks-and-wicked-craft/</url>
    <content><![CDATA[<p><img src="/images/2019/201912031234.png" alt="201912031234.png"></p>
<p>🍓 每当看到 PHP 写的很冗长奇臭的代码亦或片段，我就有一股将它斩成几节的冲动，无奈中自有一种拔剑四顾心茫然之感（由于不同的 PHP 版本，加上语法的限制）。我在开发工具上是一个比较挑剔的人，在 macOS 也花了不少钱购置工具，每次看到其它人为了破解工具折腾的死去活来痛不欲生时，我巴不得他们多折腾一会儿。时间对每个人都是公平的，有的人拿时间无所谓的折腾，有的人拿时间有效率的充电，与其折腾我宁愿选择后者。『工欲善其事，必先利其器』，我觉得编码的一些技巧也同样适用。</p>
<span id="more"></span>
<h1 id="更加优雅的判断语句"><a href="#更加优雅的判断语句" class="headerlink" title="更加优雅的判断语句"></a>更加优雅的判断语句</h1><h2 id="isset-语句"><a href="#isset-语句" class="headerlink" title="isset 语句"></a>isset 语句</h2><h3 id="isset-参与判断赋值"><a href="#isset-参与判断赋值" class="headerlink" title="isset 参与判断赋值"></a>isset 参与判断赋值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = <span class="variable">$_REQUEST</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_array(<span class="variable">$array</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = (<span class="keyword">array</span>) <span class="variable">$_REQUEST</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="isset-参与并且的多个判断"><a href="#isset-参与并且的多个判断" class="headerlink" title="isset 参与并且的多个判断"></a>isset 参与并且的多个判断</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = (<span class="keyword">array</span>) <span class="variable">$_REQUEST</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = (<span class="keyword">array</span>) <span class="variable">$_REQUEST</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>], <span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>], <span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="isset-参与或者的多个判断"><a href="#isset-参与或者的多个判断" class="headerlink" title="isset 参与或者的多个判断"></a>isset 参与或者的多个判断</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = (<span class="keyword">array</span>) <span class="variable">$_REQUEST</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = (<span class="keyword">array</span>) <span class="variable">$_REQUEST</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<h2 id="empty-语句"><a href="#empty-语句" class="headerlink" title="empty 语句"></a>empty 语句</h2><h3 id="empty-参与判断赋值"><a href="#empty-参与判断赋值" class="headerlink" title="empty 参与判断赋值"></a>empty 参与判断赋值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = <span class="string">&#x27;oldValue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&#x27;newValue&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>] ?: <span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>] ?: <span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>] ?: <span class="string">&#x27;oldValue&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="empty-参与并且的多个判断"><a href="#empty-参与并且的多个判断" class="headerlink" title="empty 参与并且的多个判断"></a>empty 参与并且的多个判断</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;null&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;null&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="empty-参与或者的多个判断"><a href="#empty-参与或者的多个判断" class="headerlink" title="empty 参与或者的多个判断"></a>empty 参与或者的多个判断</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;null&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) || ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) || ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;null&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>]) || ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>]) || ! <span class="keyword">empty</span>(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<h2 id="判断大小语句"><a href="#判断大小语句" class="headerlink" title="判断大小语句"></a>判断大小语句</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> === <span class="variable">$b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> &gt; <span class="variable">$b</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> &lt;=&gt; <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Null-合并运算符"><a href="#Null-合并运算符" class="headerlink" title="Null 合并运算符"></a>Null 合并运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="literal">null</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_null(<span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>] = <span class="string">&#x27;c is null&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$array</span>[<span class="string">&#x27;d&#x27;</span>] === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable">$array</span>[<span class="string">&#x27;d&#x27;</span>] = <span class="string">&#x27;d is null&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="literal">null</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="string">&#x27;c&#x27;</span>] ??= <span class="string">&#x27;c is null&#x27;</span>;</span><br><span class="line"><span class="variable">$array</span>[<span class="string">&#x27;d&#x27;</span>] ??= <span class="string">&#x27;d is null&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="方法参数变短"><a href="#方法参数变短" class="headerlink" title="方法参数变短"></a>方法参数变短</h1><blockquote>
<p>方法参数变短的风险时增加了调用的难度，所以注释就很必要了。不过带来的好处时，方法的复用性远甚固定参数。尤其适合重构的场景，比如：之前的方法（N 多的地方调用这个方法）<strong>多加一个参数</strong> 就可以处理 <strong>现在的逻辑</strong> 的场景，我想你一定会遇到过，如果没有遇到过，别着急，迟早的事。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$a</span>, <span class="keyword">string</span> <span class="variable">$b</span>, <span class="keyword">string</span> <span class="variable">$c</span>, <span class="keyword">string</span> <span class="variable">$d</span>, <span class="keyword">string</span> <span class="variable">$e</span>, <span class="keyword">array</span> <span class="variable">$f</span>, <span class="keyword">bool</span> <span class="variable">$g</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>, <span class="variable">$e</span>, <span class="variable">$f</span>, <span class="variable">$e</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    var_dump(<span class="variable">$args</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    var_dump(func_get_args());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更加优雅的预定义变量"><a href="#更加优雅的预定义变量" class="headerlink" title="更加优雅的预定义变量"></a>更加优雅的预定义变量</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$array</span>, <span class="keyword">bool</span> <span class="variable">$printed</span> = <span class="literal">false</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$b</span> = [];</span><br><span class="line">    <span class="variable">$c</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$d</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$e</span> = <span class="keyword">new</span> \<span class="built_in">stdClass</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 处理...</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span> = doSomething();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span> ?: [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$array</span>, <span class="keyword">bool</span> <span class="variable">$printed</span> = <span class="literal">false</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    [<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>, <span class="variable">$e</span>] = [<span class="string">&#x27;&#x27;</span>, [], <span class="literal">false</span>, <span class="number">0</span>, <span class="keyword">new</span> \<span class="built_in">stdClass</span>()];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 处理...</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span> = doSomething();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span> ?: [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用标准类库"><a href="#使用标准类库" class="headerlink" title="使用标准类库"></a>使用标准类库</h1><p><a href="https://www.php.net/manual/zh/book.spl.php">PHP标准库 (SPL)</a></p>
<p>SPL，即 PHP 标准库（Standard PHP Library），从 PHP 5.0 起内置的组件和接口，并且从 PHP5.3 已逐渐的成熟。SPL 其实在所有的 PHP5 开发环境中被内置，同时无需任何设置。然而 SPL 了似乎被我们无视了，我们总是喜欢造一些不靠谱的轮子也不愿意花时间去学习一些成熟的解决方案。通过 SPL 工具集合我们就可以轻松组装一把瑞士军刀，当然，我这么说可能有些苍白无力，如果你刷过算法和数据结构，你一定懂 SPL 的匠心。</p>
<h2 id="实例之文件信息类"><a href="#实例之文件信息类" class="headerlink" title="实例之文件信息类"></a>实例之文件信息类</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="keyword">__DIR__</span> . <span class="string">&#x27;/a.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">new</span> <span class="built_in">SplFileInfo</span>(<span class="variable">$filename</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;getBasename(<span class="string">&#x27;.txt&#x27;</span>));</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;getExtension());</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;getFilename());</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;getGroup());</span><br><span class="line">var_dump(date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="variable">$info</span>-&gt;getCTime()));</span><br><span class="line">var_dump(date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="variable">$info</span>-&gt;getATime()));</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;isDir());</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;isFile());</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;isReadable());</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;isWritable());</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;isExecutable());</span><br><span class="line">var_dump(<span class="variable">$info</span>-&gt;getOwner());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;txt&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;a.txt&quot;</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">string</span>(<span class="number">19</span>) <span class="string">&quot;2019-12-03 03:18:21&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">19</span>) <span class="string">&quot;2019-12-03 03:18:22&quot;</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">501</span>)</span><br></pre></td></tr></table></figure>
<h2 id="实例之优先级队列"><a href="#实例之优先级队列" class="headerlink" title="实例之优先级队列"></a>实例之优先级队列</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$queue</span> = <span class="keyword">new</span> <span class="built_in">SplPriorityQueue</span>();</span><br><span class="line"><span class="variable">$queue</span>-&gt;insert(<span class="string">&#x27;A&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;insert(<span class="string">&#x27;B&#x27;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;insert(<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;insert(<span class="string">&#x27;D&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;insert(<span class="string">&#x27;E&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;insert(<span class="string">&#x27;F&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$queue</span>-&gt;count());</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$queue</span>-&gt;valid()) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$queue</span>-&gt;current(), <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="variable">$queue</span>-&gt;next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$queue</span>-&gt;compare(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">6</span>)</span><br><span class="line">B E F A D C</span><br><span class="line"><span class="keyword">int</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="交换两个变量"><a href="#交换两个变量" class="headerlink" title="交换两个变量"></a>交换两个变量</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">[<span class="variable">$b</span>, <span class="variable">$a</span>] = [<span class="variable">$a</span>, <span class="variable">$b</span>];</span><br><span class="line">var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> ^= <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> ^= <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span> ^= <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$tmp</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$tmp</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="定义函数并立即执行"><a href="#定义函数并立即执行" class="headerlink" title="定义函数并立即执行"></a>定义函数并立即执行</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">call_user_func(<span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="闭包当成对象的成员方法或者静态成员方法"><a href="#闭包当成对象的成员方法或者静态成员方法" class="headerlink" title="闭包当成对象的成员方法或者静态成员方法"></a>闭包当成对象的成员方法或者静态成员方法</h2><p>关于 bind 和 bindTo 的官网文档解释有点绕，其实它们的功能与 JS 中的 <code>call</code> 和 <code>apply</code> 差求不多，另外 <a href="https://github.com/lin-xin/blog/issues/7">JavaScript 中 apply 、call 的详解</a></p>
<h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_map(<span class="string">&#x27;strtoupper&#x27;</span>, <span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$func</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">array</span> <span class="variable">$array</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;doSomething(<span class="variable">$array</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$func</span>-&gt;bindTo(<span class="variable">$test</span>, <span class="variable">$test</span>)([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]);</span><br><span class="line">var_dump(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;B&quot;</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;C&quot;</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;D&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">DynamicDefinition</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="variable">$args</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_callable(<span class="keyword">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func(<span class="keyword">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;, <span class="variable">$args</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">RuntimeException</span>(<span class="string">&quot;Method <span class="subst">&#123;$name&#125;</span> does not exist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="variable">$value</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125; = is_callable(<span class="variable">$value</span>) ? <span class="variable">$value</span>-&gt;bindTo(<span class="keyword">$this</span>, <span class="keyword">$this</span>) : <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DynamicDefinition</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$privateValue</span> = <span class="string">&#x27;I am private&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = <span class="keyword">new</span> Foo;</span><br><span class="line"><span class="variable">$foo</span>-&gt;bar = <span class="function"><span class="keyword">function</span> (<span class="params">...<span class="variable">$arguments</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable">$prefix</span> = implode(<span class="string">&#x27;➣&#x27;</span>, <span class="variable">$args</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$prefix</span> . <span class="string">&#x27; &#x27;</span> . <span class="keyword">$this</span>-&gt;privateValue;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$foo</span>-&gt;bar(<span class="string">&#x27;🙏&#x27;</span>, <span class="string">&#x27;🧨&#x27;</span>, <span class="string">&#x27;🎉&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">🙏➣🧨➣🎉 I am <span class="keyword">private</span></span><br></pre></td></tr></table></figure>
<h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="keyword">int</span> <span class="variable">$a</span> = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="variable">$b</span> = <span class="number">22</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$aFunc</span> = <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Foo::<span class="variable">$a</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$bFunc</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$aResult</span> = <span class="built_in">Closure</span>::bind(<span class="variable">$aFunc</span>, <span class="literal">null</span>, Foo::class);</span><br><span class="line"><span class="variable">$bResult</span> = <span class="built_in">Closure</span>::bind(<span class="variable">$bFunc</span>, <span class="keyword">new</span> Foo(), Foo::class);</span><br><span class="line">var_dump(<span class="variable">$aResult</span>(), <span class="variable">$bResult</span>());</span><br></pre></td></tr></table></figure>
<p>持续更新中…</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 日期相关计算</title>
    <url>/2018/04/13/php-date-calculation/</url>
    <content><![CDATA[<p>日期函数在平时的开发中用的比较广泛，尤其是 <code>date()</code> 函数，强大到让人窒息，其格式之多让人目眩。这里我也只能管中窥豹了，更多的用法请参看<a href="http://php.net/manual/en/function.date.php">官方文档</a>。</p>
<span id="more"></span>
<h1 id="函数-date-可识别的格式"><a href="#函数-date-可识别的格式" class="headerlink" title="函数 date 可识别的格式"></a>函数 date 可识别的格式</h1><blockquote>
<p>这里我无耻的抄了一遍手册，不为别的，就是加强一下自己的记忆，见笑了。</p>
</blockquote>
<h2 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a</code></td>
<td>小写的上午和下午值</td>
<td>am 或 pm</td>
</tr>
<tr>
<td><code>A</code></td>
<td>大写的上午和下午值</td>
<td>AM 或 PM</td>
</tr>
<tr>
<td><code>B</code></td>
<td>Swatch Internet 标准时</td>
<td>000 到 999</td>
</tr>
<tr>
<td><code>g</code></td>
<td>小时，12 小时格式，没有前导零</td>
<td>1 到 12</td>
</tr>
<tr>
<td><code>G</code></td>
<td>小时，24 小时格式，没有前导零</td>
<td>0 到 23</td>
</tr>
<tr>
<td><code>h</code></td>
<td>小时，12 小时格式，有前导零</td>
<td>01 到 12</td>
</tr>
<tr>
<td><code>H</code></td>
<td>小时，24 小时格式，有前导零</td>
<td>00 到 23</td>
</tr>
<tr>
<td><code>i</code></td>
<td>有前导零的分钟数</td>
<td>00 到 59&gt;</td>
</tr>
<tr>
<td><code>s</code></td>
<td>秒数，有前导零</td>
<td>00 到 59&gt;</td>
</tr>
<tr>
<td><code>u</code></td>
<td>毫秒（PHP 5.2.2 新加）。需要注意的是 <code>date()</code> 函数总是返回 000000 因为它只接受 integer 参数，而 <code>DateTime::format()</code> 才支持毫秒</td>
<td>示例: 654321</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = strtotime(<span class="string">&#x27;2020-06-01 12:59:59&#x27;</span>);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> =&gt; date(<span class="string">&#x27;a&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span> =&gt; date(<span class="string">&#x27;A&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span> =&gt; date(<span class="string">&#x27;B&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span> =&gt; date(<span class="string">&#x27;g&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span> =&gt; date(<span class="string">&#x27;G&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span> =&gt; date(<span class="string">&#x27;h&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span> =&gt; date(<span class="string">&#x27;H&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span> =&gt; date(<span class="string">&#x27;i&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span> =&gt; date(<span class="string">&#x27;s&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span> =&gt; date(<span class="string">&#x27;u&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [a] =&gt; pm</span><br><span class="line">    [A] =&gt; PM</span><br><span class="line">    [B] =&gt; <span class="number">249</span></span><br><span class="line">    [g] =&gt; <span class="number">12</span></span><br><span class="line">    [G] =&gt; <span class="number">12</span></span><br><span class="line">    [h] =&gt; <span class="number">12</span></span><br><span class="line">    [H] =&gt; <span class="number">12</span></span><br><span class="line">    [i] =&gt; <span class="number">59</span></span><br><span class="line">    [s] =&gt; <span class="number">59</span></span><br><span class="line">    [u] =&gt; <span class="number">000000</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="时区格式"><a href="#时区格式" class="headerlink" title="时区格式"></a>时区格式</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>e</code></td>
<td>时区标识（PHP 5.1.0 新加）</td>
<td>例如：UTC，GMT，Atlantic/Azores</td>
</tr>
<tr>
<td><code>I</code></td>
<td>是否为夏令时</td>
<td>如果是夏令时为 1，否则为 0</td>
</tr>
<tr>
<td><code>O</code></td>
<td>与格林威治时间相差的小时数</td>
<td>例如：+0200</td>
</tr>
<tr>
<td><code>P</code></td>
<td>与格林威治时间（GMT）的差别，小时和分钟之间有冒号分隔（PHP 5.1.3 新加）</td>
<td>例如：+02:00</td>
</tr>
<tr>
<td><code>T</code></td>
<td>本机所在的时区</td>
<td>例如：EST，MDT（在 Windows 下为完整文本格式，例如：<code>Eastern Standard Time</code>，中文版会显示『中国标准时间』）</td>
</tr>
<tr>
<td><code>Z</code></td>
<td>时差偏移量的秒数。UTC 西边的时区偏移量总是负的，UTC 东边的时区偏移量总是正的</td>
<td>-43200 到 43200</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = strtotime(<span class="string">&#x27;2020-06-01 12:59:59&#x27;</span>);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span> =&gt; date(<span class="string">&#x27;e&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span> =&gt; date(<span class="string">&#x27;I&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span> =&gt; date(<span class="string">&#x27;O&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span> =&gt; date(<span class="string">&#x27;P&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span> =&gt; date(<span class="string">&#x27;T&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [e] =&gt; PRC</span><br><span class="line">    [I] =&gt; <span class="number">0</span></span><br><span class="line">    [O] =&gt; +<span class="number">0800</span></span><br><span class="line">    [P] =&gt; +<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">    [T] =&gt; CST</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="日期时间格式"><a href="#日期时间格式" class="headerlink" title="日期时间格式"></a>日期时间格式</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>c</code></td>
<td>ISO 8601 格式的日期（PHP 5 新加）</td>
<td>2004-02-12T15:19:21+00:00</td>
</tr>
<tr>
<td><code>r</code></td>
<td>RFC 822 格式的日期</td>
<td>例如：Thu, 21 Dec 2000 16:01:07 +0200</td>
</tr>
<tr>
<td><code>U</code></td>
<td>从 Unix 纪元（January 1 1970 00:00:00 GMT）开始至今的秒数</td>
<td>参见 <code>time()</code></td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = strtotime(<span class="string">&#x27;2020-06-01 12:59:59&#x27;</span>);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span> =&gt; date(<span class="string">&#x27;c&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span> =&gt; date(<span class="string">&#x27;r&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span> =&gt; date(<span class="string">&#x27;U&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [c] =&gt; <span class="number">2020</span>-<span class="number">06</span>-<span class="number">01</span>T12:<span class="number">59</span>:<span class="number">59</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">    [r] =&gt; Mon, <span class="number">01</span> Jun <span class="number">2020</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">59</span> +<span class="number">0800</span></span><br><span class="line">    [U] =&gt; <span class="number">1590987599</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="日格式"><a href="#日格式" class="headerlink" title="日格式"></a>日格式</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>d</code></td>
<td>月份中的第几天，有前导零的 2 位数字</td>
<td>01 到 31</td>
</tr>
<tr>
<td><code>D</code></td>
<td>星期中的第几天，文本表示，3 个字母</td>
<td>Mon 到 Sun</td>
</tr>
<tr>
<td><code>j</code></td>
<td>月份中的第几天，没有前导零</td>
<td>1 到 31</td>
</tr>
<tr>
<td><code>l</code></td>
<td>星期几，完整的文本格式</td>
<td>Sunday 到 Saturday</td>
</tr>
<tr>
<td><code>N</code></td>
<td>ISO-8601 格式数字表示的星期中的第几天（PHP 5.1.0 新加）</td>
<td>1（表示星期一）到 7（表示星期天）</td>
</tr>
<tr>
<td><code>S</code></td>
<td>每月天数后面的英文后缀，2 个字符</td>
<td>st，nd，rd 或者 th。可以和 j 一起用</td>
</tr>
<tr>
<td><code>w</code></td>
<td>星期中的第几天，数字表示</td>
<td>0（表示星期天）到 6（表示星期六）</td>
</tr>
<tr>
<td><code>z</code></td>
<td>年份中的第几天</td>
<td>0 到 365</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = strtotime(<span class="string">&#x27;2020-06-01 12:59:59&#x27;</span>);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span> =&gt; date(<span class="string">&#x27;d&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span> =&gt; date(<span class="string">&#x27;D&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span> =&gt; date(<span class="string">&#x27;j&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span> =&gt; date(<span class="string">&#x27;l&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span> =&gt; date(<span class="string">&#x27;N&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span> =&gt; date(<span class="string">&#x27;S&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span> =&gt; date(<span class="string">&#x27;w&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span> =&gt; date(<span class="string">&#x27;z&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [d] =&gt; <span class="number">01</span></span><br><span class="line">    [D] =&gt; Mon</span><br><span class="line">    [j] =&gt; <span class="number">1</span></span><br><span class="line">    [l] =&gt; Monday</span><br><span class="line">    [N] =&gt; <span class="number">1</span></span><br><span class="line">    [S] =&gt; st</span><br><span class="line">    [w] =&gt; <span class="number">1</span></span><br><span class="line">    [z] =&gt; <span class="number">152</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="星期格式"><a href="#星期格式" class="headerlink" title="星期格式"></a>星期格式</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>W</code></td>
<td>ISO-8601 格式年份中的第几周，每周从星期一开始（PHP 4.1.0 新加的）</td>
<td>例如：42（当年的第 42 周）</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = strtotime(<span class="string">&#x27;2020-06-01 12:59:59&#x27;</span>);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span> =&gt; date(<span class="string">&#x27;W&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [W] =&gt; <span class="number">23</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="月格式"><a href="#月格式" class="headerlink" title="月格式"></a>月格式</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>F</code></td>
<td>月份，完整的文本格式，例如 January 或者 March</td>
<td>January 到 December</td>
</tr>
<tr>
<td><code>m</code></td>
<td>数字表示的月份，有前导零</td>
<td>01 到 12</td>
</tr>
<tr>
<td><code>M</code></td>
<td>三个字母缩写表示的月份</td>
<td>Jan 到 Dec</td>
</tr>
<tr>
<td><code>n</code></td>
<td>数字表示的月份，没有前导零</td>
<td>1 到 12</td>
</tr>
<tr>
<td><code>t</code></td>
<td>指定的月份有几天</td>
<td>28 到 31</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = strtotime(<span class="string">&#x27;2020-06-01 12:59:59&#x27;</span>);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span> =&gt; date(<span class="string">&#x27;F&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span> =&gt; date(<span class="string">&#x27;m&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span> =&gt; date(<span class="string">&#x27;M&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span> =&gt; date(<span class="string">&#x27;n&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span> =&gt; date(<span class="string">&#x27;t&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [F] =&gt; June</span><br><span class="line">    [m] =&gt; <span class="number">06</span></span><br><span class="line">    [M] =&gt; Jun</span><br><span class="line">    [n] =&gt; <span class="number">6</span></span><br><span class="line">    [t] =&gt; <span class="number">30</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="年格式"><a href="#年格式" class="headerlink" title="年格式"></a>年格式</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>L</code></td>
<td>是否为闰年</td>
<td>如果是闰年为 1，否则为 0</td>
</tr>
<tr>
<td><code>o</code></td>
<td>ISO-8601 格式年份数字。这和 Y 的值相同，只除了如果 ISO 的星期数（W）属于前一年或下一年，则用那一年。（PHP 5.1.0 新加）</td>
<td>例如：1999 or 2003</td>
</tr>
<tr>
<td><code>Y</code></td>
<td>4 位数字完整表示的年份</td>
<td>例如：1999 或 2003</td>
</tr>
<tr>
<td><code>y</code></td>
<td>2 位数字表示的年份</td>
<td>例如：99 或 03</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = strtotime(<span class="string">&#x27;2020-06-01 12:59:59&#x27;</span>);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span> =&gt; date(<span class="string">&#x27;L&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span> =&gt; date(<span class="string">&#x27;o&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span> =&gt; date(<span class="string">&#x27;Y&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span> =&gt; date(<span class="string">&#x27;y&#x27;</span>, <span class="variable">$time</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [L] =&gt; <span class="number">1</span></span><br><span class="line">    [o] =&gt; <span class="number">2020</span></span><br><span class="line">    [Y] =&gt; <span class="number">2020</span></span><br><span class="line">    [y] =&gt; <span class="number">20</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="计算指定日期时间"><a href="#计算指定日期时间" class="headerlink" title="计算指定日期时间"></a>计算指定日期时间</h1><h2 id="当前日期时间的相对计算"><a href="#当前日期时间的相对计算" class="headerlink" title="当前日期时间的相对计算"></a>当前日期时间的相对计算</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">date_default_timezone_set(<span class="string">&#x27;PRC&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;当前日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;前一天的此时日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, strtotime(<span class="string">&#x27;-1 day&#x27;</span>)),</span><br><span class="line">    <span class="string">&#x27;后一天的此时日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, strtotime(<span class="string">&#x27;+1 day&#x27;</span>)),</span><br><span class="line">    <span class="string">&#x27;上一个月的此时日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, strtotime(<span class="string">&#x27;-1 month&#x27;</span>)),</span><br><span class="line">    <span class="string">&#x27;下一个月的此时日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, strtotime(<span class="string">&#x27;+1 month&#x27;</span>)),</span><br><span class="line">    <span class="string">&#x27;加 1 月 2 周 3 天 4 时 5 分 6 秒的此时日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, strtotime(<span class="string">&#x27;+1 month +2 weeks +3 days +4 hours +5 minutes +6 seconds&#x27;</span>)),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [当前日期时间] =&gt; <span class="number">2018</span>-<span class="number">04</span>-<span class="number">13</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">30</span></span><br><span class="line">    [前一天的此时日期时间] =&gt; <span class="number">2018</span>-<span class="number">04</span>-<span class="number">12</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">30</span></span><br><span class="line">    [后一天的此时日期时间] =&gt; <span class="number">2018</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">30</span></span><br><span class="line">    [上一个月的此时日期时间] =&gt; <span class="number">2018</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">30</span></span><br><span class="line">    [下一个月的此时日期时间] =&gt; <span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">30</span></span><br><span class="line">    [加 <span class="number">1</span> 月 <span class="number">2</span> 周 <span class="number">3</span> 天 <span class="number">4</span> 时 <span class="number">5</span> 分 <span class="number">6</span> 秒的此时日期时间] =&gt; <span class="number">2018</span>-<span class="number">05</span>-<span class="number">31</span> <span class="number">01</span>:<span class="number">29</span>:<span class="number">36</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="起始结束日期时间的计算"><a href="#起始结束日期时间的计算" class="headerlink" title="起始结束日期时间的计算"></a>起始结束日期时间的计算</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">date_default_timezone_set(<span class="string">&#x27;PRC&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;本周起始日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, date(<span class="string">&#x27;m&#x27;</span>), date(<span class="string">&#x27;d&#x27;</span>) - date(<span class="string">&#x27;w&#x27;</span>) + <span class="number">1</span> - <span class="number">5</span>, date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">    <span class="string">&#x27;本周结束日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, date(<span class="string">&#x27;m&#x27;</span>), date(<span class="string">&#x27;d&#x27;</span>) - date(<span class="string">&#x27;w&#x27;</span>) + <span class="number">7</span> - <span class="number">5</span>, date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">    <span class="string">&#x27;上月起始日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, date(<span class="string">&#x27;m&#x27;</span>) - <span class="number">1</span>, <span class="number">1</span>, date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">    <span class="string">&#x27;上月结束日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, date(<span class="string">&#x27;m&#x27;</span>), <span class="number">0</span>, date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">    <span class="string">&#x27;本月起始日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, date(<span class="string">&#x27;m&#x27;</span>), <span class="number">1</span>, date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">    <span class="string">&#x27;本月结束日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, date(<span class="string">&#x27;m&#x27;</span>), date(<span class="string">&#x27;t&#x27;</span>), date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">    <span class="string">&#x27;下月起始日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, date(<span class="string">&#x27;m&#x27;</span>) + <span class="number">1</span>, <span class="number">1</span>, date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">    <span class="string">&#x27;下月结束日期时间&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, mktime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, date(<span class="string">&#x27;m&#x27;</span>) + <span class="number">1</span>, date(<span class="string">&#x27;t&#x27;</span>) + <span class="number">1</span>, date(<span class="string">&#x27;Y&#x27;</span>))),</span><br><span class="line">];</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [本周起始日期时间] =&gt; <span class="number">2018</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    [本周结束日期时间] =&gt; <span class="number">2018</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">    [上月起始日期时间] =&gt; <span class="number">2018</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    [上月结束日期时间] =&gt; <span class="number">2018</span>-<span class="number">03</span>-<span class="number">31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">    [本月起始日期时间] =&gt; <span class="number">2018</span>-<span class="number">04</span>-<span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    [本月结束日期时间] =&gt; <span class="number">2018</span>-<span class="number">04</span>-<span class="number">30</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">    [下月起始日期时间] =&gt; <span class="number">2018</span>-<span class="number">05</span>-<span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    [下月结束日期时间] =&gt; <span class="number">2018</span>-<span class="number">05</span>-<span class="number">31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 编码标准插件</title>
    <url>/2018/02/07/php-coding-standards-plugin/</url>
    <content><![CDATA[<p>无规矩不成方圆，无规范不能协作。每门编程语言几乎都有一套合乎自有章法的规矩，当然了，PHP 也不例外。即使是你独立撸码，也自有一套自己的章法，可惜，你不是一个人在战斗，在这个讲究编程效率的兵团作战时代，没有人愿意忍受别人糟糕的代码风格。是的，代码的的确确是机器去执行的，但是因更改需求而维护的代码可不是机器人干的。为了让代码可维护，看起来像那么回事，还是尽力码好吧，不然，下一个遭吐槽可能就是你了，我已经不至一次听过『这特么谁写的』这句话了，反正听起来不像是在夸谁。</p>
<h1 id="PHP-CodeSniffer"><a href="#PHP-CodeSniffer" class="headerlink" title="PHP CodeSniffer"></a>PHP CodeSniffer</h1><blockquote>
<ul>
<li><a href="http://pear.php.net/package/PHP_CodeSniffer">PHP_CodeSniffer Pear</a></li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer GitHub</a></li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer/wiki">PHP_CodeSniffer Documentation</a></li>
</ul>
</blockquote>
<h2 id="CodeSniffer-安装"><a href="#CodeSniffer-安装" class="headerlink" title="CodeSniffer 安装"></a>CodeSniffer 安装</h2><p>PHP CodeSniffer 有两个脚本，<code>phpcs</code> 脚本用来检测违反定义的编码标准，<code>phpcbf</code> 脚本用来自动纠正编码标准违规。</p>
<h3 id="Curl-安装-CodeSniffer"><a href="#Curl-安装-CodeSniffer" class="headerlink" title="Curl 安装 CodeSniffer"></a>Curl 安装 CodeSniffer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 下载 phpcs 和 phpcbf 文件并移动到相应目录</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar</span><br><span class="line">$ sudo mv phpcs.phar /usr/<span class="built_in">local</span>/bin/phpcs</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/phpcs</span><br><span class="line">$ curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar</span><br><span class="line">$ sudo mv phpcbf.phar /usr/<span class="built_in">local</span>/bin/phpcbf</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/phpcbf</span><br></pre></td></tr></table></figure>
<h3 id="Composer-安装-CodeSniffer"><a href="#Composer-安装-CodeSniffer" class="headerlink" title="Composer 安装 CodeSniffer"></a>Composer 安装 CodeSniffer</h3><blockquote>
<p>安装完成后，将 <code>$HOME/.composer/vendor/bin</code> 添加到系统 <code>PATH</code> 中。</p>
</blockquote>
<ul>
<li>全局安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 squizlabs/php_codesniffer</span><br><span class="line">$ composer global require <span class="string">&quot;squizlabs/php_codesniffer=*&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>项目安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim composer.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;require-dev&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;squizlabs/php_codesniffer&quot;</span>: <span class="string">&quot;3.*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ composer install</span><br></pre></td></tr></table></figure>
<h2 id="工具设置"><a href="#工具设置" class="headerlink" title="工具设置"></a>工具设置</h2><h3 id="设置编码标准"><a href="#设置编码标准" class="headerlink" title="设置编码标准"></a>设置编码标准</h3><blockquote>
<p>支持的编码标准：<code>PEAR, Zend, PSR2, MySource, Squiz, PSR1</code>，默认：<code>PEAR</code>。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置编码标准为 PSR2</span><br><span class="line">$ phpcs --config-set default_standard PSR2</span><br></pre></td></tr></table></figure>
<h3 id="设置报告格式"><a href="#设置报告格式" class="headerlink" title="设置报告格式"></a>设置报告格式</h3><blockquote>
<p>支持的报告格式：<code>full, xml, checkstyle, csv, json, junit, emacs, source, summary, diff, svnblame, gitblame, hgblame, notifysend</code>，默认：<code>full</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置报告格式为 full</span><br><span class="line">$ phpcs --config-set report_format full</span><br></pre></td></tr></table></figure>
<h3 id="设置警告隐藏"><a href="#设置警告隐藏" class="headerlink" title="设置警告隐藏"></a>设置警告隐藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 默认值为 1</span><br><span class="line">$ phpcs --config-set show_warnings 0</span><br></pre></td></tr></table></figure>
<h3 id="设置运行进度"><a href="#设置运行进度" class="headerlink" title="设置运行进度"></a>设置运行进度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 默认值为 0</span><br><span class="line">$ phpcs --config-set show_progress 1</span><br></pre></td></tr></table></figure>
<h3 id="设置输出时使用润色"><a href="#设置输出时使用润色" class="headerlink" title="设置输出时使用润色"></a>设置输出时使用润色</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 默认值为 0</span><br><span class="line">$ phpcs --config-set colors 1</span><br></pre></td></tr></table></figure>
<h3 id="设置报告的宽度"><a href="#设置报告的宽度" class="headerlink" title="设置报告的宽度"></a>设置报告的宽度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置报告的宽度为 120</span><br><span class="line">$ phpcs --config-set report_width 120</span><br></pre></td></tr></table></figure>
<h3 id="设置文本字符编码"><a href="#设置文本字符编码" class="headerlink" title="设置文本字符编码"></a>设置文本字符编码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置文本字符编码为 UTF-8</span><br><span class="line">$ phpcs --config-set encoding UTF-8</span><br></pre></td></tr></table></figure>
<h3 id="设置制表符宽度"><a href="#设置制表符宽度" class="headerlink" title="设置制表符宽度"></a>设置制表符宽度</h3><blockquote>
<p>默认情况下，<code>PHP_CodeSniffer</code> 不会将检查文件中的制表符转换为空格，指定一个制表符宽度将使 <code>PHP_CodeSniffer</code> 用空格替换制表符。也可以通过设置 <code>tab_width</code> 配置选项来强制 <code>PHP_CodeSniffer</code> 将制表符替换为空格。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置制表符宽度为 4 个空格</span><br><span class="line">$ phpcs --config-set tab_width 4</span><br></pre></td></tr></table></figure>
<h3 id="设置-PHP-版本"><a href="#设置-PHP-版本" class="headerlink" title="设置 PHP 版本"></a>设置 PHP 版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 使用 PHP_VERSION_ID 获取后再设置</span><br><span class="line">$ phpcs --config-set php_version 70114</span><br></pre></td></tr></table></figure>
<h3 id="设置-PHP-路径"><a href="#设置-PHP-路径" class="headerlink" title="设置 PHP 路径"></a>设置 PHP 路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 使用 <span class="built_in">which</span> 命令获取后再设置</span><br><span class="line">$ phpcs --config-set php_path /usr/<span class="built_in">local</span>/bin/php</span><br></pre></td></tr></table></figure>
<h3 id="查看设置"><a href="#查看设置" class="headerlink" title="查看设置"></a>查看设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看刚才的一些设置</span><br><span class="line">$ phpcs --config-show</span><br><span class="line">Using config file: /Users/user/.composer/vendor/squizlabs/php_codesniffer/CodeSniffer.conf</span><br><span class="line"></span><br><span class="line">colors:           1</span><br><span class="line">default_standard: PSR2</span><br><span class="line">encoding:         UTF-8</span><br><span class="line">php_path:         /usr/<span class="built_in">local</span>/bin/php</span><br><span class="line">php_version:      70114</span><br><span class="line">report_format:    full</span><br><span class="line">report_width:     120</span><br><span class="line">show_progress:    1</span><br><span class="line">show_warnings:    1</span><br><span class="line">tab_width:        4</span><br></pre></td></tr></table></figure>
<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="指定编码标准"><a href="#指定编码标准" class="headerlink" title="指定编码标准"></a>指定编码标准</h3><blockquote>
<p>也可以自定义编码标准，然后加入到检查标准中。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phpcs --standard=PEAR /path/to/code/Demo.php</span><br><span class="line">或</span><br><span class="line">$ phpcs --standard=/path/to/MyStandard /path/to/code/Demo.php</span><br><span class="line">或</span><br><span class="line">$ phpcs --standard=PEAR,Squiz,/path/to/MyStandard /path/to/code/Demo.php</span><br></pre></td></tr></table></figure>
<h3 id="打印安装编码标准的列表"><a href="#打印安装编码标准的列表" class="headerlink" title="打印安装编码标准的列表"></a>打印安装编码标准的列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phpcs -i</span><br><span class="line">The installed coding standards are PEAR, Zend, PSR2, MySource, Squiz and PSR1</span><br></pre></td></tr></table></figure>
<h3 id="编码标准内的嗅探列表"><a href="#编码标准内的嗅探列表" class="headerlink" title="编码标准内的嗅探列表"></a>编码标准内的嗅探列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phpcs --standard=PSR2 -e</span><br><span class="line"></span><br><span class="line">The PSR2 standard contains 42 sniffs</span><br><span class="line"></span><br><span class="line">Generic (12 sniffs)</span><br><span class="line">-------------------</span><br><span class="line">  Generic.ControlStructures.InlineControlStructure</span><br><span class="line">  Generic.Files.ByteOrderMark</span><br><span class="line">  Generic.Files.LineEndings</span><br><span class="line">  Generic.Files.LineLength</span><br><span class="line">  Generic.Formatting.DisallowMultipleStatements</span><br><span class="line">  Generic.Functions.FunctionCallArgumentSpacing</span><br><span class="line">  Generic.NamingConventions.UpperCaseConstantName</span><br><span class="line">  Generic.PHP.DisallowShortOpenTag</span><br><span class="line">  Generic.PHP.LowerCaseConstant</span><br><span class="line">  Generic.PHP.LowerCaseKeyword</span><br><span class="line">  Generic.WhiteSpace.DisallowTabIndent</span><br><span class="line">  Generic.WhiteSpace.ScopeIndent</span><br><span class="line"></span><br><span class="line">PEAR (1 sniff)</span><br><span class="line">---------------</span><br><span class="line">  PEAR.Functions.ValidDefaultValue</span><br><span class="line"></span><br><span class="line">PSR1 (3 sniffs)</span><br><span class="line">---------------</span><br><span class="line">  PSR1.Classes.ClassDeclaration</span><br><span class="line">  PSR1.Files.SideEffects</span><br><span class="line">  PSR1.Methods.CamelCapsMethodName</span><br><span class="line"></span><br><span class="line">PSR2 (12 sniffs)</span><br><span class="line">----------------</span><br><span class="line">  PSR2.Classes.ClassDeclaration</span><br><span class="line">  PSR2.Classes.PropertyDeclaration</span><br><span class="line">  PSR2.ControlStructures.ControlStructureSpacing</span><br><span class="line">  PSR2.ControlStructures.ElseIfDeclaration</span><br><span class="line">  PSR2.ControlStructures.SwitchDeclaration</span><br><span class="line">  PSR2.Files.ClosingTag</span><br><span class="line">  PSR2.Files.EndFileNewline</span><br><span class="line">  PSR2.Methods.FunctionCallSignature</span><br><span class="line">  PSR2.Methods.FunctionClosingBrace</span><br><span class="line">  PSR2.Methods.MethodDeclaration</span><br><span class="line">  PSR2.Namespaces.NamespaceDeclaration</span><br><span class="line">  PSR2.Namespaces.UseDeclaration</span><br><span class="line"></span><br><span class="line">Squiz (14 sniffs)</span><br><span class="line">-----------------</span><br><span class="line">  Squiz.Classes.ValidClassName</span><br><span class="line">  Squiz.ControlStructures.ControlSignature</span><br><span class="line">  Squiz.ControlStructures.ForEachLoopDeclaration</span><br><span class="line">  Squiz.ControlStructures.ForLoopDeclaration</span><br><span class="line">  Squiz.ControlStructures.LowercaseDeclaration</span><br><span class="line">  Squiz.Functions.FunctionDeclaration</span><br><span class="line">  Squiz.Functions.FunctionDeclarationArgumentSpacing</span><br><span class="line">  Squiz.Functions.LowercaseFunctionKeywords</span><br><span class="line">  Squiz.Functions.MultiLineFunctionDeclaration</span><br><span class="line">  Squiz.Scope.MethodScope</span><br><span class="line">  Squiz.WhiteSpace.ControlStructureSpacing</span><br><span class="line">  Squiz.WhiteSpace.ScopeClosingBrace</span><br><span class="line">  Squiz.WhiteSpace.ScopeKeywordSpacing</span><br><span class="line">  Squiz.WhiteSpace.SuperfluousWhitespace</span><br></pre></td></tr></table></figure>
<h2 id="使用-CodeSniffer-格式化代码"><a href="#使用-CodeSniffer-格式化代码" class="headerlink" title="使用 CodeSniffer 格式化代码"></a>使用 CodeSniffer 格式化代码</h2><blockquote>
<p>请自行创建工程去测试。</p>
</blockquote>
<h3 id="CodeSniffer-格式化前的不规范代码"><a href="#CodeSniffer-格式化前的不规范代码" class="headerlink" title="CodeSniffer 格式化前的不规范代码"></a>CodeSniffer 格式化前的不规范代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Nilnice</span>\<span class="title">Acme</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Finder</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> IGNORE_VCS_FILES =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> IGNORE_DOT_FILES=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ignore</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt; ignore=<span class="built_in">static</span>::IGNORE_VCS_FILES|<span class="built_in">static</span>::IGNORE_DOT_FILES ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span>===count(<span class="keyword">$this</span>-&gt;dirs)&amp;&amp;<span class="number">0</span>===count(<span class="keyword">$this</span>-&gt;iterators))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">LogicException</span>(<span class="string">&#x27;You must call one of in() or append() methods before iterating over a Finder.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>===count( <span class="keyword">$this</span>-&gt;dirs ) &amp;&amp;<span class="number">0</span> ===count(<span class="keyword">$this</span>-&gt;iterators))&#123;</span><br><span class="line">            <span class="keyword">return</span>   <span class="keyword">$this</span> -&gt;searchInDirectory( <span class="keyword">$this</span>-&gt;dirs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$iterator</span>=<span class="keyword">new</span> \<span class="built_in">AppendIterator</span> ();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt; dirs        <span class="keyword">as</span> <span class="variable">$dir</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$iterator</span>-&gt;append(<span class="keyword">$this</span>-&gt;searchInDirectory( <span class="variable">$dir</span> )) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (  <span class="keyword">$this</span>-&gt;iterators <span class="keyword">as</span> <span class="variable">$it</span>) &#123;</span><br><span class="line">            <span class="variable">$iterator</span>-&gt;append(    <span class="variable">$it</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span><span class="variable">$iterator</span>;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="经过-phpcs-检查后的报告"><a href="#经过-phpcs-检查后的报告" class="headerlink" title="经过 phpcs 检查后的报告"></a>经过 phpcs 检查后的报告</h3><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-codesniffer-phpcs.png" alt="php-codesniffer-phpcs.png"></p>
<p>怎么样，这个检查结果明码标价，童叟无欺矣！</p>
<h3 id="使用-phpcbf-修理代码"><a href="#使用-phpcbf-修理代码" class="headerlink" title="使用 phpcbf 修理代码"></a>使用 phpcbf 修理代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 指定文件修理</span><br><span class="line">$ phpcbf ./src/Test.php</span><br></pre></td></tr></table></figure>
<h3 id="修理后的代码样式"><a href="#修理后的代码样式" class="headerlink" title="修理后的代码样式"></a>修理后的代码样式</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Nilnice</span>\<span class="title">Acme</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Finder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> IGNORE_VCS_FILES = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> IGNORE_DOT_FILES = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ignore</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt; ignore = <span class="built_in">static</span>::IGNORE_VCS_FILES | <span class="built_in">static</span>::IGNORE_DOT_FILES ;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//end __construct()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIterator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === count(<span class="keyword">$this</span>-&gt;dirs)&amp;&amp;<span class="number">0</span> === count(<span class="keyword">$this</span>-&gt;iterators)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">LogicException</span>(<span class="string">&#x27;You must call one of in() or append() methods before iterating over a Finder.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> === count(<span class="keyword">$this</span>-&gt;dirs) &amp;&amp;<span class="number">0</span> === count(<span class="keyword">$this</span>-&gt;iterators)) &#123;</span><br><span class="line">            <span class="keyword">return</span>   <span class="keyword">$this</span> -&gt;searchInDirectory(<span class="keyword">$this</span>-&gt;dirs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$iterator</span> = <span class="keyword">new</span> \<span class="built_in">AppendIterator</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt; dirs        <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">            <span class="variable">$iterator</span>-&gt;append(<span class="keyword">$this</span>-&gt;searchInDirectory(<span class="variable">$dir</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;iterators <span class="keyword">as</span> <span class="variable">$it</span>) &#123;</span><br><span class="line">            <span class="variable">$iterator</span>-&gt;append(<span class="variable">$it</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span><span class="variable">$iterator</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//end getIterator()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end class</span></span><br><span class="line"><span class="comment">// 此处多一空行</span></span><br></pre></td></tr></table></figure>
<h1 id="PHP-Coding-Standards-Fixer"><a href="#PHP-Coding-Standards-Fixer" class="headerlink" title="PHP Coding Standards Fixer"></a>PHP Coding Standards Fixer</h1><blockquote>
<ul>
<li><a href="http://cs.sensiolabs.org/">PHP Coding Standards Fixer Website</a></li>
<li><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP Coding Standards Fixer GitHub</a></li>
</ul>
</blockquote>
<h2 id="Fixer-安装"><a href="#Fixer-安装" class="headerlink" title="Fixer 安装"></a>Fixer 安装</h2><h3 id="Curl-或-Wget-方式安装"><a href="#Curl-或-Wget-方式安装" class="headerlink" title="Curl 或 Wget 方式安装"></a>Curl 或 Wget 方式安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -O php-cs-fixer</span><br><span class="line">或</span><br><span class="line">$ wget https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.10.2/php-cs-fixer.phar -O php-cs-fixer</span><br><span class="line">或</span><br><span class="line">$ curl -L http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o php-cs-fixer</span><br><span class="line">$ sudo chmod +x php-cs-fixer</span><br><span class="line">$ sudo mv php-cs-fixer /usr/<span class="built_in">local</span>/bin/php-cs-fixer</span><br></pre></td></tr></table></figure>
<h3 id="Composer-安装-Fixer"><a href="#Composer-安装-Fixer" class="headerlink" title="Composer 安装 Fixer"></a>Composer 安装 Fixer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer global require friendsofphp/php-cs-fixer</span><br><span class="line"></span><br><span class="line">// 如果之前设置过，就不需要</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.composer/vendor/bin&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Homebrew-安装-Fixer"><a href="#Homebrew-安装-Fixer" class="headerlink" title="Homebrew 安装 Fixer"></a>Homebrew 安装 Fixer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 先搜索 fixer 以确定名称后再安装</span><br><span class="line">$ brew install homebrew/php/php-cs-fixer</span><br></pre></td></tr></table></figure>
<h2 id="使用-Fixer-格式化代码"><a href="#使用-Fixer-格式化代码" class="headerlink" title="使用 Fixer 格式化代码"></a>使用 Fixer 格式化代码</h2><h3 id="使用-Fixer-格式化前的不规范代码"><a href="#使用-Fixer-格式化前的不规范代码" class="headerlink" title="使用 Fixer 格式化前的不规范代码"></a>使用 Fixer 格式化前的不规范代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">A</span> ;</span><br><span class="line"><span class="keyword">use</span> <span class="title">SebastianBergmann</span>\<span class="title">CodeCoverage</span>\<span class="title">InvalidArgumentException</span> ;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">FooBaseClass</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">    <span class="title">Bar1</span> ,</span></span><br><span class="line"><span class="class">    <span class="title">Bar2</span> ,</span></span><br><span class="line"><span class="class">    <span class="title">Bar3</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">const</span> FIRST=<span class="string">&#x27;first&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">const</span> SECOND=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">const</span> Z = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> E_FOO = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> E_BAR = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isNull</span> = <span class="literal">null</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hello</span>,     <span class="variable">$world</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$numbers</span>=<span class="keyword">array</span>(<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>,<span class="string">&#x27;four&#x27;</span>,<span class="string">&#x27;five&#x27;</span>,<span class="string">&#x27;six&#x27;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$v</span>, <span class="variable">$w</span> = <span class="string">&#x27;a&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$y</span> = <span class="variable">$w</span>;</span><br><span class="line">        <span class="variable">$result</span> = foo(</span><br><span class="line">            <span class="string">&#x27;arg1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;arg2&#x27;</span>,</span><br><span class="line">            <span class="number">10</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>      :</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span>  <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span><span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fOne</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argA</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argB</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argC</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argD</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argE</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argF</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argG</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argH</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$x</span> = <span class="variable">$argA</span> + <span class="variable">$argB</span> + <span class="variable">$argC</span></span><br><span class="line">            + <span class="variable">$argD</span> + <span class="variable">$argE</span> + <span class="variable">$argF</span></span><br><span class="line">            + <span class="variable">$argG</span> + <span class="variable">$argH</span>;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$field1</span>, <span class="variable">$field2</span>,</span><br><span class="line">            <span class="variable">$field3</span>, <span class="variable">$filed4</span>,</span><br><span class="line">            <span class="variable">$field5</span>, <span class="variable">$field6</span>) = explode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$x</span>);</span><br><span class="line">        fTwo(</span><br><span class="line">            <span class="variable">$argA</span>,</span><br><span class="line">            <span class="variable">$argB</span>,</span><br><span class="line">            <span class="variable">$argC</span>,</span><br><span class="line">            fThree(</span><br><span class="line">                <span class="variable">$argD</span>,</span><br><span class="line">                    <span class="variable">$argE</span>,</span><br><span class="line">                    <span class="variable">$argF</span>,</span><br><span class="line">                    <span class="variable">$argG</span>,</span><br><span class="line">                <span class="variable">$argH</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        <span class="variable">$z</span> = <span class="variable">$argA</span> === <span class="string">&#x27;Some string&#x27;</span></span><br><span class="line">            ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">        <span class="variable">$colors</span> = [</span><br><span class="line">            <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;black&#x27;</span>  ,</span><br><span class="line">            <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;gray&#x27;</span>  ,</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$count</span>=count(<span class="variable">$colors</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$colorString</span></span><br><span class="line">                = <span class="variable">$colors</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fTwo</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strA</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strB</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strC</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strD</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$strA</span> === <span class="string">&#x27;one&#x27;</span></span><br><span class="line">        || <span class="variable">$strB</span> === <span class="string">&#x27;two&#x27;</span></span><br><span class="line">        || <span class="variable">$strC</span> === <span class="string">&#x27;three&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$strA</span> + <span class="variable">$strB</span></span><br><span class="line">            + <span class="variable">$strC</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$strA</span>===<span class="string">&#x27;hello&#x27;</span>)&#123;<span class="variable">$strB</span> = <span class="string">&#x27;world&#x27;</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$strB</span>===<span class="string">&#x27;second&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$strA</span>=<span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;Invalid argument.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$x</span> = <span class="variable">$foo</span>-&gt;one(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            -&gt;two(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>,             <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">                -&gt;three(<span class="string">&#x27;fg&#x27;</span>)-&gt;  four();</span><br><span class="line">        <span class="variable">$y</span> = a()    -&gt; b()   -&gt;c            ();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$strD</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fThree</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strA</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strB</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strC</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strD</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strE</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        foo();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$strA</span> + <span class="variable">$strB</span> + <span class="variable">$strC</span></span><br><span class="line">            + <span class="variable">$strD</span> + <span class="variable">$strE</span>;&#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fFour</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$x</span>,<span class="variable">$z</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$k</span>, <span class="variable">$s1</span>;</span><br><span class="line">        <span class="variable">$obj</span>-&gt;foo()-&gt;bar();</span><br><span class="line">        <span class="variable">$arr</span> =<span class="keyword">array</span>(<span class="number">0</span> =&gt; <span class="string">&#x27;zero&#x27;</span>, <span class="number">1</span> =&gt; <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">        call_func(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$x</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$y</span>+= (<span class="variable">$y</span>^<span class="number">0x123</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span> &gt; <span class="number">15</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span> ?: <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span> ?? <span class="variable">$z</span>;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span>&lt;=&gt;<span class="variable">$z</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="number">0</span> &gt; <span class="variable">$x</span> &amp;&amp; ! <span class="variable">$x</span> &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>)&#123;</span><br><span class="line">                        <span class="variable">$x</span> = f(<span class="variable">$x</span> * <span class="number">3</span> + <span class="number">5</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$z</span> += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$x</span> &gt; <span class="number">20</span>) &#123;</span><br><span class="line">                    <span class="variable">$z</span> = <span class="variable">$x</span> &lt;&lt;<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$z</span> = <span class="variable">$x</span>|<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$j</span> = intval(<span class="variable">$z</span>);</span><br><span class="line">                <span class="keyword">switch</span> (<span class="variable">$j</span>) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        <span class="variable">$s1</span>=strval(<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="variable">$s1</span> = <span class="string">&#x27;two&#x27;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="variable">$s1</span> = <span class="string">&#x27;other&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                <span class="variable">$t</span> = <span class="variable">$one</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="variable">$u</span> = <span class="variable">$one</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">                <span class="variable">$v</span> = <span class="variable">$one</span>[<span class="variable">$x</span>[<span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$val</span>&#123;foo . <span class="variable">$num</span>&#125;[<span class="variable">$cell</span>&#123;<span class="variable">$a</span>&#125;];</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;<span class="comment">// do something</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="variable">$x</span> &lt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="variable">$x</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="variable">$y</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> <span class="variable">$z</span> = <span class="number">1</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$x</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// $x = 1</span></span><br><span class="line">    <span class="keyword">do</span>&#123;<span class="variable">$y</span> += <span class="number">1</span>;&#125; <span class="keyword">while</span> (<span class="variable">$y</span> &lt; <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;<span class="variable">$x</span> = <span class="number">10</span>;&#125;<span class="keyword">elseif</span> (<span class="variable">$y</span> &lt; <span class="number">10</span>) &#123;<span class="variable">$x</span>=<span class="number">5</span>;&#125;<span class="keyword">elseif</span> (<span class="literal">true</span>) &#123;<span class="variable">$x</span>=     <span class="number">5</span>  ;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++)&#123;<span class="variable">$yy</span>=<span class="variable">$x</span>&gt;<span class="number">2</span>?<span class="number">1</span>:<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;<span class="variable">$x</span>=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">do</span>&#123;<span class="variable">$x</span> += <span class="number">1</span>;&#125;<span class="keyword">while</span>( <span class="literal">true</span> ) ;</span><br><span class="line">    <span class="keyword">foreach</span> ([</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>   =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span>  =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>=&gt;<span class="number">2</span>,</span><br><span class="line">    ] <span class="keyword">as</span> <span class="variable">$e1</span>) &#123;<span class="keyword">echo</span><span class="variable">$e1</span>;&#125;</span><br><span class="line">    <span class="variable">$count</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$x</span> = [</span><br><span class="line">        <span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">        [</span><br><span class="line">            <span class="number">1</span>  =&gt; <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">            <span class="number">2</span> =&gt;            <span class="string">&#x27;def&#x27;</span>,</span><br><span class="line">            <span class="number">3</span>    =&gt; <span class="string">&#x27;ghi&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$zz</span> = [</span><br><span class="line">        <span class="number">0.1</span>,</span><br><span class="line">        <span class="number">0.2</span>,</span><br><span class="line">        <span class="number">0.3</span>,</span><br><span class="line">        <span class="number">0.4</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$x</span> = [</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="string">&#x27;zero&#x27;</span>,</span><br><span class="line">        <span class="number">123</span> =&gt; <span class="string">&#x27;one two three&#x27;</span>,</span><br><span class="line">        <span class="number">25</span> =&gt; <span class="string">&#x27;two five&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    bar(<span class="number">0</span>, bar(</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foobar</span>(<span class="params"> <span class="variable">$a</span> </span>):<span class="title">Bar</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="literal">null</span> ===<span class="variable">$a</span>?<span class="variable">$a</span>:<span class="keyword">new</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;a.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emptyreturn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$map</span> = array_map (<span class="function"><span class="keyword">function</span>(<span class="params"> <span class="variable">$value</span> </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span><span class="variable">$value</span>  +   <span class="number">10</span>;</span><br><span class="line">&#125;, <span class="variable">$array</span>   );</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;div&gt;<span class="meta">&lt;?=</span> foo() <span class="meta">?&gt;</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="自定义代码修复格式"><a href="#自定义代码修复格式" class="headerlink" title="自定义代码修复格式"></a>自定义代码修复格式</h3><blockquote>
<p>创建 <code>.php_cs</code> 文件，并写入以下内容。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpCsFixer</span>\<span class="title">Config</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpCsFixer</span>\<span class="title">Finder</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$finder</span> = Finder::create()-&gt;in(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/src&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Config::create()</span><br><span class="line">    -&gt;setRiskyAllowed(<span class="literal">true</span>)</span><br><span class="line">    -&gt;setCacheFile(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/.php_cs.cache&#x27;</span>)</span><br><span class="line">    -&gt;setRules([</span><br><span class="line">        <span class="string">&#x27;@PSR2&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 使用 PSR2 标准</span></span><br><span class="line">        <span class="string">&#x27;array_syntax&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;short&#x27;</span>, <span class="comment">// 数组使用短语法</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;binary_operator_spaces&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;align_double_arrow&#x27;</span> =&gt; <span class="literal">false</span>, <span class="comment">// 不对齐双箭头操作符</span></span><br><span class="line">            <span class="string">&#x27;align_equals&#x27;</span> =&gt; <span class="literal">false</span>, <span class="comment">// 不对齐赋值操作符</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;blank_line_after_namespace&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 命名空间之后有一个空行</span></span><br><span class="line">        <span class="string">&#x27;blank_line_after_opening_tag&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// PHP 打开标记之后有一个空行</span></span><br><span class="line">        <span class="string">&#x27;blank_line_before_return&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// return 语句之前有一个空行</span></span><br><span class="line">        <span class="string">&#x27;blank_line_before_statement&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;statements&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;break&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;continue&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;declare&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;return&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;throw&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;try&#x27;</span>,</span><br><span class="line">            ], <span class="comment">// 这些声明之前有一个空行</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;class_attributes_separation&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;elements&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;const&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;method&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;property&#x27;</span>,</span><br><span class="line">            ], <span class="comment">// 类的这些元素分开，也就是元素之间加上空行</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;dir_constant&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 将 dirname(__FILE__) 替换成 __DIR__</span></span><br><span class="line">        <span class="string">&#x27;include&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 将 include(&#x27;a.php&#x27;) 替换成 include &#x27;a.php&#x27;</span></span><br><span class="line">        <span class="string">&#x27;is_null&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 将 is_null($a) 替换成 null === $a</span></span><br><span class="line">        <span class="string">&#x27;linebreak_after_opening_tag&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;list_syntax&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;long&#x27;</span>, <span class="comment">// list 使用 long 语法</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;lowercase_constants&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 常量 true, false, null 使用小写</span></span><br><span class="line">        <span class="string">&#x27;lowercase_keywords&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// PHP 关键字使用小写</span></span><br><span class="line">        <span class="string">&#x27;method_chaining_indentation&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 方法链式调用不需要缩进</span></span><br><span class="line">        <span class="string">&#x27;modernize_types_casting&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 将 *val 函数做对应类型的强制转换</span></span><br><span class="line">        <span class="string">&#x27;new_with_braces&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 实例化类时带上括号</span></span><br><span class="line">        <span class="string">&#x27;no_blank_lines_after_class_opening&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 类左大括号后没有空行</span></span><br><span class="line">        <span class="string">&#x27;no_blank_lines_before_namespace&#x27;</span> =&gt; <span class="literal">false</span>, <span class="comment">// 命名空间之前没有穿行</span></span><br><span class="line">        <span class="string">&#x27;no_closing_tag&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 纯 PHP 文件不需要闭合标记</span></span><br><span class="line">        <span class="string">&#x27;no_multiline_whitespace_around_double_arrow&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 箭头操作符前后没有多余的空格</span></span><br><span class="line">        <span class="string">&#x27;multiline_whitespace_before_semicolons&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除结束分号之前的多余空行</span></span><br><span class="line">        <span class="string">&#x27;no_null_property_initialization&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除属性用 null 初始化是的显式指定</span></span><br><span class="line">        <span class="string">&#x27;no_php4_constructor&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除 PHP4 风格的构造方法</span></span><br><span class="line">        <span class="string">&#x27;no_short_bool_cast&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 采用双感叹号表示布尔情况的不应该使用，会转换为 (bool)</span></span><br><span class="line">        <span class="string">&#x27;no_short_echo_tag&#x27;</span> =&gt; <span class="literal">false</span>, <span class="comment">// 替换短标记输出为长标记</span></span><br><span class="line">        <span class="string">&#x27;no_singleline_whitespace_before_semicolons&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除分号之前的多余空格</span></span><br><span class="line">        <span class="string">&#x27;no_spaces_after_function_name&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 在进行方法或函数调用时，移除方法或函数名称与左括号之间的空格</span></span><br><span class="line">        <span class="string">&#x27;no_spaces_around_offset&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除偏移大括号的空格</span></span><br><span class="line">        <span class="string">&#x27;no_spaces_inside_parenthesis&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除左括号后的和右括号前的多余空格</span></span><br><span class="line">        <span class="string">&#x27;no_superfluous_elseif&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 用 if 替换多余的 elseif</span></span><br><span class="line">        <span class="string">&#x27;no_trailing_whitespace&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除末行的尾随空格</span></span><br><span class="line">        <span class="string">&#x27;no_trailing_whitespace_in_comment&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除注释末行的尾随空格</span></span><br><span class="line">        <span class="string">&#x27;no_unneeded_control_parentheses&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;statements&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;break&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;clone&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;continue&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;echo_print&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;return&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;switch_case&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;yield&#x27;</span>,</span><br><span class="line">            ], <span class="comment">// 移除控制语句周围不需要的括号</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;no_useless_return&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 将 return; 替换成空</span></span><br><span class="line">        <span class="string">&#x27;no_whitespace_in_blank_line&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除空白行末尾的空格</span></span><br><span class="line">        <span class="string">&#x27;not_operator_with_space&#x27;</span> =&gt; <span class="literal">false</span>, <span class="comment">// 逻辑非操作符前后有一个空格</span></span><br><span class="line">        <span class="string">&#x27;not_operator_with_successor_space&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 逻辑非操作符尾随一个空格</span></span><br><span class="line">        <span class="string">&#x27;object_operator_without_whitespace&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除对象操作符前后的空格</span></span><br><span class="line">        <span class="string">&#x27;short_scalar_cast&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 标量使用缩写</span></span><br><span class="line">        <span class="string">&#x27;single_blank_line_at_eof&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 纯 PHP 文件总是以一个空行换行符结束</span></span><br><span class="line">        <span class="string">&#x27;single_blank_line_before_namespace&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 命名空间之前有一个空行</span></span><br><span class="line">        <span class="string">&#x27;single_class_element_per_statement&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;elements&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;const&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;property&#x27;</span>,</span><br><span class="line">            ], <span class="comment">// 类元素的每个声明有自己的关键字</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;single_import_per_statement&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 导入的每个声明有自己的关键字</span></span><br><span class="line">        <span class="string">&#x27;single_line_after_imports&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 每个命名空间的 use 独占一行，最后一个 use 后有一个空行</span></span><br><span class="line">        <span class="string">&#x27;single_quote&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 简单字符串的双引号转换为单引号</span></span><br><span class="line">        <span class="string">&#x27;standardize_not_equals&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 将 &lt;&gt; 替换为 !=</span></span><br><span class="line">        <span class="string">&#x27;strict_comparison&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 比较使用严格化</span></span><br><span class="line">        <span class="string">&#x27;strict_param&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 参数使用严格化</span></span><br><span class="line">        <span class="string">&#x27;switch_case_space&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除冒号和 case value 之间的多余空格</span></span><br><span class="line">        <span class="string">&#x27;ternary_operator_spaces&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除三元运算符周围多余的空格</span></span><br><span class="line">        <span class="string">&#x27;ternary_to_null_coalescing&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 使用 null 合并运算符 ?? 在可以的地方</span></span><br><span class="line">        <span class="string">&#x27;trailing_comma_in_multiline_array&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 多个数组元素的最后一个元素后有一个逗号</span></span><br><span class="line">        <span class="string">&#x27;trim_array_spaces&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 移除数组首尾元素多余的空格</span></span><br><span class="line">        <span class="string">&#x27;unary_operator_spaces&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 一元操作符紧挨操作项，不需要空格分开</span></span><br><span class="line">        <span class="string">&#x27;visibility_required&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 访问修饰符放置在属性方法前，abstract 和 final 放置在访问修饰符前面，static 放置在访问修饰符后</span></span><br><span class="line">        <span class="string">&#x27;whitespace_after_comma_in_array&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">// 数组的每个元素逗号后面有一个空格</span></span><br><span class="line">    ])</span><br><span class="line">    -&gt;setFinder(<span class="variable">$finder</span>);</span><br></pre></td></tr></table></figure>
<h3 id="执行格式化"><a href="#执行格式化" class="headerlink" title="执行格式化"></a>执行格式化</h3><blockquote>
<ul>
<li>格式化期间 <code>php-cs-fixer</code> 会自动创建 <code>.php_cs.cache</code> 文件</li>
<li>不同的代码量和复杂程度会影响执行的时长</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 指定文件进行格式化</span><br><span class="line">$ php-cs-fixer fix ./src/Test.php</span><br></pre></td></tr></table></figure>
<h3 id="格式化后的代码"><a href="#格式化后的代码" class="headerlink" title="格式化后的代码"></a>格式化后的代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">A</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">SebastianBergmann</span>\<span class="title">CodeCoverage</span>\<span class="title">InvalidArgumentException</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">FooBaseClass</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">    <span class="title">Bar1</span>,</span></span><br><span class="line"><span class="class">    <span class="title">Bar2</span>,</span></span><br><span class="line"><span class="class">    <span class="title">Bar3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">const</span> FIRST = <span class="string">&#x27;first&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">const</span> SECOND = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">const</span> Z = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> E_FOO = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> E_BAR = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isNull</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hello</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$world</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$numbers</span> = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;six&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$v</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$w</span> = <span class="string">&#x27;a&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable">$y</span> = <span class="variable">$w</span>;</span><br><span class="line">        <span class="variable">$result</span> = foo(</span><br><span class="line">            <span class="string">&#x27;arg1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;arg2&#x27;</span>,</span><br><span class="line">            <span class="number">10</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span>  <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span><span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">fOne</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argA</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argB</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argC</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argD</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argE</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argF</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argG</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$argH</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable">$x</span> = <span class="variable">$argA</span> + <span class="variable">$argB</span> + <span class="variable">$argC</span></span><br><span class="line">            + <span class="variable">$argD</span> + <span class="variable">$argE</span> + <span class="variable">$argF</span></span><br><span class="line">            + <span class="variable">$argG</span> + <span class="variable">$argH</span>;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$field1</span>, <span class="variable">$field2</span>,</span><br><span class="line">            <span class="variable">$field3</span>, <span class="variable">$filed4</span>,</span><br><span class="line">            <span class="variable">$field5</span>, <span class="variable">$field6</span>) = explode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$x</span>);</span><br><span class="line">        fTwo(</span><br><span class="line">            <span class="variable">$argA</span>,</span><br><span class="line">            <span class="variable">$argB</span>,</span><br><span class="line">            <span class="variable">$argC</span>,</span><br><span class="line">            fThree(</span><br><span class="line">                <span class="variable">$argD</span>,</span><br><span class="line">                    <span class="variable">$argE</span>,</span><br><span class="line">                    <span class="variable">$argF</span>,</span><br><span class="line">                    <span class="variable">$argG</span>,</span><br><span class="line">                <span class="variable">$argH</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        <span class="variable">$z</span> = <span class="variable">$argA</span> === <span class="string">&#x27;Some string&#x27;</span></span><br><span class="line">            ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">        <span class="variable">$colors</span> = [</span><br><span class="line">            <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;black&#x27;</span>  ,</span><br><span class="line">            <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;gray&#x27;</span>  ,</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$colors</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$colorString</span></span><br><span class="line">                = <span class="variable">$colors</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fTwo</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strA</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strB</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strC</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strD</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$strA</span> === <span class="string">&#x27;one&#x27;</span></span><br><span class="line">        || <span class="variable">$strB</span> === <span class="string">&#x27;two&#x27;</span></span><br><span class="line">        || <span class="variable">$strC</span> === <span class="string">&#x27;three&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$strA</span> + <span class="variable">$strB</span></span><br><span class="line">            + <span class="variable">$strC</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$strA</span> === <span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$strB</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$strB</span> === <span class="string">&#x27;second&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$strA</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;Invalid argument.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$x</span> = <span class="variable">$foo</span>-&gt;one(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            -&gt;two(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">            -&gt;three(<span class="string">&#x27;fg&#x27;</span>)-&gt;four();</span><br><span class="line">        <span class="variable">$y</span> = a()-&gt;b()-&gt;c();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$strD</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fThree</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strA</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strB</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strC</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strD</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$strE</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            foo();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$strA</span> + <span class="variable">$strB</span> + <span class="variable">$strC</span></span><br><span class="line">            + <span class="variable">$strD</span> + <span class="variable">$strE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fFour</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$z</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$k</span>, <span class="variable">$s1</span>;</span><br><span class="line">        <span class="variable">$obj</span>-&gt;foo()-&gt;bar();</span><br><span class="line">        <span class="variable">$arr</span> = [<span class="number">0</span> =&gt; <span class="string">&#x27;zero&#x27;</span>, <span class="number">1</span> =&gt; <span class="string">&#x27;one&#x27;</span>];</span><br><span class="line">        call_func(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$x</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$y</span> += (<span class="variable">$y</span> ^ <span class="number">0x123</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span> &gt; <span class="number">15</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span> ?: <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span> ?? <span class="variable">$z</span>;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$x</span> &lt;=&gt; <span class="variable">$z</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (! <span class="number">0</span> &gt; <span class="variable">$x</span> &amp;&amp; ! <span class="variable">$x</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">                        <span class="variable">$x</span> = f(<span class="variable">$x</span> * <span class="number">3</span> + <span class="number">5</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$z</span> += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$x</span> &gt; <span class="number">20</span>) &#123;</span><br><span class="line">                    <span class="variable">$z</span> = <span class="variable">$x</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$z</span> = <span class="variable">$x</span> | <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$j</span> = (<span class="keyword">int</span>) <span class="variable">$z</span>;</span><br><span class="line">                <span class="keyword">switch</span> (<span class="variable">$j</span>) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        <span class="variable">$s1</span> = (<span class="keyword">string</span>) <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="variable">$s1</span> = <span class="string">&#x27;two&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="variable">$s1</span> = <span class="string">&#x27;other&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                <span class="variable">$t</span> = <span class="variable">$one</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="variable">$u</span> = <span class="variable">$one</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">                <span class="variable">$v</span> = <span class="variable">$one</span>[<span class="variable">$x</span>[<span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$val</span>&#123;foo . <span class="variable">$num</span>&#125;[<span class="variable">$cell</span>&#123;<span class="variable">$a</span>&#125;];</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;<span class="comment">// do something</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="variable">$x</span> &lt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="variable">$x</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="variable">$y</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> <span class="variable">$z</span> = <span class="number">1</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$x</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// $x = 1</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="variable">$y</span> += <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="variable">$y</span> &lt; <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable">$x</span> = <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$y</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable">$x</span> = <span class="number">5</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable">$x</span> = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$yy</span> = <span class="variable">$x</span> &gt; <span class="number">2</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable">$x</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="variable">$x</span> += <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ([</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">    ] <span class="keyword">as</span> <span class="variable">$e1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="variable">$e1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$count</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$x</span> = [</span><br><span class="line">        <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">        [</span><br><span class="line">            <span class="number">1</span> =&gt; <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">            <span class="number">2</span> =&gt; <span class="string">&#x27;def&#x27;</span>,</span><br><span class="line">            <span class="number">3</span> =&gt; <span class="string">&#x27;ghi&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$zz</span> = [</span><br><span class="line">        <span class="number">0.1</span>,</span><br><span class="line">        <span class="number">0.2</span>,</span><br><span class="line">        <span class="number">0.3</span>,</span><br><span class="line">        <span class="number">0.4</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$x</span> = [</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="string">&#x27;zero&#x27;</span>,</span><br><span class="line">        <span class="number">123</span> =&gt; <span class="string">&#x27;one two three&#x27;</span>,</span><br><span class="line">        <span class="number">25</span> =&gt; <span class="string">&#x27;two five&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    bar(<span class="number">0</span>, bar(</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foobar</span>(<span class="params"><span class="variable">$a</span></span>):<span class="title">Bar</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="literal">null</span> === <span class="variable">$a</span> ? <span class="variable">$a</span> : <span class="keyword">new</span> <span class="variable">$a</span>();</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;a.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emptyreturn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$map</span> = array_map(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span><span class="variable">$value</span> + <span class="number">10</span>;</span><br><span class="line">&#125;, <span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;div&gt;<span class="meta">&lt;?=</span> foo() <span class="meta">?&gt;</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><h2 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = [];</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span> =&gt;     <span class="number">0</span>  ,</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span> =&gt;     <span class="number">1</span>  ,</span><br><span class="line">            <span class="string">&#x27;b&#x27;</span> =&gt;     <span class="number">2</span>  ,</span><br><span class="line">                <span class="string">&#x27;c&#x27;</span> =&gt;     <span class="number">3</span>  ,</span><br><span class="line">                    <span class="string">&#x27;d&#x27;</span> =&gt;     <span class="number">4</span>                   ,</span><br><span class="line">                <span class="string">&#x27;e&#x27;</span> =&gt;     <span class="number">5</span>  ,</span><br><span class="line">            <span class="string">&#x27;f&#x27;</span> =&gt;     <span class="number">6</span>  ,</span><br><span class="line">        <span class="string">&#x27;g&#x27;</span> =&gt;     <span class="number">7</span>  ,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span> =&gt;     <span class="number">8</span>  ,</span><br><span class="line"><span class="string">&#x27;z&#x27;</span> =&gt; <span class="number">9</span>,                ];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="variable">$key</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$result</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PHP-CodeSniffer-格式化"><a href="#PHP-CodeSniffer-格式化" class="headerlink" title="PHP_CodeSniffer 格式化"></a>PHP_CodeSniffer 格式化</h2><p>执行 <code>phpcbf ./src/Test.php</code> 后：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = [];</span><br><span class="line"><span class="variable">$array</span>  = [</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span> =&gt; <span class="number">0</span>  ,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>  ,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>  ,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span>  ,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span> =&gt; <span class="number">4</span>        ,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span> =&gt; <span class="number">5</span>  ,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span> =&gt; <span class="number">6</span>  ,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span> =&gt; <span class="number">7</span>  ,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span> =&gt; <span class="number">8</span>  ,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span> =&gt; <span class="number">9</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="variable">$key</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PHP-CS-Fixer-格式化"><a href="#PHP-CS-Fixer-格式化" class="headerlink" title="PHP-CS-Fixer 格式化"></a>PHP-CS-Fixer 格式化</h2><p>执行 <code>php-cs-fixer fix ./src/Test.php</code> 后：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = [];</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span> =&gt; <span class="number">0</span>  ,</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>  ,</span><br><span class="line">            <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>  ,</span><br><span class="line">                <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span>  ,</span><br><span class="line">                    <span class="string">&#x27;d&#x27;</span> =&gt; <span class="number">4</span>        ,</span><br><span class="line">                <span class="string">&#x27;e&#x27;</span> =&gt; <span class="number">5</span>  ,</span><br><span class="line">            <span class="string">&#x27;f&#x27;</span> =&gt; <span class="number">6</span>  ,</span><br><span class="line">        <span class="string">&#x27;g&#x27;</span> =&gt; <span class="number">7</span>  ,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span> =&gt; <span class="number">8</span>  ,</span><br><span class="line"><span class="string">&#x27;z&#x27;</span> =&gt; <span class="number">9</span>,                ];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="variable">$key</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$result</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过对两个工具的使用，发现各有所长，<code>PHP_CodeSniffer</code> 囊括代码质量检测和自动修复，而 <code>PHP-CS-Fixer</code> 则只有自动修复功能，无论哪种工具，在我测试的过程中，都没法把用户主动添加的一些空格给利索的去掉，略有点失望（或许我还没找到对应的配置，如果你找到了，麻烦留个言）。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 中的错误和异常处理</title>
    <url>/2018/04/05/php-error-exception-handler/</url>
    <content><![CDATA[<p>PHP 当然也有自己的异常处理，不过那已经是 PHP5 以后的事了。就我自己这些年写程序的现状看，我基本上就没有真正明白什么是异常处理，经常把异常和错误处理混为一谈，关于代码中的那些写法，不是写错了，就是写的太特么烂了。恰好最近在写一些类时用到异常处理了，顺便就把这个整理下，但是这个仅代表我个人的一些理解和使用，也可能是错误的，还请谨慎阅读。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="错误处理定义"><a href="#错误处理定义" class="headerlink" title="错误处理定义"></a>错误处理定义</h2><p>错误是指导致系统不能按照用户意图工作的一切原因、事件。在程序设计过程中，由于某些错误的存在，致使程序无法正常运行，处理这些错误以使程序正确运行就称为错误处理。错误处理功能是衡量编译器性能的重要方面，它在帮助程序员尽快修改程序方面起到了非常重要的作用。</p>
<p>错误类型：</p>
<ul>
<li>语法错误</li>
<li>语义错误</li>
<li>逻辑错误</li>
</ul>
<h2 id="异常处理定义"><a href="#异常处理定义" class="headerlink" title="异常处理定义"></a>异常处理定义</h2><p>编程语言或计算机硬件里的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行流程的某些特殊条件）</p>
<h2 id="预定义的错误代码"><a href="#预定义的错误代码" class="headerlink" title="预定义的错误代码"></a>预定义的错误代码</h2><p>当然你也可以参见官网的手册 <strong><a href="http://php.net/manual/zh/errorfunc.constants.php">预定义常量</a></strong>，我抄一遍纯粹是为了加深记忆。至于每种错误在什么情况下产生，你可以参看 <strong><a href="http://www.cnblogs.com/yjf512/p/5314345.html">PHP的错误机制总结</a></strong>。</p>
<table>
<thead>
<tr>
<th>常量</th>
<th>取值</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>E_ERROR</code></td>
<td>1</td>
<td>致命的运行时错误。这类错误一般是不可恢复的情况，例如内存分配导致的问题。后果是导致脚本终止不再继续运行</td>
<td></td>
</tr>
<tr>
<td><code>E_WARNING</code></td>
<td>2</td>
<td>运行时警告（非致命错误）。仅给出提示信息，但是脚本不会终止运行</td>
<td></td>
</tr>
<tr>
<td><code>E_PARSE</code></td>
<td>4</td>
<td>编译时语法解析错误。解析错误仅仅由分析器产生</td>
<td></td>
</tr>
<tr>
<td><code>E_NOTICE</code></td>
<td>8</td>
<td>运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知</td>
<td></td>
</tr>
<tr>
<td><code>E_CORE_ERROR</code></td>
<td>16</td>
<td>在 PHP 初始化启动过程中发生的致命错误。该错误类似 E_ERROR，但是是由 PHP 引擎核心产生的</td>
<td>since PHP 4</td>
</tr>
<tr>
<td><code>E_CORE_WARNING</code></td>
<td>32</td>
<td>PHP 初始化启动过程中发生的警告（非致命错误）。类似 E_WARNING，但是是由 PHP 引擎核心产生的</td>
<td>since PHP 4</td>
</tr>
<tr>
<td><code>E_COMPILE_ERROR</code></td>
<td>64</td>
<td>致命编译时错误。类似 E_ERROR，但是是由 Zend 脚本引擎产生的</td>
<td>since PHP 4</td>
</tr>
<tr>
<td><code>E_COMPILE_WARNING</code></td>
<td>128</td>
<td>编译时警告（非致命错误）。类似 E_WARNING，但是是由 Zend 脚本引擎产生的</td>
<td>since PHP 4</td>
</tr>
<tr>
<td><code>E_USER_ERROR</code></td>
<td>256</td>
<td>用户产生的错误信息。类似 E_ERROR，但是是由用户自己在代码中使用 PHP 函数 trigger_error() 来产生的</td>
<td>since PHP 4</td>
</tr>
<tr>
<td><code>E_USER_WARNING</code></td>
<td>512</td>
<td>用户产生的警告信息。类似 E_WARNING，但是是由用户自己在代码中使用 PHP 函数 trigger_error() 来产生的</td>
<td>since PHP 4</td>
</tr>
<tr>
<td><code>E_USER_NOTICE</code></td>
<td>1024</td>
<td>用户产生的通知信息。类似 E_NOTICE，但是是由用户自己在代码中使用 PHP 函数 trigger_error() 来产生的</td>
<td>since PHP 4</td>
</tr>
<tr>
<td><code>E_STRICT</code></td>
<td>2048</td>
<td>启用 PHP 对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性</td>
<td>since PHP 5</td>
</tr>
<tr>
<td><code>E_RECOVERABLE_ERROR</code></td>
<td>4096</td>
<td>可被捕捉的致命错误。它表示发生了一个可能非常危险的错误，但是还没有导致 PHP 引擎处于不稳定的状态。如果该错误没有被用户自定义句柄捕获（参见 set_error_handler()），将成为一个 E_ERROR　从而脚本会终止运行</td>
<td>since PHP 5.2.0</td>
</tr>
<tr>
<td><code>E_DEPRECATED</code></td>
<td>8192</td>
<td>运行时通知。启用后将会对在未来版本中可能无法正常工作的代码给出警告</td>
<td>since PHP 5.3.0</td>
</tr>
<tr>
<td><code>E_USER_DEPRECATED</code></td>
<td>16384</td>
<td>用户产少的警告信息。类似 E_DEPRECATED，但是是由用户自己在代码中使用 PHP 函数 trigger_error() 来产生的</td>
<td>since PHP 5.3.0</td>
</tr>
<tr>
<td><code>E_ALL</code></td>
<td>30719</td>
<td><code>E_STRICT</code> 出外的所有错误和警告信息</td>
<td>30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously</td>
</tr>
</tbody>
</table>
<div class="note danger">
            <ul><li>可以使用按位运算符来组合这些值或者屏蔽某些类型的错误。在 <code>php.ini</code> 之中，仅 <code>|, ~, !, ^, &amp;</code> 这些操作符会被正确解析</li><li>以下级别的错误不能由用户定义的函数来处理：<code>E_ERROR</code>、<code>E_PARSE</code>、<code>E_CORE_ERROR</code>、<code>E_CORE_WARNING</code>、<code>E_COMPILE_ERROR</code>、<code>E_COMPILE_WARNING</code> 和在调用 <code>set_error_handler()</code> 函数所在文件中产生的大多数 <code>E_STRICT</code></li></ul>
          </div>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="http://www.laruence.com/2010/08/03/1697.html">深入理解PHP原理之异常机制</a></li>
<li><a href="http://www.laruence.com/2012/02/02/2515.html">我们什么时候应该使用异常</a></li>
<li><a href="https://laravel-china.org/articles/5435/exceptions-and-errors-in-php-best-practices">PHP 最佳实践之异常和错误</a></li>
<li><a href="https://trowski.com/2015/06/24/throwable-exceptions-and-errors-in-php7/">Throwable Exceptions and Errors in PHP 7</a></li>
</ul>
<p>早有人把 PHP 各个版本的错误和异常处理类树整理出来供我等参观。如果在本地执行此代码，依据本地对 PHP 安装的扩展的不同，会把扩展中的相关异常处理类一并打印出来</p>
<ul>
<li><a href="https://gist.github.com/mlocati/249f07b074a0de339d4d1ca980848e6a">打印错误和异常处理类树代码</a></li>
<li><a href="https://3v4l.org/sDMsv#output">打印输出结果</a></li>
</ul>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><blockquote>
<ul>
<li>Note that other types of errors such as warnings and notices remain unchanged in PHP 7. Only fatal and recoverable errors throw exceptions.</li>
<li>Prior to PHP 7 alpha-2, the exception hierarchy in PHP 7 was different. Fatal and recoverable errors threw instances of EngineException, which did not inherit from Exception. Both Exception and EngineException inherited from BaseException. The hierarchy was revised with the RFC I authored, Throwable Interface. I felt switching to Throwable and Error was important to avoid confusion from classes using the suffix Exception that did not extend Exception, as well as being more concise and appealing names.</li>
</ul>
</blockquote>
<p><code>E_ERROR</code> 和 <code>E_RECOVERABLE_ERROR</code> 级别的错误在 PHP7 之前是不能被捕获到的，也就是说，你无法使用 <code>try...catch...</code> 这样的语句捕获到这种级别的错误，但不管是 PHP7 还是 PHP5 对于未捕获的异常依然是一个致命错误</p>
<p>在 PHP5 中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$object</span>-&gt;method();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Fatal <span class="built_in">error</span>: Call to a member <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) <span class="title">on</span> <span class="title">null</span> <span class="title">in</span></span></span><br></pre></td></tr></table></figure>
<p>在 PHP7 中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$object</span>-&gt;method();</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Error</span> <span class="variable">$error</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$error</span>-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Call to a member <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) <span class="title">on</span> <span class="title">null</span></span></span><br></pre></td></tr></table></figure>
<p>是的，PHP7 内置了一个名为 <code>Error</code> 的类来捕获一些致命错误和异常了，其中 <code>Error</code> 和 <code>Exception</code> 类实现了 <code>Throwable</code> 接口。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Throwable 接口</span></span><br><span class="line"><span class="built_in">Throwable</span> &#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">string</span> getMessage ( <span class="keyword">void</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> getCode ( <span class="keyword">void</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">string</span> getFile ( <span class="keyword">void</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> getLine ( <span class="keyword">void</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">array</span> getTrace ( <span class="keyword">void</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">string</span> getTraceAsString ( <span class="keyword">void</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="built_in">Throwable</span> getPrevious ( <span class="keyword">void</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">string</span> __toString ( <span class="keyword">void</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger">
            <p>开发者不能直接实现 <code>Throwable</code> 接口，必须通过 <code>Error</code> 或者 <code>Exception</code> 等类去扩展</p>
          </div>
<p>也可以用以下的方式去扩展自己的错误和异常类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestThrowable</span> <span class="keyword">extends</span> \<span class="title">Throwable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestException</span> <span class="keyword">extends</span> \<span class="title">Exception</span> <span class="keyword">implements</span> <span class="title">TestThrowable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoError</span> <span class="keyword">extends</span> \<span class="title">Error</span> <span class="keyword">implements</span> <span class="title">TestThrowable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>由于 <code>Error</code> 和 <code>Exception</code> 都实现了 <code>Throwable</code> 接口，那么问题就来了，在程序中我们究竟要用哪个？通过一些最佳实践我们知道，错误一般是去约束程序员和代码语法、语义及逻辑方面的，而异常是程序在运行过程出现的一些不合期望的情况。因此，在代码中我们应当使用异常而不是错误。</p>
<p>PHP 7.2.0 - 7.2.3 版本中提供的内置异常：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Exception</span></span><br><span class="line">  ClosedGeneratorException</span><br><span class="line">  DOMException</span><br><span class="line">  <span class="built_in">ErrorException</span></span><br><span class="line">  IntlException</span><br><span class="line">  <span class="built_in">LogicException</span></span><br><span class="line">    <span class="built_in">BadFunctionCallException</span></span><br><span class="line">      <span class="built_in">BadMethodCallException</span></span><br><span class="line">    <span class="built_in">DomainException</span></span><br><span class="line">    <span class="built_in">InvalidArgumentException</span></span><br><span class="line">    <span class="built_in">LengthException</span></span><br><span class="line">    <span class="built_in">OutOfRangeException</span></span><br><span class="line">  PharException</span><br><span class="line">  ReflectionException</span><br><span class="line">  <span class="built_in">RuntimeException</span></span><br><span class="line">    <span class="built_in">OutOfBoundsException</span></span><br><span class="line">    <span class="built_in">OverflowException</span></span><br><span class="line">    PDOException</span><br><span class="line">    <span class="built_in">RangeException</span></span><br><span class="line">    <span class="built_in">UnderflowException</span></span><br><span class="line">    <span class="built_in">UnexpectedValueException</span></span><br><span class="line">  SodiumException</span><br></pre></td></tr></table></figure>
<p>兼容 PHP5 和 PHP7 的异常处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Code that may throw an Exception or Error.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Throwable</span> <span class="variable">$t</span>) &#123;</span><br><span class="line">    <span class="comment">// Executed only in PHP 7, will not match in PHP 5.x.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// Executed only in PHP 5.x, will not be reached in PHP 7.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义捕获错误和异常"><a href="#自定义捕获错误和异常" class="headerlink" title="自定义捕获错误和异常"></a>自定义捕获错误和异常</h2><ul>
<li>未捕获的 <code>Error</code> 和 <code>Exception</code> 通过 <code>set_exception_handler()</code> 做后续清理和日志记录</li>
<li>其他错误仍然通过 <code>set_error_handler()</code> 来处理，在处理的时候使用更加明确的 <code>E_*</code> 类型，并抛出 <code>ErrorException</code> 记录调用栈</li>
</ul>
<p>以下实例中使用 <code>set_error_handler()</code> 函数去捕获错误，设置一个用户自定义的错误处理函数，这里我就粗暴的抛出 了 <code>ErrorException</code> 异常，当然官方文档也明确说了这个函数不能捕获 <code>E_ERROR</code>、<code>E_PARSE</code>、<code>E_CORE_ERROR</code>、<code>E_CORE_WARNING</code>、<code>E_COMPILE_ERROR</code>、<code>E_COMPILE_WARNING</code> 和在调用 <code>set_error_handler()</code> 函数所在文件中产生的大多数 <code>E_STRICT</code> 异常，言外之语也就是仅能捕获用户定义的错误和异常。使用 <code>set_exception_handler()</code> 函数去设置默认的异常处理程序，用在没有用 <code>try/catch</code> 块来捕获的异常，也就是说不管你抛出的异常有没有人捕获，如果没有人捕获就会进入到该方法中，并且在回调函数调用后异常会中止。使用 <code>register_shutdown_function()</code> 函数去捕获 PHP 的错误：<code>Fatal or Parse Error</code> 等，正由于这个函数是 PHP 脚本执行结束前的最后一个有效调用，所以我们才用它来完成一些不可思议的事情。一般情况下，都会在这个函数的回调函数中使用 <code>error_get_last()</code> 函数来获取执行产生的错误，顺便说一下，像语法这样的错误是捕获不到的</p>
<h3 id="正常情况时的异常捕获"><a href="#正常情况时的异常捕获" class="headerlink" title="正常情况时的异常捕获"></a>正常情况时的异常捕获</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        error_reporting(E_ALL);</span><br><span class="line">        set_error_handler([<span class="keyword">__CLASS__</span>, <span class="string">&#x27;handleError&#x27;</span>]);</span><br><span class="line">        set_exception_handler([<span class="keyword">__CLASS__</span>, <span class="string">&#x27;handleException&#x27;</span>]);</span><br><span class="line">        register_shutdown_function([<span class="keyword">__CLASS__</span>, <span class="string">&#x27;handleShutdown&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params"><span class="variable">$code</span>, <span class="variable">$message</span>, <span class="variable">$file</span>, <span class="variable">$line</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">ErrorException</span>(<span class="variable">$message</span>, <span class="variable">$code</span>, <span class="number">1</span>, <span class="variable">$file</span>, <span class="variable">$line</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handleException</span>(<span class="params"><span class="variable">$e</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">self</span>::handle(<span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handleShutdown</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$error</span> = error_get_last();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="variable">$error</span> &amp;&amp; <span class="built_in">self</span>::isFatal(<span class="variable">$error</span>[<span class="string">&#x27;type&#x27;</span>])) &#123;</span><br><span class="line">            <span class="built_in">self</span>::handleException(<span class="variable">$error</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Exception|\Throwable $e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$e</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$message</span> = <span class="variable">$e</span>-&gt;getMessage() . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$message</span>;</span><br><span class="line"></span><br><span class="line">        error_log(<span class="variable">$message</span>, <span class="number">3</span>, <span class="keyword">__DIR__</span> . <span class="string">&#x27;/run.log&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">isFatal</span>(<span class="params"><span class="variable">$type</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$types</span> = [E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_PARSE];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> in_array(<span class="variable">$type</span>, <span class="variable">$types</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ErrorHandler::register();</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$object</span>-&gt;toArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Call to a member <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>) <span class="title">on</span> <span class="title">null</span></span></span><br><span class="line"><span class="function">此时错误已经记录到日志文件中</span></span><br></pre></td></tr></table></figure>
<h3 id="写错语法时的异常捕获"><a href="#写错语法时的异常捕获" class="headerlink" title="写错语法时的异常捕获"></a>写错语法时的异常捕获</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处略去 ErrorHandler 类代码，详见上面</span></span><br><span class="line">ErrorHandler::register();</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这儿故意不写分号</span></span><br><span class="line"><span class="variable">$object</span>-&gt;toArray()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">PHP Parse <span class="built_in">error</span>:  syntax <span class="built_in">error</span>, unexpected end of file in ...</span><br><span class="line">PHP</span><br><span class="line">PHP Dump <span class="variable">$_SERVER</span></span><br><span class="line">PHP</span><br><span class="line"></span><br><span class="line">Parse <span class="built_in">error</span>: syntax <span class="built_in">error</span>, unexpected end of file in ...</span><br></pre></td></tr></table></figure>
<p>事情进展到这里，按理来说，我应该就此停笔收尾，弄个总结之类的一忽悠一下正在阅读的你。但是呢，我又忽然想起来 PHP 那么多的框架是如何处理这个事情的，我想你也好奇，不妨我们去看看</p>
<h2 id="框架中的错误异常处理"><a href="#框架中的错误异常处理" class="headerlink" title="框架中的错误异常处理"></a>框架中的错误异常处理</h2><p>很遗憾的告诉你，我不会剖析框架源码，我只想做个 <code>demo</code> 得瑟一下，剩下全交给你。此处我以 <code>symfony debug</code> 为例</p>
<blockquote>
<ul>
<li><a href="https://github.com/symfony/debug">Symfony debug GitHub</a></li>
<li><a href="https://symfony.com/components/Debug">Symfony debug Docs</a></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 symfony/debug</span><br><span class="line">$ composer require symfony/debug</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">\Symfony\Component\Debug\Debug::enable();</span><br><span class="line">\Symfony\Component\Debug\ErrorHandler::register();</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$object</span>-&gt;toArray();</span><br></pre></td></tr></table></figure>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-error-exception-handler.png" alt="php-error-exception-handler.png"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 开发生态圈</title>
    <url>/2018/02/28/php-ecosphere/</url>
    <content><![CDATA[<h1 id="开发包"><a href="#开发包" class="headerlink" title="开发包"></a>开发包</h1><ul>
<li><a href="https://github.com/composer/composer">Composer - Dependency Management for PHP</a></li>
<li><a href="https://github.com/guzzle/guzzle">Guzzle - Guzzle is a PHP HTTP client that makes it easy to send HTTP requests and trivial to integrate with web services</a></li>
<li><a href="https://github.com/phalcon/zephir">Zephir is a compiled high level language aimed to the creation of C-extensions for PHP</a></li>
<li><a href="https://github.com/swoole/swoole-src">Swoole - Event-driven asynchronous &amp; concurrent &amp; coroutine networking engine with high performance for PHP</a></li>
<li><a href="https://github.com/FriendsOfPHP/Sami">Sami - An API documentation generator</a></li>
<li><a href="https://github.com/Intervention/image">Intervention Image - Intervention Image is a PHP image handling and manipulation library providing an easier and expressive way to create, edit, and compose images.</a></li>
<li><a href="https://github.com/Seldaek/monolog">Monolog - Sends your logs to files, sockets, inboxes, databases and various web services</a></li>
<li><a href="https://github.com/vlucas/phpdotenv">PHP dotenv - Loads environment variables from .env to getenv()</a></li>
</ul>
<h1 id="微框架"><a href="#微框架" class="headerlink" title="微框架"></a>微框架</h1><ul>
<li><a href="https://github.com/laravel/lumen">Lumen - The stunningly fast micro-framework by Laravel</a></li>
<li><a href="https://github.com/slimphp/Slim">Slim - Slim is a PHP micro-framework that helps you quickly write simple yet powerful web applications and APIs</a></li>
<li><a href="https://github.com/silexphp/Silex">Silex - The PHP micro-framework based on the Symfony Components</a></li>
<li><a href="https://github.com/vlucas/bulletphp">Bullet - Bullet is a resource-oriented micro PHP framework built around HTTP URIs</a></li>
<li><a href="https://github.com/alexbilbie/Proton">Proton - Proton is a StackPHP compatible micro framework</a></li>
<li><a href="https://github.com/bcosca/fatfree">Fat-Free - A powerful yet easy-to-use PHP micro-framework designed to help you build dynamic and robust Web applications - fast</a></li>
</ul>
<h1 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h1><ul>
<li><a href="https://github.com/laravel/laravel">Laravel - A PHP framework for web artisans</a></li>
<li><a href="https://github.com/symfony/symfony">Symfony - The Symfony PHP framework</a></li>
<li><a href="https://github.com/cakephp/cakephp">CakePHP - The Rapid Development Framework for PHP</a></li>
<li><a href="https://github.com/yiisoft/yii2">Yii 2 - The Fast, Secure and Professional PHP Framework</a></li>
<li><a href="https://github.com/zendframework/zendframework">Zend Framework - PHP Official Framework</a></li>
<li><a href="https://github.com/bcit-ci/CodeIgniter">CodeIgniter - CodeIgniter is an Application Development Framework</a></li>
<li><a href="https://github.com/phalcon/cphalcon">Phalcon - High performance, full-stack PHP framework delivered as a C extension</a></li>
<li><a href="https://github.com/phpixie/project/">PHPixie - A lightweight MVC PHP framework designed for speed and simplicty</a></li>
<li><a href="https://github.com/fuelphp/fuelphp">FuelPHP - FuelPHP is a fast, lightweight PHP 5.4 framework</a></li>
<li><a href="https://github.com/top-think/think">ThinkPHP - 为 API 开发而设计的高性能 PHP 框架</a></li>
</ul>
<h1 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h1><ul>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP CodeSniffer - PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards</a></li>
<li><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP CS Fixer - The PHP Coding Standards Fixer (PHP CS Fixer) tool fixes your code to follow standards</a></li>
<li><a href="https://github.com/phpmd/phpmd">PHPMD - PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD. PHPMD can be seen as an user friendly frontend application for the raw metrics stream measured by PHP Depend</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 输出中的代码语法高亮</title>
    <url>/2018/03/18/php-highlight/</url>
    <content><![CDATA[<p>代码高亮一直以来是程序员的一项基本诉求，已成为各大编辑器、IDE 的标配。当然这个范围可以再扩大些，现在基本上有代码的地方就有代码高亮了，无论你在哪条船上。啥？不支持代码高亮，这不扯犊子吗？作为一个有点扯谈的程序员，我对没有代码语法高亮的这件事是坚决不能忍受的。</p>
<span id="more"></span>
<h1 id="内置的高亮函数"><a href="#内置的高亮函数" class="headerlink" title="内置的高亮函数"></a>内置的高亮函数</h1><h2 id="字符串的语法高亮"><a href="#字符串的语法高亮" class="headerlink" title="字符串的语法高亮"></a>字符串的语法高亮</h2><p>语法高亮的相关配置：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认</th>
<th>可修改范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ignore_user_abort</code></td>
<td><code>&quot;0&quot;</code></td>
<td>PHP_INI_ALL</td>
</tr>
<tr>
<td><code>highlight.string</code></td>
<td><code>&quot;#DD0000&quot;</code></td>
<td>PHP_INI_ALL</td>
</tr>
<tr>
<td><code>highlight.comment</code></td>
<td><code>&quot;#FF8000&quot;</code></td>
<td>PHP_INI_ALL</td>
</tr>
<tr>
<td><code>highlight.keyword</code></td>
<td><code>&quot;#007700&quot;</code></td>
<td>PHP_INI_ALL</td>
</tr>
<tr>
<td><code>highlight.bg</code> - 在 PHP 5.4.0 中已移除</td>
<td><code>&quot;#FFFFFF&quot;</code></td>
<td>PHP_INI_ALL</td>
</tr>
<tr>
<td><code>highlight.default</code></td>
<td><code>#000000&quot;</code></td>
<td>PHP_INI_ALL</td>
</tr>
<tr>
<td><code>highlight.html</code></td>
<td><code>&quot;#0000BB&quot;</code></td>
<td>PHP_INI_ALL</td>
</tr>
<tr>
<td><code>browscap</code></td>
<td><code>NULL</code></td>
<td>PHP_INI_SYSTEM</td>
</tr>
</tbody>
</table>
<h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;&lt;?php \r\n\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;echo &#x27;hello world, hello highlight.&#x27;;\r\n\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;\$array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;];\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;function pr(\$vars)\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;&#123;\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;\tforeach (\$vars as \$key =&gt; \$var) &#123;\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;\t\tif (\$key % 2 === 0) &#123;\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;\t\t\t\$array[\$key] = \$var . &#x27;_test&#x27;;\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;\t\t&#125;\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;\t&#125;\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&quot;&#125;\r\n&quot;</span>;</span><br><span class="line"><span class="variable">$string</span> .= <span class="string">&#x27;pr($array);&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> highlight_string(<span class="variable">$string</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-highlight-1.png" alt="php-highlight-1.png"></p>
<h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> highlight_text(file_get_contents(<span class="string">&#x27;date.php&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlight_text</span>(<span class="params"><span class="variable">$text</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ini_set(<span class="string">&#x27;highlight.comment&#x27;</span>, <span class="string">&#x27;#546E78&#x27;</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;highlight.default&#x27;</span>, <span class="string">&#x27;#DD7455&#x27;</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;highlight.html&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#D56162; font-family: Courier; font-weight: bold&#x27;</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;highlight.keyword&#x27;</span>, <span class="string">&#x27;#5083E6&#x27;</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;highlight.string&#x27;</span>, <span class="string">&#x27;#C3E88D&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$text</span> = trim(<span class="variable">$text</span>);</span><br><span class="line">    <span class="variable">$text</span> = highlight_string(<span class="string">&#x27;&lt;?php &#x27;</span> . <span class="variable">$text</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$text</span> = trim(<span class="variable">$text</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove custom added &quot;<span class="meta">&lt;?php</span> &quot;</span></span><br><span class="line">    <span class="variable">$pattern</span></span><br><span class="line">        = <span class="string">&#x27;|&lt;span style=&quot;color: \#[a-zA-Z0-9]&#123;0,6&#125;&quot;&gt;&amp;lt;\?php&amp;nbsp;&lt;/span&gt;|&#x27;</span>;</span><br><span class="line">    <span class="variable">$text</span> = preg_replace(<span class="variable">$pattern</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$text</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$text</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-highlight-2.png" alt="php-highlight-2.png"></p>
<h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> highlight(); <span class="meta">?&gt;</span></span><br><span class="line">  <span class="variable">$string</span> = <span class="string">&#x27;[ PHP 语法高亮大法好 ]&#x27;</span>;</span><br><span class="line"><span class="meta">&lt;?php</span> highlight(); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlight</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$on</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$on</span>) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$buffer</span> = <span class="string">&quot;&lt;?php\n&quot;</span> . ob_get_contents() . <span class="string">&#x27;?&gt;&#x27;</span>;</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        highlight_string(<span class="variable">$buffer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$on</span> = ! <span class="variable">$on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`<span class="number">3</span>` 行输出，我就懒的截图了</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="文件的语法高亮"><a href="#文件的语法高亮" class="headerlink" title="文件的语法高亮"></a>文件的语法高亮</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="string">&#x27;date.php&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-highlight-file.png" alt="php-highlight-file.png"></p>
<h1 id="扩展高亮支持"><a href="#扩展高亮支持" class="headerlink" title="扩展高亮支持"></a>扩展高亮支持</h1><blockquote>
<ul>
<li><a href="https://github.com/aramk/crayon-syntax-highlighter">Syntax Highlighter supporting multiple languages, themes, fonts, highlighting from a URL, local file or post text</a></li>
<li><a href="https://github.com/scrivo/highlight.php">A port of highlight.js by Ivan Sagalaev to PHP</a></li>
</ul>
</blockquote>
<p>这种插件比较多，这儿我选择 <code>highlight.php</code>，这款插件支持很多语言的代码高亮，按官方的说法，支持达 <code>176</code> 种语言，无论如何已经够用了。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 scrivo/highlight.php</span><br><span class="line">$ composer require scrivo/highlight.php</span><br></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$highlight</span> = <span class="keyword">new</span> \Highlight\Highlighter();</span><br><span class="line"><span class="variable">$code</span> = file_get_contents(<span class="string">&#x27;date.php&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span> = <span class="variable">$highlight</span>-&gt;highlight(<span class="string">&#x27;php&#x27;</span>, <span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span></span><br><span class="line">        href=<span class="string">&quot;&lt;?= &#x27;./vendor/scrivo/highlight.php/styles/monokai.css&#x27; ?&gt;&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;pre <span class="class"><span class="keyword">class</span>=&quot;<span class="title">hljs</span> &lt;?= $<span class="title">object</span>-&gt;<span class="title">language</span> ?&gt;&quot;&gt;&lt;?= $<span class="title">object</span>-&gt;<span class="title">value</span> ?&gt;&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-highlight-ext.png" alt="php-highlight-ext.png"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 从路径中获取文件的扩展名</title>
    <url>/2018/09/05/php-get-file-extension/</url>
    <content><![CDATA[<p><img src="/images/2019/201904101212.png" alt="201904101212.png"></p>
<p>😄这是一道妥妥的字符串操作题呀，源于某道面试题，玩一玩，开心就好。</p>
<span id="more"></span>
<h1 id="使用-pathinfo-函数"><a href="#使用-pathinfo-函数" class="headerlink" title="使用 pathinfo 函数"></a>使用 pathinfo 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pathinfo(<span class="variable">$path</span>, PATHINFO_EXTENSION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pathinfo(<span class="variable">$path</span>)[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-preg-split-函数"><a href="#使用-preg-split-函数" class="headerlink" title="使用 preg_split 函数"></a>使用 preg_split 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$array</span> = preg_split(<span class="string">&#x27;/[\\.]/&#x27;</span>, <span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>[count(<span class="variable">$array</span>) - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-end-函数"><a href="#使用-end-函数" class="headerlink" title="使用 end 函数"></a>使用 end 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$array</span> = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> end(<span class="variable">$array</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-strrchr-函数"><a href="#使用-strrchr-函数" class="headerlink" title="使用 strrchr 函数"></a>使用 strrchr 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substr(strrchr(<span class="variable">$path</span>, <span class="string">&#x27;.&#x27;</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-strrpos-函数"><a href="#使用-strrpos-函数" class="headerlink" title="使用 strrpos 函数"></a>使用 strrpos 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substr(<span class="variable">$path</span>, strrpos(<span class="variable">$path</span>, <span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-preg-replace-函数"><a href="#使用-preg-replace-函数" class="headerlink" title="使用 preg_replace 函数"></a>使用 preg_replace 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="string">&#x27;/^.*\.([^.]+)$/D&#x27;</span>, <span class="string">&quot;<span class="subst">$1</span>&quot;</span>, <span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-SplFileInfo-类"><a href="#使用-SplFileInfo-类" class="headerlink" title="使用 SplFileInfo 类"></a>使用 SplFileInfo 类</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从路径中获取文件的扩展名。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ext_name</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> \<span class="built_in">SplFileInfo</span>(<span class="variable">$path</span>))-&gt;getExtension();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ext_name(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 中的函数式编程</title>
    <url>/2018/06/01/php-functional-programming/</url>
    <content><![CDATA[<p>在最近的学习中，不断听到看到函数式编程，据说常见的编程范式有命令式编程、函数式编程、逻辑式编程等，而常见的面向对象编程居然是一种命令式编程。对于函数式编程来说，其只关心、定义输入数据和输出数据相关的关系，也就是映射。函数式编程关心数据的映射，命令式编程关心解决问题的步骤。</p>
<h1 id="函数式编程概念"><a href="#函数式编程概念" class="headerlink" title="函数式编程概念"></a>函数式编程概念</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>函数式编程 - <code>Functional Programming</code>，一种编程范式，也就是如何编写程序的方法论。它属于『结构化编程』的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>闭包和高阶函数。</li>
<li>惰性计算。</li>
<li>递归。</li>
<li>函数是『第一等公民』：函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</li>
<li>只用『表达式』，不用『语句』</li>
<li>没有『副作用』：函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</li>
<li>不修改状态：函数不维护任何状态，只返回新的值，不修改系统变量。</li>
<li>引用透明性：如果提供同样的输入，那么函数总是返回同样的结果。</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>代码简洁，开发快速。</li>
<li>接近自然语言，易于理解。</li>
<li>更方便的代码管理。</li>
<li>易于『并发编程』。</li>
<li>代码的热升级。</li>
</ul>
<h1 id="函数式编程实例"><a href="#函数式编程实例" class="headerlink" title="函数式编程实例"></a>函数式编程实例</h1><h2 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params"><span class="keyword">callable</span> <span class="variable">$fn</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$args</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$fn</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable">$key</span> =&gt; <span class="variable">$fn</span>(<span class="variable">$val</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ucwords(<span class="variable">$value</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result1</span> = iterator_to_array(map(<span class="variable">$a</span>)([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br><span class="line"><span class="variable">$result2</span> = iterator_to_array(map(<span class="variable">$b</span>)([<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]));</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$result1</span>, <span class="variable">$result2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">4</span>)</span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">6</span>)</span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;Php&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;Java&quot;</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Python&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="keyword">callable</span> <span class="variable">$fn</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$args</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$fn</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$fn</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                <span class="keyword">yield</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> % <span class="number">2</span> &gt; <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ord(<span class="variable">$value</span>) &gt; <span class="number">97</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result1</span> = iterator_to_array(filter(<span class="variable">$a</span>)([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));</span><br><span class="line"><span class="variable">$result2</span> = iterator_to_array(filter(<span class="variable">$b</span>)([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]));</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$result1</span>, <span class="variable">$result2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">1</span>)</span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">3</span>)</span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;e&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params"><span class="keyword">callable</span> <span class="variable">$fn</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$args</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$fn</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$accumulator</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$accumulator</span> = <span class="variable">$fn</span>(<span class="variable">$accumulator</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$accumulator</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqrt(<span class="variable">$a</span>) + sqrt(<span class="variable">$b</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result1</span> = reduce(<span class="variable">$a</span>)([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable">$result2</span> = round(reduce(<span class="variable">$b</span>)([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$result1</span>, <span class="variable">$result2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">15</span>)</span><br><span class="line"><span class="keyword">float</span>(<span class="number">4.19</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 中的浮点数</title>
    <url>/2018/04/18/php-float-number/</url>
    <content><![CDATA[<p>对浮点数进行比较运算是一个坑爹的事，由于栽在这个问题上的次数比较多，总是记吃不记打的，痛定思痛后打算整理一下，避免下次再犯。</p>
<span id="more"></span>
<h1 id="浮点数的陷阱实例"><a href="#浮点数的陷阱实例" class="headerlink" title="浮点数的陷阱实例"></a>浮点数的陷阱实例</h1><blockquote>
<ul>
<li><a href="http://www.laruence.com/2013/03/26/2884.html">PHP 浮点数的一个常见问题的解答</a></li>
<li><a href="https://www.zhihu.com/question/21711083">IEEE 754 格式是什么？</a></li>
</ul>
</blockquote>
<h2 id="浮点数计算错误实例"><a href="#浮点数计算错误实例" class="headerlink" title="浮点数计算错误实例"></a>浮点数计算错误实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$float</span> = <span class="number">0.58</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$float</span> * <span class="number">100</span>);</span><br><span class="line">var_dump(intval(<span class="variable">$float</span> * <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>(<span class="number">58</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">57</span>) <span class="comment">// 居然是 57</span></span><br></pre></td></tr></table></figure>
<h2 id="浮点数比较错误实例"><a href="#浮点数比较错误实例" class="headerlink" title="浮点数比较错误实例"></a>浮点数比较错误实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$a</span>);</span><br><span class="line">var_dump(<span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$a</span> + <span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$a</span> + <span class="variable">$b</span> === <span class="number">0.3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">double</span>(<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">double</span>(<span class="number">0.2</span>)</span><br><span class="line"><span class="keyword">double</span>(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>) <span class="comment">// 居然是 false</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note danger">
            <p>浮点数的精度</p><ul><li>浮点数的精度有限。尽管取决于系统，PHP 通常使用 IEEE 754 双精度格式，则由于取整而导致的最大相对误差为 1.11e-16。非基本数学运算可能会给出更大误差，并且要考虑到进行复合运算时的误差传递</li><li>此外，以十进制能够精确表示的有理数如 <code>0.1</code> 或 <code>0.7</code>，无论有多少尾数都不能被内部所使用的二进制精确表示，因此不能在不丢失一点点精度的情况下转换为二进制的格式。这就会造成混乱的结果，例如：<code>floor((0.1+0.7)*10</code> 通常会返回 <code>7</code> 而不是预期中的 <code>8</code>，因为该结果内部的表示其实是类似 <code>7.9999999999999991118...</code></li><li>所以，永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用 <strong><a href="http://php.net/manual/zh/ref.bc.php">任意精度数学函数</a></strong> 或者 <strong><a href="http://php.net/manual/zh/ref.gmp.php"><code>gmp</code> 函数</a></strong></li></ul>
          </div>
<h1 id="精度数学函数"><a href="#精度数学函数" class="headerlink" title="精度数学函数"></a>精度数学函数</h1><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bcadd()</code></td>
<td>任意精度数字的加法计算</td>
</tr>
<tr>
<td><code>bccomp()</code></td>
<td>比较两个任意精度的数字</td>
</tr>
<tr>
<td><code>bcdiv()</code></td>
<td>两个任意精度的数字除法计算</td>
</tr>
<tr>
<td><code>bcmod()</code></td>
<td>对一个任意精度数字取模</td>
</tr>
<tr>
<td><code>bcmul()</code></td>
<td>两个任意精度数字乘法计算</td>
</tr>
<tr>
<td><code>bcpow()</code></td>
<td>任意精度数字的乘方</td>
</tr>
<tr>
<td><code>bcpowmod()</code></td>
<td>任意精度数字乘方求模</td>
</tr>
<tr>
<td><code>bcscale()</code></td>
<td>设置所有 <code>bc</code> 数学函数的默认小数点保留位数</td>
</tr>
<tr>
<td><code>bcsqrt()</code></td>
<td>任意精度数字的二次方根</td>
</tr>
<tr>
<td><code>bcsub()</code></td>
<td>两个任意精度数字的减法</td>
</tr>
</tbody>
</table>
<div class="note danger">
            <p>使用 <code>bcscale()</code> 设置的位数，超出部分是丢弃掉，而不是四舍五入</p>
          </div>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;0.19&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;0.81&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;bcadd&#x27;</span>    =&gt; bcadd(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="string">&#x27;bccomp&#x27;</span>   =&gt; bccomp(bcadd(<span class="variable">$a</span>, <span class="variable">$b</span>), <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>), <span class="comment">// 两个数相等返回 0</span></span><br><span class="line">    <span class="string">&#x27;bcdiv&#x27;</span>    =&gt; bcdiv(<span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">    <span class="string">&#x27;bcmod&#x27;</span>    =&gt; bcmod(PHP_VERSION, <span class="string">&#x27;2&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;bcmul&#x27;</span>    =&gt; bcmul(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="number">4</span>),</span><br><span class="line">    <span class="string">&#x27;bcpow&#x27;</span>    =&gt; bcpow(<span class="string">&#x27;2.2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">    <span class="string">&#x27;bcpowmod&#x27;</span> =&gt; bcpowmod(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;bcscale&#x27;</span>  =&gt; bcscale(<span class="number">6</span>), <span class="comment">// 设置新的小数点保留位数</span></span><br><span class="line">    <span class="string">&#x27;bcsqrt&#x27;</span>   =&gt; bcsqrt(<span class="string">&#x27;4&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;bcsub&#x27;</span>    =&gt; bcsub(<span class="variable">$b</span>, <span class="variable">$a</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [bcadd] =&gt; <span class="number">1.00</span></span><br><span class="line">    [bccomp] =&gt; <span class="number">0</span></span><br><span class="line">    [bcdiv] =&gt; <span class="number">33.3333</span></span><br><span class="line">    [bcmod] =&gt; <span class="number">0</span></span><br><span class="line">    [bcmul] =&gt; <span class="number">0.1539</span></span><br><span class="line">    [bcpow] =&gt; <span class="number">10.648</span></span><br><span class="line">    [bcpowmod] =&gt; <span class="number">1</span></span><br><span class="line">    [bcscale] =&gt; <span class="number">1</span></span><br><span class="line">    [bcsqrt] =&gt; <span class="number">2.000000</span></span><br><span class="line">    [bcsub] =&gt; <span class="number">0.620000</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="正确的姿势"><a href="#正确的姿势" class="headerlink" title="正确的姿势"></a>正确的姿势</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;0.185&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;0.804&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="number">0.185</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="number">0.804</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span> = <span class="number">101.1988654321</span>;</span><br><span class="line"><span class="variable">$f</span> = <span class="number">101.1988456789</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g</span> = <span class="number">1.23456789</span>;</span><br><span class="line"><span class="variable">$h</span> = <span class="number">1.23456780</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$epsilon</span> = <span class="number">0.00001</span>; <span class="comment">// 机器极小值（epsilon）或最小单元取整数，是计算中所能接受的最小的差别值</span></span><br><span class="line"></span><br><span class="line">var_dump(bcadd(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="number">2</span>) === <span class="string">&#x27;0.98&#x27;</span>);</span><br><span class="line">var_dump(round(<span class="variable">$c</span> + <span class="variable">$d</span>, <span class="number">2</span>) === <span class="number">0.99</span>);</span><br><span class="line">var_dump(bccomp((<span class="keyword">string</span>)<span class="variable">$e</span>, (<span class="keyword">string</span>)<span class="variable">$f</span>, <span class="number">3</span>) === <span class="number">0</span>);</span><br><span class="line">var_dump(abs(<span class="variable">$g</span> - <span class="variable">$h</span>) &lt; <span class="variable">$epsilon</span>); <span class="comment">// 误差小于这个值可以接受</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>未完待续…</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 魔术方法</title>
    <url>/2018/01/18/php-magic-methods/</url>
    <content><![CDATA[<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><blockquote>
<p><code>PHP</code> 将所有以 <code>__</code>（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了心下魔术方法，建议不要以 <code>__</code> 为前缀</p>
</blockquote>
<span id="more"></span>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>__construct()</code></td>
<td>类的构造函数</td>
<td></td>
</tr>
<tr>
<td><code>__destruct()</code></td>
<td>类的析构函数</td>
<td></td>
</tr>
<tr>
<td><code>__call()</code></td>
<td>在对象中调用一个不可访问方法时调用</td>
<td></td>
</tr>
<tr>
<td><code>__callStatic()</code></td>
<td>用静态方式中调用一个不可访问方法时调用</td>
<td></td>
</tr>
<tr>
<td><code>__get()</code></td>
<td>获得一个类的成员变量时调用</td>
<td></td>
</tr>
<tr>
<td><code>__set()</code></td>
<td>设置一个类的成员变量时调用</td>
<td></td>
</tr>
<tr>
<td><code>__isset()</code></td>
<td>当对不可访问属性调用 <code>isset()</code> 或 <code>empty()</code> 时调用</td>
<td></td>
</tr>
<tr>
<td><code>__unset()</code></td>
<td>当对不可访问属性调用 <code>unset()</code> 时被调用</td>
<td></td>
</tr>
<tr>
<td><code>__sleep()</code></td>
<td>执行 <code>serialize()</code> 时，先会调用这个函数</td>
<td></td>
</tr>
<tr>
<td><code>__wakeup()</code></td>
<td>执行 <code>unserialize()</code> 时，先会调用这个函数</td>
<td></td>
</tr>
<tr>
<td><code>__toString()</code></td>
<td>用于一个类被当成字符串时应怎样回应</td>
<td></td>
</tr>
<tr>
<td><code>__invoke()</code></td>
<td>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用</td>
<td></td>
</tr>
<tr>
<td><code>__set_state()</code></td>
<td>调用 <code>var_export()</code> 导出类时，此静态方法会被调用</td>
<td></td>
</tr>
<tr>
<td><code>__clone()</code></td>
<td>当复制完成时，如果定义了 <code>__clone()</code> 方法，则新创建的对象（复制生成的对象）中的 <code>__clone()</code> 方法会被调用，可用于修改属性的值（如果有必要的话）</td>
<td></td>
</tr>
<tr>
<td><code>__debugInfo()</code></td>
<td>当打印一个对象以获取显示的属性时，此方法被 <code>var_dump()</code> 调用。如果此方法未在对象上定义，则将显示所有公开的，受保护的和私有的属性</td>
</tr>
</tbody>
</table>
<h2 id="方法实例"><a href="#方法实例" class="headerlink" title="方法实例"></a>方法实例</h2><h3 id="construct-和-destruct"><a href="#construct-和-destruct" class="headerlink" title="__construct() 和 __destruct()"></a><code>__construct()</code> 和 <code>__destruct()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">		<span class="built_in">parent</span>::__construct();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">		<span class="built_in">parent</span>::__destruct();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Test::__construct</span><br><span class="line"><span class="keyword">Object</span>::__construct</span><br><span class="line">Test::__destruct</span><br><span class="line"><span class="keyword">Object</span>::__destruct</span><br></pre></td></tr></table></figure>
<h3 id="call-和-callStatic"><a href="#call-和-callStatic" class="headerlink" title="__call() 和 __callStatic()"></a><code>__call()</code> 和 <code>__callStatic()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Calling object method &#x27;<span class="subst">$name</span>&#x27; &quot;</span> . implode(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$arguments</span>) . PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Calling static method &#x27;<span class="subst">$name</span>&#x27; &quot;</span> . implode(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$arguments</span>) . PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"><span class="variable">$object</span>-&gt;getCall(<span class="string">&#x27;in object context&#x27;</span>);</span><br><span class="line"><span class="keyword">Object</span>::getCallStatic(<span class="string">&#x27;in static context&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Calling <span class="keyword">object</span> method <span class="string">&#x27;getCall&#x27;</span> in <span class="keyword">object</span> context</span><br><span class="line">Calling <span class="built_in">static</span> method <span class="string">&#x27;getCallStatic&#x27;</span> in <span class="built_in">static</span> context</span><br></pre></td></tr></table></figure>
<h3 id="get-set-isset-unset"><a href="#get-set-isset-unset" class="headerlink" title="__get(), __set(), __isset(), __unset()"></a><code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$val</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>] = <span class="variable">$val</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (array_key_exists(<span class="variable">$key</span>, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">		<span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"><span class="variable">$object</span>-&gt;property = <span class="string">&#x27;This is the property of the object.&#x27;</span>;</span><br><span class="line"><span class="variable">$object</span>-&gt;property;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$object</span>-&gt;property);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$object</span>-&gt;property);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Object</span>::__set</span><br><span class="line"><span class="keyword">Object</span>::__get</span><br><span class="line"><span class="keyword">Object</span>::__isset</span><br><span class="line"><span class="keyword">Object</span>::__unset</span><br></pre></td></tr></table></figure>
<h3 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep() 和 __wakeup"></a><code>__sleep()</code> 和 <code>__wakeup</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$server</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$database</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$server</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$database</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server = <span class="variable">$server</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;database = <span class="variable">$database</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;server&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;database&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;link = mysqli_connect(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;server,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;username,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;password</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$serialize</span> = serialize(<span class="variable">$object</span>);</span><br><span class="line">unserialize(<span class="variable">$serialize</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Object</span>::__construct</span><br><span class="line"><span class="keyword">Object</span>::__sleep</span><br><span class="line"><span class="keyword">Object</span>::__wakeup</span><br><span class="line"><span class="keyword">Object</span>::connect</span><br></pre></td></tr></table></figure>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a><code>__toString()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">__METHOD__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$object</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Object</span>::__toString</span><br></pre></td></tr></table></figure>
<h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a><code>__invoke()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line">var_dump(is_callable(<span class="variable">$object</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Object</span>::__invoke</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h3 id="set-state"><a href="#set-state" class="headerlink" title="__set_state()"></a><code>__set_state()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__set_state</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$array</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">		<span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line">		<span class="variable">$object</span>-&gt;a = <span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">		<span class="variable">$object</span>-&gt;b = <span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$object</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"><span class="variable">$object</span>-&gt;a = <span class="string">&#x27;this is a&#x27;</span>;</span><br><span class="line"><span class="variable">$object</span>-&gt;b = <span class="string">&#x27;this is b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;$b = &#x27;</span> . var_export(<span class="variable">$object</span>, <span class="literal">true</span>) . <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">var_dump(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Object</span>::__set_state</span><br><span class="line"><span class="keyword">object</span>(<span class="keyword">Object</span>)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;this is a&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;this is b&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a><code>__clone()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;instance = ++<span class="built_in">self</span>::<span class="variable">$count</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;instance = ++<span class="built_in">self</span>::<span class="variable">$count</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cloneable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$object1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$object2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制复制一份 this-&gt;object，否则仍然指向同一个对象</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;object1 = <span class="keyword">clone</span> <span class="keyword">$this</span>-&gt;object1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cloneable</span> = <span class="keyword">new</span> Cloneable();</span><br><span class="line"><span class="variable">$cloneable</span>-&gt;object1 = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"><span class="variable">$cloneable</span>-&gt;object2 = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$clone</span> = <span class="keyword">clone</span> <span class="variable">$cloneable</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Original Object:\n&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$cloneable</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Cloned Object:\n&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$clone</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Cloneable::__construct</span><br><span class="line"><span class="keyword">Object</span>::__construct</span><br><span class="line"><span class="keyword">Object</span>::__construct</span><br><span class="line">Cloneable::__clone</span><br><span class="line"><span class="keyword">Object</span>::__clone</span><br><span class="line">Original <span class="keyword">Object</span>:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cloneable</span>#1 (2) </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$object1</span> =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Object</span>#2 (1) </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$instance</span> =&gt;</span><br><span class="line">    <span class="keyword">int</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$object2</span> =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Object</span>#3 (1) </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$instance</span> =&gt;</span><br><span class="line">    <span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Cloned <span class="keyword">Object</span>:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cloneable</span>#4 (2) </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$object1</span> =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Object</span>#5 (1) </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$instance</span> =&gt;</span><br><span class="line">    <span class="keyword">int</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$object2</span> =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Object</span>#3 (1) </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$instance</span> =&gt;</span><br><span class="line">    <span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="debugInfo"><a href="#debugInfo" class="headerlink" title="__debugInfo()"></a><code>__debugInfo()</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">date_default_timezone_set(<span class="string">&#x27;PRC&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$year</span>, <span class="variable">$month</span>, <span class="variable">$day</span>, <span class="variable">$hour</span>, <span class="variable">$minute</span>, <span class="variable">$second</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__debugInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="variable">$date</span> = <span class="keyword">$this</span>-&gt;year . <span class="string">&#x27;-&#x27;</span> . <span class="keyword">$this</span>-&gt;month . <span class="string">&#x27;-&#x27;</span> . <span class="keyword">$this</span>-&gt;day;</span><br><span class="line">		<span class="variable">$time</span> = <span class="keyword">$this</span>-&gt;hour . <span class="string">&#x27;:&#x27;</span> . <span class="keyword">$this</span>-&gt;minute . <span class="string">&#x27;:&#x27;</span> . <span class="keyword">$this</span>-&gt;second;</span><br><span class="line">		<span class="variable">$datetime</span> = <span class="variable">$date</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$time</span>;</span><br><span class="line">		<span class="keyword">return</span> [</span><br><span class="line">			<span class="string">&#x27;date&#x27;</span> =&gt; <span class="variable">$date</span>,</span><br><span class="line">			<span class="string">&#x27;time&#x27;</span> =&gt; <span class="variable">$time</span>,</span><br><span class="line">			<span class="string">&#x27;datetime&#x27;</span> =&gt; <span class="variable">$datetime</span>,</span><br><span class="line">			<span class="string">&#x27;property&#x27;</span> =&gt; call_user_func(<span class="string">&#x27;get_object_vars&#x27;</span>, <span class="keyword">$this</span>),</span><br><span class="line">		];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"><span class="variable">$object</span>-&gt;year = date(<span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span>-&gt;month = date(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span>-&gt;day = date(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span>-&gt;hour = date(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span>-&gt;minute = date(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span>-&gt;second = date(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">var_dump(<span class="variable">$object</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>#1 (4) </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$date</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">10</span>) <span class="string">&quot;2018-01-18&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$time</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;17:27:45&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$datetime</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">19</span>) <span class="string">&quot;2018-01-18 17:27:45&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$property</span> =&gt;</span><br><span class="line">  <span class="keyword">array</span>(<span class="number">6</span>) &#123;</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;2018&quot;</span></span><br><span class="line">    <span class="string">&#x27;month&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;01&quot;</span></span><br><span class="line">    <span class="string">&#x27;day&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;18&quot;</span></span><br><span class="line">    <span class="string">&#x27;hour&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line">    <span class="string">&#x27;minute&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;27&quot;</span></span><br><span class="line">    <span class="string">&#x27;second&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;45&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>__LINE__</code></td>
<td>文件中的当前行号</td>
<td></td>
</tr>
<tr>
<td><code>__FILE__</code></td>
<td>文件的完整路径和文件名</td>
<td></td>
</tr>
<tr>
<td><code>__DIR__</code></td>
<td>文件所在的目录</td>
<td></td>
</tr>
<tr>
<td><code>__FUNCTION__</code></td>
<td>函数名称</td>
<td></td>
</tr>
<tr>
<td><code>__CLASS__</code></td>
<td>类的名称</td>
<td></td>
</tr>
<tr>
<td><code>__TRAIT__</code></td>
<td><code>Trait</code> 的名字</td>
<td></td>
</tr>
<tr>
<td><code>__METHOD__</code></td>
<td>类的方法名</td>
<td></td>
</tr>
<tr>
<td><code>__NAMESPACE__</code></td>
<td>当前命名空间的名称</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">ObjectTrait</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTrait</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__TRAIT__</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ObjectTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__LINE__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__FILE__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__DIR__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;getTrait();</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line">/Users/xxx/Downloads/test/vscode.php</span><br><span class="line">/Users/xxx/Downloads/test</span><br><span class="line">__construct</span><br><span class="line">App\<span class="keyword">Object</span></span><br><span class="line">App\ObjectTrait</span><br><span class="line">App\<span class="keyword">Object</span>::__construct</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 方法检测函数</title>
    <url>/2018/03/04/php-method-detection-function/</url>
    <content><![CDATA[<p>PHP 中一共提供了 3 种方法检测函数，分别是：<code>function_exists / method_exists / is_callable</code>，这三个函数分别适用于不同的场景，现将其用法做一说明。</p>
<span id="more"></span>
<h2 id="检测函数是否存在"><a href="#检测函数是否存在" class="headerlink" title="检测函数是否存在"></a>检测函数是否存在</h2><blockquote>
<p>这类函数一般指 PHP 内核提供的一些工具函数或者用户自定义的函数</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! function_exists(<span class="string">&#x27;dd&#x27;</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dd</span>(<span class="params">...<span class="variable">$vars</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$vars</span> <span class="keyword">as</span> <span class="variable">$var</span>) &#123;</span><br><span class="line">            print_r(<span class="variable">$var</span>);</span><br><span class="line">            <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">die</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dd(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">test</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>
<h2 id="检测类的方法是否存在"><a href="#检测类的方法是否存在" class="headerlink" title="检测类的方法是否存在"></a>检测类的方法是否存在</h2><h3 id="能检测出的方法"><a href="#能检测出的方法" class="headerlink" title="能检测出的方法"></a>能检测出的方法</h3><blockquote>
<p><code>method_exists()</code> 能检测出对象中的 <code>static</code>, <code>final</code>, <code>abstract</code> 方法，还能检测出 <code>public</code>, <code>protected</code>, <code>private</code> 修饰的方法</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">&#x27;publicMethod&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;publicMethod();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstractMethod</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">finalMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">publicMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">protectedMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstractMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">staticMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = [</span><br><span class="line">    method_exists(Bar::class, <span class="string">&#x27;__construct&#x27;</span>),</span><br><span class="line">    method_exists(Bar::class, <span class="string">&#x27;publicMethod&#x27;</span>),</span><br><span class="line">    method_exists(Bar::class, <span class="string">&#x27;protectedMethod&#x27;</span>),</span><br><span class="line">    method_exists(Bar::class, <span class="string">&#x27;privateMethod&#x27;</span>),</span><br><span class="line">    method_exists(Bar::class, <span class="string">&#x27;abstractMethod&#x27;</span>),</span><br><span class="line">    method_exists(Bar::class, <span class="string">&#x27;staticMethod&#x27;</span>),</span><br><span class="line">    method_exists(Bar::class, <span class="string">&#x27;finalMethod&#x27;</span>),</span><br><span class="line">];</span><br><span class="line">var_dump(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">7</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">3</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">4</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">5</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">6</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不能检测出的方法"><a href="#不能检测出的方法" class="headerlink" title="不能检测出的方法"></a>不能检测出的方法</h2><blockquote>
<p><code>method_exists()</code> 无法检测出使用魔法方法 <code>__call</code> 调用的函数</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">__METHOD__</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="variable">$method</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>, <span class="variable">$method</span>], <span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = <span class="keyword">new</span> Foo();</span><br><span class="line">var_dump(<span class="variable">$foo</span>-&gt;getName());</span><br><span class="line">var_dump(<span class="variable">$foo</span>-&gt;getDescription());</span><br><span class="line">var_dump(method_exists(<span class="variable">$foo</span>, <span class="string">&#x27;getName&#x27;</span>));</span><br><span class="line">var_dump(method_exists(<span class="variable">$foo</span>, <span class="string">&#x27;getDescription&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;Foo::getName&quot;</span></span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h2 id="检测参数是否为合法的可调用结构"><a href="#检测参数是否为合法的可调用结构" class="headerlink" title="检测参数是否为合法的可调用结构"></a>检测参数是否为合法的可调用结构</h2><h3 id="默认调用"><a href="#默认调用" class="headerlink" title="默认调用"></a>默认调用</h3><blockquote>
<p><code>is_callable()</code> 可以判断出是否能够进行调用。默认第二个参数为 <code>false</code>，表示该回调操作有权限能够被调用，如果为 <code>true</code> 的话，仅仅验证传递的可能是函数或方法，表示只检测其存在具有可回调的格式</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">&#x27;publicMethod&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;publicMethod();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstractMethod</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">finalMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">publicMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">protectedMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstractMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">staticMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$bar</span> = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="variable">$callables</span> = [</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;__construct&#x27;</span>], <span class="literal">false</span>, <span class="variable">$a</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;publicMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$b</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;protectedMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$c</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;privateMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$d</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;abstractMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$e</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;staticMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$f</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;finalMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$g</span>),</span><br><span class="line">];</span><br><span class="line"><span class="variable">$names</span> = [<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>, <span class="variable">$e</span>, <span class="variable">$f</span>, <span class="variable">$g</span>];</span><br><span class="line">var_dump(<span class="variable">$callables</span>);</span><br><span class="line">var_dump(<span class="variable">$names</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">7</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line">  [<span class="number">3</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line">  [<span class="number">4</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">5</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">6</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">7</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">16</span>) <span class="string">&quot;Bar::__construct&quot;</span></span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">17</span>) <span class="string">&quot;Bar::publicMethod&quot;</span></span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">20</span>) <span class="string">&quot;Bar::protectedMethod&quot;</span></span><br><span class="line">  [<span class="number">3</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">18</span>) <span class="string">&quot;Bar::privateMethod&quot;</span></span><br><span class="line">  [<span class="number">4</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">19</span>) <span class="string">&quot;Bar::abstractMethod&quot;</span></span><br><span class="line">  [<span class="number">5</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">17</span>) <span class="string">&quot;Bar::staticMethod&quot;</span></span><br><span class="line">  [<span class="number">6</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">16</span>) <span class="string">&quot;Bar::finalMethod&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="魔术方法中调用"><a href="#魔术方法中调用" class="headerlink" title="魔术方法中调用"></a>魔术方法中调用</h3><blockquote>
<p>如果设置了 <code>__call()</code> 方法的话，那么检测出来的任何方法都是返回 <code>true</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">&#x27;publicMethod&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;publicMethod();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstractMethod</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">finalMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">publicMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">protectedMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstractMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">staticMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$bar</span> = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="variable">$callables</span> = [</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;__construct&#x27;</span>], <span class="literal">false</span>, <span class="variable">$a</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;publicMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$b</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;protectedMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$c</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;privateMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$d</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;abstractMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$e</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;staticMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$f</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;finalMethod&#x27;</span>], <span class="literal">false</span>, <span class="variable">$g</span>),</span><br><span class="line">    is_callable([<span class="variable">$bar</span>, <span class="string">&#x27;notExistMethod&#x27;</span>], <span class="literal">true</span>, <span class="variable">$h</span>),</span><br><span class="line">];</span><br><span class="line"><span class="variable">$names</span> = [<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>, <span class="variable">$e</span>, <span class="variable">$f</span>, <span class="variable">$g</span>, <span class="variable">$h</span>];</span><br><span class="line">var_dump(<span class="variable">$callables</span>);</span><br><span class="line">var_dump(<span class="variable">$names</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">8</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">3</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">4</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">5</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">6</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">7</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">8</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">16</span>) <span class="string">&quot;Bar::__construct&quot;</span></span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">17</span>) <span class="string">&quot;Bar::publicMethod&quot;</span></span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">20</span>) <span class="string">&quot;Bar::protectedMethod&quot;</span></span><br><span class="line">  [<span class="number">3</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">18</span>) <span class="string">&quot;Bar::privateMethod&quot;</span></span><br><span class="line">  [<span class="number">4</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">19</span>) <span class="string">&quot;Bar::abstractMethod&quot;</span></span><br><span class="line">  [<span class="number">5</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">17</span>) <span class="string">&quot;Bar::staticMethod&quot;</span></span><br><span class="line">  [<span class="number">6</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">16</span>) <span class="string">&quot;Bar::finalMethod&quot;</span></span><br><span class="line">  [<span class="number">7</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">19</span>) <span class="string">&quot;Bar::notExistMethod&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如果 <code>is_callable()</code> 的第一个参数是 <code>string</code>，那么和 <code>function_exists()</code> 相似；如果是数组则和 <code>method_exists()</code> 相似，但又有不同</p>
<ul>
<li><code>method_exists()</code> 不会考虑类方法的定义范围 <code>public</code>、<code>protected</code>、<code>private</code>，只要存在就返回 <code>true</code>；而 <code>is_callable()</code> 会在方法是被 <code>protected</code>、<code>private</code> 时返回 <code>false</code></li>
<li><code>is_callable()</code> 会去调用 <code>__call()</code> 魔术方法来判断，而 <code>method_exists()</code> 不会</li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 归并排序</title>
    <url>/2018/05/04/php-merge-sort/</url>
    <content><![CDATA[<p>归并排序利用归并（合并）的思想实现的排序方法。它的原理是假设初始序列含有 <code>n</code> 个元素，则可以看成是 <code>n</code> 个有序的子序列，每个子序列的长度为 <code>1</code>，然后两两归并，得到 <code>n / 2</code> 个长度为 <code>2</code> 或 <code>1</code> 的有序序列；再两两归并，……，如此重复，直至得到一个长度为 <code>n</code> 的有序序列为止，这种排序方法就成为两路归并排序。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。在归并操作中将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>递归法 - <code>Top-down</code>：</p>
<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤 <code>3</code> 直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>, <span class="number">0</span>, count(<span class="variable">$random</span>) - <span class="number">1</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $right</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$left</span>, <span class="keyword">int</span> <span class="variable">$right</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$middle</span> = (<span class="keyword">int</span>)floor(<span class="variable">$left</span> + <span class="variable">$right</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">self</span>::sort(<span class="variable">$array</span>, <span class="variable">$left</span>, <span class="variable">$middle</span>);</span><br><span class="line">            <span class="built_in">self</span>::sort(<span class="variable">$array</span>, <span class="variable">$middle</span> + <span class="number">1</span>, <span class="variable">$right</span>);</span><br><span class="line">            <span class="built_in">self</span>::merge(<span class="variable">$array</span>, <span class="variable">$left</span>, <span class="variable">$middle</span>, <span class="variable">$right</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $middle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $right</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$left</span>, <span class="keyword">int</span> <span class="variable">$middle</span>, <span class="keyword">int</span> <span class="variable">$right</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="variable">$left</span>;</span><br><span class="line">        <span class="variable">$j</span> = <span class="variable">$middle</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$left</span>;</span><br><span class="line">        <span class="variable">$tmp</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &lt;= <span class="variable">$middle</span> &amp;&amp; <span class="variable">$j</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$i</span>], <span class="variable">$array</span>[<span class="variable">$j</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$tmp</span>[<span class="variable">$k</span>++] = <span class="variable">$array</span>[<span class="variable">$j</span>++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$tmp</span>[<span class="variable">$k</span>++] = <span class="variable">$array</span>[<span class="variable">$i</span>++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &lt;= <span class="variable">$middle</span>) &#123;</span><br><span class="line">            <span class="variable">$tmp</span>[<span class="variable">$k</span>++] = <span class="variable">$array</span>[<span class="variable">$i</span>++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$j</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$tmp</span>[<span class="variable">$k</span>++] = <span class="variable">$array</span>[<span class="variable">$j</span>++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="variable">$left</span>; <span class="variable">$k</span> &lt;= <span class="variable">$right</span>; <span class="variable">$k</span>++) &#123;</span><br><span class="line">            <span class="variable">$array</span>[<span class="variable">$k</span>] = <span class="variable">$tmp</span>[<span class="variable">$k</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MergeSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1167</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2750</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3331</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4187</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">4526</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">5246</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">5325</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">6238</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">7737</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">9883</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>由于 <code>PHP</code> 具备数组分割和数组合并这样的函数，所以以上的实现可以更加简单</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向上取整。</span></span><br><span class="line">        <span class="variable">$middle</span> = (<span class="variable">$count</span> &gt;&gt; <span class="number">1</span>) + (<span class="variable">$count</span> &amp; <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$chunk</span> = array_chunk(<span class="variable">$array</span>, <span class="variable">$middle</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$left</span> = <span class="built_in">self</span>::sort(<span class="variable">$chunk</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$right</span> = <span class="built_in">self</span>::sort(<span class="variable">$chunk</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = [];</span><br><span class="line">        <span class="keyword">while</span> (count(<span class="variable">$left</span>) &amp;&amp; count(<span class="variable">$right</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$left</span>[<span class="number">0</span>], <span class="variable">$right</span>[<span class="number">0</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$arr</span>[] = array_shift(<span class="variable">$right</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$arr</span>[] = array_shift(<span class="variable">$left</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array_merge(<span class="variable">$arr</span>, <span class="variable">$left</span>, <span class="variable">$right</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MergeSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1281</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">1337</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3213</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4078</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">5350</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">5857</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">5889</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">8088</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">8190</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">8440</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>迭代法 - <code>Bottom-up</code>：</p>
<ol>
<li>将序列每相邻两个数字进行归并操作，形成 <code>ceil(n/2)</code> 个序列，排序后每个序列包含两/一个元素</li>
<li>若此时序列数不是 <code>1</code> 个则将上述序列再次归并，形成 <code>ceil(n/4)</code> 个序列，每个序列包含四/三个元素</li>
<li>重复步骤 <code>2</code>，直到所有元素排序完毕，即序列数为 <code>1</code></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以后完善……</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 插入排序</title>
    <url>/2018/04/14/php-insertion-sort/</url>
    <content><![CDATA[<p>插入排序是一种较为简单的排序算法，它的基本思想是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。为此有人形象的把插入排序比拟为打扑克抓牌的过程，通常我们右手抓牌，没抓一张牌，就放到左手，抓下一张牌后，会把这张牌依次与左手上的牌比较，并把它插入到一个合适的位置（按牌面大小），这个比拟实在是太牛逼了。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>插入排序 - <code>Insertion Sort</code>：是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 <code>in-place</code> 排序（即只需用到 <code>O(1)</code> 的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤 2~5</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InsertionSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">84</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">1841</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3900</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4762</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">5708</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">5938</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">6136</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">6148</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">6228</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">9207</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$i</span>], <span class="variable">$array</span>[<span class="variable">$i</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$pivot</span> = <span class="variable">$array</span>[<span class="variable">$i</span> + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$array</span>[<span class="variable">$j</span>] &gt; <span class="variable">$pivot</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                    <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>] = <span class="variable">$array</span>[<span class="variable">$j</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>] = <span class="variable">$pivot</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InsertionSort::main();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">133</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">161</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">393</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">1273</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">1274</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">2041</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">5046</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">7325</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">7950</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">9988</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$j</span>], <span class="variable">$array</span>[<span class="variable">$j</span> + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InsertionSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">57</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">896</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">2172</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3428</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">4236</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">4844</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">6524</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">7586</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">8172</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">8650</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Phalcon 框架之启动流程</title>
    <url>/2018/03/06/php-phalcon-bootstrap/</url>
    <content><![CDATA[<p>稀里糊涂的使用 <code>Phalcon</code> 一年多了，对于其运行的的流程也知道个大概，本来计划尽早梳理一下，整理下学习心得，但是，由于种种原因还是没好好整理记录。好记性不如烂笔头，再经过来来回回翻文档过程中愈加痛恨自己的记忆力了，文档上找起来也不见得容易，还是老老实实记录一下常用的一些东西吧，这样在一个地方找总胜过在一个庞大的手册跳来跳去吧。顺便提一下，<a href="https://docs.phalconphp.com/en/3.3/introduction"><code>Phalcon</code></a> 的官方文档越来越好用了。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>执行以下的命令创建一个标准的 <code>Phalcon Micro Project</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon project --name example --enable-webtools --directory ./ --<span class="built_in">type</span> micro --use-config-ini --trace</span><br></pre></td></tr></table></figure>
<p>入口文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Phalcon</span>\<span class="title">Di</span>\<span class="title">FactoryDefault</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Phalcon</span>\<span class="title">Mvc</span>\<span class="title">Micro</span>;</span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;BASE_PATH&#x27;</span>, dirname(<span class="keyword">__DIR__</span>));</span><br><span class="line">define(<span class="string">&#x27;APP_PATH&#x27;</span>, BASE_PATH . <span class="string">&#x27;/app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The FactoryDefault Dependency Injector automatically registers the services that</span></span><br><span class="line"><span class="comment">     * provide a full stack framework. These default services can be overidden with custom ones.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">$di</span> = <span class="keyword">new</span> FactoryDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Include Services</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">include</span> APP_PATH . <span class="string">&#x27;/config/services.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get config service for use in inline setup below</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">$config</span> = <span class="variable">$di</span>-&gt;getConfig();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Include Autoloader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">include</span> APP_PATH . <span class="string">&#x27;/config/loader.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Starting the application</span></span><br><span class="line"><span class="comment">     * Assign service locator to the application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">$app</span> = <span class="keyword">new</span> Micro(<span class="variable">$di</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Include Application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">include</span> APP_PATH . <span class="string">&#x27;/app.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">$app</span>-&gt;handle();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage() . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . <span class="variable">$e</span>-&gt;getTraceAsString() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单来说，就是</p>
<ul>
<li>创建依赖注入容器</li>
<li>引入服务，将依赖及服务收集到容器中</li>
<li>自动加载</li>
<li>将容器注入给应用程序</li>
<li>请求处理并响应</li>
</ul>
<h2 id="依赖注册"><a href="#依赖注册" class="headerlink" title="依赖注册"></a>依赖注册</h2><h3 id="系统默认注册"><a href="#系统默认注册" class="headerlink" title="系统默认注册"></a>系统默认注册</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Include Services</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">include</span> APP_PATH . <span class="string">&#x27;/config/services.php&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><code>services.php</code> 默认注册了 配置 - <code>\Phalcon\Config\Adapter\Ini(ConfigFile)</code>, 视图 - <code>Phalcon\Mvc\View\Simple</code>, <code>URL</code> - <code>Phalcon\Mvc\Url</code> 和 <code>Phalcon\Db\Adapter\Pdo\XxxAdapter</code> 这四个组件，同时当应用程序启动时，<code>DI</code> 中默认注册了其它服务</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$services</span> = <span class="variable">$app</span>-&gt;getDI()-&gt;getServices();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$services</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$service</span>) &#123;</span><br><span class="line">    var_dump(<span class="variable">$key</span>);</span><br><span class="line">    var_dump(get_class(<span class="variable">$app</span>-&gt;getDI()-&gt;get(<span class="variable">$key</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出后的 <code>Phalcon</code> 注册服务如下：</p>
<blockquote>
<p>其中 <code>url</code>、<code>config</code>、<code>view</code>、<code>db</code>、<code>application</code> 是没有对应的依赖服务的</p>
</blockquote>
<ul>
<li><code>router - Phalcon\Mvc\Router</code>: 路由</li>
<li><code>dispatcher - Phalcon\Mvc\Dispatcher</code>: 调度，将路由命中的结果分发到对应的处理单元上</li>
<li><code>url - Phalcon\Mvc\Url</code>: 解析生成 <code>URL</code></li>
<li><code>modelsManager - Phalcon\Mvc\Model\Manager</code>: 模型管理器</li>
<li><code>modelsMetadata - Phalcon\Mvc\Model\MetaData\Memory</code>: <code>ORM</code> 映射</li>
<li><code>response - Phalcon\Http\Response</code>: 响应</li>
<li><code>cookies - Phalcon\Http\Response\Cookies</code>: <code>Cookies</code></li>
<li><code>request - Phalcon\Http\Request</code>: 请求</li>
<li><code>filter - Phalcon\Filter</code>: 过滤器</li>
<li><code>escaper - Phalcon\Escaper</code>: 转义工具</li>
<li><code>security - Phalcon\Security</code>: 安全工具(密码 <code>Hash</code>、<code>CRSF</code> 保护)</li>
<li><code>crypt - Phalcon\Crypt</code>: 密码工具</li>
<li><code>annotations - Phalcon\Annotations\Adapter\Memory</code>: 注释分析</li>
<li><code>flash - Phalcon\Flash\Direct</code>: 提示信息输出</li>
<li><code>flashSession - Phalcon\Flash\Session</code>: 提示信息通过 <code>Session</code> 延迟输出</li>
<li><code>tag - Phalcon\Tag</code>: 视图助手</li>
<li><code>session - Phalcon\Session\Adapter\Files</code>: <code>Session</code></li>
<li><code>sessionBag - Phalcon\Session\Bag</code>: <code>Session</code> 包</li>
<li><code>eventsManager - Phalcon\Events\Manager</code>: 事件</li>
<li><code>transactionManager - Phalcon\Mvc\Model\Transaction\Manager</code>: 事务</li>
<li><code>assets - Phalcon\Assets\Manager</code>: 资产</li>
<li><code>config - \Phalcon\Config\Adapter\Ini(ConfigFile)</code>: 配置</li>
<li><code>view - Phalcon\Mvc\View\Simple</code>: 视图</li>
<li><code>db - Phalcon\Db\Adapter\Pdo\Mysql</code>: 数据库，可选(<code>MySQL</code>、<code>Postgresql</code> 等)</li>
<li><code>application - Phalcon\Mvc\Micro</code>: 应用</li>
</ul>
<h3 id="依赖注册属性的改变"><a href="#依赖注册属性的改变" class="headerlink" title="依赖注册属性的改变"></a>依赖注册属性的改变</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set routing capabilities</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$router</span> = <span class="variable">$app</span>-&gt;getDI()-&gt;get(<span class="string">&#x27;router&#x27;</span>);</span><br><span class="line"><span class="variable">$router</span>-&gt;setUriSource(\Phalcon\Mvc\Router::URI_SOURCE_SERVER_REQUEST_URI);</span><br></pre></td></tr></table></figure>
<h2 id="模块注册"><a href="#模块注册" class="headerlink" title="模块注册"></a>模块注册</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Composer autoloader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">require</span> BASE_PATH . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registering an autoloader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> \Phalcon\Loader();</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span>-&gt;registerNamespaces([</span><br><span class="line">    <span class="string">&#x27;App\\Model&#x27;</span>     =&gt; <span class="string">&#x27;../app/models&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;App\\Component&#x27;</span> =&gt; <span class="string">&#x27;../app/components&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;App\\Util&#x27;</span>      =&gt; <span class="string">&#x27;../app/utils&#x27;</span>,</span><br><span class="line">])-&gt;register();</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span>-&gt;registerDirs([</span><br><span class="line">    <span class="variable">$config</span>-&gt;application-&gt;modelsDir,</span><br><span class="line">])-&gt;register();</span><br></pre></td></tr></table></figure>
<p>模块注册，其实就是告诉应用程序需要引导的模块路径和类名</p>
<h2 id="MVC-分层"><a href="#MVC-分层" class="headerlink" title="MVC 分层"></a><code>MVC</code> 分层</h2><blockquote>
<ul>
<li>此处的 <code>$app</code> 指的就是创建的 <code>Micro</code> 对象，一开始我们创建的应用类型为 <code>Phalcon Micro Project</code></li>
<li><code>$app-&gt;handle();</code> 是整个 <code>MVC</code> 的核心，这个方法处理了 <code>MVC</code> 的全部流程，它获得所有请求后，在处理过程中通过事件驱动触发一系列的 <code>app</code> 事件，最终返回一个完整的 <code>Phalcon\Http\Response</code> 对象</li>
</ul>
</blockquote>
<h3 id="自检"><a href="#自检" class="headerlink" title="自检"></a>自检</h3><p>这个阶段，主要检查 <code>DI</code>，确保必要的服务注册进来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果将 `db` 服务注释掉，会抛出下面的异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Database connection is created based in the parameters defined in the configuration file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// $di-&gt;setShared(&#x27;db&#x27;, function () &#123;</span></span><br><span class="line"><span class="comment">//     $config = $this-&gt;getConfig();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     $class = &#x27;Phalcon\Db\Adapter\Pdo\\&#x27; . $config-&gt;database-&gt;adapter;</span></span><br><span class="line"><span class="comment">//     $params = [</span></span><br><span class="line"><span class="comment">//         &#x27;host&#x27;     =&gt; $config-&gt;database-&gt;host,</span></span><br><span class="line"><span class="comment">//         &#x27;username&#x27; =&gt; $config-&gt;database-&gt;username,</span></span><br><span class="line"><span class="comment">//         &#x27;password&#x27; =&gt; $config-&gt;database-&gt;password,</span></span><br><span class="line"><span class="comment">//         &#x27;dbname&#x27;   =&gt; $config-&gt;database-&gt;dbname,</span></span><br><span class="line"><span class="comment">//         &#x27;charset&#x27;  =&gt; $config-&gt;database-&gt;charset,</span></span><br><span class="line"><span class="comment">//     ];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     if ($config-&gt;database-&gt;adapter == &#x27;Postgresql&#x27;) &#123;</span></span><br><span class="line"><span class="comment">//         unset($params[&#x27;charset&#x27;]);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     $connection = new $class($params);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     return $connection;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">Service <span class="string">&#x27;db&#x27;</span> wasn<span class="string">&#x27;t found in the dependency injection container</span></span><br></pre></td></tr></table></figure>
<p>接下来，<code>app</code> 可以把事件绑定到 <code>Phalcon\Events\Manager</code> 上</p>
<table>
<thead>
<tr>
<th>事件名称</th>
<th>触发点</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boot</code></td>
<td>当应用处理它首个请求时被执行</td>
<td></td>
</tr>
<tr>
<td><code>beforeStartModule</code></td>
<td>初始化模块之前，仅当模块被注册时</td>
<td></td>
</tr>
<tr>
<td><code>afterStartModule</code></td>
<td>初始化模块之后，仅当模块被注册时</td>
<td></td>
</tr>
<tr>
<td><code>beforeHandleRequest</code></td>
<td>调度分发循环之前</td>
<td></td>
</tr>
<tr>
<td><code>afterHandleRequest</code></td>
<td>调度分发循环之后</td>
</tr>
</tbody>
</table>
<p>将一个事件绑定到事件管理器上</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Phalcon</span>\<span class="title">Events</span>\<span class="title">Event</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Phalcon</span>\<span class="title">Events</span>\<span class="title">Manager</span> <span class="title">as</span> <span class="title">EventsManager</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$eventsManager</span> = <span class="keyword">new</span> EventsManager();</span><br><span class="line"></span><br><span class="line"><span class="variable">$application</span>-&gt;setEventsManager(<span class="variable">$eventsManager</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$eventsManager</span>-&gt;attach(</span><br><span class="line">    <span class="string">&quot;application&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">Event <span class="variable">$event</span>, <span class="variable">$application</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>做完这些自检后，就顺得地进入了路由阶段</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>从 <code>DI</code> 中容器中通过键名 <code>router</code> 获取路由服务，将 <code>uri</code> 传入路由并调用路由的 <code>handle()</code> 方法</p>
<p>路由的 <code>handle()</code> 方法也是好脾气，负责把将请求中的原始 <code>uri</code> 检查(路由是否命中)解析后，转换为对应的 <code>Module</code>，<code>Controller</code>，<code>Action</code> 等，并通过 <code>$router-&gt;getModuleName()</code> 获取模块名，判断模块是否存在，如果存在就加载相应的模块启动模块，否则，就直接进入到路由的分发阶段</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>之前绑定到事件管理器上事件就会因为指定的路由而触发，事件触发后检查模块的正确性，根据模块文件中定义的 <code>className</code>，<code>path</code> 等，将模块引导文件加载进来，并调用模块引导文件中必须存在的方法. 也就是说，自定义的模块必须实现 <code>ModuleDefinitionInterface</code> 定义的 <code>registerAutoloaders(\Phalcon\DiInterface $dependencyInjector = null)</code> 和 <code>registerServices(\Phalcon\DiInterface $dependencyInjector)</code> 方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Phalcon</span>\<span class="title">Mvc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Phalcon\Mvc\ModuleDefinitionInterface</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This interface must be implemented by class module definitions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ModuleDefinitionInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers an autoloader related to the module</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Phalcon\DiInterface $dependencyInjector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerAutoloaders</span>(<span class="params">\Phalcon\DiInterface <span class="variable">$dependencyInjector</span> = <span class="literal">null</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers services related to the module</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Phalcon\DiInterface $dependencyInjector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerServices</span>(<span class="params">\Phalcon\DiInterface <span class="variable">$dependencyInjector</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模块启动完成后触发 <code>afterStartModule</code> 事件，标志着正式进入路由的调度分发阶段</p>
<h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p><code>Phalcon</code> 的路由调度分发是由 <code>Phalcon\Mvc\Dispatcher</code> 来完成. 所谓分发，就是 <code>Phalcon</code> 根据请求的原始 <code>uri</code>，将其匹配到的地址解析到对应的 <code>Controller</code> 及 <code>Action</code>，并返回 <code>Action</code> 结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Phalcon</span>\<span class="title">Mvc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Phalcon\Mvc\Dispatcher</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Dispatching is the process of taking the request object, extracting the module name,</span></span><br><span class="line"><span class="comment"> * controller name, action name, and optional parameters contained in it, and then</span></span><br><span class="line"><span class="comment"> * instantiating a controller and calling an action of that controller.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;</span></span><br><span class="line"><span class="comment"> * $di = new \Phalcon\Di();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $dispatcher = new \Phalcon\Mvc\Dispatcher();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $dispatcher-&gt;setDI($di);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $dispatcher-&gt;setControllerName(&quot;posts&quot;);</span></span><br><span class="line"><span class="comment"> * $dispatcher-&gt;setActionName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment"> * $dispatcher-&gt;setParams([]);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $controller = $dispatcher-&gt;dispatch();</span></span><br><span class="line"><span class="comment"> * &lt;/code&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> <span class="keyword">extends</span> \<span class="title">Phalcon</span>\<span class="title">Dispatcher</span> <span class="keyword">implements</span> \<span class="title">Phalcon</span>\<span class="title">Mvc</span>\<span class="title">DispatcherInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_handlerSuffix</span> = <span class="string">&quot;Controller&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_defaultHandler</span> = <span class="string">&quot;index&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_defaultAction</span> = <span class="string">&quot;index&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the default controller suffix</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $controllerSuffix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setControllerSuffix</span>(<span class="params"><span class="variable">$controllerSuffix</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the default controller name</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $controllerName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setDefaultController</span>(<span class="params"><span class="variable">$controllerName</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the controller name to be dispatched</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $controllerName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setControllerName</span>(<span class="params"><span class="variable">$controllerName</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets last dispatched controller name</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getControllerName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets previous dispatched namespace name</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPreviousNamespaceName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets previous dispatched controller name</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPreviousControllerName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets previous dispatched action name</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPreviousActionName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Throws an internal exception</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $exceptionCode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_throwDispatchException</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$exceptionCode</span> = <span class="number">0</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handles a user exception</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Exception $exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_handleException</span>(<span class="params">\<span class="built_in">Exception</span> <span class="variable">$exception</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Possible controller class name that will be located to dispatch the request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getControllerClass</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the latest dispatched controller</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Phalcon\Mvc\ControllerInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLastController</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the active controller in the dispatcher</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Phalcon\Mvc\ControllerInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getActiveController</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于这里我创建的是 <code>Phalcon Micro Project</code>，主要用来写接口 <code>API</code> 用的，所以这个过程中就没有提及 <code>View</code>。当然 <code>View</code> 模块并不是在这个阶段启动的，它也是先于调度分发前启动的。如果调度分发阶段出现任何错误，都需要 <code>View</code> 将问题显示出来的</p>
<p>调度器也是从 <code>DI</code> 容器中通过键名 <code>dispatcher</code> 获取的，路由的分发需要调度器分派，因此调度器需要取得路由的详情信息，如：命名空间\模块名\类名\动作名\参数</p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>走到这里，需要汇总一个唯一的响应一致对外。此时会触发 <code>beforeSendResponse</code>，并调用 <code>Phalcon\Http\Response-&gt;sendHeaders()</code> 和 <code>Phalcon\Http\Response-&gt;sendCookies()</code>，当然也可以去设置，然后对外返回一个 <code>Phalcon\Http\Response</code> 响应</p>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Phalcon 框架之命令行</title>
    <url>/2018/03/07/php-phalcon-command/</url>
    <content><![CDATA[<p>这年头哪个框架要是不提供命令行交互接口和脚手架，就不好意思自称是框架。事实上，一个优秀的框架总会面面俱到的，框架本来就是让开发者减轻负担，避免重复造轮子的，让开发者专注业务本身，而不是把时间精力消耗在磨刀上面。当然这是柄双刃剑，理想的状态理应是业务技术并驾齐驱。无论是建造钢铁大厦的 <code>Symfony</code>，还是创造艺术家园 <code>Laravel</code>，其命令行强大的令人望而却步。回过头来看一看速度与激情的 <code>Phalcon</code> 吧</p>
<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><blockquote>
<ul>
<li><a href="https://docs.phalconphp.com/en/latest/reference/tools.html">Phalcon Developer Tools for Offical Website</a></li>
<li><a href="https://github.com/phalcon/phalcon-devtools">Phalcon Developer Tools for Official GitHub</a></li>
</ul>
</blockquote>
<h3 id="指定的目录"><a href="#指定的目录" class="headerlink" title="指定的目录"></a>指定的目录</h3><blockquote>
<p>将 <code>phalcon</code> 命令加入到系统 <code>PATH</code> 变量中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/phalcon/phalcon-devtools.git .phalcon-devtools</span><br><span class="line">$ <span class="built_in">cd</span> .phalcon-devtools</span><br><span class="line">$ ln -s ~/phalcon-devtools/phalcon.php /usr/<span class="built_in">local</span>/bin/phalcon</span><br><span class="line">$ chmod a+x /usr/<span class="built_in">local</span>/bin/phalcon</span><br><span class="line">或者</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ composer global require phalcon/devtools</span><br><span class="line">$ vim ~/.zshrc <span class="comment"># vim ~/.bashrc</span></span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.composer/vendor/bin/phalcon&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><blockquote>
<p>支持的项目类型：<code>cli</code>，<code>micro</code>，<code>simple</code> - 默认，<code>modules</code>，共 <code>4</code> 种类型的项目</p>
</blockquote>
<h3 id="可用命令一览"><a href="#可用命令一览" class="headerlink" title="可用命令一览"></a>可用命令一览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon</span><br><span class="line"></span><br><span class="line">Phalcon DevTools (3.2.12)</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  info             (<span class="built_in">alias</span> of: i)</span><br><span class="line">  commands         (<span class="built_in">alias</span> of: list, enumerate)</span><br><span class="line">  controller       (<span class="built_in">alias</span> of: create-controller)</span><br><span class="line">  module           (<span class="built_in">alias</span> of: create-module)</span><br><span class="line">  model            (<span class="built_in">alias</span> of: create-model)</span><br><span class="line">  all-models       (<span class="built_in">alias</span> of: create-all-models)</span><br><span class="line">  project          (<span class="built_in">alias</span> of: create-project)</span><br><span class="line">  scaffold         (<span class="built_in">alias</span> of: create-scaffold)</span><br><span class="line">  migration        (<span class="built_in">alias</span> of: create-migration)</span><br><span class="line">  webtools         (<span class="built_in">alias</span> of: create-webtools)</span><br><span class="line">  serve            (<span class="built_in">alias</span> of: server)</span><br><span class="line">  console          (<span class="built_in">alias</span> of: shell, psysh)</span><br></pre></td></tr></table></figure>
<h3 id="创建默认项目"><a href="#创建默认项目" class="headerlink" title="创建默认项目"></a>创建默认项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建一个 `cli` 类型的项目</span><br><span class="line">$ phalcon project cli</span><br><span class="line"></span><br><span class="line">// 创建一个 `micro` 类型的项目</span><br><span class="line">$ phalcon project micro</span><br><span class="line"></span><br><span class="line">// 创建一个 `simple` 类型的项目</span><br><span class="line">$ phalcon project simple</span><br><span class="line"></span><br><span class="line">// 创建一个 `modules` 类型的项目</span><br><span class="line">$ phalcon project modules</span><br></pre></td></tr></table></figure>
<h3 id="创建定制项目"><a href="#创建定制项目" class="headerlink" title="创建定制项目"></a>创建定制项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon project --name example --enable-webtools --directory ./ --<span class="built_in">type</span> simple --use-config-ini --trace</span><br></pre></td></tr></table></figure>
<h2 id="创建控制器和模型"><a href="#创建控制器和模型" class="headerlink" title="创建控制器和模型"></a>创建控制器和模型</h2><h3 id="在创建控制器和模型时，先注册命名空间"><a href="#在创建控制器和模型时，先注册命名空间" class="headerlink" title="在创建控制器和模型时，先注册命名空间"></a>在创建控制器和模型时，先注册命名空间</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loader.php</span></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> \Phalcon\Loader();</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span>-&gt;registerNamespaces([</span><br><span class="line">    <span class="string">&#x27;App\\Controller&#x27;</span> =&gt; <span class="string">&#x27;../app/controllers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;App\\Model&#x27;</span>      =&gt; <span class="string">&#x27;../app/models&#x27;</span>,</span><br><span class="line">])-&gt;register();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * We&#x27;re a registering a set of directories taken from the configuration file.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$loader</span>-&gt;registerDirs([</span><br><span class="line">    <span class="variable">$config</span>-&gt;application-&gt;controllersDir,</span><br><span class="line">    <span class="variable">$config</span>-&gt;application-&gt;modelsDir,</span><br><span class="line">])-&gt;register();</span><br></pre></td></tr></table></figure>
<h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon controller --name article --base-class ControllerBase --force</span><br><span class="line">或者</span><br><span class="line">$ phalcon controller --name article --namespace App\\Controller --base-class ControllerBase --force</span><br></pre></td></tr></table></figure>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon model --name user</span><br><span class="line">或者</span><br><span class="line">$ phalcon model --name users --namespace App\\Model --get-set --doc --force --camelize --trace --mapcolumn --annotate</span><br></pre></td></tr></table></figure>
<h3 id="创建迁移"><a href="#创建迁移" class="headerlink" title="创建迁移"></a>创建迁移</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon migration --action=generate --config=./app/config/config.php --version=1.0.0 --descr=init --force</span><br></pre></td></tr></table></figure>
<h3 id="创建脚手架"><a href="#创建脚手架" class="headerlink" title="创建脚手架"></a>创建脚手架</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon scaffold --table-name=user --get-set --force --trace</span><br></pre></td></tr></table></figure>
<h3 id="运行内置服务器"><a href="#运行内置服务器" class="headerlink" title="运行内置服务器"></a>运行内置服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phalcon serve --hostname=127.0.0.1 --port=8080 --basepath=.htrouter.php --rootpath=public</span><br></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><a href="https://forum.phalconphp.com/discussion/4448/error-sqlstatehy000-2002-no-such-file-or-directory">Error: SQLSTATE[HY000] [2002] No such file or directory</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 编辑 php.ini 文件中的 PDO 默认 socket</span><br><span class="line">$ pdo_mysql.default_socket=/usr/<span class="built_in">local</span>/var/run/mysql/mysql.sock</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询 socket 变量</span><br><span class="line">$ <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%socket%&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phalcon</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 中的输出缓冲区</title>
    <url>/2018/03/05/php-output-buffer/</url>
    <content><![CDATA[<p>以前总以为 <code>echo</code>，<code>print</code> 之类的输出工具背后没什么了不起的逻辑，不就是给个字符串让终端显示一下吗？其实不然，每一个精心设计的语言特性，函数，方法……背后都可谓独具匠心，你看，PHP 语言从来都不会设计一个一无是处的工具出来，那些雕琢出来的特性都是那么的恰到好处。</p>
<h1 id="缓冲区的一些说明"><a href="#缓冲区的一些说明" class="headerlink" title="缓冲区的一些说明"></a>缓冲区的一些说明</h1><ul>
<li>正常情况下，任何会输出内容的函数都会用到输出缓冲区</li>
<li>输出缓冲区不是唯一用于缓冲输出的层，它实际上是很多层中的一个</li>
<li><code>SAPI</code> 中的输出缓冲区</li>
</ul>
<p>数据写入顺序：<code>echo/print</code> =&gt; PHP 输出缓冲区 =&gt; <code>SAPI</code> 缓冲区 =&gt; <code>TCP</code> 缓冲区 =&gt; 浏览器</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-ob-main.png" alt="php-ob-main.png"></p>
<h1 id="默认的输出缓冲区"><a href="#默认的输出缓冲区" class="headerlink" title="默认的输出缓冲区"></a>默认的输出缓冲区</h1><p>在 <code>PHP-FPM</code> 中，与缓冲区相关的配置。</p>
<blockquote>
<p>这些值通过 <code>ini_set()</code> 设置后也不起作用，换句话说就是设置的太迟了，因为输出缓冲区层在 PHP 程序启动时，还没有运行任何脚本解析之前就已经启动了。这些值需要在 <code>php.ini</code> 或者在执行程序时使用 <code>-d</code> 选项才有效</p>
</blockquote>
<h2 id="output-buffering"><a href="#output-buffering" class="headerlink" title="output_buffering"></a>output_buffering</h2><p>默认值为 <code>4096</code>，设置为 <code>Off</code> 或者 <code>0</code>，表示禁用输出缓冲区；设置为 <code>On</code>，表示输出缓冲区不受限制，慎用；</p>
<h2 id="implicit-flush"><a href="#implicit-flush" class="headerlink" title="implicit_flush"></a>implicit_flush</h2><p>默认值为 <code>Off</code>，设置为 <code>On</code>，表示一旦有任何输出写到 <code>SAPI</code> 缓冲区层，它都会立即刷新，也就是把数据写到更低层，并且缓冲区会被清空</p>
<h2 id="output-handler"><a href="#output-handler" class="headerlink" title="output_handler"></a>output_handler</h2><p>回调函数，它可以在缓冲区刷新之前修改缓冲中的内容。PHP 的扩展提供了很多回调函数：</p>
<ul>
<li><code>ob_gzhandler</code>：使用 <code>ext/zlib</code> 压缩输出</li>
<li><code>mb_output_handler</code>：使用 <code>ext/mbstring</code> 转换字符编码</li>
<li><code>ob_iconv_handler</code>：使用 <code>ext/iconv</code> 转换字符编码</li>
<li><code>ob_tidyhandler</code>：使用 <code>ext/tidy</code> 整理输出的 HTML 文本</li>
<li><code>ob_[inflate/deflate]_handler</code>：使用 <code>ext/http</code> 压缩输出</li>
<li><code>ob_etaghandler</code>：使用 <code>ext/http</code> 自动生成 HTTP 的 Etag</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>设置缓冲区大小为 16 字节，使用 PHP 内置的 Web 服务器 SAPI。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php -d output_buffering=16 -d implicit_flush=1 -S 127.0.0.1:8080 -t ~/Downloads/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>浏览器访问脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序脚本运行的后向缓冲区写入 15 个字节</span></span><br><span class="line"><span class="keyword">echo</span> str_repeat(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入 2 秒休眠状态</span></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时这个字节填满了缓冲区，缓冲区会立即刷新自身，把数据传递给 SAPI 层的缓冲区</span></span><br><span class="line"><span class="comment">// 由于 implicit_flush=1，SAPI 层的缓冲区也会立即刷新到下一层</span></span><br><span class="line"><span class="comment">// 浏览器输出 HelloHelloHelloW</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入 2 秒休眠状态</span></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时将这 2 个字节写入到缓冲区，由于还不够填满缓冲区，这时还不会输出到浏览器</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;or&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入 2 秒休眠状态</span></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时脚本执行完毕，在执行完毕之前，将这 2 个字节写入到缓冲区，还是不够填满缓冲区</span></span><br><span class="line"><span class="comment">// 但这时脚本已经执行完毕，缓冲区将已有的数据全部输出浏览器</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ld&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="消息头和消息体"><a href="#消息头和消息体" class="headerlink" title="消息头和消息体"></a>消息头和消息体</h1><p>如果使用了输出缓冲区层，那么 PHP 会接管这些消息头和消息体的发送。</p>
<p>PHP 中有关与消息头的函数都使用了内部的 <code>sapi_header_op()</code> 函数，这个函数负责把内容写入到消息头缓冲区中，所以我们才能优雅的使用 <code>header()</code>，<code>setcookie()</code> 诸如此类的方法。</p>
<p>在输出内容时，内容会先被写入到输出缓冲区（可能是多个），当缓冲区中的内容需要被发送时，PHP 会先发送消息头，再发送消息体，你看，所有的这些都不费吹灰之力，PHP 为我们搞定了所有的事情。</p>
<h1 id="用户的输出缓冲区"><a href="#用户的输出缓冲区" class="headerlink" title="用户的输出缓冲区"></a>用户的输出缓冲区</h1><p>多个缓冲区会组成一个堆栈结构，每个新建的缓冲区都会堆叠到之前的缓冲区上，每当它被填满或者溢出，都会执行刷新操作，然后把其中的数据传递给下一个缓冲区。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ob_start(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$parameter</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$index</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$index</span>++ . <span class="string">&#x27;: &#x27;</span> . <span class="variable">$parameter</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ob_start(<span class="string">&#x27;handle&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$parameter</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ucfirst(<span class="variable">$parameter</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时字符串被写入到第二个缓冲区，缓冲区的长度不够设定值，不会刷新这个缓冲区</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;fo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠 2 秒</span></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 此时字符串写入到第二个缓冲区后，由于 chunk_size 为 3，所以第二个缓冲区会刷新</span></span><br><span class="line"><span class="comment">// 2. 并且将返回的字符串 Foo 写入到第一个缓冲区</span></span><br><span class="line"><span class="comment">// 3. 此刻第一个缓冲区未被填满</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠 2 秒</span></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 此时字符串写入到第二个缓冲区后，立即刷新缓冲区</span></span><br><span class="line"><span class="comment">// 2. 并且将返回的字符串 HelloWorld 写入到第一个缓冲区</span></span><br><span class="line"><span class="comment">// 3. 上一次缓冲区的 Foo 与 本次的 HelloWorld 合并</span></span><br><span class="line"><span class="comment">// 4. 由于第一个缓冲区 chunk_size 为 10，这时缓冲已经被填满，所以第一个缓冲区会刷新输出到浏览器</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;helloWorld&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠 2 秒</span></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 此时字符串写入到第二个缓冲区后，立即刷新缓冲区</span></span><br><span class="line"><span class="comment">// 2. 并且将返回的字符串 Enough 写入到第一个缓冲区</span></span><br><span class="line"><span class="comment">// 3. 由于上一次的缓冲被填满刷新输出了，正好本次的缓冲区也刚好被填满，所有第一个缓冲区会刷新输出到浏览器</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;enough&#x27;</span>;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重复此前的步骤，由于脚本已经执行结果，被迫刷新输出到浏览器</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;exit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">0</span>: FooHelloWorld <span class="number">1</span>: Enough <span class="number">2</span>: <span class="keyword">Exit</span></span><br></pre></td></tr></table></figure>
<h1 id="输出缓冲区实例"><a href="#输出缓冲区实例" class="headerlink" title="输出缓冲区实例"></a>输出缓冲区实例</h1><h2 id="默认的缓冲区输出"><a href="#默认的缓冲区输出" class="headerlink" title="默认的缓冲区输出"></a>默认的缓冲区输出</h2><p>在脚本处理结束之前，浏览器端不会输出，由于数据量太小，输出缓冲区没有写满。写入数据的顺序：PHP 缓冲区、TCP 缓冲区、浏览器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">    sleep(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关闭后的缓冲区输出"><a href="#关闭后的缓冲区输出" class="headerlink" title="关闭后的缓冲区输出"></a>关闭后的缓冲区输出</h2><p>将 <code>output_buffering</code> 的值改为 <code>0</code>，执行脚本后，因应缓冲区的容量设置为 <code>0</code>，即禁用了 PHP 缓冲区机制。这时浏览器端会按程序定义的时间间隔不断输出，不会出现浏览器界面空白等待的情况。写入数据的顺序：TCP 缓冲区、浏览器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    flush();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义的缓冲区输出"><a href="#自定义的缓冲区输出" class="headerlink" title="自定义的缓冲区输出"></a>自定义的缓冲区输出</h2><p>将 <code>output_buffing</code> 值改为默认的 <code>4096</code></p>
<p>使用 <code>dd</code> 命令准备一个大小为 <code>4096</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=file4096 bs=4096 count=1</span><br><span class="line">$ ll file4096</span><br><span class="line">-rw-r--r--  1 majinyun  staff   4.0K Mar 16 11:16 file4096</span><br></pre></td></tr></table></figure>
<p>脚本在每次执行时，由于读取的文件内容大小正好等于缓冲区的大小，所以会立即刷新缓冲区，输出到客户端浏览器，在此过程中浏览器不会出现空白等待期，而会持续输出程序中指定的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = dirname(dirname(<span class="keyword">__DIR__</span>)) . <span class="string">&#x27;/../Downloads/test/file4096&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>) . <span class="variable">$i</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-ob-start-后的缓冲区输出"><a href="#使用-ob-start-后的缓冲区输出" class="headerlink" title="使用 ob_start 后的缓冲区输出"></a>使用 ob_start 后的缓冲区输出</h2><p>使用 <code>ob_start()</code> 后，PHP 的缓冲区会被扩展到足够大，直到 <code>ob_end_flush()</code> 函数调用或者脚本运行结束后，才发送缓冲区中的数据到客户端浏览器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ob_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = dirname(<span class="keyword">__DIR__</span>, <span class="number">3</span>) . <span class="string">&#x27;/Downloads/test/f4096&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>) . <span class="variable">$i</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ob_end_flush();</span><br></pre></td></tr></table></figure>
<p>执行脚本后，<code>ob_get_contents()</code> 会获取一分缓冲区中的副本，结果中有两次输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ob_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$contents</span> = ob_get_contents();</span><br><span class="line"></span><br><span class="line">ob_end_flush();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$contents</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<p>执行脚本结束后，由于使用了 <code>ob_end_clean()</code> 函数，将 PHP 缓冲区中的内容给删除了，所以结果中仅有一次输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ob_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$contents</span> = ob_get_contents();</span><br><span class="line"></span><br><span class="line">ob_end_clean();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$contents</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP74 新特性</title>
    <url>/2019/11/29/php-php74-new-features/</url>
    <content><![CDATA[<p><img src="/images/2019/201911291254.png" alt="201911291254.png"></p>
<p>PHP 7.4.0 提供了许多改进和新特性，比如：</p>
<ul>
<li><a href="https://www.php.net/manual/zh/migration74.new-features.php#migration74.new-features.core.typed-properties">Typed Properties</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.new-features.php#migration74.new-features.core.arrow-functions">Array Functions</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.new-features.php#migration74.new-features.core.type-variance">Limited Return Type Convariance and Argument Type Contravariance</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.new-features.php#migration74.new-features.core.unpack-inside-array">Unpacking Inside Arrays</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.new-features.php#migration74.new-features.core.numeric-literal-separator">Numeric Literal Separator</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.new-features.php#migration74.new-features.core.weakreference">Weak References</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.new-features.php#migration74.new-features.core.tostring-exceptions">Allow Exception from __toString()</a></li>
<li><a href="https://www.php.net/manual/zh/opcache.configuration.php#ini.opcache.preload">Opcache Preloading</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.deprecated.php">Several Deprecations</a></li>
<li><a href="https://www.php.net/manual/zh/migration74.deprecated.php">Extensions Removed from the Core</a></li>
</ul>
<span id="more"></span>
<h1 id="有类型的类属性"><a href="#有类型的类属性" class="headerlink" title="有类型的类属性"></a>有类型的类属性</h1><p>类属性现在支持类型声明。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User();</span><br><span class="line"><span class="variable">$user</span>-&gt;id = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;name = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$user</span>-&gt;id, <span class="variable">$user</span>-&gt;name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数为使用隐式按值范围绑定定义函数提供了一种简写语法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$factor</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$nums</span> = array_map(<span class="function"><span class="keyword">fn</span>(<span class="params"><span class="variable">$n</span></span>) =&gt;</span> <span class="variable">$n</span> * <span class="variable">$factor</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$nums</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">10</span>)</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">20</span>)</span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">30</span>)</span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">40</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="有限返回类型协变和参数类型逆变"><a href="#有限返回类型协变和参数类型逆变" class="headerlink" title="有限返回类型协变和参数类型逆变"></a>有限返回类型协变和参数类型逆变</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>): <span class="title">A</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>, PHP_EOL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildProducer</span> <span class="keyword">extends</span> <span class="title">Producer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>): <span class="title">B</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>, PHP_EOL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$producer</span> = <span class="keyword">new</span> Producer();</span><br><span class="line"><span class="variable">$childProducer</span> = <span class="keyword">new</span> ChildProducer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$producer</span>-&gt;method() <span class="keyword">instanceof</span> A) &#123;</span><br><span class="line">    var_dump(<span class="string">&#x27;我特么就返回 A 的实例&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$childProducer</span>-&gt;method() <span class="keyword">instanceof</span> B) &#123;</span><br><span class="line">    var_dump(<span class="string">&#x27;我特么就返回 B 的实例&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Producer::method</span><br><span class="line"><span class="keyword">string</span>(<span class="number">30</span>) <span class="string">&quot;我特么就返回 A 的实例&quot;</span></span><br><span class="line">ChildProducer::method</span><br><span class="line"><span class="keyword">string</span>(<span class="number">30</span>) <span class="string">&quot;我特么就返回 B 的实例&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="Null-合并运算符"><a href="#Null-合并运算符" class="headerlink" title="Null 合并运算符"></a>Null 合并运算符</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultValue</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = <span class="variable">$_REQUEST</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP74 之前</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>] = defaultValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP74 开始</span></span><br><span class="line"><span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>] ??= defaultValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然以下代码也可以，但是本人强烈反对这样写，不要问我为什么。代码块我总是用 &#123;&#125; 包起来</span></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>])) <span class="variable">$array</span>[<span class="string">&#x27;key&#x27;</span>] = defaultValue();</span><br></pre></td></tr></table></figure>
<h1 id="在数组内部展开元素"><a href="#在数组内部展开元素" class="headerlink" title="在数组内部展开元素"></a>在数组内部展开元素</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$parts</span> = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>];</span><br><span class="line"><span class="variable">$fruits</span> = [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, ...<span class="variable">$parts</span>, <span class="string">&#x27;watermelon&#x27;</span>];</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$fruits</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;orange&quot;</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;pear&quot;</span></span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">10</span>) <span class="string">&quot;watermelon&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数字字面量分隔符"><a href="#数字字面量分隔符" class="headerlink" title="数字字面量分隔符"></a>数字字面量分隔符</h1><blockquote>
<p>人眼并未针对快速解析长数字序列进行优化。 因此，缺少视觉分隔符会使读取和调试代码花费更长的时间，并可能导致意外错误。</p>
</blockquote>
<p>所以 <strong>数字字面量分隔符</strong> 就是解决人眼快速识别而做出的优化，你看，代码的的确确是机器去执行的，但更重要的是 <strong>可读</strong>、<strong>可写</strong>、<em>可赏</em>、<em>可赞</em> 😂。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6.674_083e-11; // <span class="built_in">float</span></span><br><span class="line">299_792_458;   // decimal</span><br><span class="line">0xCAFE_F00D;   // hexadecimal</span><br><span class="line">0b0101_1111;   // binary</span><br><span class="line">0137_041;      // octal</span><br><span class="line"></span><br><span class="line">1_000_000; // versus 1000000</span><br><span class="line">3.141_592; // versus 3.141592</span><br><span class="line">0x02_56_12; // versus 0x025612</span><br><span class="line">0b0010_1101; // versus 0b00101101</span><br><span class="line">0267_3432; // versus 02673432</span><br><span class="line">1_123.456_7e2 // versus 1123.4567e2</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">usleep(<span class="number">345126</span>); <span class="comment">// without separator</span></span><br><span class="line"></span><br><span class="line">usleep(<span class="number">345_126</span>); <span class="comment">// with separator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">12345678989876</span> === <span class="number">12345678998876</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Equal&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Unequal&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">12_345_678_989_876</span> === <span class="number">12_345_678_998_876</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Equal&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Unequal&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h1><h1 id="允许来自-toString-的异常"><a href="#允许来自-toString-的异常" class="headerlink" title="允许来自 toString() 的异常"></a>允许来自 toString() 的异常</h1><ul>
<li><a href="https://bugs.php.net/bug.php?id=53648">Request #53648 Allow __toString() to throw exceptions</a></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> \<span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">&#x27;Oops!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    var_dump((<span class="keyword">string</span>) <span class="variable">$foo</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CustomException <span class="variable">$e</span>) &#123;</span><br><span class="line">    var_dump(<span class="variable">$e</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP56</span></span><br><span class="line">PHP Fatal <span class="built_in">error</span>:  Method Foo::__toString() must not <span class="keyword">throw</span> an <span class="built_in">exception</span> in /path/to/User.php on line <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line">PHP Fatal <span class="built_in">error</span>:  Method Foo::__toString() must not <span class="keyword">throw</span> an <span class="built_in">exception</span>, caught CustomException: Oops! in /path/to/a.php on line <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP74</span></span><br><span class="line"><span class="keyword">object</span>(CustomException)<span class="comment">#2 (7) &#123;</span></span><br><span class="line">  [<span class="string">&quot;message&quot;</span>:<span class="keyword">protected</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Oops!&quot;</span></span><br><span class="line">  [<span class="string">&quot;string&quot;</span>:<span class="string">&quot;Exception&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">0</span>) <span class="string">&quot;&quot;</span></span><br><span class="line">  [<span class="string">&quot;code&quot;</span>:<span class="keyword">protected</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">0</span>)</span><br><span class="line">  [<span class="string">&quot;file&quot;</span>:<span class="keyword">protected</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">47</span>) <span class="string">&quot;/Users/xxx/Codes/example/untitled/User.php&quot;</span></span><br><span class="line">  [<span class="string">&quot;line&quot;</span>:<span class="keyword">protected</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">11</span>)</span><br><span class="line">  [<span class="string">&quot;trace&quot;</span>:<span class="string">&quot;Exception&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">  <span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    [<span class="number">0</span>]=&gt;</span><br><span class="line">    <span class="keyword">array</span>(<span class="number">6</span>) &#123;</span><br><span class="line">      [<span class="string">&quot;file&quot;</span>]=&gt;</span><br><span class="line">      <span class="keyword">string</span>(<span class="number">47</span>) <span class="string">&quot;/Users/xxx/Codes/example/untitled/User.php&quot;</span></span><br><span class="line">      [<span class="string">&quot;line&quot;</span>]=&gt;</span><br><span class="line">      <span class="keyword">int</span>(<span class="number">18</span>)</span><br><span class="line">      [<span class="string">&quot;function&quot;</span>]=&gt;</span><br><span class="line">      <span class="keyword">string</span>(<span class="number">10</span>) <span class="string">&quot;__toString&quot;</span></span><br><span class="line">      [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">      <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;Foo&quot;</span></span><br><span class="line">      [<span class="string">&quot;type&quot;</span>]=&gt;</span><br><span class="line">      <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">      [<span class="string">&quot;args&quot;</span>]=&gt;</span><br><span class="line">      <span class="keyword">array</span>(<span class="number">0</span>) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="string">&quot;previous&quot;</span>:<span class="string">&quot;Exception&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Opcache-预加载"><a href="#Opcache-预加载" class="headerlink" title="Opcache 预加载"></a>Opcache 预加载</h1><p><strong><code>opcache.preload</code> <a href="https://www.php.net/manual/zh/language.types.string.php"><code>string</code></a></strong>：指定要在服务器启动时期进行编译和缓存的 PHP 脚本文件，这些文件也可能通过 include 或者 opcache_compile_file() 函数来预加载其他文件。所有这些文件中包含的实体，包括函数、类等，在服务器启动的时候就被加载和缓存，对于用户代码来讲是『开箱可用』的。</p>
<h1 id="一些不推荐"><a href="#一些不推荐" class="headerlink" title="一些不推荐"></a>一些不推荐</h1><p><a href="https://www.php.net/manual/zh/migration74.deprecated.php">Deprecated Features</a></p>
<h1 id="从核心中移除的扩展"><a href="#从核心中移除的扩展" class="headerlink" title="从核心中移除的扩展"></a>从核心中移除的扩展</h1><p><a href="https://www.php.net/manual/zh/migration74.removed-extensions.php">Removed Extensions</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP7 新特性</title>
    <url>/2018/01/19/php-php7-new-features/</url>
    <content><![CDATA[<p>收集整理了一些 <code>PHP7</code> 的新特性。</p>
<span id="more"></span>
<h1 id="标量类型声明"><a href="#标量类型声明" class="headerlink" title="标量类型声明"></a>标量类型声明</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramInt</span>(<span class="params"><span class="keyword">int</span> ...<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_sum(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramFloat</span>(<span class="params"><span class="keyword">float</span> ...<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_values(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramString</span>(<span class="params"><span class="keyword">string</span> ...<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> implode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramBool</span>(<span class="params"><span class="keyword">bool</span> ...<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(paramInt(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">var_dump(paramFloat(<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>));</span><br><span class="line">var_dump(paramString(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>));</span><br><span class="line">var_dump(paramBool(<span class="literal">true</span>, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">double</span>(<span class="number">1.1</span>)</span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">double</span>(<span class="number">2.2</span>)</span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">double</span>(<span class="number">3.3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;a,b,c&quot;</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="返回值类型声明"><a href="#返回值类型声明" class="headerlink" title="返回值类型声明"></a>返回值类型声明</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnInt</span>(<span class="params"><span class="keyword">int</span> ...<span class="variable">$value</span></span>) : <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_sum(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnFloat</span>(<span class="params"><span class="keyword">float</span> ...<span class="variable">$value</span></span>) : <span class="title">float</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_sum(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnString</span>(<span class="params"><span class="keyword">string</span> ...<span class="variable">$value</span></span>) : <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> implode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnBool</span>(<span class="params"><span class="keyword">bool</span> <span class="variable">$value</span></span>) : <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnArray</span>(<span class="params"><span class="keyword">array</span> ...<span class="variable">$value</span></span>) : <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(returnInt(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">var_dump(returnFloat(<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>));</span><br><span class="line">var_dump(returnString(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>));</span><br><span class="line">var_dump(returnBool(<span class="literal">true</span>));</span><br><span class="line">var_dump(returnArray([<span class="string">&#x27;hello&#x27;</span>], [<span class="string">&#x27;world&#x27;</span>], [<span class="string">&#x27;!&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">double</span>(<span class="number">6.6</span>)</span><br><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;a,b,c&quot;</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    [<span class="number">0</span>] =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    [<span class="number">0</span>] =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;world&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    [<span class="number">0</span>] =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="NULL-合并运算符"><a href="#NULL-合并运算符" class="headerlink" title="NULL 合并运算符"></a>NULL 合并运算符</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断 UID 是否存在</span></span><br><span class="line"><span class="variable">$uid</span> = <span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;uid&#x27;</span>]) ? <span class="variable">$_REQUEST</span>[<span class="string">&#x27;uid&#x27;</span>] : <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码可以替换为如下代码</span></span><br><span class="line"><span class="variable">$uid</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;uid&#x27;</span>] ?? <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 SESSION 中不存在 UID，就取 REQUEST 中的 UID</span></span><br><span class="line"><span class="variable">$uid</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;uid&#x27;</span>] ?? <span class="variable">$_REQUEST</span>[<span class="string">&#x27;uid&#x27;</span>] ?? <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$uid</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;unknown&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="太空飞船操作符"><a href="#太空飞船操作符" class="headerlink" title="太空飞船操作符"></a>太空飞船操作符</h1><blockquote>
<p>还有这种操作？当然有，且看如下实例</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP7 之前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="variable">$b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$a</span> &gt; <span class="variable">$b</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$b</span> = [</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span> =&gt; <span class="number">70</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span> =&gt; <span class="number">10</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">80</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">90</span>,</span><br><span class="line">];</span><br><span class="line">uasort(<span class="variable">$a</span>, <span class="string">&#x27;compare&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [d] =&gt; <span class="number">10</span></span><br><span class="line">    [a] =&gt; <span class="number">20</span></span><br><span class="line">    [e] =&gt; <span class="number">70</span></span><br><span class="line">    [b] =&gt; <span class="number">80</span></span><br><span class="line">    [c] =&gt; <span class="number">90</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP7</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after_compare</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> &lt;=&gt; <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line">uksort(<span class="variable">$b</span>, <span class="string">&#x27;after_compare&#x27;</span>);</span><br><span class="line">print_r(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [a] =&gt; <span class="number">20</span></span><br><span class="line">    [b] =&gt; <span class="number">80</span></span><br><span class="line">    [c] =&gt; <span class="number">90</span></span><br><span class="line">    [d] =&gt; <span class="number">10</span></span><br><span class="line">    [e] =&gt; <span class="number">70</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="通过-define-定义常量数组"><a href="#通过-define-定义常量数组" class="headerlink" title="通过 define() 定义常量数组"></a>通过 define() 定义常量数组</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;ROLES&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;ADMIN&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;MANAGER&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">var_dump(ROLES[<span class="number">0</span>], ROLES[<span class="number">1</span>], ROLES[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;ADMIN&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;MANAGER&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;USER&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Logger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$msg</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLogger</span>(<span class="params">Logger <span class="variable">$logger</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogger</span>(<span class="params"></span>) : <span class="title">Logger</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span> = <span class="keyword">new</span> App();</span><br><span class="line"><span class="variable">$app</span>-&gt;setLogger(<span class="keyword">new</span> <span class="class"><span class="keyword">class</span> <span class="keyword">implements</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$msg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$msg</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$app</span>-&gt;getLogger()-&gt;log(<span class="string">&#x27;Hello World!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="Unicode-codepoint-转译语法"><a href="#Unicode-codepoint-转译语法" class="headerlink" title="Unicode codepoint 转译语法"></a>Unicode codepoint 转译语法</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$😄 = <span class="string">&#x27;愉快高兴&#x27;</span>;</span><br><span class="line">$🇨🇳 = <span class="string">&#x27;我的祖国&#x27;</span>;</span><br><span class="line">$🌈 = <span class="string">&#x27;雨后彩虹&#x27;</span>;</span><br><span class="line"><span class="variable">$try</span> = <span class="string">&quot;^_^ \u&#123;0050&#125;\u&#123;0048&#125;\u&#123;0050&#125;\u&#123;0037&#125; - \u&#123;1F64F&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [$😄, $🇨🇳, $🌈, <span class="variable">$try</span>];</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; 愉快高兴</span><br><span class="line">    [<span class="number">1</span>] =&gt; 我的祖国</span><br><span class="line">    [<span class="number">2</span>] =&gt; 雨后彩虹</span><br><span class="line">    [<span class="number">3</span>] =&gt; ^_^ PHP7 - 🙏</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="Closure-call"><a href="#Closure-call" class="headerlink" title="Closure::call()"></a>Closure::call()</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;Object Name&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP7 之前</span></span><br><span class="line"><span class="variable">$beforeName</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">&#125;;</span><br><span class="line">var_dump(<span class="variable">$beforeName</span>-&gt;bindTo(<span class="keyword">new</span> <span class="keyword">Object</span>(), <span class="string">&#x27;Object&#x27;</span>)());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;Object Name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP7</span></span><br><span class="line"><span class="variable">$afterName</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">&#125;;</span><br><span class="line">var_dump(<span class="variable">$afterName</span>-&gt;call(<span class="keyword">new</span> <span class="keyword">Object</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;Object Name&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="为-unserialize-提供过滤"><a href="#为-unserialize-提供过滤" class="headerlink" title="为 unserialize() 提供过滤"></a>为 unserialize() 提供过滤</h1><blockquote>
<p>特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$weight</span> = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = serialize(<span class="keyword">new</span> Test());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许解析 class</span></span><br><span class="line"><span class="variable">$a</span> = unserialize(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有的对象都转换为 __PHP_Incomplete_Class 对象，不允许解析 class</span></span><br><span class="line"><span class="variable">$b</span> = unserialize(<span class="variable">$test</span>, [<span class="string">&#x27;allowed_classes&#x27;</span> =&gt; <span class="literal">false</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将除 Test 之外的所有对象都转换为 __PHP_Incomplete_Class 对象，允许解析 class</span></span><br><span class="line"><span class="variable">$c</span> = unserialize(<span class="variable">$test</span>, [<span class="string">&#x27;allowed_classes&#x27;</span> =&gt; [<span class="string">&#x27;Test&#x27;</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下所有的类都是可接受的，等同于省略第二个参数，允许解析 class</span></span><br><span class="line"><span class="variable">$d</span> = unserialize(<span class="variable">$test</span>, [<span class="string">&#x27;allowed_classes&#x27;</span> =&gt; <span class="literal">true</span>]);</span><br><span class="line">print_r([</span><br><span class="line">    <span class="variable">$a</span>-&gt;getAge(),</span><br><span class="line">    <span class="comment">// $b-&gt;getAge(), // PHP Fatal error: main(): The script tried to execute a method or access a property of an incomplete object.</span></span><br><span class="line">    <span class="variable">$c</span>-&gt;getAge(),</span><br><span class="line">    <span class="variable">$d</span>-&gt;getAge(),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">18</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">18</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">18</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="IntlChar"><a href="#IntlChar" class="headerlink" title="IntlChar"></a>IntlChar</h1><blockquote>
<p>需要 <code>intl</code> 扩展。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;获取 UNICODE 版本&#x27;</span> =&gt; IntlChar::UNICODE_VERSION,</span><br><span class="line">    <span class="string">&#x27;获取字符名称&#x27;</span> =&gt; IntlChar::charName(<span class="string">&#x27;@&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;获取中括号匹配的闭合括号&#x27;</span> =&gt; IntlChar::getBidiPairedBracket(<span class="string">&#x27;[&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;获取 A 字符的镜像字符&#x27;</span> =&gt; IntlChar::charMirror(<span class="string">&#x27;&lt;&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;判断 ? 是否有镜像字符&#x27;</span> =&gt; IntlChar::isMirrored(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;OK&#x27;</span> : <span class="string">&#x27;NO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;获取 codepoint 表示的字符&#x27;</span> =&gt; IntlChar::chr(<span class="number">65</span>),</span><br><span class="line">];</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [获取 UNICODE 版本] =&gt; <span class="number">10.0</span></span><br><span class="line">    [获取字符名称] =&gt; COMMERCIAL AT</span><br><span class="line">    [获取中括号匹配的闭合括号] =&gt; ]</span><br><span class="line">    [获取 A 字符的镜像字符] =&gt; &gt;</span><br><span class="line">    [判断 ? 是否有镜像字符] =&gt; NO</span><br><span class="line">    [获取 codepoint 表示的字符] =&gt; A</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h1><table>
<thead>
<tr>
<th>指示</th>
<th>默认值</th>
<th>可能的值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>zend.assertions</code></td>
<td><code>1</code></td>
<td>1 - 生成并执行代码（开发模式）。2 - 生成代码，但在运行时跳过它。-1 - 不生成代码（生产模式）</td>
</tr>
<tr>
<td><code>assert.exception</code></td>
<td><code>0</code></td>
<td>1 - 当断言失败时，抛出提供的异常作为异常，或者在示提供异常的情况下抛出新的 <code>AssertionError</code> 对象。0 - 如上所述使用或生成 <code>Throwable</code>，但只生成基于该对象的警告，而不是抛出它（与 <code>PHP5</code> 行为兼容）</td>
</tr>
</tbody>
</table>
<h2 id="zend-assertions-为-1"><a href="#zend-assertions-为-1" class="headerlink" title="zend.assertions 为 1"></a>zend.assertions 为 1</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;zend.assertions&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">AssertionError</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(<span class="literal">true</span> == <span class="literal">false</span>, <span class="keyword">new</span> MyException(<span class="string">&#x27;Some error message&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;this is a test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">PHP Warning:  assert(): MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">Warning: assert(): MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure>
<h2 id="zend-assertions-为-0"><a href="#zend-assertions-为-0" class="headerlink" title="zend.assertions 为 0"></a>zend.assertions 为 0</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;zend.assertions&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">AssertionError</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(<span class="literal">true</span> == <span class="literal">false</span>, <span class="keyword">new</span> MyException(<span class="string">&#x27;Some error message&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;this is a test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure>
<h2 id="zend-assertions-为-1-1"><a href="#zend-assertions-为-1-1" class="headerlink" title="zend.assertions 为 -1"></a>zend.assertions 为 -1</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;zend.assertions&#x27;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">AssertionError</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(<span class="literal">true</span> == <span class="literal">false</span>, <span class="keyword">new</span> MyException(<span class="string">&#x27;Some error message&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;this is a test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">PHP Warning:  zend.assertions may be completely enabled <span class="keyword">or</span> disabled only in php.ini</span><br><span class="line">...</span><br><span class="line">PHP Warning:  assert(): MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">Warning: zend.assertions may be completely enabled <span class="keyword">or</span> disabled only in php.ini</span><br><span class="line">...</span><br><span class="line">Warning: assert(): MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure>
<h2 id="assert-exception-为-1"><a href="#assert-exception-为-1" class="headerlink" title="assert.exception 为 1"></a>assert.exception 为 1</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;assert.exception&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">AssertionError</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(<span class="literal">true</span> == <span class="literal">false</span>, <span class="keyword">new</span> MyException(<span class="string">&#x27;Some error message&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;this is a test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">PHP Fatal <span class="built_in">error</span>:  Uncaught MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">Fatal <span class="built_in">error</span>: Uncaught MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">注意： this is a test 是没有输出的</span><br></pre></td></tr></table></figure>
<h2 id="assert-exception-为-0"><a href="#assert-exception-为-0" class="headerlink" title="assert.exception 为 0"></a>assert.exception 为 0</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;assert.exception&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">AssertionError</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(<span class="literal">true</span> == <span class="literal">false</span>, <span class="keyword">new</span> MyException(<span class="string">&#x27;Some error message&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;this is a test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">PHP Warning:  assert(): MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">Warning: assert(): MyException: Some <span class="built_in">error</span> message</span><br><span class="line">...</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>版本</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>7.2.0</code></td>
<td>当 <code>assertion</code> 被废弃时使用字符串。当 <code>assert.active</code> 和 <code>zend.assertions</code> 都设置为 <code>1</code> 时，它会发出 <code>E_DEPRECATED</code> 通知</td>
<td></td>
</tr>
<tr>
<td><code>7.0.0</code></td>
<td><code>assert()</code> 现在是一个语言构造而不是一个函数。<code>assertion</code> 现在可以是一个表达式。第二个参数现在被解释为 <code>exception</code>（如果给出 <code>Throwable</code> 对象），或者 <code>description</code> 从 <code>PHP 5.4.8</code> 起支持</td>
<td></td>
</tr>
<tr>
<td><code>5.4.8</code></td>
<td>添加了 <code>description</code> 参数。<code>description</code> 现在也提供给 <code>ASSERT_CALLBACK</code> 模式下的回调函数作为第四个参数</td>
</tr>
</tbody>
</table>
<h1 id="use-以组声明"><a href="#use-以组声明" class="headerlink" title="use 以组声明"></a>use 以组声明</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP7 之前的代码</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Some</span>\<span class="title">Classes</span>\<span class="title">ClassA</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Some</span>\<span class="title">Classes</span>\<span class="title">ClassB</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Some</span>\<span class="title">Classes</span>\<span class="title">ClassC</span> <span class="title">as</span> <span class="title">C</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">function</span> <span class="title">Some</span>\<span class="title">Functions</span>\<span class="title">funca</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">function</span> <span class="title">Some</span>\<span class="title">Functions</span>\<span class="title">funcb</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">function</span> <span class="title">Some</span>\<span class="title">Functions</span>\<span class="title">funcc</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">const</span> <span class="title">Some</span>\<span class="title">Consts</span>\<span class="title">ConstA</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">const</span> <span class="title">Some</span>\<span class="title">Consts</span>\<span class="title">ConstB</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">const</span> <span class="title">Some</span>\<span class="title">Consts</span>\<span class="title">ConstC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP7 及之后的代码</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Some</span>\<span class="title">Classes</span>\&#123;<span class="title">ClassA</span>, <span class="title">ClassB</span>, <span class="title">ClassC</span> <span class="title">as</span> <span class="title">C</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> <span class="title">function</span> <span class="title">Some</span>\<span class="title">Functions</span>\&#123;<span class="title">funca</span>, <span class="title">funcb</span>, <span class="title">funcc</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> <span class="title">const</span> <span class="title">Some</span>\<span class="title">Functions</span>\&#123;<span class="title">ConstA</span>, <span class="title">ConstB</span>, <span class="title">ConstC</span>&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="生成器可以返回表达式"><a href="#生成器可以返回表达式" class="headerlink" title="生成器可以返回表达式"></a>生成器可以返回表达式</h1><blockquote>
<p>此特性基于 <code>PHP 5.5</code> 版本中引入的生成器特性构建的。 它允许在生成器函数中通过使用 <code>return</code> 语法来返回一个表达式（但是不允许返回引用值），可以通过调用 <code>Generator::getReturn()</code> 方法来获取生成器的返回值，但是这个方法只能在生成器完成产生工作以后调用一次</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$gen</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$gen</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$value</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$gen</span>::getReturn(), PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="生成器委托"><a href="#生成器委托" class="headerlink" title="生成器委托"></a>生成器委托</h1><blockquote>
<p>只需在最外层生成其中使用 <code>yield from</code>，就可以把一个生成器自动委派给其他的生成器，<code>Traversable</code> 对象或者 <code>array</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> other();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">other</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (gen() <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$value</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<h1 id="整数除法函数-intdiv"><a href="#整数除法函数-intdiv" class="headerlink" title="整数除法函数 intdiv()"></a>整数除法函数 intdiv()</h1><blockquote>
<p>整型值可以使用十进制、十六进制、八进制或二进制表示，前面可以加上可选的符号（<code>-</code> 或者 <code>+</code>）。其中，二进制表达的 <code>integer</code> 自 <code>PHP 5.4.0</code> 起可用；要使用八进制表达，数字前必须加上 <code>0</code>（零）；要使用十六进制表达，数字前必须加上 <code>0x</code>；要使用二进制表达，数字前必须加上 <code>0b</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = intdiv(<span class="number">1000</span>, <span class="number">33</span>);</span><br><span class="line">var_dump(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<h1 id="会话选项"><a href="#会话选项" class="headerlink" title="会话选项"></a>会话选项</h1><blockquote>
<p>在调用 <code>session_start()</code> 的时候， 传入的选项参数中也支持 <code>session.lazy_write</code> 行为， 默认情况下这个配置项是打开的。它的作用是控制 <code>PHP</code> 只有在会话中的数据发生变化的时候才写入会话存储文件，如果会话中的数据没有发生改变，那么 <code>PHP</code> 会在读取完会话数据之后，立即关闭会话存储文件，不做任何修改，可以通过设置 <code>read_and_close</code> 来实现</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start([</span><br><span class="line">    <span class="string">&#x27;cache_limiter&#x27;</span> =&gt; <span class="string">&#x27;private&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;read_and_close&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">]);</span><br><span class="line">var_dump(ini_get(<span class="string">&#x27;session.cache_limiter&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;private&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="执行一个正则表达式搜索并且使用一个回调进行替换"><a href="#执行一个正则表达式搜索并且使用一个回调进行替换" class="headerlink" title="执行一个正则表达式搜索并且使用一个回调进行替换"></a>执行一个正则表达式搜索并且使用一个回调进行替换</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串中的年份增加一年</span></span><br><span class="line"><span class="variable">$text</span> = <span class="string">&quot;Fools day is 04/01/2017\nChristmas day was 12/24/2017\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> preg_replace_callback(</span><br><span class="line">    <span class="string">&quot;|(\d&#123;2&#125;/\d&#123;2&#125;/)(\d&#123;4&#125;)|&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$match</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$match</span>[<span class="number">1</span>] . (<span class="variable">$match</span>[<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="variable">$text</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> preg_replace_callback_array(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;|(\d&#123;2&#125;/\d&#123;2&#125;/)(\d&#123;4&#125;)|&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$match</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$match</span>[<span class="number">1</span>] . (<span class="variable">$match</span>[<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="variable">$text</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Fools day is <span class="number">04</span>/<span class="number">01</span>/<span class="number">2018</span></span><br><span class="line">Christmas day was <span class="number">12</span>/<span class="number">24</span>/<span class="number">2018</span></span><br><span class="line"></span><br><span class="line">Fools day is <span class="number">04</span>/<span class="number">01</span>/<span class="number">2018</span></span><br><span class="line">Christmas day was <span class="number">12</span>/<span class="number">24</span>/<span class="number">2018</span></span><br></pre></td></tr></table></figure>
<h1 id="伪随机数产生器-CSPRNG"><a href="#伪随机数产生器-CSPRNG" class="headerlink" title="伪随机数产生器 CSPRNG"></a>伪随机数产生器 CSPRNG</h1><blockquote>
<p><code>bin2hex()</code> - 函数把包含数据的二进制字符串转换为十六进制值。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    bin2hex(random_bytes(<span class="number">4</span>)),</span><br><span class="line">    bin2hex(random_bytes(<span class="number">16</span>)),</span><br><span class="line">    random_int(<span class="number">10</span>, <span class="number">99</span>),</span><br><span class="line">    random_int(<span class="number">1000</span>, <span class="number">9999</span>),</span><br><span class="line">];</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">49</span>a44caf</span><br><span class="line">    [<span class="number">1</span>] =&gt; ae67bae0c8695dc6684dddb31364ea0e</span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">59</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">6021</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="错误处理方式"><a href="#错误处理方式" class="headerlink" title="错误处理方式"></a>错误处理方式</h1><blockquote>
<p>在 <code>PHP7</code> 中改变了大多数错误的报告方式。不再通过 <code>PHP5</code> 使用的传统错误报告机制来报告错误，现在大多数错误被作为 <code>Error</code> 异常抛出。这种 <code>Error</code> 异常可以像 <code>Exception</code> 异常一样被第一个匹配的 <code>try / catch</code> 块所捕获。如果没有匹配的 <code>catch</code> 块，则调用异常处理函数（事先通过 <code>set_exception_handler()</code> 注册）进行处理。如果尚未注册异常处理函数，则按照传统方式处理：被报告为一个致命错误（<code>Fatal Error</code>）。</p>
</blockquote>
<p>由于错误层次结构不从 <code>Exception</code> 扩展，因此使用 <code>catch（Exception $ e）&#123;...&#125;</code> 块处理 <code>PHP5</code> 中未捕获的异常的代码将不会处理此类错误。需要一个 <code>catch（Error $ e）&#123;...&#125;</code> 块或一个 <code>set_exception_handler()</code> 处理程序来处理致命错误。</p>
<p><img src="http://om804c7s2.bkt.clouddn.com/2018-01-20-1509440575356777.jpg" alt="2018-01-20-1509440575356777.jpg"></p>
<p><code>Error</code> 层次结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- Throwable</span><br><span class="line">    - Error</span><br><span class="line">        - ArithmeticError</span><br><span class="line">        - DivisionByZeroError</span><br><span class="line">        - AssertionError</span><br><span class="line">        - ParseError</span><br><span class="line">        - TypeError</span><br><span class="line">    - Exception</span><br><span class="line">        - ...</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Division</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$value</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doDivision</span>(<span class="params"></span>) : <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;value % <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">DivisionByZeroError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$division</span> = <span class="keyword">new</span> Division();</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$division</span>-&gt;doDivision();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Modulo by zero</span><br></pre></td></tr></table></figure>
<h1 id="弃用的功能"><a href="#弃用的功能" class="headerlink" title="弃用的功能"></a>弃用的功能</h1><h2 id="弃用-PHP4-风格的构造函数"><a href="#弃用-PHP4-风格的构造函数" class="headerlink" title="弃用 PHP4 风格的构造函数"></a>弃用 PHP4 风格的构造函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="keyword">__METHOD__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">PHP Deprecated : Methods with the same name <span class="keyword">as</span> their <span class="class"><span class="keyword">class</span> <span class="title">will</span></span></span><br><span class="line"><span class="class"><span class="title">not</span> <span class="title">be</span> <span class="title">constructors</span> <span class="title">in</span> <span class="title">a</span> <span class="title">future</span> <span class="title">version</span> <span class="title">of</span> <span class="title">PHP</span>;</span></span><br><span class="line"><span class="class"><span class="title">Test</span> <span class="title">has</span> <span class="title">a</span> <span class="title">deprecated</span> <span class="title">constructor</span> <span class="title">in</span> ...</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Deprecated</span> : <span class="title">Methods</span> <span class="title">with</span> <span class="title">the</span> <span class="title">same</span> <span class="title">name</span> <span class="title">as</span> <span class="title">their</span> <span class="title">class</span> <span class="title">will</span></span></span><br><span class="line"><span class="class"><span class="title">not</span> <span class="title">be</span> <span class="title">constructors</span> <span class="title">in</span> <span class="title">a</span> <span class="title">future</span> <span class="title">version</span> <span class="title">of</span> <span class="title">PHP</span>;</span></span><br><span class="line"><span class="class"><span class="title">Test</span> <span class="title">has</span> <span class="title">a</span> <span class="title">deprecated</span> <span class="title">constructor</span> <span class="title">in</span> ...</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Test</span>::<span class="title">Test</span></span></span><br></pre></td></tr></table></figure>
<h2 id="弃用了静态调用非静态方法"><a href="#弃用了静态调用非静态方法" class="headerlink" title="弃用了静态调用非静态方法"></a>弃用了静态调用非静态方法</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;non-static call.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Test::get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">PHP Deprecated:  Non-<span class="built_in">static</span> method Test::get() should not be called statically in ...</span><br><span class="line">...</span><br><span class="line">Deprecated: Non-<span class="built_in">static</span> method Test::get() should not be called statically in ...</span><br><span class="line">...</span><br><span class="line">non-<span class="built_in">static</span> call.</span><br></pre></td></tr></table></figure>
<h2 id="password-hash-salt-选项被弃用"><a href="#password-hash-salt-选项被弃用" class="headerlink" title="password_hash() salt 选项被弃用"></a>password_hash() salt 选项被弃用</h2><p>函数原 <code>salt</code> 不再需要由开发者提供了。函数内部默认带有 <code>salt</code> 能力，无需开发者提供 <code>salt</code> 值</p>
<h2 id="capture-session-meta-SSL-上下文选项被弃用"><a href="#capture-session-meta-SSL-上下文选项被弃用" class="headerlink" title="capture_session_meta SSL 上下文选项被弃用"></a>capture_session_meta SSL 上下文选项被弃用</h2><p>该 <code>capture_session_meta</code> <code>SSL</code> 上下文选项已被弃用。现在，通过 <code>stream_get_meta_data()</code> 函数使用 <code>SSL</code> 元数据</p>
<h2 id="移除的扩展"><a href="#移除的扩展" class="headerlink" title="移除的扩展"></a>移除的扩展</h2><ul>
<li><code>ereg</code></li>
<li><code>mssql</code></li>
<li><code>mysql</code></li>
<li><code>sybase_ct</code></li>
</ul>
<h2 id="移除的-SAPI"><a href="#移除的-SAPI" class="headerlink" title="移除的 SAPI"></a>移除的 SAPI</h2><blockquote>
<p><code>PHP7+</code> 版本移除了以下 <code>SAPI</code>。</p>
</blockquote>
<ul>
<li>aolserver</li>
<li>apache</li>
<li>apache_hooks</li>
<li>apache2filter</li>
<li>caudium</li>
<li>continuity</li>
<li>isapi</li>
<li>milter</li>
<li>nsapi</li>
<li>phttpd</li>
<li>pi3web</li>
<li>roxen</li>
<li>thttpd</li>
<li>tux</li>
<li>webjames</li>
</ul>
<h2 id="移除的函数列表"><a href="#移除的函数列表" class="headerlink" title="移除的函数列表"></a>移除的函数列表</h2><ul>
<li>从 <code>PHP 4.1.0</code> 开始被废弃了 <code>call_user_func()</code> 和 <code>call_user_func_array()</code></li>
<li>已废弃的 <code>mcrypt_generic_end()</code> 函数已被移除，可以使用 <code>mcrypt_generic_deinit()</code> 代替</li>
<li>已废弃的 <code>mcrypt_ecb()</code>、<code>mcrypt_cbc()</code>、 <code>mcrypt_cfb()</code> 和 <code>mcrypt_ofb()</code> 函数已被移除</li>
<li><code>set_magic_quotes_runtime()</code> （别名：<code>magic_quotes_runtime()</code>）已被移除；它们在 <code>PHP5.3.0</code> 中已经被废弃，并且在 <code>PHP5.4.0</code> 也由于魔术引号的废弃而失去功能</li>
<li>已废弃的 <code>set_socket_blocking()</code> 函数已被移除，您可以使用 <code>stream_set_blocking()</code> 代替</li>
<li>在 <code>PHP-FPM</code> 不再使用 <code>dl()</code>，在 <code>CLI</code> 和 <code>embed SAPIs</code> 中仍可用</li>
<li><code>GD</code> 库中下列函数被移除：<code>imagepsbbox()</code>、<code>imagepsencodefont()</code>、<code>imagepsextendfont()</code>、<code>imagepsfreefont()</code>、<code>imagepsloadfont()</code>、<code>imagepsslantfont()</code>、<code>imagepstext()</code></li>
<li>在配置文件 <code>php.ini</code> 中，<code>always_populate_raw_post_data</code>、<code>asp_tags</code>、<code>xsl.security_prefs</code> 被移除了</li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 开发利器之 PhpStorm</title>
    <url>/2018/01/21/php-phpstorm/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Lightning-smart PHP IDE. PhpStorm deeply understands your code.<br><a href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#PHP">开发 <code>PHP</code> 的一众工具</a></p>
</blockquote>
<p>总而言之，就是巨牛逼 <code>PHP</code> 集成开发 <code>IDE</code>，无出其右者。如果你还挣扎在 <code>Atom</code>，<code>Sublime Text</code>，<code>Vim</code>，<code>EditPlus</code>，<code>Notepad++</code>，<code>PHP Development Tools (PDT)</code>，<code>Zend Studio</code>，<code>Eclipse PDT</code>，<code>NetBeans</code>，<code>KDevelop</code>，<code>PHPEdit</code>，<code>PHP Tools for Visual Studio</code> 等等工具上，不如用一站式的 <code>PhpStorm</code>，避免折腾，专注代码本身。</p>
<p>我不想冒犯谁，至于什么 <code>Editor VS IDE</code> 之类的种种咱先不争论了好吗？说什么 <code>Editor</code> 快 <code>IDE</code> 慢（依我看这样的人不是傻就是蠢），谁不知道用 <code>PHP</code> 写个单文件的 <code>hello world</code> 程序比框架写出来的快！不过说明一下，<code>PhpStorm</code> 比较吃内存。</p>
<h2 id="主要的框架支持"><a href="#主要的框架支持" class="headerlink" title="主要的框架支持"></a>主要的框架支持</h2><p><code>PhpStorm</code> 非常适合工作在 <code>Symfony</code>，<code>Drupal</code>，<code>WordPress</code>，<code>Zend Framework</code>，<code>Laravel</code>，<code>Magento</code>，<code>Joomla</code>，<code>CakePHP</code>，<code>Yii</code> 和其它的框架中。</p>
<h2 id="所有的-PHP-工具"><a href="#所有的-PHP-工具" class="headerlink" title="所有的 PHP 工具"></a>所有的 <code>PHP</code> 工具</h2><p>编辑器实际上 <code>gets</code> 你的代码并且深度理解它的结构，为现代和遗留项目提供了所有的 <code>PHP</code> 语言特性。它提供了最好的代码完成，重构，即时错误预防和其它更多的功能。</p>
<h2 id="囊括前端技术"><a href="#囊括前端技术" class="headerlink" title="囊括前端技术"></a>囊括前端技术</h2><p>充分利用诸如 <code>HTML5</code>，<code>CSS</code>，<code>Sass</code>，<code>Less</code>，<code>Stylus</code>，<code>CoffeeScript</code>，<code>TypeScript</code>，<code>Emmet</code> 和 <code>JavaScript</code> 等前沿的前端技术，并提供重构，设计和有效的单元测试。在浏览器即时查看更改多亏了有 <code>Live Edit</code></p>
<h2 id="内置的开发者工具"><a href="#内置的开发者工具" class="headerlink" title="内置的开发者工具"></a>内置的开发者工具</h2><p><code>IDE</code> 支持很多常规任务，由于有了版本控制系统集成，支持远程部署，<code>database/SQL</code>，命令行工具，<code>Vagrant</code>，<code>Composer</code>，<code>REST Client</code> 以及许多其它工具</p>
<h2 id="三合一-PhpStorm-WebStorm-PHP-DB-SQL"><a href="#三合一-PhpStorm-WebStorm-PHP-DB-SQL" class="headerlink" title="三合一 - PhpStorm = WebStorm + PHP + DB/SQL"></a>三合一 - <code>PhpStorm = WebStorm + PHP + DB/SQL</code></h2><blockquote>
<p>如果安装了 <code>PhpStorm</code>，<code>WebStorm</code> 可以扔掉了，是的，<code>PhpStorm</code> 就这么牛叉</p>
</blockquote>
<p><code>WebStorm</code> 的所有功能都包含在 <code>PhpStorm</code> 中，对 <code>PHP</code> 和 <code>Databases/SQL</code> 支持的全面支持将被添加到顶层</p>
<h2 id="智能编码协助"><a href="#智能编码协助" class="headerlink" title="智能编码协助"></a>智能编码协助</h2><p>在你键入的时候，数百个检查工具会检查你的代码，分析整个项目。<code>PHPDoc</code> 支持，代码（重新）编排和格式化，快速修复和其它功能可以帮助你编写易于维护的整洁代码</p>
<h2 id="智能代码导航"><a href="#智能代码导航" class="headerlink" title="智能代码导航"></a>智能代码导航</h2><p>让你成为代码库的主人应该归功于高效，闪电般的导航功能。<code>IDE</code> 理解你想去的地方，并立即到达那里</p>
<h2 id="快速而安全的重构"><a href="#快速而安全的重构" class="headerlink" title="快速而安全的重构"></a>快速而安全的重构</h2><p>使用 <code>Safe Rename</code>，<code>Move</code>，<code>Delete</code>，<code>Extract Method</code>，<code>Inline Variable</code>，<code>Push members Up / Pull members Down</code>，<code>Change Signature</code> 和许多其它重构，可靠的重构你的代码。特定于语言的重构只需要点击几下就可以帮助你执行项目范围内的更改，并且可以安全了撤消</p>
<h2 id="容易调试和测试"><a href="#容易调试和测试" class="headerlink" title="容易调试和测试"></a>容易调试和测试</h2><p><code>PhpStorm</code> 以其零配置的可视化调试器而闻名，提供非凡的洞察力，让你在每个步骤中了解你的应用程序发生了什么。它工作在 <code>Xdebug</code> 和 <code>Zend Debugger</code>，可以在本地和远程使用。使用 <code>PHPUnit</code> 进行单元测试，与 <code>Behat</code> 和分析器集成 <code>BDD</code> 也是可用的</p>
<h1 id="PhpStorm-信息"><a href="#PhpStorm-信息" class="headerlink" title="PhpStorm 信息"></a><code>PhpStorm</code> 信息</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.jetbrains.com/phpstorm/"><code>JetBranins PhpStorm</code></a></p>
<h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p><a href="http://idea.lanyus.com/"><code>IntelliJ IDEA</code> 注册码</a></p>
<h1 id="PhpStorm-快捷键"><a href="#PhpStorm-快捷键" class="headerlink" title="PhpStorm 快捷键"></a><code>PhpStorm</code> 快捷键</h1><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="PhpStorm"><a href="#PhpStorm" class="headerlink" title="PhpStorm"></a><code>PhpStorm</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Command+,</code></td>
<td style="text-align:left"><code>Preferences...</code>: 偏好</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+H</code></td>
<td style="text-align:left"><code>Hide PhpStorm</code>: 隐藏 PhpStorm</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+H</code></td>
<td style="text-align:left"><code>Hide Others</code>: 隐藏其它</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+Q</code></td>
<td style="text-align:left"><code>Quit PhpStorm</code></td>
</tr>
</tbody>
</table>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a><code>File</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Command+N</code></td>
<td style="text-align:left"><code>New...</code>: 新建</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+S</code></td>
<td style="text-align:left"><code>Save As...</code>: 另存为</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+S</code></td>
<td style="text-align:left"><code>Save All</code>: 保存</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+Y</code></td>
<td style="text-align:left"><code>Synchronize</code>: 同步</td>
</tr>
</tbody>
</table>
<h3 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a><code>Edit</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Command+Z</code></td>
<td style="text-align:left"><code>Undo</code>: 撤销</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+Z</code></td>
<td style="text-align:left"><code>Redo</code>: 重做</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+X</code></td>
<td style="text-align:left"><code>Cut</code>: 剪切</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+C</code></td>
<td style="text-align:left"><code>Copy</code>: 复制</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+C</code></td>
<td style="text-align:left"><code>Copy Path</code>: 复制路径</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+C</code></td>
<td style="text-align:left"><code>Copy Reference</code>: 复制引用</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+V</code></td>
<td style="text-align:left"><code>Paste</code>: 粘贴</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+V</code></td>
<td style="text-align:left"><code>Paste from History...</code>: 从粘贴板历史中选择粘贴</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+V</code></td>
<td style="text-align:left"><code>Paste Simple</code>: 简单粘贴</td>
</tr>
<tr>
<td style="text-align:left"><code>Delete</code></td>
<td style="text-align:left"><code>Delete</code>: 删除</td>
</tr>
<tr>
<td style="text-align:left"><code>Find</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F</code></td>
<td style="text-align:left"><code>Find...</code>: 查找</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+R</code></td>
<td style="text-align:left"><code>Replace...</code>: 替换</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+G</code></td>
<td style="text-align:left"><code>Find Next / Move to Next Occurrence</code>: 查找下一个 / 移动到下一个出现的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+G</code></td>
<td style="text-align:left"><code>Find Previous / Move to Previous Occurrence</code>: 查找上一个 / 移动到上一个出现的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Command+G</code></td>
<td style="text-align:left"><code>Select All Occurrences</code>: 选中所有出现的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+G</code></td>
<td style="text-align:left"><code>Add Selection for Next Occurrence</code>: 选中下一个出现的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Shift+G</code></td>
<td style="text-align:left"><code>Unselect Occurrence</code>: 取消选中的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+F</code></td>
<td style="text-align:left"><code>Find in Path...</code>: 在路径中查找</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+R</code></td>
<td style="text-align:left"><code>Replace in Path...</code>: 在路径中替换</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+F7</code></td>
<td style="text-align:left"><code>Find Usages</code>: 查找使用的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+F7</code></td>
<td style="text-align:left"><code>Find Usages Settings...</code>: 查找使用设置</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+F7</code></td>
<td style="text-align:left"><code>Show Usages</code>: 显示使用的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F7</code></td>
<td style="text-align:left"><code>Find Usages in File</code>: 在文件中查找使用的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+F7</code></td>
<td style="text-align:left"><code>Highlight Usages in File</code>: 在文件中高亮使用的地方</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+X</code></td>
<td style="text-align:left"><code>Find by XPath...</code>: 通过自定义路径查找</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+8</code></td>
<td style="text-align:left"><code>Column Selection Mode</code>: 列选择模式</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+A</code></td>
<td style="text-align:left"><code>Select All</code>: 选中所有</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+↑</code></td>
<td style="text-align:left"><code>Extend Selection</code>: 扩展选中</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+↓</code></td>
<td style="text-align:left"><code>Shrink Selection</code>: 缩小选中</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Shift+J</code></td>
<td style="text-align:left"><code>Join Lines</code>: 合并行</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+D</code></td>
<td style="text-align:left"><code>Duplicate Line</code>: 复制行</td>
</tr>
<tr>
<td style="text-align:left"><code>Tab</code></td>
<td style="text-align:left"><code>Indent Selection</code>: 选中向右缩进</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Tab</code></td>
<td style="text-align:left"><code>Unindent Line of Selection</code>: 选中向左缩进</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+U</code></td>
<td style="text-align:left"><code>Toggle Case</code>: 大小写切换</td>
</tr>
<tr>
<td style="text-align:left"><code>Tab</code></td>
<td style="text-align:left"><code>Next Parameter</code>: 下一个参数</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Tab</code></td>
<td style="text-align:left"><code>Previous Parameter</code>: 上一个参数</td>
</tr>
</tbody>
</table>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a><code>View</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Tool Windows</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Command+1</code></td>
<td style="text-align:left"><code>Project</code>: 项目</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+2</code></td>
<td style="text-align:left"><code>Favorites</code>: 喜好</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+3</code></td>
<td style="text-align:left"><code>Find</code>: 查找</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+4</code></td>
<td style="text-align:left"><code>Run</code>: 运行</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+5</code></td>
<td style="text-align:left"><code>Debug</code>: 调试</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+6</code></td>
<td style="text-align:left"><code>TODO</code>: 待办事项</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+7</code></td>
<td style="text-align:left"><code>Structure</code>: 结构</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+8</code></td>
<td style="text-align:left"><code>Hierarchy</code>: 继承</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+9</code></td>
<td style="text-align:left"><code>Version Control</code>: 版本控制</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+F12</code></td>
<td style="text-align:left"><code>Terminal</code>: 终端</td>
</tr>
<tr>
<td style="text-align:left"><code>F1</code></td>
<td style="text-align:left"><code>Quick Documentation</code>: 快速到文档</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+P</code></td>
<td style="text-align:left"><code>Parameter Info</code>: 参数信息</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+E</code></td>
<td style="text-align:left"><code>Recent Files</code>: 最近打开的文件</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+E</code></td>
<td style="text-align:left"><code>Recently Changed Files</code>: 最近修改的文件</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+C</code></td>
<td style="text-align:left"><code>Recent Changes</code>: 最近修改文件历史记录</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+D</code></td>
<td style="text-align:left"><code>Compare With...</code>: 当前文件与历史记录比较</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+</code>`</td>
<td style="text-align:left"><code>Quick Switch Scheme...</code>: 快速切换模式</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Command+F</code></td>
<td style="text-align:left"><code>Enter Full Screen</code>: 全屏</td>
</tr>
</tbody>
</table>
<h3 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a><code>Navigate</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Command+O</code></td>
<td style="text-align:left"><code>Class...</code>: 搜索类</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+O</code></td>
<td style="text-align:left"><code>File...</code>: 搜索文件</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+O</code></td>
<td style="text-align:left"><code>Symbol...</code>: 搜索符号</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+.</code></td>
<td style="text-align:left"><code>Custom Folding...</code>: 搜索自定义折叠</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+L</code></td>
<td style="text-align:left"><code>Line...</code>: 定位行</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+[</code></td>
<td style="text-align:left"><code>Back</code>: 反退</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+]</code></td>
<td style="text-align:left"><code>Forward</code>: 前进</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+Delete</code></td>
<td style="text-align:left"><code>Last Edit Location</code>: 最后编辑位置</td>
</tr>
<tr>
<td style="text-align:left"><code>Bookmarks</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>F3</code></td>
<td style="text-align:left"><code>Toggle Bookmark</code>: 切换书签</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+F3</code></td>
<td style="text-align:left"><code>Toggle Bookmark with Mnemonic</code>: 切换书签记忆</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F3</code></td>
<td style="text-align:left"><code>Show Bookmark</code>: 显示书签</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+F1</code></td>
<td style="text-align:left"><code>Select In...</code>: 选择目标</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+↑</code></td>
<td style="text-align:left"><code>Jump to Navigation Bar</code>: 跳转到导航栏</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+B</code></td>
<td style="text-align:left"><code>Declaration</code>: 跳转到函数声明</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+B</code></td>
<td style="text-align:left"><code>Implementation(s)</code>: 跳转到接口实现类</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+B</code></td>
<td style="text-align:left"><code>Type Declaration</code>: 跳转到类型声明</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+U</code></td>
<td style="text-align:left"><code>Super Method</code>: 跳转到超级方法</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+T</code></td>
<td style="text-align:left"><code>Test</code>: 跳转到测试类</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Command+↑</code></td>
<td style="text-align:left"><code>Related Symbol...</code>: 相关符号</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F12</code></td>
<td style="text-align:left"><code>File Structure</code>: 文件结构</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+H</code></td>
<td style="text-align:left"><code>Type Hierarchy</code>: 类型继承</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+H</code></td>
<td style="text-align:left"><code>Method Hierarchy</code>: 方法继承</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Option+H</code></td>
<td style="text-align:left"><code>Call Hierarchy</code>: 调用继承</td>
</tr>
<tr>
<td style="text-align:left"><code>F2</code></td>
<td style="text-align:left"><code>Next Highlighted Error</code>: 下一个高亮错误</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+F2</code></td>
<td style="text-align:left"><code>Previous Highlighted Error</code>: 上一个高亮错误</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Option+→</code></td>
<td style="text-align:left"><code>Next Emmet Edit Point</code>: 下一个 Emmet 编辑点</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Option+←</code></td>
<td style="text-align:left"><code>Previous Emmet Edit Point</code>: 上一个 Emmet 编辑点</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+↓</code></td>
<td style="text-align:left"><code>Next Method</code>: 下一个方法</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+↑</code></td>
<td style="text-align:left"><code>Previous Method</code>: 上一个方法</td>
</tr>
</tbody>
</table>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a><code>Code</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Control+O</code></td>
<td style="text-align:left"><code>Override Method...</code>: 覆盖方法</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+I</code></td>
<td style="text-align:left"><code>Implement Method...</code>: 实现方法</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+N</code></td>
<td style="text-align:left"><code>Generate...</code>: 生成</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+T</code></td>
<td style="text-align:left"><code>Surround With...</code>: 环绕</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+Delete</code></td>
<td style="text-align:left"><code>Unwrap / Remove</code>: 打开 / 移除</td>
</tr>
<tr>
<td style="text-align:left"><code>Completion</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Option+/</code></td>
<td style="text-align:left"><code>Cyclic Expand Word</code>: 循环展开单词(向前)</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Option+?</code></td>
<td style="text-align:left"><code>Cyclic Expand Word(Backward)</code>: 循环展开单词(向后)</td>
</tr>
<tr>
<td style="text-align:left"><code>Folding</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Command++</code></td>
<td style="text-align:left"><code>Expand</code>: 展开</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+-</code></td>
<td style="text-align:left"><code>Collapse</code>: 折叠</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command++</code></td>
<td style="text-align:left"><code>Expand Recursively</code>: 递归展开</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+-</code></td>
<td style="text-align:left"><code>Collapse Recursively</code>: 递归折叠</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command++</code></td>
<td style="text-align:left"><code>Expand All</code>: 展开所有</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+-</code></td>
<td style="text-align:left"><code>Collapse All</code>: 折叠所有</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+J</code></td>
<td style="text-align:left"><code>Insert Live Template...</code>: 插入模板</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+J</code></td>
<td style="text-align:left"><code>Surround with Live Template...</code>: 环绕模板</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+/</code></td>
<td style="text-align:left"><code>Comment with Line Comment</code>: 行注释</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+/</code></td>
<td style="text-align:left"><code>Comment with Block Comment</code>: 块注释</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+L</code></td>
<td style="text-align:left"><code>Reformat Code</code>: 格式化代码</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+L</code></td>
<td style="text-align:left"><code>Show Reformat File Dialog</code>: 弹出格式化对话框</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Option+I</code></td>
<td style="text-align:left"><code>Auto-Indent Lines</code>: 自动缩进行</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Option+O</code></td>
<td style="text-align:left"><code>Optimize Imports</code>: 优化导入</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+↓</code></td>
<td style="text-align:left"><code>Move Statement Down</code>: 声明向下移动</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+↑</code></td>
<td style="text-align:left"><code>Move Statement Up</code>: 声明向下移动</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+←</code></td>
<td style="text-align:left"><code>Move Element Left</code>: 元素向左移动</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+→</code></td>
<td style="text-align:left"><code>Move Element Right</code>: 元素向右移动</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+↓</code></td>
<td style="text-align:left"><code>Move Line Down</code>: 行向下移动</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+↑</code></td>
<td style="text-align:left"><code>Move Line Up</code>: 行向上移动</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+I</code></td>
<td style="text-align:left"><code>Run Inspection by Name...</code>: 通过名称运行检查</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+H</code></td>
<td style="text-align:left"><code>Configure Current File Analysis...</code>: 配置当前文件分析</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+.</code></td>
<td style="text-align:left"><code>Fold Selection / Remove region</code>: 折叠选择 / 移除区域</td>
</tr>
</tbody>
</table>
<h3 id="Refactor"><a href="#Refactor" class="headerlink" title="Refactor"></a><code>Refactor</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Control+T</code></td>
<td style="text-align:left"><code>Refactor This...</code>: 重构</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+F6</code></td>
<td style="text-align:left"><code>Rename</code>: 重命名</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F6</code></td>
<td style="text-align:left"><code>Change Signature...</code>: 改变签名</td>
</tr>
<tr>
<td style="text-align:left"><code>F6</code></td>
<td style="text-align:left"><code>Move...</code>: 移动</td>
</tr>
<tr>
<td style="text-align:left"><code>F5</code></td>
<td style="text-align:left"><code>Copy...</code>: 复制</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+Delete</code></td>
<td style="text-align:left"><code>Safe Delete</code>: 安全删除</td>
</tr>
<tr>
<td style="text-align:left"><code>Extract</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+V</code></td>
<td style="text-align:left"><code>Variable...</code>: 变量</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+C</code></td>
<td style="text-align:left"><code>Constant...</code>: 常量</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+F</code></td>
<td style="text-align:left"><code>Field...</code>: 字段</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+P</code></td>
<td style="text-align:left"><code>Parameter...</code>: 参数</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+M</code></td>
<td style="text-align:left"><code>Method...</code>: 方法</td>
</tr>
</tbody>
</table>
<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a><code>Run</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Control+R</code></td>
<td style="text-align:left"><code>Run</code>: 运行</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+D</code></td>
<td style="text-align:left"><code>Debug</code>: 调试</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Option+R</code></td>
<td style="text-align:left"><code>Run...</code>: 运行</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Option+D</code></td>
<td style="text-align:left"><code>Debug...</code>: 调试</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F2</code></td>
<td style="text-align:left"><code>Stop</code>: 停止</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F8</code></td>
<td style="text-align:left"><code>Step Over</code>: 步过</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+F8</code></td>
<td style="text-align:left"><code>Force Step Over</code>: 强制步过</td>
</tr>
<tr>
<td style="text-align:left"><code>F7</code></td>
<td style="text-align:left"><code>Step Into</code>: 步入</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F7</code></td>
<td style="text-align:left"><code>Force Step Into</code>: 强制步入</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+F7</code></td>
<td style="text-align:left"><code>Smart Step Over</code>: 智能步入</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+F8</code></td>
<td style="text-align:left"><code>Step Out</code>: 跳过</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+F9</code></td>
<td style="text-align:left"><code>Run to Cursor</code>: 运行到光标处</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+F9</code></td>
<td style="text-align:left"><code>Force Run to Cursor</code>: 强制运行到光标处</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+R</code></td>
<td style="text-align:left"><code>Resume Program</code>: 恢复程序</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+F8</code></td>
<td style="text-align:left"><code>Evaluate Expression...</code>: 评估表达</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+F8</code></td>
<td style="text-align:left"><code>Quick Evaluate Expression</code>: 快速评估表达</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+F10</code></td>
<td style="text-align:left"><code>Show Execution Point</code>: 显示执行的断点</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+F8</code></td>
<td style="text-align:left"><code>Toggle Line Breakpoint</code>: 切换断点</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+F8</code></td>
<td style="text-align:left"><code>Toggle Temporary Line Breakpoint</code>: 切换临时断点</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+F8</code></td>
<td style="text-align:left"><code>View Breakpoints...</code>: 查看断点</td>
</tr>
</tbody>
</table>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a><code>Tools</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Tasks &amp; Contexts</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+T</code></td>
<td style="text-align:left"><code>Switch Task...</code>: 切换任务</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+N</code></td>
<td style="text-align:left"><code>Open Task...</code>: 打开任务</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+W</code></td>
<td style="text-align:left"><code>Close Active Task...</code>: 关闭激活任务</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+B</code></td>
<td style="text-align:left"><code>Open in Browser</code>: 用浏览器打开</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+X</code></td>
<td style="text-align:left"><code>Clear+Context</code>: 清除上下文</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+N</code></td>
<td style="text-align:left"><code>New Scratch File...</code>: 新建临时文件</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+F6</code></td>
<td style="text-align:left"><code>Show Code Coverage Data</code>: 显示代码覆盖数据</td>
</tr>
<tr>
<td style="text-align:left"><code>Deployment</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Command+X</code></td>
<td style="text-align:left"><code>Upload to...</code>: 上传到</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+X</code></td>
<td style="text-align:left"><code>Run Command...</code>: 运行命令行</td>
</tr>
</tbody>
</table>
<h3 id="VCS"><a href="#VCS" class="headerlink" title="VCS"></a><code>VCS</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Control+V</code></td>
<td style="text-align:left"><code>VCS Operations Popup...</code>: VCS 操作弹出</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+K</code></td>
<td style="text-align:left"><code>Commit Changes...</code>: 提交修改</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+T</code></td>
<td style="text-align:left"><code>Update Project...</code>: 更新项目</td>
</tr>
<tr>
<td style="text-align:left"><code>Git</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Command+A</code></td>
<td style="text-align:left"><code>Add</code>: 添加</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+K</code></td>
<td style="text-align:left"><code>Push...</code>: 推送</td>
</tr>
</tbody>
</table>
<h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a><code>Window</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Command+M</code></td>
<td style="text-align:left"><code>Minimize</code>: 最小化</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Command+=</code></td>
<td style="text-align:left"><code>Zoom</code>: 变焦</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+F12</code></td>
<td style="text-align:left"><code>Restore Default Layout</code>: 恢复默认的布局</td>
</tr>
<tr>
<td style="text-align:left"><code>Active Tool Window</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+⎋</code></td>
<td style="text-align:left"><code>Hide Active Tool Window</code>:</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+F12</code></td>
<td style="text-align:left"><code>Hide All Tool Windows</code>:</td>
</tr>
<tr>
<td style="text-align:left"><code>Control+Shift+F4</code></td>
<td style="text-align:left"><code>Close Active Tab</code>:</td>
</tr>
<tr>
<td style="text-align:left"><code>F12</code></td>
<td style="text-align:left"><code>Jump to Last Tool Window</code>:</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+&#39;</code></td>
<td style="text-align:left"><code>Maximize Tool Window</code>:</td>
</tr>
<tr>
<td style="text-align:left"><code>Editor Tabs</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+]</code></td>
<td style="text-align:left"><code>Select Next Tab</code>: 选择下一个标签</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+[</code></td>
<td style="text-align:left"><code>Select Previous Tab</code>: 选择上一个标签</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+W</code></td>
<td style="text-align:left"><code>Close</code>: 关闭标签窗口</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Tab</code></td>
<td style="text-align:left"><code>Goto Next Splitter</code>:</td>
</tr>
<tr>
<td style="text-align:left"><code>Option+Shift+Tab</code></td>
<td style="text-align:left"><code>Goto Previous Splitter</code>:</td>
</tr>
<tr>
<td style="text-align:left"><code>Command+</code>`</td>
<td style="text-align:left"><code>Next Project Window</code>: 下一个项目窗口</td>
</tr>
<tr>
<td style="text-align:left"><code>Shift+Command+</code>`</td>
<td style="text-align:left"><code>Previous Project Window</code>: 上一个项目窗口</td>
</tr>
</tbody>
</table>
<h3 id="Help"><a href="#Help" class="headerlink" title="Help"></a><code>Help</code></h3><table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Shift+Command+A</code></td>
<td style="text-align:left"><code>Find Action</code>: 查找动作</td>
</tr>
</tbody>
</table>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><blockquote>
<ul>
<li><a href="https://github.com/daylerees/colour-schemes">Colour schemes for a variety of editors created by Dayle Rees</a></li>
</ul>
</blockquote>
<h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote>
<ul>
<li><a href="https://github.com/kalessil/phpinspectionsea">A Static Code Analyzer for PHP (a PhpStorm/Idea Plugin)</a></li>
<li><a href="https://github.com/adelf/idea-php-dotenv-plugin/">environment parameters completion, based on .env file keys</a></li>
<li><a href="https://github.com/JetBrains/ideavim">Vim emulation plug-in for IDEs based on the IntelliJ platform</a></li>
<li><a href="https://github.com/JetBrains/ideolog">Interactive viewer for ‘.log’ files</a></li>
</ul>
</blockquote>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><blockquote>
<ul>
<li><a href="https://laracasts.com/series/how-to-be-awesome-in-phpstorm">Be Awesome in PHPStorm</a></li>
<li><a href="https://www.jetbrains.com/phpstorm/documentation/phpstorm-video-tutorials.html">Getting Started</a></li>
</ul>
</blockquote>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/zhangjianqiang/articles/5716768.html">优化 phpstorm 运行卡顿问题</a></li>
<li><a href="https://gist.github.com/paranoidjk/36891e7e117a86aa01ee">phpstorm 在 mac 上卡顿</a></li>
<li><a href="https://www.zhihu.com/question/35203203">mac 下 intellij idea 变得特别卡该如何解决</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>devtools</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>devtools</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 范围中的重叠关系</title>
    <url>/2018/05/02/php-range-overlap/</url>
    <content><![CDATA[<p>这篇算是最近写了一堆 <code>bug</code> 后的反省吧，日常开发中，我们总是要处理各种边界问题，尤为常见的就是给定一组范围，判断给定的范围是否在目标范围之内或者之外或者重叠之类的。这一类的判断情况稍不注意就容易滋生 <code>bug</code>，既然我已经中枪了，那么我就来说说这个情况如何处理。</p>
<span id="more"></span>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>检查给定的一组范围的任意一个端点是否在目标范围之内</p>
<p>根据这个问题，我们马上想到这个要确定两种情况：</p>
<ul>
<li>包含端点本身，即某个端点只要重叠就算，比如：<code>[1, 2]</code> 在 <code>[2, 3]</code> 端点之内，重叠部分为 <code>2</code></li>
<li>不包含端点本身，即使有重叠的端点也不能算，比如：<code>[1, 2]</code> 不在 <code>[2, 3]</code> 端点之内，虽然有重叠部分，抱歉的是此 <code>2</code> 非彼 <code>2</code></li>
</ul>
<p>至于包不包含端点本身，视具体的情况而定</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Range</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$source</span> = [<span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">        <span class="variable">$target</span> = [<span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包含端点重叠的情况。</span></span><br><span class="line">        <span class="variable">$overlapWith</span> = <span class="built_in">self</span>::overlapWith(<span class="variable">$source</span>, <span class="variable">$target</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不包含端点重叠的情况。</span></span><br><span class="line">        <span class="variable">$nonOverlapWith</span> = <span class="built_in">self</span>::overlapWith(<span class="variable">$source</span>, <span class="variable">$target</span>);</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="variable">$overlapWith</span>, <span class="variable">$nonOverlapWith</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否给定的范围包含在目标范围中。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool  $overlap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">overlapWith</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$source</span>, <span class="keyword">array</span> <span class="variable">$target</span>, <span class="variable">$overlap</span> = <span class="literal">false</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(<span class="variable">$source</span>);</span><br><span class="line">        sort(<span class="variable">$target</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$overlap</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">self</span>::includeOverlap(<span class="variable">$source</span>, <span class="variable">$target</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::exclusiveOverlap(<span class="variable">$source</span>, <span class="variable">$target</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">includeOverlap</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$source</span>, <span class="keyword">array</span> <span class="variable">$target</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        [<span class="variable">$begin</span>, <span class="variable">$end</span>] = <span class="variable">$source</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span>[<span class="number">1</span>] &lt; <span class="variable">$begin</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span>[<span class="number">0</span>] &gt; <span class="variable">$end</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">exclusiveOverlap</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$source</span>, <span class="keyword">array</span> <span class="variable">$target</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        [<span class="variable">$begin</span>, <span class="variable">$end</span>] = <span class="variable">$source</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span>[<span class="number">1</span>] &lt;= <span class="variable">$begin</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span>[<span class="number">0</span>] &gt;= <span class="variable">$end</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Range::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP7 中的 list</title>
    <url>/2018/03/01/php-php7-list/</url>
    <content><![CDATA[<p>在 PHP 5.4 之前定义数组只能用 <code>array()</code>，但在 PHP 5.4 之后可以用 <code>[]</code>，这个真是方便了太多，顺便还省了 5 个字符。像 <code>array()</code> 一样，<code>list()</code> 不是真正的函数，而是语言结构。<code>list()</code> 可以在单次操作内就为一组变量赋值。</p>
<h1 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h1><blockquote>
<ul>
<li>PHP 5 里，<code>list()</code> 从最右边的参数开始赋值；PHP 7 里，<code>list()</code> 从最左边的参数开始赋值</li>
<li>出现在左值中的 <code>[]</code> 并不是数组的简写，是 <code>list()</code> 的简写</li>
</ul>
</blockquote>
<ul>
<li><a href="http://php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.variable-handling.list.order">赋值操作的顺序发生了变化</a></li>
<li><a href="http://php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.variable-handling.list.empty">list() 表达式不再可以完全为空</a></li>
<li><a href="http://php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.variable-handling.list.string">    字符串无法再被拆包（unpack）</a></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$hello</span>, <span class="variable">$world</span>) = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$hello</span>, <span class="variable">$world</span>);</span><br><span class="line"></span><br><span class="line">[<span class="variable">$new</span>, <span class="variable">$old</span>] = [<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$new</span>, <span class="variable">$old</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;new&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;old&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">[<span class="variable">$a</span>[<span class="number">0</span>], <span class="variable">$a</span>[<span class="number">1</span>], <span class="variable">$a</span>[<span class="number">2</span>]] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;!&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;world&quot;</span></span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="互相嵌套"><a href="#互相嵌套" class="headerlink" title="互相嵌套"></a>互相嵌套</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不合法</span></span><br><span class="line"><span class="keyword">list</span>([<span class="variable">$a</span>, <span class="variable">$b</span>], [<span class="variable">$c</span>, <span class="variable">$d</span>]) = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不合法</span></span><br><span class="line">[<span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>), <span class="keyword">list</span>(<span class="variable">$c</span>, <span class="variable">$d</span>)] = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合法</span></span><br><span class="line">[[<span class="variable">$a</span>, <span class="variable">$b</span>], [<span class="variable">$c</span>, <span class="variable">$d</span>]] = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br></pre></td></tr></table></figure>
<h1 id="循环中使用"><a href="#循环中使用" class="headerlink" title="循环中使用"></a>循环中使用</h1><h2 id="顺序索引"><a href="#顺序索引" class="headerlink" title="顺序索引"></a>顺序索引</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], [<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; [<span class="variable">$x</span>, <span class="variable">$y</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> sprintf(<span class="string">&#x27;第 %d 次循环的值：&#x27;</span>, <span class="variable">$key</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>, <span class="string">&#x27;-&gt;&#x27;</span>, <span class="variable">$y</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">第 <span class="number">1</span> 次循环的值：a-&gt;b</span><br><span class="line">第 <span class="number">2</span> 次循环的值：c-&gt;d</span><br><span class="line">第 <span class="number">3</span> 次循环的值：e-&gt;f</span><br></pre></td></tr></table></figure>
<h2 id="指定索引"><a href="#指定索引" class="headerlink" title="指定索引"></a>指定索引</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    [<span class="string">&#x27;x&#x27;</span> =&gt; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;x&#x27;</span> =&gt; <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;x&#x27;</span> =&gt; <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; [<span class="string">&#x27;x&#x27;</span> =&gt; <span class="variable">$x</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="variable">$y</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> sprintf(<span class="string">&#x27;第 %d 次循环的值：&#x27;</span>, <span class="variable">$key</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>, <span class="string">&#x27;-&gt;&#x27;</span>, <span class="variable">$y</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">第 <span class="number">1</span> 次循环的值：a-&gt;b</span><br><span class="line">第 <span class="number">2</span> 次循环的值：c-&gt;d</span><br><span class="line">第 <span class="number">3</span> 次循环的值：e-&gt;f</span><br></pre></td></tr></table></figure>
<h1 id="允许指定键"><a href="#允许指定键" class="headerlink" title="允许指定键"></a>允许指定键</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;x&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span> =&gt; <span class="number">3</span>];</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span> =&gt; <span class="variable">$x</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="variable">$y</span>, <span class="string">&#x27;z&#x27;</span> =&gt; <span class="variable">$z</span>] = <span class="variable">$array</span>;</span><br><span class="line">var_dump(<span class="variable">$x</span>, <span class="variable">$y</span>, <span class="variable">$z</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$array</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"><span class="variable">$y</span> = <span class="variable">$array</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line"><span class="variable">$z</span> = <span class="variable">$array</span>[<span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h1 id="调整顺序"><a href="#调整顺序" class="headerlink" title="调整顺序"></a>调整顺序</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP 5 会报 PHP Notice:  Undefined offset: 0...</span></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>) = [<span class="number">1</span> =&gt; <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span> =&gt; <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP 7 处理起来不费吹灰之力</span></span><br><span class="line">[<span class="number">10</span> =&gt; <span class="variable">$a</span>, <span class="number">11</span> =&gt; <span class="variable">$b</span>, <span class="number">12</span> =&gt; <span class="variable">$c</span>] = [<span class="number">10</span> =&gt; <span class="string">&#x27;a&#x27;</span>, <span class="number">11</span> =&gt; <span class="string">&#x27;b&#x27;</span>, <span class="number">12</span> =&gt; <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="混合键"><a href="#混合键" class="headerlink" title="混合键"></a>混合键</h1><blockquote>
<p>PHP 7 中 <code>list()</code> 支持混合形式的 <code>key</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP 5 会报 PHP Notice:  Undefined offset: 0...</span></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>) = [<span class="number">1</span> =&gt; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span> =&gt; <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span> =&gt; <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP 7 处理起来毫无压力</span></span><br><span class="line"></span><br><span class="line">[<span class="number">10</span> =&gt; <span class="variable">$a</span>, <span class="string">&#x27;x&#x27;</span> =&gt; <span class="variable">$b</span>, <span class="number">12</span> =&gt; <span class="variable">$c</span>] = [<span class="number">10</span> =&gt; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span> =&gt; <span class="string">&#x27;b&#x27;</span>, <span class="number">12</span> =&gt; <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="复合形式"><a href="#复合形式" class="headerlink" title="复合形式"></a>复合形式</h1><h2 id="键名一致"><a href="#键名一致" class="headerlink" title="键名一致"></a>键名一致</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    [<span class="string">&#x27;m&#x27;</span> =&gt; <span class="number">11</span>, <span class="string">&#x27;n&#x27;</span> =&gt; <span class="number">22</span>],</span><br><span class="line">    [<span class="string">&#x27;m&#x27;</span> =&gt; <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;n&#x27;</span> =&gt; <span class="string">&#x27;world&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;m&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;n&#x27;</span> =&gt; <span class="literal">false</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    [<span class="string">&#x27;m&#x27;</span> =&gt; <span class="variable">$m1</span>, <span class="string">&#x27;n&#x27;</span> =&gt; <span class="variable">$n1</span>],</span><br><span class="line">    [<span class="string">&#x27;m&#x27;</span> =&gt; <span class="variable">$m2</span>, <span class="string">&#x27;n&#x27;</span> =&gt; <span class="variable">$n2</span>],</span><br><span class="line">    [<span class="string">&#x27;m&#x27;</span> =&gt; <span class="variable">$m3</span>, <span class="string">&#x27;n&#x27;</span> =&gt; <span class="variable">$n3</span>],</span><br><span class="line">]</span><br><span class="line">    = <span class="variable">$array</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">&quot;<span class="subst">$m1</span> <span class="subst">$n1</span>&quot;</span>, <span class="string">&quot;<span class="subst">$m2</span> <span class="subst">$n2</span>&quot;</span>, <span class="string">&quot;<span class="subst">$m3</span> <span class="subst">$n3</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;11 22&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;1 &quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="键名不同"><a href="#键名不同" class="headerlink" title="键名不同"></a>键名不同</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span> =&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span> =&gt; [<span class="literal">true</span>, <span class="literal">false</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;x&#x27;</span> =&gt; [<span class="variable">$a</span>, <span class="variable">$b</span>], <span class="string">&#x27;y&#x27;</span> =&gt; [<span class="variable">$c</span>, <span class="variable">$d</span>], <span class="string">&#x27;z&#x27;</span> =&gt; [<span class="variable">$e</span>, <span class="variable">$f</span>]] = <span class="variable">$array</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">&quot;<span class="subst">$a</span> <span class="subst">$b</span>&quot;</span>, <span class="string">&quot;<span class="subst">$c</span> <span class="subst">$d</span>&quot;</span>, <span class="string">&quot;<span class="subst">$e</span> <span class="subst">$f</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;a b&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;1 2&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;1 &quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 选择排序</title>
    <url>/2018/04/18/php-selection-sort/</url>
    <content><![CDATA[<p>选择排序分为简单选择排序、树形选择排序和堆排序三类，此三类中，简单选择排序是最简单，也是最好理解的。</p>
<span id="more"></span>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>选择排序 - <code>Selection Sort</code>：是一种简单直观的排序算法。顾名思意，就是直接从待排序数组里选择一个最小(或最大)的数字，每次都拿一个最小数字出来，顺序放入新数组，直到全部拿完</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li>
<li>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾</li>
<li>以此类推，直到所有元素均排序完毕</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$position</span> = <span class="variable">$i</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span> + <span class="number">1</span>; <span class="variable">$j</span> &lt; <span class="variable">$count</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$array</span>[<span class="variable">$position</span>], <span class="variable">$array</span>[<span class="variable">$j</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable">$position</span> = <span class="variable">$j</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$position</span> !== <span class="variable">$i</span>) &#123;</span><br><span class="line">                <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$position</span>], <span class="variable">$array</span>[<span class="variable">$i</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SelectionSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">312</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">1124</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">1267</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">1884</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">2609</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">4177</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">4773</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">7728</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">8237</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">8963</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>树形选择排序 - <code>Tree Selection Sort</code>：又名锦标赛排序，是一种按照锦标赛的思想进行选择排序的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个算法目前搞不定，预留位置，待以后再实现</span></span><br></pre></td></tr></table></figure>
<h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>堆排序 - <code>Heap Sort</code>：是指利用堆这种数据结构所设计的一种排序算法。它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个算法目前搞不定，预留位置，待以后再实现</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 中发送 HTTP 请求的方式</title>
    <url>/2018/06/21/php-send-http-request/</url>
    <content><![CDATA[<p>通常情况下，我们发送 <code>HTTP</code> 请求采用 <code>PHP</code> 封装的 <code>cURL</code> 扩展函数来实现。</p>
<span id="more"></span>
<h2 id="cURL-方式"><a href="#cURL-方式" class="headerlink" title="cURL 方式"></a>cURL 方式</h2><h3 id="扩展函数实现"><a href="#扩展函数实现" class="headerlink" title="扩展函数实现"></a>扩展函数实现</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个 cURL 资源对象。</span></span><br><span class="line"><span class="variable">$curl</span> = curl_init();</span><br><span class="line"></span><br><span class="line"><span class="variable">$options</span> = [</span><br><span class="line">    <span class="comment">// True 将 curl_exec() 获取的信息以字符串返回，而不是直接输出。</span></span><br><span class="line">    CURLOPT_RETURNTRANSFER =&gt; <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用时不会将头文件的信息作为数据流输出。</span></span><br><span class="line">    CURLOPT_HEADER         =&gt; <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// True 时将会根据服务器返回 HTTP 头中的 &quot;Location: &quot; 重定向。</span></span><br><span class="line">    CURLOPT_FOLLOWLOCATION =&gt; <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果为空字符串 &quot;&quot;，会发送所有支持的编码类型。</span></span><br><span class="line">    CURLOPT_ENCODING       =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 HTTP 请求中包含一个 &quot;User-Agent: &quot; 头的字符串。</span></span><br><span class="line">    CURLOPT_USERAGENT      =&gt; <span class="string">&#x27;spider&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// True 时将根据 Location: 重定向时，自动设置 Header 中的 Referer: 信息。</span></span><br><span class="line">    CURLOPT_AUTOREFERER    =&gt; <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在尝试连接时等待的秒数。设置为 0，则无限等待。</span></span><br><span class="line">    CURLOPT_CONNECTTIMEOUT =&gt; <span class="number">120</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许 cURL 函数执行的最长秒数。</span></span><br><span class="line">    CURLOPT_TIMEOUT        =&gt; <span class="number">120</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定最多的 HTTP 重定向次数，这个选项是和 CURLOPT_FOLLOWLOCATION 一起使用的。</span></span><br><span class="line">    CURLOPT_MAXREDIRS      =&gt; <span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全部数据使用 HTTP 协议中的 &quot;POST&quot; 操作来发送。</span></span><br><span class="line">    CURLOPT_POSTFIELDS     =&gt; <span class="string">&#x27;phone=your-phone&amp;password=your-password&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// True 时会发送 POST 请求，类型为：application/x-www-form-urlencoded，是 HTML 表单提交时最常见的一种。</span></span><br><span class="line">    CURLOPT_POST           =&gt; <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用 cURL 验证对等证书。</span></span><br><span class="line">    CURLOPT_SSL_VERIFYPEER =&gt; <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不检查服务器 SSL 证书中的公用名。</span></span><br><span class="line">    CURLOPT_SSL_VERIFYHOST =&gt; <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// False 禁止 cURL 验证对等证书。</span></span><br><span class="line">    CURLOPT_SSL_VERIFYPEER =&gt; <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// True 会输出所有的信息，写入到 STDERR，或在 CURLOPT_STDERR 中指定的文件。</span></span><br><span class="line">    CURLOPT_VERBOSE        =&gt; <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置你需要抓取的 URL。</span></span><br><span class="line">    CURLOPT_URL            =&gt; <span class="string">&#x27;http://www.example.com/users/login&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多个 cURL 传输选项。</span></span><br><span class="line">curl_setopt_array(<span class="variable">$curl</span>, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 cURL，请求网页。</span></span><br><span class="line"><span class="variable">$content</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$response</span> = [</span><br><span class="line">    <span class="string">&#x27;errno&#x27;</span>   =&gt; curl_errno(<span class="variable">$curl</span>),</span><br><span class="line">    <span class="string">&#x27;errmsg&#x27;</span>  =&gt; curl_error(<span class="variable">$curl</span>),</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>  =&gt; curl_getinfo(<span class="variable">$curl</span>),</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$content</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 cURL 请求。</span></span><br><span class="line">curl_close(<span class="variable">$curl</span>);</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$response</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">*   Trying <span class="number">101.201</span>.xxx.xxx...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to www.example.com (<span class="number">101.201</span>.xxx.xxx) port <span class="number">80</span> (<span class="comment">#0)</span></span><br><span class="line">&gt; POST /users/login HTTP/<span class="number">1.1</span></span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: spider</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: deflate, gzip</span></span><br><span class="line"><span class="comment">Content-Length: 41</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* upload completely sent off: 41 out of 41 bytes</span></span><br><span class="line"><span class="comment">array(26) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;url&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(37) &quot;http://www.example.com/users/login&quot;</span></span><br><span class="line"><span class="comment">  [&quot;content_type&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(24) &quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line"><span class="comment">  [&quot;http_code&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(200)</span></span><br><span class="line"><span class="comment">  [&quot;header_size&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(463)</span></span><br><span class="line"><span class="comment">  [&quot;request_size&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(231)</span></span><br><span class="line"><span class="comment">  [&quot;filetime&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(-1)</span></span><br><span class="line"><span class="comment">  [&quot;ssl_verify_result&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(0)</span></span><br><span class="line"><span class="comment">  [&quot;redirect_count&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(0)</span></span><br><span class="line"><span class="comment">  [&quot;total_time&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(0.224392)</span></span><br><span class="line"><span class="comment">  [&quot;namelookup_time&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(0.015103)</span></span><br><span class="line"><span class="comment">  [&quot;connect_time&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(0.030847)</span></span><br><span class="line"><span class="comment">  [&quot;pretransfer_time&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(0.03103)</span></span><br><span class="line"><span class="comment">  [&quot;size_upload&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(41)</span></span><br><span class="line"><span class="comment">  [&quot;size_download&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(98)</span></span><br><span class="line"><span class="comment">  [&quot;speed_download&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(436)</span></span><br><span class="line"><span class="comment">  [&quot;speed_upload&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(182)</span></span><br><span class="line"><span class="comment">  [&quot;download_content_length&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(-1)</span></span><br><span class="line"><span class="comment">  [&quot;upload_content_length&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(41)</span></span><br><span class="line"><span class="comment">  [&quot;starttransfer_time&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(0.224266)</span></span><br><span class="line"><span class="comment">  [&quot;redirect_time&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  float(0)</span></span><br><span class="line"><span class="comment">  [&quot;redirect_url&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(0) &quot;&quot;</span></span><br><span class="line"><span class="comment">  [&quot;primary_ip&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(15) &quot;101.201.xxx.xxx&quot;</span></span><br><span class="line"><span class="comment">  [&quot;certinfo&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  array(0) &#123;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  [&quot;primary_port&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(80)</span></span><br><span class="line"><span class="comment">  [&quot;local_ip&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(14) &quot;192.168.xxx.xxx&quot;</span></span><br><span class="line"><span class="comment">  [&quot;local_port&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(52637)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&lt; HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment">&lt; Server: nginx</span></span><br><span class="line"><span class="comment">&lt; Date: Fri, 22 Jun 2018 01:43:45 GMT</span></span><br><span class="line"><span class="comment">&lt; Content-Type: text/html; charset=UTF-8</span></span><br><span class="line"><span class="comment">&lt; Transfer-Encoding: chunked</span></span><br><span class="line"><span class="comment">&lt; Connection: keep-alive</span></span><br><span class="line"><span class="comment">&lt; Vary: Accept-Encoding</span></span><br><span class="line"><span class="comment">&lt; Set-Cookie: SESSID=pau0p79qdallgaee2kcj963n16; expires=Fri, 22-Jun-2018 02:13:45 GMT; Max-Age=1800; path=/; HttpOnly</span></span><br><span class="line"><span class="comment">&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT</span></span><br><span class="line"><span class="comment">&lt; Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span></span><br><span class="line"><span class="comment">&lt; Pragma: no-cache</span></span><br><span class="line"><span class="comment">&lt; Content-Encoding: gzip</span></span><br><span class="line"><span class="comment">&lt;</span></span><br><span class="line"><span class="comment">* Connection #0 to host www.example.com left intact</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br></pre></td></tr></table></figure>
<h3 id="扩展包实现"><a href="#扩展包实现" class="headerlink" title="扩展包实现"></a>扩展包实现</h3><blockquote>
<ul>
<li><a href="https://github.com/guzzle/guzzle">Guzzle GitHub</a></li>
<li><a href="http://guzzlephp.org/">Guzzle Documentation</a></li>
</ul>
</blockquote>
<p>这里推荐使用 <code>Guzzle</code> 扩展包，诚实的说，也没有理由不使用它。<code>Guzzle</code> 是一个 <code>PHP HTTP</code> 客户端，可以轻松发送 <code>HTTP</code> 请求，并且可以轻松集成 <code>Web</code>服务。</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>用于构建查询字符串，<code>POST</code> 请求，流式传输大型上传，流式传输大型下载，使用 <code>HTTP cookie</code>，上传 <code>JSON</code> 数据等的简单接口，等等……</li>
<li>可以使用相同的接口发送同步和异步请求。</li>
<li>为请求，响应和流选择 <code>PSR-7</code> 接口。 这使您可以与 <code>Guzzle</code> 一起使用其他 <code>PSR-7</code> 兼容库。</li>
<li>抽象出底层的 <code>HTTP</code> 传输，允许您编写环境和传输不可知的代码; 即不依赖于 <code>cURL</code>，<code>PHP</code> 流，套接字或非阻塞事件循环。</li>
<li>中间件系统允许您增强和组合客户端行为。</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer require guzzlehttp/guzzle</span><br></pre></td></tr></table></figure>
<h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;../vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$client</span> = <span class="keyword">new</span> \GuzzleHttp\Client();</span><br><span class="line">    <span class="variable">$request</span> = <span class="variable">$client</span>-&gt;request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.github.com/repos/guzzle/guzzle&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (\GuzzleHttp\<span class="built_in">Exception</span>\GuzzleException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$response</span> = [</span><br><span class="line">    <span class="string">&#x27;status_code&#x27;</span>  =&gt; <span class="variable">$request</span>-&gt;getStatusCode(),</span><br><span class="line">    <span class="string">&#x27;content_type&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;getHeaderLine(<span class="string">&#x27;content-type&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>         =&gt; <span class="variable">$request</span>-&gt;getBody(),</span><br><span class="line">];</span><br><span class="line">print_r(<span class="variable">$response</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送一个异步请求。</span></span><br><span class="line"><span class="variable">$request</span> = <span class="keyword">new</span> \GuzzleHttp\Psr7\Request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://www.baidu.com&#x27;</span>);</span><br><span class="line"><span class="variable">$promise</span> = <span class="variable">$client</span>-&gt;sendAsync(<span class="variable">$request</span>)-&gt;then(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$response</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL, <span class="string">&#x27;I completed! &#x27;</span>, PHP_EOL, <span class="variable">$response</span>-&gt;getBody();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$promise</span>-&gt;wait();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [status_code] =&gt; <span class="number">200</span></span><br><span class="line">    [content_type] =&gt; application/json; charset=utf-<span class="number">8</span></span><br><span class="line">    [body] =&gt; GuzzleHttp\Psr7\Stream <span class="keyword">Object</span></span><br><span class="line">        (</span><br><span class="line">            [stream:GuzzleHttp\Psr7\Stream:<span class="keyword">private</span>] =&gt; Resource id <span class="comment">#42</span></span><br><span class="line">            [size:GuzzleHttp\Psr7\Stream:<span class="keyword">private</span>] =&gt;</span><br><span class="line">            [seekable:GuzzleHttp\Psr7\Stream:<span class="keyword">private</span>] =&gt; <span class="number">1</span></span><br><span class="line">            [readable:GuzzleHttp\Psr7\Stream:<span class="keyword">private</span>] =&gt; <span class="number">1</span></span><br><span class="line">            [writable:GuzzleHttp\Psr7\Stream:<span class="keyword">private</span>] =&gt; <span class="number">1</span></span><br><span class="line">            [uri:GuzzleHttp\Psr7\Stream:<span class="keyword">private</span>] =&gt; php:<span class="comment">//temp</span></span><br><span class="line">            [customMetadata:GuzzleHttp\Psr7\Stream:<span class="keyword">private</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                (</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">I completed!</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		location.replace(location.href.replace(<span class="string">&quot;https://&quot;</span>,<span class="string">&quot;http://&quot;</span>));</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;noscript&gt;&lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;0;url=http://www.baidu.com/&quot;</span>&gt;&lt;/noscript&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Stream-方式"><a href="#Stream-方式" class="headerlink" title="Stream 方式"></a>Stream 方式</h2><blockquote>
<p><a href="http://laravelacademy.org/post/7459.html">Stream 的概述与使用详解</a></p>
</blockquote>
<h3 id="PHP-内置的-Stream-包装类"><a href="#PHP-内置的-Stream-包装类" class="headerlink" title="PHP 内置的 Stream 包装类"></a>PHP 内置的 Stream 包装类</h3><h4 id="获取已注册的套接字传输协议列表"><a href="#获取已注册的套接字传输协议列表" class="headerlink" title="获取已注册的套接字传输协议列表"></a>获取已注册的套接字传输协议列表</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">print_r(stream_get_transports());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; tcp</span><br><span class="line">    [<span class="number">1</span>] =&gt; udp</span><br><span class="line">    [<span class="number">2</span>] =&gt; unix</span><br><span class="line">    [<span class="number">3</span>] =&gt; udg</span><br><span class="line">    [<span class="number">4</span>] =&gt; ssl</span><br><span class="line">    [<span class="number">5</span>] =&gt; tls</span><br><span class="line">    [<span class="number">6</span>] =&gt; tlsv1.<span class="number">0</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; tlsv1.<span class="number">1</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; tlsv1.<span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="获取已注册的流类型"><a href="#获取已注册的流类型" class="headerlink" title="获取已注册的流类型"></a>获取已注册的流类型</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">print_r(stream_get_wrappers());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; https</span><br><span class="line">    [<span class="number">1</span>] =&gt; ftps</span><br><span class="line">    [<span class="number">2</span>] =&gt; compress.zlib</span><br><span class="line">    [<span class="number">3</span>] =&gt; compress.bzip2</span><br><span class="line">    [<span class="number">4</span>] =&gt; php</span><br><span class="line">    [<span class="number">5</span>] =&gt; file</span><br><span class="line">    [<span class="number">6</span>] =&gt; glob</span><br><span class="line">    [<span class="number">7</span>] =&gt; data</span><br><span class="line">    [<span class="number">8</span>] =&gt; http</span><br><span class="line">    [<span class="number">9</span>] =&gt; ftp</span><br><span class="line">    [<span class="number">10</span>] =&gt; phar</span><br><span class="line">    [<span class="number">11</span>] =&gt; zip</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="获取已注册的数据流过滤器列表"><a href="#获取已注册的数据流过滤器列表" class="headerlink" title="获取已注册的数据流过滤器列表"></a>获取已注册的数据流过滤器列表</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">print_r(stream_get_filters());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; zlib.*</span><br><span class="line">    [<span class="number">1</span>] =&gt; bzip2.*</span><br><span class="line">    [<span class="number">2</span>] =&gt; convert.iconv.*</span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="keyword">string</span>.rot13</span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="keyword">string</span>.toupper</span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="keyword">string</span>.tolower</span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="keyword">string</span>.strip_tags</span><br><span class="line">    [<span class="number">7</span>] =&gt; convert.*</span><br><span class="line">    [<span class="number">8</span>] =&gt; consumed</span><br><span class="line">    [<span class="number">9</span>] =&gt; dechunk</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="流上下文"><a href="#流上下文" class="headerlink" title="流上下文"></a>流上下文</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;phone&#x27;</span> =&gt; <span class="string">&#x27;your-phone&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;your-password&#x27;</span>, <span class="string">&#x27;sign&#x27;</span> =&gt; <span class="string">&#x27;your-sign&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = http_build_query(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$options</span> = [</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>  =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;header&#x27;</span>  =&gt; <span class="string">&#x27;Content-type: application/x-www-form-urlencoded\r\nContent-length:&#x27;</span> . mb_strlen(<span class="variable">$data</span>) . <span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$data</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"><span class="variable">$context</span> = stream_context_create(<span class="variable">$options</span>);</span><br><span class="line"><span class="variable">$result</span> = file_get_contents(<span class="string">&#x27;http://www.example.com/users/login&#x27;</span>, <span class="literal">false</span>, <span class="variable">$context</span>);</span><br><span class="line"><span class="variable">$result</span> = json_decode(<span class="variable">$result</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">print_r(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [status] =&gt;</span><br><span class="line">    [msg] =&gt; 账号不存在或被禁用</span><br><span class="line">    [data] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="流过滤器"><a href="#流过滤器" class="headerlink" title="流过滤器"></a>流过滤器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ touch test.txt</span><br><span class="line">$ vim test.txt</span><br><span class="line">HELLO</span><br><span class="line">WORLD</span><br><span class="line">THIS IS A TEST</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$handle</span> = fopen(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">stream_filter_append(<span class="variable">$handle</span>, <span class="string">&#x27;string.tolower&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (feof(<span class="variable">$handle</span>) !== <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> fgets(<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br><span class="line">fclose(<span class="variable">$handle</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure>
<h2 id="Socket-方式"><a href="#Socket-方式" class="headerlink" title="Socket 方式"></a>Socket 方式</h2><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span> = fsockopen(<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Host: www.baidu.com\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (! feof(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> fgets(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Content-Length: <span class="number">14615</span></span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Fri, <span class="number">22</span> Jun <span class="number">2018</span> <span class="number">03</span>:<span class="number">07</span>:<span class="number">09</span> GMT</span><br><span class="line">Last-Modified: Mon, <span class="number">11</span> Jun <span class="number">2018</span> <span class="number">11</span>:<span class="number">19</span>:<span class="number">00</span> GMT</span><br><span class="line">P3p: CP=<span class="string">&quot; OTI DSP COR IVA OUR IND COM &quot;</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: BWS/<span class="number">1.1</span></span><br><span class="line">Set-Cookie: BAIDUID=CB118091B64A7DB3972039E431BB631D:FG=<span class="number">1</span>; expires=Thu, <span class="number">31</span>-Dec-<span class="number">37</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">55</span> GMT; max-age=<span class="number">2147483647</span>; path=/; domain=.baidu.com</span><br><span class="line">Set-Cookie: BIDUPSID=CB118091B64A7DB3972039E431BB631D; expires=Thu, <span class="number">31</span>-Dec-<span class="number">37</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">55</span> GMT; max-age=<span class="number">2147483647</span>; path=/; domain=.baidu.com</span><br><span class="line">Set-Cookie: PSTM=<span class="number">1529636829</span>; expires=Thu, <span class="number">31</span>-Dec-<span class="number">37</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">55</span> GMT; max-age=<span class="number">2147483647</span>; path=/; domain=.baidu.com</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Ua-Compatible: IE=Edge,chrome=<span class="number">1</span></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;...&lt;/head&gt;</span><br><span class="line">&lt;body&gt;...&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="简单通信"><a href="#简单通信" class="headerlink" title="简单通信"></a>简单通信</h3><p>创建 TCP Socket 服务器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">ob_implicit_flush();</span><br><span class="line"></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$port</span> = <span class="number">9004</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 TCP Socket。</span></span><br><span class="line"><span class="variable">$socket</span> = socket_create(</span><br><span class="line">    AF_INET,</span><br><span class="line">    SOCK_STREAM,</span><br><span class="line">    SOL_TCP</span><br><span class="line">) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;socket_create() failed: &#x27;</span> . socket_strerror(socket_last_error()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在套接字资源上设置阻塞模式。</span></span><br><span class="line">socket_set_block(<span class="variable">$socket</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;socket_set_block() failed: &#x27;</span> . socket_strerror(socket_last_error(<span class="variable">$socket</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给套接字绑定名字。</span></span><br><span class="line">socket_bind(<span class="variable">$socket</span>, <span class="variable">$host</span>, <span class="variable">$port</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;socket_bind() failed: &#x27;</span> . socket_strerror(socket_last_error(<span class="variable">$socket</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听套接字上的连接。</span></span><br><span class="line">socket_listen(<span class="variable">$socket</span>, <span class="number">5</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;socket_listen() failed: &#x27;</span> . socket_strerror(socket_last_error(<span class="variable">$socket</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Listening the socket on <span class="subst">$host</span>:<span class="subst">$port</span> ... &quot;</span>, PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="variable">$clientId</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$client</span> = socket_accept(<span class="variable">$socket</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;socket_accept() failed: &#x27;</span> . socket_strerror(socket_last_error(<span class="variable">$client</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$clientId</span>++;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Client #&#x27;</span> . <span class="variable">$clientId</span> . <span class="string">&#x27;: Connect&#x27;</span>, PHP_EOL;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$welcome</span> = <span class="string">&quot;\nWelcome to the PHP Socket Server. \n&quot;</span> .</span><br><span class="line">        <span class="string">&quot;To quit client type &#x27;quit&#x27;. To shut down the server type &#x27;shutdown&#x27;.\n&quot;</span>;</span><br><span class="line">    socket_write(<span class="variable">$client</span>, <span class="variable">$welcome</span>, strlen(<span class="variable">$welcome</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$curBuf</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === (<span class="variable">$buf</span> = socket_read(<span class="variable">$client</span>, <span class="number">2048</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;socket_read() failed: &#x27;</span> . socket_strerror(socket_last_error(<span class="variable">$client</span>)) . PHP_EOL;</span><br><span class="line">            <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$buf</span> === <span class="string">&quot;\r\n&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$curBuf</span> === <span class="string">&quot;quit\r\n&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Client #&#x27;</span> . <span class="variable">$clientId</span> . <span class="string">&#x27;: Disconnect&#x27;</span>, PHP_EOL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$curBuf</span> === <span class="string">&quot;shutdown\r\n&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Client #&#x27;</span> . <span class="variable">$clientId</span> . <span class="string">&#x27;: Shutdown server&#x27;</span>, PHP_EOL;</span><br><span class="line">                socket_close(<span class="variable">$client</span>);</span><br><span class="line">                <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$buffer</span> = <span class="string">&#x27;Output: &#x27;</span> . ucwords(str_replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&#x27; &#x27;</span>, <span class="variable">$curBuf</span>)) . PHP_EOL;</span><br><span class="line">                socket_write(<span class="variable">$client</span>, <span class="variable">$buffer</span>, strlen(<span class="variable">$buffer</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Client #&#x27;</span> . <span class="variable">$clientId</span> . <span class="string">&#x27;: &#x27;</span> . <span class="variable">$curBuf</span> . PHP_EOL;</span><br><span class="line">            <span class="variable">$curBuf</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$curBuf</span> .= <span class="variable">$buf</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    socket_close(<span class="variable">$client</span>);</span><br><span class="line">&#125;</span><br><span class="line">socket_close(<span class="variable">$socket</span>);</span><br></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php server.php</span><br><span class="line"></span><br><span class="line">// 重启一个终端窗口，安装 telnet</span><br><span class="line">$ brew install telnet</span><br><span class="line"></span><br><span class="line">// 使用 telnet 进行测试</span><br><span class="line">$ telnet 127.0.0.1 9004</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 中的浅克隆和深克隆</title>
    <url>/2018/04/27/php-shallow-and-deep-clone/</url>
    <content><![CDATA[<p>变量有值传递和引用传递，其实，对象也如此，所以，对象有浅克隆和深克隆这么一说。浅克隆也叫浅复制或浅拷贝，深克隆也叫深复制或深拷贝。唉，名称复名称，名称何其多？</p>
<span id="more"></span>
<h1 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h1><blockquote>
<p><a href="http://php.net/manual/zh/language.references.php">引用的解释，官方说的最靠谱</a></p>
</blockquote>
<div class="note danger">
            <p>自 <code>PHP 5</code> 起，<code>new</code> 运算符自动返回一个引用</p>
          </div>
<p>浅克隆在赋值时，引用赋值，相当于取了一个别名。对其中一个的修改，会影响到另一个</p>
<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack1</span> = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="variable">$jack1</span>-&gt;setName(<span class="string">&#x27;Jack 1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack2</span> = <span class="variable">$jack1</span>;</span><br><span class="line"><span class="variable">$jack2</span>-&gt;setName(<span class="string">&#x27;Jack 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$jack1</span>);</span><br><span class="line">var_dump(<span class="variable">$jack2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>#1 (1) </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$name</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Jack 2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>#1 (1) </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$name</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Jack 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在以上的场景中，无论你修改哪个 <code>Jack</code>，都会影响到另一个对象，当然我这样说，可能有些人不服，比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack1</span> = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="variable">$jack1</span>-&gt;setName(<span class="string">&#x27;Jack 1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$jack1</span>); <span class="comment">// 这儿调整了下执行顺序</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$jack2</span> = <span class="variable">$jack1</span>;</span><br><span class="line"><span class="variable">$jack2</span>-&gt;setName(<span class="string">&#x27;Jack 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$jack2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>#1 (1) </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$name</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Jack 1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>#1 (1) </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$name</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Jack 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到了吗？两个 <code>Jack</code> 的学生名称就是不一样。感觉像是被打脸了，如果你再 <code>$jack2</code> 赋值后再打印一下 <code>$jack1</code> 试试，看谁能笑到最后</p>
<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><div class="note danger">
            <p>使用 <code>clone</code> 操作复制对象时，当被复制的对象有对其它对象的引用的时候，引用的对象将不会被复制</p>
          </div>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Administration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$classLeader</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setClassLeader</span>(<span class="params">Student <span class="variable">$student</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;classLeader = <span class="variable">$student</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Student</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassLeader</span>(<span class="params"></span>): <span class="title">Student</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classLeader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="variable">$jack</span>-&gt;setName(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$admin1</span> = <span class="keyword">new</span> Administration();</span><br><span class="line"><span class="variable">$admin1</span>-&gt;setClassLeader(<span class="variable">$jack</span>);</span><br><span class="line"><span class="variable">$admin2</span> = <span class="keyword">clone</span> <span class="variable">$admin1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$admin2</span>-&gt;getClassLeader()-&gt;setName(<span class="string">&#x27;Lucy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$admin1</span>-&gt;getClassLeader()-&gt;getName(), PHP_EOL, <span class="variable">$admin2</span>-&gt;getClassLeader()-&gt;getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Lucy</span><br><span class="line">Lucy</span><br></pre></td></tr></table></figure>
<p>操蛋呀，<code>$admin1-&gt;getClassLeader()</code> 和 <code>$admin2-&gt;getClassLeader()</code> 居然都指向同一个对象。但 <code>$admin1</code> 和 <code>$admin2</code> 都是货真价实的两个独立对象，唯一的遗憾是他们的属性出卖了他们，看来这也是个浅复制</p>
<p>所以，浅克隆时，被赋值对象的所有变量都还与原来对象有相同的值，而所有的对其他对象的引用都仍然指向原来的对象</p>
<h1 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>基于魔术变量 <code>__clone()</code> 的实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Administration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$classLeader</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;classLeader = <span class="keyword">clone</span> <span class="keyword">$this</span>-&gt;classLeader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setClassLeader</span>(<span class="params">Student <span class="variable">$student</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;classLeader = <span class="variable">$student</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Student</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassLeader</span>(<span class="params"></span>): <span class="title">Student</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classLeader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="variable">$jack</span>-&gt;setName(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$admin1</span> = <span class="keyword">new</span> Administration();</span><br><span class="line"><span class="variable">$admin1</span>-&gt;setClassLeader(<span class="variable">$jack</span>);</span><br><span class="line"><span class="variable">$admin2</span> = <span class="keyword">clone</span> <span class="variable">$admin1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$admin2</span>-&gt;getClassLeader()-&gt;setName(<span class="string">&#x27;Lucy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="variable">$admin1</span>-&gt;getClassLeader()-&gt;getName();</span><br><span class="line"><span class="keyword">print</span> PHP_EOL;</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$admin2</span>-&gt;getClassLeader()-&gt;getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Jack</span><br><span class="line">Lucy</span><br></pre></td></tr></table></figure>
<h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>利用串行化做深复制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Administration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$classLeader</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setClassLeader</span>(<span class="params">Student <span class="variable">$student</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;classLeader = <span class="variable">$student</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Student</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassLeader</span>(<span class="params"></span>): <span class="title">Student</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classLeader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="variable">$jack</span>-&gt;setName(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$admin1</span> = <span class="keyword">new</span> Administration();</span><br><span class="line"><span class="variable">$admin1</span>-&gt;setClassLeader(<span class="variable">$jack</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> \Administration $admin2 */</span></span><br><span class="line"><span class="variable">$admin2</span> = unserialize(serialize(<span class="variable">$admin1</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$admin2</span>-&gt;getClassLeader()-&gt;setName(<span class="string">&#x27;Lucy&#x27;</span>);</span><br><span class="line"></span><br><span class="line">print_r([</span><br><span class="line">    <span class="variable">$admin1</span>-&gt;getClassLeader()-&gt;getName(),</span><br><span class="line">    <span class="variable">$admin2</span>-&gt;getClassLeader()-&gt;getName(),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; Jack</span><br><span class="line">    [<span class="number">1</span>] =&gt; Lucy</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>当然，利用串行化的这种方案也可以封装到 <code>__clone()</code> 方法中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">$this</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_object(<span class="variable">$val</span>) || (\is_array(<span class="variable">$val</span>))) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="variable">$key</span>&#125; = unserialize(serialize(<span class="variable">$val</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，深克隆把引用对象的变量指向复制过的新对象，而不是原有的被引用的对象</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Swoole 起步</title>
    <url>/2019/10/27/php-swoole-get-started/</url>
    <content><![CDATA[<p><img src="/images/2019/201910271404.png" alt="201910271404.png"></p>
<p>Swoole 虽然是标准的 PHP 扩展，实际上与普通的扩展不同。普通的扩展只是提供一个库函数。而 Swoole 扩展在运行后会接管 PHP 的控制权，进入事件循环。当 IO 事件发生后底层会自动回调指定的 PHP 函数。说它重新定义了 PHP，一点也不夸张。</p>
<span id="more"></span>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li><a href="https://www.swoole.co.uk">Coroutine asynchronous programming framework for PHP</a></li>
<li><a href="https://www.swoole.com/">Swoole：面向生产环境的 PHP 协程框架</a></li>
<li><a href="https://linkeddestiny.gitbooks.io/easy-swoole/content/">Easy Swoole</a></li>
<li><a href="https://wiki.swoole.com/wiki/page/1.html">Swoole Wiki</a></li>
<li><a href="https://www.zhihu.com/question/35687627">Swoole 到底是个什么东西？</a></li>
</ul>
<p><a href="https://www.swoole.co.uk/">Swoole</a> 是面向生产环境的 PHP 协程框架。使 PHP 开发人员可以编写高性能的协程 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install vim -y &amp;&amp; \</span><br><span class="line">apt-get install openssl -y &amp;&amp; \</span><br><span class="line">apt-get install libssl-dev -y &amp;&amp; \</span><br><span class="line">apt-get install wget -y &amp;&amp; \</span><br><span class="line">apt-get install git -y &amp;&amp; \</span><br><span class="line">apt-get install procps -y &amp;&amp; \</span><br><span class="line">apt-get install htop -y</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src &amp;&amp; \</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/swoole/swoole-src.git &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> swoole-src &amp;&amp; \</span><br><span class="line">git checkout v4.4.8 &amp;&amp; \</span><br><span class="line">phpize &amp;&amp; \</span><br><span class="line">./configure --enable-openssl &amp;&amp; \</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">touch /usr/<span class="built_in">local</span>/etc/php/conf.d/swoole.ini &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;extension=swoole.so&#x27;</span> &gt; /usr/<span class="built_in">local</span>/etc/php/conf.d/swoole.ini</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="创建-HTTP-服务器"><a href="#创建-HTTP-服务器" class="headerlink" title="创建 HTTP 服务器"></a>创建 HTTP 服务器</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span> = <span class="keyword">new</span> \Swoole\Http\Server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>);</span><br><span class="line"><span class="variable">$http</span>-&gt;on(<span class="string">&#x27;start&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$server</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Swoole http server is started at http://127.0.0.1:8080\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$http</span>-&gt;on(<span class="string">&#x27;request&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$request</span>, <span class="variable">$response</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$response</span>-&gt;header(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">    <span class="variable">$response</span>-&gt;end(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$http</span>-&gt;start();</span><br></pre></td></tr></table></figure>
<h2 id="创建-WebSocket-服务器"><a href="#创建-WebSocket-服务器" class="headerlink" title="创建 WebSocket 服务器"></a>创建 WebSocket 服务器</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$websocket</span> = <span class="keyword">new</span> \Swoole\WebSocket\Server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>);</span><br><span class="line"><span class="variable">$websocket</span>-&gt;on(<span class="string">&#x27;open&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$server</span>, <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection open: <span class="subst">&#123;$request-&gt;fd&#125;</span>\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$websocket</span>-&gt;on(<span class="string">&#x27;message&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$server</span>, <span class="variable">$frame</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Received message: <span class="subst">&#123;$frame-&gt;data&#125;</span>\n&quot;</span>;</span><br><span class="line">    <span class="variable">$server</span>-&gt;push(<span class="variable">$frame</span>-&gt;fd, json_encode([<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$websocket</span>-&gt;on(<span class="string">&#x27;close&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$server</span>, <span class="variable">$fd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection close: <span class="subst">&#123;$fd&#125;</span>\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$websocket</span>-&gt;start();</span><br></pre></td></tr></table></figure>
<h2 id="创建-TCP-服务器"><a href="#创建-TCP-服务器" class="headerlink" title="创建 TCP 服务器"></a>创建 TCP 服务器</h2><p>TCP 服务器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$server</span> = <span class="keyword">new</span> \Swoole\Server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>);</span><br><span class="line"><span class="variable">$server</span>-&gt;on(<span class="string">&#x27;connect&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$server</span>, <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection open: <span class="subst">&#123;$request-&gt;fd&#125;</span>\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$server</span>-&gt;on(<span class="string">&#x27;receive&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$server</span>, <span class="variable">$fd</span>, <span class="variable">$id</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$server</span>-&gt;send(<span class="variable">$fd</span>, <span class="string">&quot;Swoole: <span class="subst">&#123;$data&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="variable">$server</span>-&gt;close(<span class="variable">$fd</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$server</span>-&gt;on(<span class="string">&#x27;close&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$server</span>, <span class="variable">$fd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection close: <span class="subst">&#123;$fd&#125;</span>\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$server</span>-&gt;start();</span><br></pre></td></tr></table></figure>
<p>TCP 客户端：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> \Swoole\Client(SWOOLE_SOCK_TCP, SWOOLE_SOCK_ASYNC);</span><br><span class="line"><span class="variable">$client</span>-&gt;on(<span class="string">&#x27;connect&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$client</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$client</span>-&gt;send(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$client</span>-&gt;on(<span class="string">&#x27;receive&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$client</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Received: <span class="subst">&#123;$data&#125;</span>\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$client</span>-&gt;on(<span class="string">&#x27;error&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$client</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection failed\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$client</span>-&gt;on(<span class="string">&#x27;close&#x27;</span>, <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$client</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection close\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$client</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li><code>error &quot;Enable openssl support, require openssl library.</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 确定 openssl 位置</span><br><span class="line"><span class="built_in">which</span> openssl</span><br><span class="line">/usr/<span class="built_in">local</span>/opt/openresty-openssl/bin/openssl</span><br><span class="line"></span><br><span class="line">// 安装 swoole 时指定 openssl 路径</span><br><span class="line">pecl install swoole</span><br><span class="line">downloading swoole-4.4.8.tgz ...</span><br><span class="line">Starting to download swoole-4.4.8.tgz (1,427,235 bytes)</span><br><span class="line">.........................................................................................................................................................................................................................................................................................<span class="keyword">done</span>: 1,427,235 bytes</span><br><span class="line">391 <span class="built_in">source</span> files, building</span><br><span class="line">running: phpize</span><br><span class="line">Configuring <span class="keyword">for</span>:</span><br><span class="line">PHP Api Version:         20180731</span><br><span class="line">Zend Module Api No:      20180731</span><br><span class="line">Zend Extension Api No:   320180731</span><br><span class="line"><span class="built_in">enable</span> sockets supports? [no] : yes</span><br><span class="line"><span class="built_in">enable</span> openssl support? [no] : yes --with-openssl-dir=/usr/<span class="built_in">local</span>/opt/openssl@1.1/bin/openssl</span><br><span class="line"><span class="built_in">enable</span> http2 support? [no] : yes</span><br><span class="line"><span class="built_in">enable</span> mysqlnd support? [no] : yes</span><br><span class="line">building <span class="keyword">in</span> /private/tmp/pear/temp/pear-build-majinyunwRSXz0/swoole-4.4.8</span><br><span class="line"></span><br><span class="line">// 安装成功信息</span><br><span class="line">Build process completed successfully</span><br><span class="line">Installing <span class="string">&#x27;/usr/local/Cellar/php/7.3.10/include/php/ext/swoole/config.h&#x27;</span></span><br><span class="line">Installing <span class="string">&#x27;/usr/local/Cellar/php/7.3.10/pecl/20180731/swoole.so&#x27;</span></span><br><span class="line">install ok: channel://pecl.php.net/swoole-4.4.8</span><br><span class="line">Extension swoole enabled <span class="keyword">in</span> php.ini</span><br></pre></td></tr></table></figure>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>swoole</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 遍历目录下的文件</title>
    <url>/2018/09/05/php-traversing-directory-files/</url>
    <content><![CDATA[<p><img src="/images/2019/201903151012.jpg" alt="201903151012.jpg"></p>
<p>♻️主要归功于 <strong>递归</strong> - <code>Recursion</code>，又译为递回，在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。递归一词还较常用于描述以自相似方法重复事物的过程。例如，当两面镜子相互之间近似平行时，镜中嵌套的图像是以无限递归的形式出现的。也可以理解为自我复制的过程（摘自维基百科）。</p>
<span id="more"></span>
<h1 id="使用-dir-函数"><a href="#使用-dir-函数" class="headerlink" title="使用 dir 函数"></a>使用 dir 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历指定文件夹下的文件。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $directory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dir_list</span>(<span class="params"><span class="variable">$directory</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$array</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$dir</span> = dir(<span class="variable">$directory</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$file</span> = <span class="variable">$dir</span>-&gt;read()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_dir(<span class="string">&quot;<span class="subst">$directory</span>/<span class="subst">$file</span>&quot;</span>) &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">            dir_list(<span class="string">&quot;<span class="subst">$directory</span>/<span class="subst">$file</span>&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable">$array</span>[] = <span class="variable">$file</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-readdir-函数"><a href="#使用-readdir-函数" class="headerlink" title="使用 readdir 函数"></a>使用 readdir 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历指定文件夹下的文件。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $directory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dir_list</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$directory</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$array</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$dir</span> = opendir(<span class="variable">$directory</span>)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">false</span> !== <span class="variable">$file</span> = readdir(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_dir(<span class="string">&quot;<span class="subst">$directory</span>/<span class="subst">$file</span>&quot;</span>) &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                dir_list(<span class="string">&quot;<span class="subst">$directory</span>/<span class="subst">$file</span>&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$array</span>[] = <span class="variable">$file</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir(<span class="variable">$dir</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-scandir-函数"><a href="#使用-scandir-函数" class="headerlink" title="使用 scandir 函数"></a>使用 scandir 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历指定文件夹下的文件。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $directory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dir_list</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$directory</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$array</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$dir</span> = scandir(<span class="variable">$directory</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_dir(<span class="string">&quot;<span class="subst">$directory</span>/<span class="subst">$file</span>&quot;</span>) &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">            dir_list(<span class="string">&quot;<span class="subst">$directory</span>/<span class="subst">$file</span>&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable">$array</span>[] = <span class="variable">$file</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-RecursiveIteratorIterator-类"><a href="#使用-RecursiveIteratorIterator-类" class="headerlink" title="使用 RecursiveIteratorIterator 类"></a>使用 RecursiveIteratorIterator 类</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dir_list</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$directory</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$array</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$iterator</span> = <span class="keyword">new</span> \<span class="built_in">RecursiveIteratorIterator</span>(</span><br><span class="line">        <span class="keyword">new</span> \<span class="built_in">RecursiveDirectoryIterator</span>(<span class="variable">$directory</span>, \<span class="built_in">RecursiveDirectoryIterator</span>::SKIP_DOTS),</span><br><span class="line">        \<span class="built_in">RecursiveIteratorIterator</span>::LEAVES_ONLY</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$iterator</span> <span class="keyword">as</span> <span class="variable">$object</span>) &#123;</span><br><span class="line">        <span class="variable">$array</span>[] = <span class="variable">$object</span>-&gt;getFileName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">print_r(dir_list(dirname(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])));</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; myshell.sh</span><br><span class="line">    [1] =&gt; meeting.md</span><br><span class="line">    [2] =&gt; untitled.html</span><br><span class="line">    [3] =&gt; server.php</span><br><span class="line">    [4] =&gt; .DS_Store</span><br><span class="line">    [5] =&gt; index.php</span><br><span class="line">    [6] =&gt; desc.md</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 安装 Xdebug 扩展来调试程序</title>
    <url>/2018/01/30/php-xdebug/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<ul>
<li><a href="https://xdebug.org/index.php">Xdebug Website</a></li>
<li><a href="https://github.com/xdebug/xdebug">Xdebug GitHub</a></li>
</ul>
</blockquote>
<p><code>Xdebug</code> 是 <code>PHP</code> 的一个扩展，以协助调试和开发。它包含一个 <code>single step debugger</code> 与 <code>IDEs</code> 一起使用；它升级了 <code>PHP</code> 的 <code>var_dump()</code> 函数；它为通知、警告、错误和异常添加了堆栈跟踪；它具有记录每个函数调用和变量赋值到磁盘的功能；它包含一个分析器；并且提供了与 <code>PHPUnit</code> 一起使用时的代码覆盖功能。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install homebrew/php/php71-xdebug</span><br></pre></td></tr></table></figure>
<h2 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/xdebug/xdebug.git</span><br><span class="line">$ <span class="built_in">cd</span> xdebug</span><br><span class="line">$ phpize</span><br><span class="line">$ ./configure --enable-xdebug --with-php-config=/usr/<span class="built_in">local</span>/bin/php-config</span><br><span class="line">$ sudo make clean</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h2><blockquote>
<p><a href="https://xdebug.org/download.php"><code>Xdebug Download Page</code></a></p>
</blockquote>
<p>下载对应的 <code>Windows</code> 版本，将 <code>php_xdebug-*.dll</code> 复制到相应的文件中</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="将生成的-xdebug-so-添加到-php-ini-文件中"><a href="#将生成的-xdebug-so-添加到-php-ini-文件中" class="headerlink" title="将生成的 xdebug.so 添加到 php.ini 文件中"></a>将生成的 xdebug.so 添加到 php.ini 文件中</h2><blockquote>
<p>由于不同的安装方式，配置文件的路径可能不太一样。有的扩展可能需要单独的文件去配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension=<span class="string">&quot;/path/to/xdebug.so&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="重启-php-fpm"><a href="#重启-php-fpm" class="headerlink" title="重启 php-fpm"></a>重启 php-fpm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Mac</span><br><span class="line">$ brew services restart php71</span><br><span class="line"></span><br><span class="line">// Linux</span><br><span class="line">$ sudo systemctl restart php71-fpm</span><br></pre></td></tr></table></figure>
<h2 id="查看-xdebug-是否正确安装"><a href="#查看-xdebug-是否正确安装" class="headerlink" title="查看 xdebug 是否正确安装"></a>查看 xdebug 是否正确安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php -i | grep xdebug</span><br><span class="line">/usr/<span class="built_in">local</span>/etc/php/7.1/conf.d/ext-xdebug.ini</span><br><span class="line">xdebug</span><br><span class="line">xdebug support =&gt; enabled <span class="comment"># 说明已经安装成功</span></span><br><span class="line">或者</span><br><span class="line">$ php --ini | grep xdebug</span><br><span class="line">/path/to/conf.d/ext-xdebug.ini</span><br><span class="line">$ cat /path/to/conf.d/ext-xdebug.ini</span><br><span class="line">[xdebug]</span><br><span class="line">zend_extension=<span class="string">&quot;/usr/local/opt/php71-xdebug/xdebug.so&quot;</span></span><br><span class="line">或者</span><br><span class="line">$ php --ri xdebug</span><br><span class="line">xdebug</span><br><span class="line"></span><br><span class="line">xdebug support =&gt; enabled</span><br></pre></td></tr></table></figure>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>当你习惯了使用 <code>var_dump()</code>，<code>echo</code>，<code>dd()</code>，<code>print_r()</code>，<code>print</code> 等这种方式调试代码，那么从现在起咱们换一种轻松的方式来调试代码。</p>
<h2 id="配置-Xdebug-参数"><a href="#配置-Xdebug-参数" class="headerlink" title="配置 Xdebug 参数"></a>配置 Xdebug 参数</h2><blockquote>
<p>使用 <code>Homebrew</code> 安装 <code>PHP</code> 环境后，在安装扩展时，一般会单独去加载扩展的配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /path/to/ext-xdebug.ini</span><br><span class="line">[xdebug]</span><br><span class="line">zend_extension=<span class="string">&quot;/usr/local/opt/php71-xdebug/xdebug.so&quot;</span></span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line">xdebug.remote_port = 9001</span><br><span class="line"></span><br><span class="line">xdebug.collect_vars = On</span><br><span class="line">xdebug.collect_params = 4</span><br><span class="line">xdebug.dump_globals = On</span><br><span class="line">xdebug.dump.SERVER = REQUEST_URI</span><br><span class="line">xdebug.show_local_vars = On</span><br></pre></td></tr></table></figure>
<h2 id="配置-PhpStorm-IDE"><a href="#配置-PhpStorm-IDE" class="headerlink" title="配置 PhpStorm IDE"></a>配置 PhpStorm IDE</h2><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-phpstorm-dbgp.png" alt="php-phpstorm-dbgp.png"></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>对了，由于最近在调试支付宝接口，看到一些错误提示码代码，没有上下文的提示，加上本人特懒，不想在多次的调试中调试跟踪，面对这些绝望的错误提示，懵逼于此，好在我望眼欲穿的时候，猛然间想起了有个叫 <code>xdebug</code> 东东，真特么靠谱，这也是这篇文章的由来，花了十几分钟的工夫把这货安置妥当，就走上了调试的漫漫长路，你看神马错误上下文一览无余的原形毕露，调试代码怎一个爽字了得，不说了看图。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-xdebug-display.png" alt="php-xdebug-display.png"></p>
<h1 id="项目调试"><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h1><h2 id="配置-Xdebug"><a href="#配置-Xdebug" class="headerlink" title="配置 Xdebug"></a>配置 Xdebug</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[xdebug]</span></span><br><span class="line"><span class="attr">zend_extension</span>=<span class="string">&quot;/usr/local/opt/php71-xdebug/xdebug.so&quot;</span></span><br><span class="line"><span class="attr">xdebug.remote_enable</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.idekey</span> = PHPSTORM</span><br><span class="line"><span class="attr">xdebug.remote_port</span> = <span class="number">9001</span></span><br><span class="line"><span class="attr">xdebug.remote_connect_back</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.profiler_enable</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="配置-PhpStorm"><a href="#配置-PhpStorm" class="headerlink" title="配置 PhpStorm"></a>配置 PhpStorm</h2><h3 id="PHP-Debug-DBGp-Proxy"><a href="#PHP-Debug-DBGp-Proxy" class="headerlink" title="PHP Debug DBGp Proxy"></a>PHP Debug DBGp Proxy</h3><p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-xdebug-php-dbgp.png" alt="php-xdebug-php-dbgp.png"></p>
<p>配置完成后重启 <code>php-fpm</code>。</p>
<h3 id="PHP-Servers"><a href="#PHP-Servers" class="headerlink" title="PHP Servers"></a>PHP Servers</h3><blockquote>
<p>如果是虚拟机开发，请配置项目路径映射。</p>
</blockquote>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-xdebug-server-config.png" alt="php-xdebug-server-config.png"></p>
<h3 id="PHP-Debug-Configurations"><a href="#PHP-Debug-Configurations" class="headerlink" title="PHP Debug Configurations"></a>PHP Debug Configurations</h3><p><code>Server</code> 这里选择上一步配置的 <code>Server</code> 就好。</p>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-xdebug-debug-config.png" alt="php-xdebug-debug-config.png"></p>
<h3 id="项目调试效果图"><a href="#项目调试效果图" class="headerlink" title="项目调试效果图"></a>项目调试效果图</h3><p>当浏览器运行指定的 <code>URL</code>，也就是 <code>PHP Web Application</code> 配置的 <code>Start URL</code> 时，出现 <code>Xdebug</code> 控制台，根据控制台来进行操作</p>
<p>调试窗口说明：</p>
<ul>
<li><code>Debugger</code>：调试器，比如：跳过，单步调试等操作</li>
<li><code>Frames</code>：运行的帧，当前项目调试时载入的关联程序</li>
<li><code>Variables</code>：调试中的所有变量</li>
<li><code>Watches</code>：监视器，自定义变量监视</li>
</ul>
<p><img src="https://inotes.oss-cn-beijing.aliyuncs.com/php/201812/php-xdebug-phpstorm-debug.png" alt="php-xdebug-phpstorm-debug.png"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html"><code>Configuring Xdebug</code></a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 快速排序</title>
    <url>/2018/04/17/php-quick-sort/</url>
    <content><![CDATA[<p>曾经在一次面试中，面试官问过我这个算法，我当时一脸懵逼，就说它比较快，所以就是快速排序，至于怎么快的一问三不知。所谓吃一堑长一智嘛，不管你怎么理解，最终还不得反应到代码实现上么？不费话了，上代码。</p>
<span id="more"></span>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>快速排序 - <code>Quick Sort</code>：又称划分交换排序 - <code>partition-exchange sort</code>，简称快排，一种排序算法，最早由<a href="https://zh.wikipedia.org/wiki/东尼·霍尔">东尼·霍尔</a>提出。在平均状况下，排序 <code>n</code> 个项目要 <code>O(n log n)</code> 次比较。在最坏状况下则需要 <code>O(n^2)</code> 次比较，但这种状况并不常见。事实上，快速排序 <code>O(n log n)</code> 通常明显比其他算法更快，因为它的内部循环 （<code>inner loop</code>）可以在大部分的架构上很有效率地达成。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>从数列中挑出一个元素，称为『基准』- <code>pivot</code></li>
<li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（<code>partition</code>）操作</li>
<li>递归地（<code>recursively</code>）把小于基准值元素的子数列和大于基准值元素的子数列排序</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$pivot</span> = <span class="variable">$array</span>[<span class="number">0</span>]; <span class="comment">// 取数组第一个元素为基准值</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$left</span> = <span class="variable">$right</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable">$array</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$pivot</span>, <span class="variable">$value</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$left</span>[] = <span class="variable">$array</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span>[] = <span class="variable">$array</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$left</span> = <span class="built_in">self</span>::sort(<span class="variable">$left</span>);</span><br><span class="line">        <span class="variable">$right</span> = <span class="built_in">self</span>::sort(<span class="variable">$right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array_merge(<span class="variable">$left</span>, (<span class="keyword">array</span>)<span class="variable">$pivot</span>, <span class="variable">$right</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QuickSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1073</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">1535</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3376</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3702</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">3961</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">4139</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">4644</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">5032</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">5803</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">6450</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>使用 <code>Lomuto partition scheme</code> 方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主运行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$random</span> = <span class="built_in">self</span>::random();</span><br><span class="line">        <span class="variable">$array</span> = <span class="built_in">self</span>::sort(<span class="variable">$random</span>, <span class="number">0</span>, count(<span class="variable">$random</span>) - <span class="number">1</span>);</span><br><span class="line">        print_r(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $high</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$low</span>, <span class="keyword">int</span> <span class="variable">$high</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$low</span> &lt; <span class="variable">$high</span>) &#123;</span><br><span class="line">            <span class="variable">$index</span> = <span class="built_in">self</span>::partition(<span class="variable">$array</span>, <span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">            <span class="built_in">self</span>::sort(<span class="variable">$array</span>, <span class="variable">$low</span>, <span class="variable">$index</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">self</span>::sort(<span class="variable">$array</span>, <span class="variable">$index</span> + <span class="number">1</span>, <span class="variable">$high</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原地分区</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int   $high</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$low</span>, <span class="keyword">int</span> <span class="variable">$high</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$pivot</span> = <span class="variable">$array</span>[<span class="variable">$high</span>]; <span class="comment">// 选取最右边的元素为基准</span></span><br><span class="line">        <span class="variable">$i</span> = <span class="variable">$low</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$low</span>; <span class="variable">$j</span> &lt; <span class="variable">$high</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">self</span>::compare(<span class="variable">$pivot</span>, <span class="variable">$array</span>[<span class="variable">$j</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$i</span>++;</span><br><span class="line">                <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$i</span>], <span class="variable">$array</span>[<span class="variable">$j</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">self</span>::swap(<span class="variable">$array</span>[<span class="variable">$i</span> + <span class="number">1</span>], <span class="variable">$array</span>[<span class="variable">$high</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> &lt;=&gt; <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互换位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $y</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> &amp;<span class="variable">$x</span>, <span class="keyword">int</span> &amp;<span class="variable">$y</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> !== <span class="variable">$y</span>) &#123;</span><br><span class="line">            <span class="variable">$t</span> = <span class="variable">$x</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">            <span class="variable">$y</span> = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $high</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $num</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$low</span> = <span class="number">1</span>, <span class="keyword">int</span> <span class="variable">$high</span> = <span class="number">9999</span>, <span class="keyword">int</span> <span class="variable">$num</span> = <span class="number">10</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$num</span> &gt; <span class="variable">$high</span> ? <span class="variable">$high</span> : <span class="variable">$num</span>;</span><br><span class="line">        <span class="variable">$range</span> = range(<span class="variable">$low</span>, <span class="variable">$high</span>);</span><br><span class="line">        <span class="variable">$array</span> = array_rand(array_flip(<span class="variable">$range</span>), <span class="variable">$num</span>);</span><br><span class="line">        shuffle(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QuickSort::main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1411</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">3434</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3776</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">6020</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">6047</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">6367</span></span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="number">7107</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">7783</span></span><br><span class="line">    [<span class="number">8</span>] =&gt; <span class="number">9135</span></span><br><span class="line">    [<span class="number">9</span>] =&gt; <span class="number">9248</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>使用 <code>Hoare partition scheme</code> 方式</p>
<p>未完待续…</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ 运行和管理</title>
    <url>/2018/08/24/rabbitmq-management/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="命令行管理"><a href="#命令行管理" class="headerlink" title="命令行管理"></a>命令行管理</h1><h2 id="运行管理"><a href="#运行管理" class="headerlink" title="运行管理"></a>运行管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 启动 RabbitMQ</span><br><span class="line">$ sudo systemctl start rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">// 停止 RabbitMQ</span><br><span class="line">$ sudo systemctl stop rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">// 重启 RabbitMQ</span><br><span class="line">$ sudo systemctl restart rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">// 查看 RabbitMQ 状态</span><br><span class="line">$ sudo systemctl status rabbitmq-server.service</span><br></pre></td></tr></table></figure>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建用户</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl add_user user 123456</span><br><span class="line">Creating user <span class="string">&quot;user&quot;</span> ...</span><br><span class="line">...<span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">// 删除用户</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl delete_user user</span><br><span class="line">Deleting user <span class="string">&quot;user&quot;</span> ...</span><br><span class="line">...<span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">// 查看用户列表</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl list_users</span><br><span class="line">Listing users ...</span><br><span class="line">guest	[administrator]</span><br><span class="line">...<span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">// 更改用户密码</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl change_password user 123456</span><br><span class="line">Changing password <span class="keyword">for</span> user <span class="string">&quot;user&quot;</span> ...</span><br><span class="line">...<span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>
<h2 id="虚拟机管理"><a href="#虚拟机管理" class="headerlink" title="虚拟机管理"></a>虚拟机管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建虚拟机</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl add_vhost test_vhost</span><br><span class="line">Creating vhost <span class="string">&quot;test_vhost&quot;</span> ...</span><br><span class="line">...<span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">// 删除虚拟机</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl delete_vhost test_vhost</span><br><span class="line">Deleting vhost <span class="string">&quot;test_vhost&quot;</span> ...</span><br><span class="line">...<span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">// 查看虚拟机列表</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl list_vhosts</span><br><span class="line">Listing vhosts ...</span><br><span class="line">/</span><br><span class="line">...<span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>
<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 授予 user 用户完全的访问权限（配置、写和读权限）</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl set_permissions -p test_vhost user <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line">Setting permissions <span class="keyword">for</span> user <span class="string">&quot;user&quot;</span> <span class="keyword">in</span> vhost <span class="string">&quot;test_vhost&quot;</span> ...</span><br><span class="line">...<span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">// 验证权限是否赋予给了 test_vhost 虚拟机</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl list_permissions -p test_vhost</span><br><span class="line">Listing permissions <span class="keyword">in</span> vhost <span class="string">&quot;test_vhost&quot;</span> ...</span><br><span class="line">user	.*	.*	.*</span><br><span class="line">...<span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">// 移除用户在 test_vhost 虚拟机上的权限</span><br><span class="line">$ sudo /usr/sbin/rabbitmqctl clear_permissions -p test_vhost user</span><br><span class="line">Clearing permissions <span class="keyword">for</span> user <span class="string">&quot;user&quot;</span> <span class="keyword">in</span> vhost <span class="string">&quot;test_vhost&quot;</span> ...</span><br><span class="line">...<span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>
<h1 id="Web-端管理"><a href="#Web-端管理" class="headerlink" title="Web 端管理"></a>Web 端管理</h1><h2 id="安装-Management-插件"><a href="#安装-Management-插件" class="headerlink" title="安装 Management 插件"></a>安装 Management 插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看 RabbitMQ 内置的插件</span><br><span class="line">$ <span class="built_in">cd</span> /usr/lib/rabbitmq/lib/rabbitmq_server-3.3.5/plugins &amp;&amp; ll</span><br><span class="line">total 2.7M</span><br><span class="line">-rw-r--r-- 1 root root 250K Mar 24  2017 amqp_client-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root 225K Mar 24  2017 cowboy-0.5.0-rmq3.3.5-git4b93c2d.ez</span><br><span class="line">-rw-r--r-- 1 root root  95K Mar 24  2017 eldap-3.3.5-gite309de4.ez</span><br><span class="line">-rw-r--r-- 1 root root 269K Mar 24  2017 mochiweb-2.7.0-rmq3.3.5-git680dba8.ez</span><br><span class="line">-rw-r--r-- 1 root root 202K Mar 24  2017 rabbitmq_amqp1_0-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  22K Mar 24  2017 rabbitmq_auth_backend_ldap-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  13K Mar 24  2017 rabbitmq_auth_mechanism_ssl-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root 8.3K Mar 24  2017 rabbitmq_consistent_hash_exchange-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root 149K Mar 24  2017 rabbitmq_federation-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  12K Mar 24  2017 rabbitmq_federation_management-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root 631K Mar 24  2017 rabbitmq_management-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  18K Mar 24  2017 rabbitmq_management_agent-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  41K Mar 24  2017 rabbitmq_management_visualiser-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  64K Mar 24  2017 rabbitmq_mqtt-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  69K Mar 24  2017 rabbitmq_shovel-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  19K Mar 24  2017 rabbitmq_shovel_management-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  91K Mar 24  2017 rabbitmq_stomp-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  73K Mar 24  2017 rabbitmq_test-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  44K Mar 24  2017 rabbitmq_tracing-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  26K Mar 24  2017 rabbitmq_web_dispatch-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  19K Mar 24  2017 rabbitmq_web_stomp-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root  51K Mar 24  2017 rabbitmq_web_stomp_examples-3.3.5.ez</span><br><span class="line">-rw-r--r-- 1 root root   59 Mar 24  2017 README</span><br><span class="line">-rw-r--r-- 1 root root  92K Mar 24  2017 sockjs-0.3.4-rmq3.3.5-git3132eb9.ez</span><br><span class="line">-rw-r--r-- 1 root root 165K Mar 24  2017 webmachine-1.10.3-rmq3.3.5-gite9359c7.ez</span><br><span class="line"></span><br><span class="line">// 安装 Web 端管理插件</span><br><span class="line">$ sudo /usr/sbin/rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  mochiweb</span><br><span class="line">  webmachine</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  amqp_client</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line">Plugin configuration has changed. Restart RabbitMQ <span class="keyword">for</span> changes to take effect.</span><br><span class="line"></span><br><span class="line">// 重启 RabbitMQ 即可从浏览器访问</span><br><span class="line">$ sudo systemctl restart rabbitmq-server.service</span><br></pre></td></tr></table></figure>
<h1 id="Api-管理"><a href="#Api-管理" class="headerlink" title="Api 管理"></a>Api 管理</h1><p>未完待续…</p>
]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 源码学习一</title>
    <url>/2021/09/12/php-src-learning1/</url>
    <content><![CDATA[<p>🤷‍♂️ 看到慕课网有大佬讲解 PHP 源码，既然来了，那就看看吧，以下为整理的笔记。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/09/12/php-src-learning1/"><strong>PHP 源码学习一</strong></a></li>
<li><a href="https://imajinyun.xyz/2021/09/13/php-src-learning2/"><code>PHP 源码学习二</code></a></li>
</ul>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li><a href="https://www.vagrantup.com/docs/boxes">Boxes</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 之所以使用 hashicorp/bionic64，是因为这个镜像是官方的，坑少而已</span><br><span class="line">$ vagrant init hashicorp/bionic64</span><br><span class="line"></span><br><span class="line">// 这是我本地已经安装的一些镜像，有了镜像就可以在几分钟之内登录到一台全新的 Linux 系统中</span><br><span class="line">$ vagrant box list</span><br><span class="line">centos/7           (virtualbox, 2004.01)</span><br><span class="line">hashicorp/bionic64 (virtualbox, 1.0.282)</span><br><span class="line">laravel/homestead  (virtualbox, 9.7.2)</span><br><span class="line">ubuntu/xenial64    (virtualbox, 20210804.0.0)</span><br><span class="line"></span><br><span class="line">// 需要漫长的等待，有可能还需要翻墙，或者你可以下载镜像后选择导入</span><br><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure>
<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><blockquote>
<p>如果从 <a href="https://www.php.net/downloads">官网</a> 下载，不需要进行 <code>autoconf</code>；如果从 <a href="https://github.com/php/php-src/tags">Github</a> 下载，需要在解压目录中执行 <code>autoconf</code>，经过本人安装折腾，认为从官网下载的包安装比较顺利。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo -s</span><br><span class="line"><span class="comment"># apt-get update &amp;&amp; apt-get upgrade</span></span><br><span class="line"><span class="comment"># apt-get install autoconf bison re2c pkg-config libxml2-dev libsqlite3-dev gdb -y</span></span><br><span class="line"><span class="comment"># cd ~ &amp;&amp; mkdir codes</span></span><br><span class="line"><span class="comment"># cd ~/vagrant</span></span><br><span class="line"></span><br><span class="line">// 安装 php80</span><br><span class="line"><span class="comment"># tar -zxvf php-src-php-8.0.1.tar.gz</span></span><br><span class="line"><span class="comment"># cd php-src-php-8.0.1</span></span><br><span class="line"><span class="comment"># autoconf</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/home/vagrant/codes/php80 --enable-fpm --enable-debug</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">Installing shared extensions:     /home/vagrant/codes/php80/lib/php/extensions/debug-non-zts-20200930/</span><br><span class="line">Installing PHP CLI binary:        /home/vagrant/codes/php80/bin/</span><br><span class="line">Installing PHP CLI man page:      /home/vagrant/codes/php80/php/man/man1/</span><br><span class="line">Installing PHP FPM binary:        /home/vagrant/codes/php80/sbin/</span><br><span class="line">Installing PHP FPM defconfig:     /home/vagrant/codes/php80/etc/</span><br><span class="line">Installing PHP FPM man page:      /home/vagrant/codes/php80/php/man/man8/</span><br><span class="line">Installing PHP FPM status page:   /home/vagrant/codes/php80/php/php/fpm/</span><br><span class="line">Installing phpdbg binary:         /home/vagrant/codes/php80/bin/</span><br><span class="line">Installing phpdbg man page:       /home/vagrant/codes/php80/php/man/man1/</span><br><span class="line">Installing PHP CGI binary:        /home/vagrant/codes/php80/bin/</span><br><span class="line">Installing PHP CGI man page:      /home/vagrant/codes/php80/php/man/man1/</span><br><span class="line">Installing build environment:     /home/vagrant/codes/php80/lib/php/build/</span><br><span class="line">Installing header files:          /home/vagrant/codes/php80/include/php/</span><br><span class="line">Installing helper programs:       /home/vagrant/codes/php80/bin/</span><br><span class="line">  program: phpize</span><br><span class="line">  program: php-config</span><br><span class="line">Installing man pages:             /home/vagrant/codes/php80/php/man/man1/</span><br><span class="line">  page: phpize.1</span><br><span class="line">  page: php-config.1</span><br><span class="line">/vagrant/php-8.0.10/build/shtool install -c ext/phar/phar.phar /home/vagrant/codes/php80/bin/phar.phar</span><br><span class="line">ln -s -f phar.phar /home/vagrant/codes/php80/bin/phar</span><br><span class="line">Installing PDO headers:           /home/vagrant/codes/php80/include/php/ext/pdo/</span><br><span class="line"></span><br><span class="line">// 安装 php74</span><br><span class="line"><span class="comment"># tar -zxvf php-src-php-7.4.23.tar.gz</span></span><br><span class="line"><span class="comment"># cd php-src-php-7.4.23</span></span><br><span class="line"><span class="comment"># autoconf</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/home/vagrant/codes/php74 --enable-fpm --enable-debug</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">Installing shared extensions:     /home/vagrant/codes/php74/lib/php/extensions/debug-non-zts-20190902/</span><br><span class="line">Installing PHP CLI binary:        /home/vagrant/codes/php74/bin/</span><br><span class="line">Installing PHP CLI man page:      /home/vagrant/codes/php74/php/man/man1/</span><br><span class="line">Installing PHP FPM binary:        /home/vagrant/codes/php74/sbin/</span><br><span class="line">Installing PHP FPM defconfig:     /home/vagrant/codes/php74/etc/</span><br><span class="line">Installing PHP FPM man page:      /home/vagrant/codes/php74/php/man/man8/</span><br><span class="line">Installing PHP FPM status page:   /home/vagrant/codes/php74/php/php/fpm/</span><br><span class="line">Installing phpdbg binary:         /home/vagrant/codes/php74/bin/</span><br><span class="line">Installing phpdbg man page:       /home/vagrant/codes/php74/php/man/man1/</span><br><span class="line">Installing PHP CGI binary:        /home/vagrant/codes/php74/bin/</span><br><span class="line">Installing PHP CGI man page:      /home/vagrant/codes/php74/php/man/man1/</span><br><span class="line">Installing build environment:     /home/vagrant/codes/php74/lib/php/build/</span><br><span class="line">Installing header files:          /home/vagrant/codes/php74/include/php/</span><br><span class="line">Installing helper programs:       /home/vagrant/codes/php74/bin/</span><br><span class="line">  program: phpize</span><br><span class="line">  program: php-config</span><br><span class="line">Installing man pages:             /home/vagrant/codes/php74/php/man/man1/</span><br><span class="line">  page: phpize.1</span><br><span class="line">  page: php-config.1</span><br><span class="line">/vagrant/php-7.4.23/build/shtool install -c ext/phar/phar.phar /home/vagrant/codes/php74/bin/phar.phar</span><br><span class="line">ln -s -f phar.phar /home/vagrant/codes/php74/bin/phar</span><br><span class="line">Installing PDO headers:           /home/vagrant/codes/php74/include/php/ext/pdo/</span><br><span class="line"></span><br><span class="line">// 安装 php73</span><br><span class="line"></span><br><span class="line"><span class="comment"># tar -zxvf php-src-php-7.3.30.tar.gz</span></span><br><span class="line"><span class="comment"># cd php-src-php-7.3.30</span></span><br><span class="line"><span class="comment"># autoconf</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/home/vagrant/codes/php73 --enable-fpm --enable-debug</span></span><br><span class="line">Installing shared extensions:     /home/vagrant/codes/php73/lib/php/extensions/debug-non-zts-20180731/</span><br><span class="line">Installing PHP CLI binary:        /home/vagrant/codes/php73/bin/</span><br><span class="line">Installing PHP CLI man page:      /home/vagrant/codes/php73/php/man/man1/</span><br><span class="line">Installing PHP FPM binary:        /home/vagrant/codes/php73/sbin/</span><br><span class="line">Installing PHP FPM defconfig:     /home/vagrant/codes/php73/etc/</span><br><span class="line">Installing PHP FPM man page:      /home/vagrant/codes/php73/php/man/man8/</span><br><span class="line">Installing PHP FPM status page:   /home/vagrant/codes/php73/php/php/fpm/</span><br><span class="line">Installing phpdbg binary:         /home/vagrant/codes/php73/bin/</span><br><span class="line">Installing phpdbg man page:       /home/vagrant/codes/php73/php/man/man1/</span><br><span class="line">Installing PHP CGI binary:        /home/vagrant/codes/php73/bin/</span><br><span class="line">Installing PHP CGI man page:      /home/vagrant/codes/php73/php/man/man1/</span><br><span class="line">Installing build environment:     /home/vagrant/codes/php73/lib/php/build/</span><br><span class="line">Installing header files:          /home/vagrant/codes/php73/include/php/</span><br><span class="line">Installing helper programs:       /home/vagrant/codes/php73/bin/</span><br><span class="line">  program: phpize</span><br><span class="line">  program: php-config</span><br><span class="line">Installing man pages:             /home/vagrant/codes/php73/php/man/man1/</span><br><span class="line">  page: phpize.1</span><br><span class="line">  page: php-config.1</span><br><span class="line">Installing PEAR environment:      /home/vagrant/codes/php73/lib/php/</span><br><span class="line">[PEAR] Archive_Tar    - installed: 1.4.14</span><br><span class="line">[PEAR] Console_Getopt - installed: 1.4.3</span><br><span class="line">[PEAR] Structures_Graph- installed: 1.1.1</span><br><span class="line">[PEAR] XML_Util       - installed: 1.4.5</span><br><span class="line">warning: pear/PEAR dependency package <span class="string">&quot;pear/Archive_Tar&quot;</span> installed version 1.4.14 is not the recommended version 1.4.4</span><br><span class="line">[PEAR] PEAR           - installed: 1.10.13</span><br><span class="line">Wrote PEAR system config file at: /home/vagrant/codes/php73/etc/pear.conf</span><br><span class="line">You may want to add: /home/vagrant/codes/php73/lib/php to your php.ini include_path</span><br><span class="line">/vagrant/php-7.3.30/build/shtool install -c ext/phar/phar.phar /home/vagrant/codes/php73/bin</span><br><span class="line">ln -s -f phar.phar /home/vagrant/codes/php73/bin/phar</span><br><span class="line">Installing PDO headers:           /home/vagrant/codes/php73/include/php/ext/pdo/</span><br></pre></td></tr></table></figure>
<h1 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo -s</span><br><span class="line"></span><br><span class="line">// php80 基准测试</span><br><span class="line"><span class="comment"># /home/vagrant/codes/php80/bin/php /vagrant/php-8.0.10/Zend/bench.php</span></span><br><span class="line">simple             0.042</span><br><span class="line">simplecall         0.018</span><br><span class="line">simpleucall        0.076</span><br><span class="line">simpleudcall       0.090</span><br><span class="line">mandel             0.401</span><br><span class="line">mandel2            0.356</span><br><span class="line">ackermann(7)       0.100</span><br><span class="line">ary(50000)         0.019</span><br><span class="line">ary2(50000)        0.021</span><br><span class="line">ary3(2000)         0.213</span><br><span class="line">fibo(30)           0.312</span><br><span class="line">hash1(50000)       0.051</span><br><span class="line">hash2(500)         0.054</span><br><span class="line">heapsort(20000)    0.109</span><br><span class="line">matrix(20)         0.119</span><br><span class="line">nestedloop(12)     0.085</span><br><span class="line">sieve(30)          0.080</span><br><span class="line">strcat(200000)     0.029</span><br><span class="line">------------------------</span><br><span class="line">Total              2.174</span><br><span class="line"><span class="comment"># /home/vagrant/codes/php80/bin/php /vagrant/php-8.0.10/Zend/micro_bench.php</span></span><br><span class="line">empty_loop         0.076</span><br><span class="line">func()             0.284    0.208</span><br><span class="line">undef_func()       0.350    0.274</span><br><span class="line">int_func()         0.113    0.037</span><br><span class="line"><span class="variable">$x</span> = self::<span class="variable">$x</span>      0.344    0.268</span><br><span class="line">self::<span class="variable">$x</span> = 0       0.270    0.194</span><br><span class="line">isset(self::<span class="variable">$x</span>)    0.354    0.278</span><br><span class="line">empty(self::<span class="variable">$x</span>)    0.363    0.287</span><br><span class="line"><span class="variable">$x</span> = Foo::<span class="variable">$x</span>       0.279    0.203</span><br><span class="line">Foo::<span class="variable">$x</span> = 0        0.198    0.122</span><br><span class="line">isset(Foo::<span class="variable">$x</span>)     0.263    0.186</span><br><span class="line">empty(Foo::<span class="variable">$x</span>)     0.282    0.206</span><br><span class="line">self::f()          0.383    0.307</span><br><span class="line">Foo::f()           0.345    0.269</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$this</span>-&gt;x      0.488    0.412</span><br><span class="line"><span class="variable">$this</span>-&gt;x = 0       0.223    0.147</span><br><span class="line"><span class="variable">$this</span>-&gt;x += 2      0.511    0.435</span><br><span class="line">++<span class="variable">$this</span>-&gt;x         0.340    0.264</span><br><span class="line">--<span class="variable">$this</span>-&gt;x         0.350    0.274</span><br><span class="line"><span class="variable">$this</span>-&gt;x++         0.369    0.293</span><br><span class="line"><span class="variable">$this</span>-&gt;x--         0.333    0.256</span><br><span class="line">isset(<span class="variable">$this</span>-&gt;x)    0.732    0.656</span><br><span class="line">empty(<span class="variable">$this</span>-&gt;x)    0.347    0.270</span><br><span class="line"><span class="variable">$this</span>-&gt;f()         0.325    0.249</span><br><span class="line"><span class="variable">$x</span> = Foo::TEST     0.411    0.335</span><br><span class="line">new Foo()          1.083    1.007</span><br><span class="line"><span class="variable">$x</span> = TEST          0.208    0.132</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$_GET</span>         0.390    0.314</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;v&#x27;</span>] 0.624    0.548</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$hash</span>[<span class="string">&#x27;v&#x27;</span>]    0.475    0.399</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$str</span>[0]       0.294    0.218</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$a</span> ?: null    0.491    0.415</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ?: tmp     0.437    0.361</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ? <span class="variable">$f</span> : <span class="variable">$a</span>  0.351    0.275</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ? <span class="variable">$f</span> : tmp 0.312    0.236</span><br><span class="line">------------------------</span><br><span class="line">Total             12.997</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// php74 基准测试</span><br><span class="line"><span class="comment"># /home/vagrant/codes/php74/bin/php /vagrant/php-7.4.23/Zend/bench.php</span></span><br><span class="line">simple             0.068</span><br><span class="line">simplecall         0.032</span><br><span class="line">simpleucall        0.073</span><br><span class="line">simpleudcall       0.087</span><br><span class="line">mandel             0.429</span><br><span class="line">mandel2            0.374</span><br><span class="line">ackermann(7)       0.098</span><br><span class="line">ary(50000)         0.019</span><br><span class="line">ary2(50000)        0.021</span><br><span class="line">ary3(2000)         0.211</span><br><span class="line">fibo(30)           0.326</span><br><span class="line">hash1(50000)       0.051</span><br><span class="line">hash2(500)         0.057</span><br><span class="line">heapsort(20000)    0.109</span><br><span class="line">matrix(20)         0.134</span><br><span class="line">nestedloop(12)     0.122</span><br><span class="line">sieve(30)          0.070</span><br><span class="line">strcat(200000)     0.021</span><br><span class="line">------------------------</span><br><span class="line">Total              2.303</span><br><span class="line"><span class="comment"># /home/vagrant/codes/php74/bin/php /vagrant/php-7.4.23/Zend/micro_bench.php</span></span><br><span class="line">empty_loop         0.081</span><br><span class="line">func()             0.346    0.265</span><br><span class="line">undef_func()       0.478    0.397</span><br><span class="line">int_func()         0.174    0.093</span><br><span class="line"><span class="variable">$x</span> = self::<span class="variable">$x</span>      0.406    0.325</span><br><span class="line">self::<span class="variable">$x</span> = 0       0.314    0.234</span><br><span class="line">isset(self::<span class="variable">$x</span>)    0.411    0.330</span><br><span class="line">empty(self::<span class="variable">$x</span>)    0.420    0.339</span><br><span class="line"><span class="variable">$x</span> = Foo::<span class="variable">$x</span>       0.305    0.224</span><br><span class="line">Foo::<span class="variable">$x</span> = 0        0.229    0.148</span><br><span class="line">isset(Foo::<span class="variable">$x</span>)     0.304    0.223</span><br><span class="line">empty(Foo::<span class="variable">$x</span>)     0.318    0.237</span><br><span class="line">self::f()          0.461    0.381</span><br><span class="line">Foo::f()           0.436    0.355</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$this</span>-&gt;x      0.277    0.196</span><br><span class="line"><span class="variable">$this</span>-&gt;x = 0       0.220    0.139</span><br><span class="line"><span class="variable">$this</span>-&gt;x += 2      0.413    0.333</span><br><span class="line">++<span class="variable">$this</span>-&gt;x         0.327    0.247</span><br><span class="line">--<span class="variable">$this</span>-&gt;x         0.335    0.255</span><br><span class="line"><span class="variable">$this</span>-&gt;x++         0.351    0.270</span><br><span class="line"><span class="variable">$this</span>-&gt;x--         0.350    0.269</span><br><span class="line">isset(<span class="variable">$this</span>-&gt;x)    0.407    0.326</span><br><span class="line">empty(<span class="variable">$this</span>-&gt;x)    0.438    0.358</span><br><span class="line"><span class="variable">$this</span>-&gt;f()         0.429    0.349</span><br><span class="line"><span class="variable">$x</span> = Foo::TEST     0.428    0.347</span><br><span class="line">new Foo()          1.193    1.113</span><br><span class="line"><span class="variable">$x</span> = TEST          0.252    0.171</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$_GET</span>         0.509    0.429</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;v&#x27;</span>] 0.876    0.795</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$hash</span>[<span class="string">&#x27;v&#x27;</span>]    0.539    0.459</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$str</span>[0]       0.361    0.280</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$a</span> ?: null    0.435    0.354</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ?: tmp     0.392    0.312</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ? <span class="variable">$f</span> : <span class="variable">$a</span>  0.384    0.303</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ? <span class="variable">$f</span> : tmp 0.360    0.280</span><br><span class="line">------------------------</span><br><span class="line">Total             13.961</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// php73 基准测试</span><br><span class="line"><span class="comment"># /home/vagrant/codes/php73/bin/php /vagrant/php-7.3.30/Zend/bench.php</span></span><br><span class="line">simple             0.075</span><br><span class="line">simplecall         0.025</span><br><span class="line">simpleucall        0.118</span><br><span class="line">simpleudcall       0.099</span><br><span class="line">mandel             0.512</span><br><span class="line">mandel2            0.540</span><br><span class="line">ackermann(7)       0.135</span><br><span class="line">ary(50000)         0.022</span><br><span class="line">ary2(50000)        0.032</span><br><span class="line">ary3(2000)         0.310</span><br><span class="line">fibo(30)           0.460</span><br><span class="line">hash1(50000)       0.068</span><br><span class="line">hash2(500)         0.068</span><br><span class="line">heapsort(20000)    0.160</span><br><span class="line">matrix(20)         0.187</span><br><span class="line">nestedloop(12)     0.147</span><br><span class="line">sieve(30)          0.083</span><br><span class="line">strcat(200000)     0.034</span><br><span class="line">------------------------</span><br><span class="line">Total              3.077</span><br><span class="line"><span class="comment"># /home/vagrant/codes/php73/bin/php /vagrant/php-7.3.30/Zend/micro_bench.php</span></span><br><span class="line">empty_loop         0.084</span><br><span class="line">func()             0.319    0.235</span><br><span class="line">undef_func()       0.572    0.488</span><br><span class="line">int_func()         0.151    0.067</span><br><span class="line"><span class="variable">$x</span> = self::<span class="variable">$x</span>      0.319    0.235</span><br><span class="line">self::<span class="variable">$x</span> = 0       0.306    0.222</span><br><span class="line">isset(self::<span class="variable">$x</span>)    0.285    0.201</span><br><span class="line">empty(self::<span class="variable">$x</span>)    0.300    0.216</span><br><span class="line"><span class="variable">$x</span> = Foo::<span class="variable">$x</span>       0.243    0.159</span><br><span class="line">Foo::<span class="variable">$x</span> = 0        0.246    0.162</span><br><span class="line">isset(Foo::<span class="variable">$x</span>)     0.244    0.160</span><br><span class="line">empty(Foo::<span class="variable">$x</span>)     0.254    0.170</span><br><span class="line">self::f()          0.390    0.307</span><br><span class="line">Foo::f()           0.353    0.269</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$this</span>-&gt;x      0.262    0.178</span><br><span class="line"><span class="variable">$this</span>-&gt;x = 0       0.206    0.122</span><br><span class="line"><span class="variable">$this</span>-&gt;x += 2      0.365    0.281</span><br><span class="line">++<span class="variable">$this</span>-&gt;x         0.265    0.181</span><br><span class="line">--<span class="variable">$this</span>-&gt;x         0.267    0.183</span><br><span class="line"><span class="variable">$this</span>-&gt;x++         0.290    0.206</span><br><span class="line"><span class="variable">$this</span>-&gt;x--         0.296    0.212</span><br><span class="line">isset(<span class="variable">$this</span>-&gt;x)    0.379    0.295</span><br><span class="line">empty(<span class="variable">$this</span>-&gt;x)    0.375    0.291</span><br><span class="line"><span class="variable">$this</span>-&gt;f()         0.399    0.315</span><br><span class="line"><span class="variable">$x</span> = Foo::TEST     0.406    0.322</span><br><span class="line">new Foo()          1.153    1.070</span><br><span class="line"><span class="variable">$x</span> = TEST          0.232    0.148</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$_GET</span>         0.447    0.363</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;v&#x27;</span>] 0.660    0.576</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$hash</span>[<span class="string">&#x27;v&#x27;</span>]    0.471    0.387</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$str</span>[0]       0.319    0.236</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$a</span> ?: null    0.373    0.289</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ?: tmp     0.386    0.303</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ? <span class="variable">$f</span> : <span class="variable">$a</span>  0.346    0.262</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$f</span> ? <span class="variable">$f</span> : tmp 0.325    0.241</span><br><span class="line">------------------------</span><br><span class="line">Total             12.285</span><br></pre></td></tr></table></figure>
<h1 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h1><ul>
<li><a href="https://www.php.net/releases/8.0/en.php">PHP 8</a></li>
</ul>
<h1 id="调试运行"><a href="#调试运行" class="headerlink" title="调试运行"></a>调试运行</h1><h2 id="常用的-GDB-命令"><a href="#常用的-GDB-命令" class="headerlink" title="常用的 GDB 命令"></a>常用的 GDB 命令</h2><ul>
<li><a href="http://www.gdbtutorial.com/">GDB Tutorial</a></li>
</ul>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>r</code></td>
<td>Start running program until a breakpoint or end of program</td>
</tr>
<tr>
<td><code>b fun</code></td>
<td>Set a breakpoint at the begining of function <code>fun</code></td>
</tr>
<tr>
<td><code>b N</code></td>
<td>Set a breakpoint at line number N of source file currently executing</td>
</tr>
<tr>
<td><code>b file.c:N</code></td>
<td>Set a breakpoint at line number N of file <code>file.c</code></td>
</tr>
<tr>
<td><code>d N</code></td>
<td>Remove breakpoint number N</td>
</tr>
<tr>
<td><code>info break</code></td>
<td>List all breakpoints</td>
</tr>
<tr>
<td><code>c</code></td>
<td>Continues/Resumes running the program until the next breakpoint or end of program</td>
</tr>
<tr>
<td><code>f</code></td>
<td>Runs until the current function is finished</td>
</tr>
<tr>
<td><code>s</code></td>
<td>Runs the next line of the program</td>
</tr>
<tr>
<td><code>s N</code></td>
<td>Runs the next N lines of program</td>
</tr>
<tr>
<td><code>n</code></td>
<td>Like s, but it does not step into functions</td>
</tr>
<tr>
<td><code>p var</code></td>
<td>Prints the current value of the variable <code>var</code></td>
</tr>
<tr>
<td><code>set var=val</code></td>
<td>Assign <code>val</code> value to the variable <code>var</code></td>
</tr>
<tr>
<td><code>bt</code></td>
<td>Prints a stack trace</td>
</tr>
<tr>
<td><code>q</code></td>
<td>Quit from gdb</td>
</tr>
</tbody>
</table>
<h2 id="源码中的定义"><a href="#源码中的定义" class="headerlink" title="源码中的定义"></a>源码中的定义</h2><ul>
<li>变量类型的定义：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Regular data types: Must be in sync with zend_variables.c. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_UNDEF					0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_NULL						1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_FALSE					2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TRUE						3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_LONG						4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_DOUBLE					5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STRING					6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ARRAY					7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_OBJECT					8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_RESOURCE					9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_REFERENCE				10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT_AST				11 <span class="comment">/* Constant expressions */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fake types used only for type hinting.</span></span><br><span class="line"><span class="comment"> * These are allowed to overlap with the types below. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CALLABLE					12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ITERABLE					13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_VOID						14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STATIC					15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_MIXED					16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* internal types */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_INDIRECT             	12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_PTR						13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ALIAS_PTR				14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IS_ERROR					15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used for casts */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IS_BOOL					17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IS_NUMBER					18</span></span><br></pre></td></tr></table></figure>
<ul>
<li>_zend_value &amp; _zend_sruct：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> _<span class="title">zend_value</span> &#123;</span></span><br><span class="line">	zend_long         lval;				<span class="comment">/* long value */</span></span><br><span class="line">	<span class="keyword">double</span>            dval;				<span class="comment">/* double value */</span></span><br><span class="line">	zend_refcounted  *counted;</span><br><span class="line">	zend_string      *str;</span><br><span class="line">	zend_array       *arr;</span><br><span class="line">	zend_object      *obj;</span><br><span class="line">	zend_resource    *res;</span><br><span class="line">	zend_reference   *ref;</span><br><span class="line">	zend_ast_ref     *ast;</span><br><span class="line">	zval             *zv;</span><br><span class="line">	<span class="keyword">void</span>             *ptr;</span><br><span class="line">	zend_class_entry *ce;</span><br><span class="line">	zend_function    *func;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">		<span class="keyword">uint32_t</span> w1;</span><br><span class="line">		<span class="keyword">uint32_t</span> w2;</span><br><span class="line">	&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span><br><span class="line">	zend_value        value;			<span class="comment">/* value */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="keyword">uint32_t</span> type_info;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">			<span class="built_in">ZEND_ENDIAN_LOHI_3</span>(</span><br><span class="line">				zend_uchar    type,			<span class="comment">/* active type */</span></span><br><span class="line">				zend_uchar    type_flags,</span><br><span class="line">				<span class="keyword">union</span> &#123;</span><br><span class="line">					<span class="keyword">uint16_t</span>  extra;        <span class="comment">/* not further specified */</span></span><br><span class="line">				&#125; u)</span><br><span class="line">		&#125; v;</span><br><span class="line">	&#125; u1;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* cache slot (for RECV_INIT) */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     opline_num;           <span class="comment">/* opline number (for FAST_CALL) */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     access_flags;         <span class="comment">/* class constant access flags */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     property_guard;       <span class="comment">/* single property guard */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     constant_flags;       <span class="comment">/* constant flags */</span></span><br><span class="line">		<span class="keyword">uint32_t</span>     extra;                <span class="comment">/* not further specified */</span></span><br><span class="line">	&#125; u2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$d</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$e</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$f</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$g</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> \<span class="built_in">stdClass</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$h</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gdb /home/vagrant/codes/php80/bin/php</span></span><br><span class="line">(gdb) b ZEND_ECHO_SPEC_CV_HANDLER</span><br><span class="line">Breakpoint 1 at 0x5c96a8: file /vagrant/php-8.0.10/Zend/zend_vm_execute.h, line 37184.</span><br><span class="line">(gdb) r variables.php</span><br><span class="line">Starting program: /home/vagrant/codes/php80/bin/php variables.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br></pre></td></tr></table></figure>
<ul>
<li>整型：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$1</span> = (zval *) 0x7ffff3814070</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$2</span> = &#123;value = &#123;lval = 1, dval = 4.9406564584124654e-324, counted = 0x1, str = 0x1, arr = 0x1, obj = 0x1, res = 0x1, ref = 0x1, ast = 0x1, zv = 0x1, ptr = 0x1,</span><br><span class="line">    ce = 0x1, func = 0x1, ww = &#123;w1 = 1, w2 = 0&#125;&#125;, u1 = &#123;type_info = 4, v = &#123;<span class="built_in">type</span> = 4 <span class="string">&#x27;\004&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0,</span><br><span class="line">    cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<ul>
<li>浮点型：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">1</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$3</span> = (zval *) 0x7ffff3814080</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$4</span> = &#123;value = &#123;lval = 4614253070214989087, dval = 3.1400000000000001, counted = 0x40091eb851eb851f, str = 0x40091eb851eb851f, arr = 0x40091eb851eb851f,</span><br><span class="line">    obj = 0x40091eb851eb851f, res = 0x40091eb851eb851f, ref = 0x40091eb851eb851f, ast = 0x40091eb851eb851f, zv = 0x40091eb851eb851f, ptr = 0x40091eb851eb851f,</span><br><span class="line">    ce = 0x40091eb851eb851f, func = 0x40091eb851eb851f, ww = &#123;w1 = 1374389535, w2 = 1074339512&#125;&#125;, u1 = &#123;type_info = 5, v = &#123;<span class="built_in">type</span> = 5 <span class="string">&#x27;\005&#x27;</span>,</span><br><span class="line">      type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0,</span><br><span class="line">    access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<ul>
<li>NULL 型：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">3.14</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$5</span> = (zval *) 0x7ffff3814090</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$6</span> = &#123;value = &#123;lval = 2, dval = 9.8813129168249309e-324, counted = 0x2, str = 0x2, arr = 0x2, obj = 0x2, res = 0x2, ref = 0x2, ast = 0x2, zv = 0x2, ptr = 0x2,</span><br><span class="line">    ce = 0x2, func = 0x2, ww = &#123;w1 = 2, w2 = 0&#125;&#125;, u1 = &#123;type_info = 1, v = &#123;<span class="built_in">type</span> = 1 <span class="string">&#x27;\001&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0,</span><br><span class="line">    cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<ul>
<li>布尔 TRUE 型：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		if (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line">$7 = (zval *) 0x7ffff38140a0</span><br><span class="line">(gdb) p *z</span><br><span class="line">$8 = &#123;value = &#123;lval = 2, dval = 9.8813129168249309e-324, counted = 0x2, str = 0x2, arr = 0x2, obj = 0x2, res = 0x2, ref = 0x2, ast = 0x2, zv = 0x2, ptr = 0x2,</span><br><span class="line">    ce = 0x2, func = 0x2, ww = &#123;w1 = 2, w2 = 0&#125;&#125;, u1 = &#123;type_info = 3, v = &#123;type = 3 &#x27;\003&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0,</span><br><span class="line">    cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<ul>
<li>布尔 FALSE 型：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">1</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$9</span> = (zval *) 0x7ffff38140b0</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$10</span> = &#123;value = &#123;lval = 2, dval = 9.8813129168249309e-324, counted = 0x2, str = 0x2, arr = 0x2, obj = 0x2, res = 0x2, ref = 0x2, ast = 0x2, zv = 0x2, ptr = 0x2,</span><br><span class="line">    ce = 0x2, func = 0x2, ww = &#123;w1 = 2, w2 = 0&#125;&#125;, u1 = &#123;type_info = 2, v = &#123;<span class="built_in">type</span> = 2 <span class="string">&#x27;\002&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0,</span><br><span class="line">    cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串型：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$11</span> = (zval *) 0x7ffff38140c0</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$12</span> = &#123;value = &#123;lval = 93825011385696, dval = 4.6355714846336205e-310, counted = 0x555556798560, str = 0x555556798560, arr = 0x555556798560,</span><br><span class="line">    obj = 0x555556798560, res = 0x555556798560, ref = 0x555556798560, ast = 0x555556798560, zv = 0x555556798560, ptr = 0x555556798560, ce = 0x555556798560,</span><br><span class="line">    func = 0x555556798560, ww = &#123;w1 = 1450804576, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;</span><br><span class="line">    next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0,</span><br><span class="line">    extra = 0&#125;&#125;</span><br><span class="line">(gdb) p <span class="variable">$12</span>.value.str</span><br><span class="line"><span class="variable">$13</span> = (zend_string *) 0x555556798560</span><br><span class="line">(gdb) p *<span class="variable">$12</span>.value.str</span><br><span class="line"><span class="variable">$14</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 470&#125;&#125;, h = 9223378990886268924, len = 6, val = <span class="string">&quot;s&quot;</span>&#125;</span><br><span class="line">(gdb) p *<span class="variable">$12</span>.value.str.val@6</span><br><span class="line"><span class="variable">$15</span> = <span class="string">&quot;string&quot;</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<ul>
<li>数组型：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">string</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$16</span> = (zval *) 0x7ffff38140d0</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$17</span> = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360,</span><br><span class="line">    obj = 0x7ffff3858360, res = 0x7ffff3858360, ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360,</span><br><span class="line">    func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;<span class="built_in">type</span> = 7 <span class="string">&#x27;\a&#x27;</span>, type_flags = 3 <span class="string">&#x27;\003&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;</span><br><span class="line">    next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0,</span><br><span class="line">    extra = 0&#125;&#125;</span><br><span class="line">(gdb) p <span class="variable">$17</span>.value.arr</span><br><span class="line"><span class="variable">$18</span> = (zend_array *) 0x7ffff3858360</span><br><span class="line">(gdb) p *<span class="variable">$17</span>.value.arr</span><br><span class="line"><span class="variable">$19</span> = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 20 <span class="string">&#x27;\024&#x27;</span>, _unused = 0 <span class="string">&#x27;\000&#x27;</span>, nIteratorsCount = 0 <span class="string">&#x27;\000&#x27;</span>, _unused2 = 0 <span class="string">&#x27;\000&#x27;</span>&#125;,</span><br><span class="line">    flags = 20&#125;, nTableMask = 4294967294, arData = 0x7ffff385c508, nNumUsed = 3, nNumOfElements = 3, nTableSize = 8, nInternalPointer = 0,</span><br><span class="line">  nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<ul>
<li>对象型：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Warning: Array to string conversion <span class="keyword">in</span> /home/vagrant/codes/tests/variables.php on line 21</span><br><span class="line">Array</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$20</span> = (zval *) 0x7ffff38140e0</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$21</span> = &#123;value = &#123;lval = 140737278651440, dval = 6.9533454470863183e-310, counted = 0x7ffff3802c30, str = 0x7ffff3802c30, arr = 0x7ffff3802c30,</span><br><span class="line">    obj = 0x7ffff3802c30, res = 0x7ffff3802c30, ref = 0x7ffff3802c30, ast = 0x7ffff3802c30, zv = 0x7ffff3802c30, ptr = 0x7ffff3802c30, ce = 0x7ffff3802c30,</span><br><span class="line">    func = 0x7ffff3802c30, ww = &#123;w1 = 4085263408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 776, v = &#123;<span class="built_in">type</span> = 8 <span class="string">&#x27;\b&#x27;</span>, type_flags = 3 <span class="string">&#x27;\003&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;</span><br><span class="line">    next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0,</span><br><span class="line">    extra = 0&#125;&#125;</span><br><span class="line">(gdb) p <span class="variable">$21</span>.value.obj</span><br><span class="line"><span class="variable">$22</span> = (zend_object *) 0x7ffff3802c30</span><br><span class="line">(gdb) p *<span class="variable">$21</span>.value.obj</span><br><span class="line"><span class="variable">$23</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 8&#125;&#125;, handle = 1, ce = 0x5555567f41c0, handlers = 0x555556752620 &lt;std_object_handlers&gt;, properties = 0x0,</span><br><span class="line">  properties_table = &#123;&#123;value = &#123;lval = 93825006738840, dval = 4.6355712550484294e-310, counted = 0x555556329d98, str = 0x555556329d98, arr = 0x555556329d98,</span><br><span class="line">        obj = 0x555556329d98, res = 0x555556329d98, ref = 0x555556329d98, ast = 0x555556329d98, zv = 0x555556329d98, ptr = 0x555556329d98, ce = 0x555556329d98,</span><br><span class="line">        func = 0x555556329d98, ww = &#123;w1 = 1446157720, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 40, v = &#123;<span class="built_in">type</span> = 40 <span class="string">&#x27;(&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;</span><br><span class="line">        next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">        constant_flags = 0, extra = 0&#125;&#125;&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ 消息队列</title>
    <url>/2018/01/21/rabbitmq-service/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/zh/RabbitMQ"><code>RabbitMQ WIKI</code></a></li>
<li><a href="https://baike.baidu.com/item/rabbitmq"><code>RabbitMQ</code> 百科</a></li>
<li><a href="http://www.rabbitmq.com/"><code>RabbitMQ</code> 官网</a></li>
<li><a href="http://www.rabbitmq.com/download.html"><code>RabbitMQ</code> 安装</a></li>
<li><a href="http://www.rabbitmq.com/getstarted.html"><code>RabbitMQ</code> 教程</a></li>
<li><a href="http://www.rabbitmq.com/documentation.html"><code>RabbitMQ</code> 文档</a></li>
<li><a href="http://www.rabbitmq.com/devtools.html"><code>RabbitMQ Clients &amp; Developer Tools</code></a></li>
</ul>
</blockquote>
<p>消息队列（<code>MQ - Message Queue</code>）：是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。</p>
<p><code>RabbitMQ</code> 是指实现了高级消息队列协议（<code>AMQP：Advanced Message Queuing Protocol</code>）的开源消息代理软件（亦称面向消息的中间件）。</p>
<p><code>RabbitMQ</code> 是部署最广泛的开源消息代理。<code>RabbitMQ</code> 是个轻量级和易于部署在云端场所。它支持多种消息传递协议。<code>RabbitMQ</code> 可以部署在分布式和联合的配置中，以满足高规模，高可用性要求。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 添加 erlang yum 源</span><br><span class="line">$ sudo vim /etc/yum.repos.d/rabbitmq-erlang.repo</span><br><span class="line">[rabbitmq-erlang]</span><br><span class="line">name=rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/erlang/21/el/7</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">// 更新 yum 源</span><br><span class="line">$ sudo yum -y update</span><br><span class="line"></span><br><span class="line">// 安装 erlang</span><br><span class="line">$ sudo yum install -y erlang</span><br><span class="line"></span><br><span class="line">// 安装 rabbitmq-server</span><br><span class="line">$ sudo yum install -y rabbitmq-server</span><br><span class="line"></span><br><span class="line">// 如果中途出现 file /usr/lib64/erlang/bin/epmd from install of erlang-erts-R16B-03.18.el7.x86_64 conflicts with file from package erlang-20.2.2-1.el7.centos.x86_64 这种错误，请移除 erlang-20.2.2-1.el7.centos.x86_64 包再试</span><br><span class="line">$ sudo yum remove erlang-20.2.2-1.el7.centos.x86_64</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -name <span class="string">&quot;rabbitmq.config.example&quot;</span></span><br><span class="line">$ sudo cp rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br></pre></td></tr></table></figure>
<h2 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo firewall-cmd --permanent --zone=public --add-port=15672/tcp</span><br><span class="line">$ sudo firewall-cmd --permanent --zone=public --add-port=5672/tcp</span><br><span class="line">$ sudo systemctl restart firewalld.service</span><br><span class="line">或</span><br><span class="line">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h2 id="RabbitMQ-服务"><a href="#RabbitMQ-服务" class="headerlink" title="RabbitMQ 服务"></a><code>RabbitMQ</code> 服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 开启</span><br><span class="line">$ sudo systemctl start rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">// 重启</span><br><span class="line">$ sudo systemctl restart rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">// 停止</span><br><span class="line">$ sudo systemctl stop rabbitmq-server.service</span><br></pre></td></tr></table></figure>
<h2 id="开启-Web-界面"><a href="#开启-Web-界面" class="headerlink" title="开启 Web 界面"></a>开启 <code>Web</code> 界面</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 开启</span><br><span class="line">$ sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line">// 禁用</span><br><span class="line">$ sudo rabbitmq-plugins <span class="built_in">disable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>
<p>访问 <code>your-server-ip:15672</code> 就能看到 RabbitMQ Web 界面，默认的用户名：<code>guest</code>，密码：<code>guest</code></p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><blockquote>
<p>基于 <code>Python</code> 的发布订阅模式。</p>
</blockquote>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 更新 pip</span><br><span class="line">$ pip install --upgrade  pip</span><br><span class="line"></span><br><span class="line">// 安装 pika 库</span><br><span class="line">$ pip install pika</span><br></pre></td></tr></table></figure>
<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># producer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立到代理服务器的连接</span></span><br><span class="line">credentials = pika.PlainCredentials(<span class="string">&#x27;guest&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">parameters = pika.ConnectionParameters(<span class="string">&#x27;localhost&#x27;</span>, credentials=credentials)</span><br><span class="line">connection = pika.BlockingConnection(parameters)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取信道</span></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明交换机</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;HelloExchange&#x27;</span>,</span><br><span class="line">                         exchange_type=<span class="string">&#x27;fanout&#x27;</span>,</span><br><span class="line">                         passive=<span class="literal">False</span>,</span><br><span class="line">                         durable=<span class="literal">True</span>,</span><br><span class="line">                         auto_delete=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建消息</span></span><br><span class="line">message = <span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">1</span>:]) <span class="keyword">or</span> <span class="string">&quot;🔥 info: Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布消息</span></span><br><span class="line">channel.basic_publish(exchange=<span class="string">&#x27;HelloExchange&#x27;</span>,</span><br><span class="line">                      routing_key=<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">                      body=message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; [😭] Sent %r&#x27;</span> % message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>
<h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># customer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立到代理服务器的连接</span></span><br><span class="line">credentials = pika.PlainCredentials(<span class="string">&#x27;guest&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">parameters = pika.ConnectionParameters(<span class="string">&#x27;localhost&#x27;</span>, credentials=credentials)</span><br><span class="line">connection = pika.BlockingConnection(parameters)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取信道</span></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明交换机</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;HelloExchange&#x27;</span>,</span><br><span class="line">                         exchange_type=<span class="string">&#x27;fanout&#x27;</span>,</span><br><span class="line">                         passive=<span class="literal">False</span>,</span><br><span class="line">                         durable=<span class="literal">True</span>,</span><br><span class="line">                         auto_delete=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明队列</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">&#x27;HelloQueue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过键『hello』将队列和交换机绑定</span></span><br><span class="line">channel.queue_bind(exchange=<span class="string">&#x27;HelloExchange&#x27;</span>,</span><br><span class="line">                   routing_key=<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">                   queue=<span class="string">&#x27;HelloQueue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; [🤷‍♂️] Waiting for logs. To exit press CTRL+C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户处理传入的消息函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">channel, method, header, body</span>):</span></span><br><span class="line">    <span class="comment"># 消息确认</span></span><br><span class="line">    channel.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> body.decode() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        <span class="comment"># 停止消费</span></span><br><span class="line">        channel.stop_consuming()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; [😄] %r&quot;</span> % body.decode())</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 订阅消费者</span></span><br><span class="line">channel.basic_consume(callback, queue=<span class="string">&#x27;HelloQueue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始消费</span></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>分别打开两个终端窗口，假设 A 窗口为消费窗口，运行 <code>python ./customer.py</code>，B 窗口为生产窗口，运行 <code>python ./producer.py 你输入的字符串</code>，观察运行情况。</p>
]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 集群搭建</title>
    <url>/2020/01/16/redis-cluster/</url>
    <content><![CDATA[<p><code>Redis</code> 是一个 <code>K-V</code> 存储系统，是一个高性能的 <code>K-V</code> 数据库，是目前大规模使用的缓存中间件。单节点的<code>Redis</code> 已经就达到了很高的性能，为了提高可用性我们可以使用 <code>Redis</code> 集群。</p>
<span id="more"></span>
<blockquote>
<p><a href="https://redis.io/">Redis Website</a></p>
</blockquote>
<h2 id="集群简介"><a href="#集群简介" class="headerlink" title="集群简介"></a>集群简介</h2><p><code>Redis</code> 集群是一个可以在多个 <code>Redis</code> 节点之间进行数据共享的设施（<code>installation</code>）。</p>
<p><code>Redis</code> 集群不支持那些需要同时处理多个键的 <code>Redis</code> 命令， 因为执行这些命令需要在多个 <code>Redis</code> 节点之间移动数据， 并且在高负载的情况下， 这些命令将降低 <code>Redis</code> 集群的性能，并导致不可预测的行为。</p>
<p><code>Redis</code> 集群通过分区（<code>partition</code>）来提供一定程度的可用性（<code>availability</code>）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p>
<p><code>Redis</code> 集群提供了以下两个好处：</p>
<ul>
<li>将数据自动切分（<code>split</code>）到多个节点的能力</li>
<li>当集群中的一部分节点失效或者无法进行通讯时，仍然可以继续处理命令请求的能力</li>
</ul>
<h2 id="集群说明"><a href="#集群说明" class="headerlink" title="集群说明"></a>集群说明</h2><h3 id="集群数据共享"><a href="#集群数据共享" class="headerlink" title="集群数据共享"></a>集群数据共享</h3><p><code>Redis</code> 集群使用数据分片（<code>sharding</code>）而非一致性哈希（<code>consistency hashing</code>）来实现：一个 <code>Redis</code> 集群包含 <code>16384</code> 个哈希槽（<code>hash slot</code>），数据库中的每个键都属于这 <code>16384</code> 个哈希槽的其中一个，集群使用公式 <code>CRC16(key) % 16384</code> 来计算键 <code>key</code> 属于哪个槽，其中 <code>CRC16(key)</code> 语句用于计算键 <code>key</code> 的 <code>CRC16</code> 校验和。</p>
<h3 id="集群中的每个节点负责处理一部分哈希槽"><a href="#集群中的每个节点负责处理一部分哈希槽" class="headerlink" title="集群中的每个节点负责处理一部分哈希槽"></a>集群中的每个节点负责处理一部分哈希槽</h3><p>一个集群可以有三个哈希槽，其中：</p>
<ul>
<li>节点 <code>A</code> 负责处理 <code>0</code> 号至 <code>5500</code> 号哈希槽</li>
<li>节点 <code>B</code> 负责处理 <code>5501</code> 号至 <code>11000</code> 号哈希槽</li>
<li>节点 <code>C</code> 负责处理 <code>11001</code> 号至 <code>16384</code> 号哈希槽</li>
</ul>
<h3 id="集群中的主从复制"><a href="#集群中的主从复制" class="headerlink" title="集群中的主从复制"></a>集群中的主从复制</h3><p>为了使得集群在一部分节点下线或者无法与集群的大多数（<code>majority</code>）节点进行通讯的情况下，仍然可以正常运作，<code>Redis</code> 集群对节点使用了主从复制功能：集群中的每个节点都有 <code>1</code> 个至 <code>N</code> 个复制品（<code>replica</code>），其中一个复制品为主节点（<code>master</code>），而其余的 <code>N-1</code> 个复制品为从节点（<code>slave</code>）</p>
<h3 id="集群-TCP-端口"><a href="#集群-TCP-端口" class="headerlink" title="集群 TCP 端口"></a>集群 <code>TCP</code> 端口</h3><p>每个 <code>Redis Cluster</code> 节点都需要 <code>2</code> 个 <code>TCP</code> 连接打开，正常的 <code>Redis TCP</code> 端口被服务于客户端，例如：<code>6379</code>，加上通过增加 <code>10000</code> 到数据端口获取的端口，例如：<code>16379</code>。</p>
<p>第二个高端口被用来 <code>Redis Cluster Bus</code>，也就是使用二进制协议的一个节点到节点的通信信道。<code>Redis Cluster Bus</code> 被节点用于故障检测，配置更新，故障转移授权等等。客户端不应该尝试与 <code>Redis Cluster Bus</code> 端口进行通信，而是始终使用正常的 <code>Redis</code> 命令端口，然而要确保在防火墙中打开两个端口，否则 <code>Redis Cluster</code> 节点将无法通信。</p>
<p>命令端口和 <code>Redis Cluster Bus</code> 端口偏移是固定的，始终为 <code>10000</code>。</p>
<p>注意，为了使 <code>Redis Cluster</code> 正常工作，你需要为每个节点：</p>
<ul>
<li>用于客户端进行通信的普通客户端通信端口（通常使用 <code>6379</code>）对所有需要到达集群的客户端，以及所有其它集群节点（使用客户端端口进行密钥迁移）都是开放的</li>
<li><code>Redis Cluster Bus</code> 端口（客户端端口 <code>+10000</code>）必须可从所有其它集群节点访问</li>
</ul>
<p>如果不打开两个 <code>TCP</code> 端口，集群将无法按预期工作</p>
<p><code>Redis Cluster Bus</code> 使用不同的二进制协议进行节占到节点的数据交换，这更适合于使用少量的带宽和处理时间交换节点之间的信息</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class="line">$ sudo curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line">$ sudo <span class="built_in">source</span> ~/.rvm/scripts/rvm</span><br><span class="line">$ sudo <span class="built_in">echo</span> <span class="string">&quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot;</span> &gt; ~/.rvm/user/db</span><br><span class="line">$ rvm -v</span><br><span class="line">$ sudo rvm install 2.4.1</span><br><span class="line">$ sudo gem update</span><br><span class="line">$ sudo gem install redis</span><br></pre></td></tr></table></figure>
<h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><h3 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ wget http://download.redis.io/releases/redis-4.0.9.tar.gz</span><br><span class="line">$ tar xzf redis-4.0.9.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-4.0.9</span><br><span class="line">$ sudo make</span><br></pre></td></tr></table></figure>
<h3 id="创建配置目录"><a href="#创建配置目录" class="headerlink" title="创建配置目录"></a>创建配置目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir -pv /usr/<span class="built_in">local</span>/redis-cluster/&#123;bin,etc,<span class="built_in">log</span>,run,var&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo cp ~/redis-4.0.9/redis.conf /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf</span><br></pre></td></tr></table></figure>
<h3 id="复制命令文件"><a href="#复制命令文件" class="headerlink" title="复制命令文件"></a>复制命令文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/redis-4.0.9/src/</span><br><span class="line">$ sudo cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-sentinel redis-cli redis-server /usr/<span class="built_in">local</span>/redis-cluster/bin</span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf</span><br><span class="line"><span class="built_in">bind</span> 192.168.33.110</span><br><span class="line">port 7001</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">pidfile /user/<span class="built_in">local</span>/redis-cluster/run/7001.pid</span><br><span class="line">logfile /usr/<span class="built_in">local</span>/redis-cluster/<span class="built_in">log</span>/7001.log</span><br><span class="line">dbfilename dump-7001.rdb</span><br><span class="line"></span><br><span class="line">dir /usr/<span class="built_in">local</span>/redis-cluster/var</span><br><span class="line"></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly-7001.aof&quot;</span></span><br><span class="line"></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-7001.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>
<h3 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h3><blockquote>
<p>将复制后的文件中的 <code>7001</code> 换成相应的名称</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7002.conf</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7003.conf</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7004.conf</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7005.conf</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7006.conf</span><br></pre></td></tr></table></figure>
<h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><h3 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 启动配置的所有节点</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7001.conf</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7002.conf</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7003.conf</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7004.conf</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7005.conf</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli /usr/<span class="built_in">local</span>/redis-cluster/etc/redis-7006.conf</span><br></pre></td></tr></table></figure>
<h3 id="检查服务"><a href="#检查服务" class="headerlink" title="检查服务"></a>检查服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef | grep redis</span><br><span class="line">root     20077     1  0 May18 ?        00:01:04 /usr/<span class="built_in">local</span>/bin/redis-server 192.168.33.110:7001 [cluster]</span><br><span class="line">root     20079     1  0 May18 ?        00:01:03 /usr/<span class="built_in">local</span>/bin/redis-server 192.168.33.110:7002 [cluster]</span><br><span class="line">root     20081     1  0 May18 ?        00:01:03 /usr/<span class="built_in">local</span>/bin/redis-server 192.168.33.110:7003 [cluster]</span><br><span class="line">root     20089     1  0 May18 ?        00:01:03 /usr/<span class="built_in">local</span>/bin/redis-server 192.168.33.110:7004 [cluster]</span><br><span class="line">root     20091     1  0 May18 ?        00:01:03 /usr/<span class="built_in">local</span>/bin/redis-server 192.168.33.110:7005 [cluster]</span><br><span class="line">root     20096     1  0 May18 ?        00:01:03 /usr/<span class="built_in">local</span>/bin/redis-server 192.168.33.110:7006 [cluster]</span><br></pre></td></tr></table></figure>
<h3 id="停止节点"><a href="#停止节点" class="headerlink" title="停止节点"></a>停止节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7001 shutdown</span><br></pre></td></tr></table></figure>
<h3 id="节点加入集群"><a href="#节点加入集群" class="headerlink" title="节点加入集群"></a>节点加入集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo cp ~/redis-4.0.9/src/redis-trib.rb /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-trib</span><br><span class="line">$ sudo chmod a+x /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-trib</span><br><span class="line">$ sudo /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-trib create --replicas 1 \</span><br><span class="line">&gt; 192.168.33.110:7001 \</span><br><span class="line">&gt; 192.168.33.110:7002 \</span><br><span class="line">&gt; 192.168.33.110:7003 \</span><br><span class="line">&gt; 192.168.33.110:7004 \</span><br><span class="line">&gt; 192.168.33.110:7005 \</span><br><span class="line">&gt; 192.168.33.110:7006 \</span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Using 3 masters:</span><br><span class="line">127.0.0.1:7001</span><br><span class="line">127.0.0.1:7002</span><br><span class="line">127.0.0.1:7003</span><br><span class="line">Adding replica 127.0.0.1:7005 to 127.0.0.1:7001</span><br><span class="line">Adding replica 127.0.0.1:7006 to 127.0.0.1:7002</span><br><span class="line">Adding replica 127.0.0.1:7004 to 127.0.0.1:7003</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: 4ed7d8f54311fb883431c1c5a4715c1ae59d5215 127.0.0.1:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">M: 31030e4c35659d5de1146941a2d1f2c1524b53e9 127.0.0.1:7002</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">M: 573752b8b0747bc2c7bb3e4a1edb0e467cfdef0e 127.0.0.1:7003</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: 11f577639b081c1514f28a74764c9330d819dcb8 127.0.0.1:7004</span><br><span class="line">   replicates 573752b8b0747bc2c7bb3e4a1edb0e467cfdef0e</span><br><span class="line">S: ff6d7ca3ea29036385c89a5dc93f807f91307871 127.0.0.1:7005</span><br><span class="line">   replicates 4ed7d8f54311fb883431c1c5a4715c1ae59d5215</span><br><span class="line">S: a6f79f4d1de8d7bef4911e934b802829ed29a2d3 127.0.0.1:7006</span><br><span class="line">   replicates 31030e4c35659d5de1146941a2d1f2c1524b53e9</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join..</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7001)</span><br><span class="line">M: 4ed7d8f54311fb883431c1c5a4715c1ae59d5215 127.0.0.1:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 11f577639b081c1514f28a74764c9330d819dcb8 127.0.0.1:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 573752b8b0747bc2c7bb3e4a1edb0e467cfdef0e</span><br><span class="line">S: a6f79f4d1de8d7bef4911e934b802829ed29a2d3 127.0.0.1:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 31030e4c35659d5de1146941a2d1f2c1524b53e9</span><br><span class="line">S: ff6d7ca3ea29036385c89a5dc93f807f91307871 127.0.0.1:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 4ed7d8f54311fb883431c1c5a4715c1ae59d5215</span><br><span class="line">M: 31030e4c35659d5de1146941a2d1f2c1524b53e9 127.0.0.1:7002</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 573752b8b0747bc2c7bb3e4a1edb0e467cfdef0e 127.0.0.1:7003</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>可以看到，创建集群这个过程比较繁琐，可以创建脚本来完成这些操作</p>
<ul>
<li>启动脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /usr/<span class="built_in">local</span>/redis-cluster/bin/start.sh</span><br><span class="line"><span class="comment">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">RedisServerPath=/usr/<span class="built_in">local</span>/redis-cluster/bin</span><br><span class="line">RedisConfPath=/usr/<span class="built_in">local</span>/redis-cluster/etc</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3 4 5 6; <span class="keyword">do</span></span><br><span class="line">    <span class="variable">$RedisServerPath</span>/redis-server <span class="variable">$RedisConfPath</span>/redis-700<span class="variable">$i</span>.conf</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/redis-cluster/bin/redis-trib.rb create --replicas 1 \</span><br><span class="line">192.168.33.110:7001 \</span><br><span class="line">192.168.33.110:7002 \</span><br><span class="line">192.168.33.110:7003 \</span><br><span class="line">192.168.33.110:7004 \</span><br><span class="line">192.168.33.110:7005 \</span><br><span class="line">192.168.33.110:7006 \</span><br><span class="line">$ sudo chmod a+x /usr/<span class="built_in">local</span>/redis-cluster/bin/start.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>停止脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /usr/<span class="built_in">local</span>/redis-cluster/bin/stop.sh</span><br><span class="line"><span class="comment">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">RedisClusterPath=/usr/<span class="built_in">local</span>/redis-cluster</span><br><span class="line">RedisCliPath=/usr/<span class="built_in">local</span>/redis-cluster/bin</span><br><span class="line">ip=192.168.33.110</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3 4 5 6; <span class="keyword">do</span></span><br><span class="line">    <span class="variable">$RedisCliPath</span>/redis-cli -c -h <span class="variable">$ip</span> -p 700<span class="variable">$i</span> shutdown</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">rm -rf <span class="variable">$RedisClusterPath</span>/<span class="built_in">log</span>/*</span><br><span class="line">rm -rf <span class="variable">$RedisClusterPath</span>/run/*</span><br><span class="line">rm -rf <span class="variable">$RedisClusterPath</span>/var/*</span><br><span class="line">$ sudo chmod a+x /usr/<span class="built_in">local</span>/redis-cluster/bin/stop.sh</span><br></pre></td></tr></table></figure>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7001</span><br><span class="line">192.168.33.110:7001&gt; cluster nodes <span class="comment"># 查看节点信息</span></span><br><span class="line">5521b06a46910c873e7ee8a274f2cb9fc41ffed1 192.168.33.110:7003@17003 master - 0 1526681994008 3 connected 10923-16383</span><br><span class="line">8153a1b35e0fab1e48f0171653f6cffd82cbc5a6 192.168.33.110:7004@17004 slave d7e0395152496f41fe73fbbdabc8499c79f6632e 0 1526681996033 4 connected</span><br><span class="line">a2ff29661185f6ad17c99232d0490b3814ba0164 192.168.33.110:7006@17006 slave affc237bf177fd4ac591314736a1358e16545d0c 0 1526681995020 6 connected</span><br><span class="line">d7e0395152496f41fe73fbbdabc8499c79f6632e 192.168.33.110:7002@17002 master - 0 1526681993000 2 connected 5461-10922</span><br><span class="line">8b613e4b5abbdf3c2486dfcb8bc1e9dde1897820 192.168.33.110:7005@17005 slave 5521b06a46910c873e7ee8a274f2cb9fc41ffed1 0 1526681993000 5 connected</span><br><span class="line">affc237bf177fd4ac591314736a1358e16545d0c 192.168.33.110:7001@17001 myself,master - 0 1526681994000 1 connected 0-5460</span><br><span class="line">192.168.33.110:7001&gt; cluster info <span class="comment"># 查看集群信息</span></span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:59501</span><br><span class="line">cluster_stats_messages_pong_sent:61755</span><br><span class="line">cluster_stats_messages_sent:121256</span><br><span class="line">cluster_stats_messages_ping_received:61750</span><br><span class="line">cluster_stats_messages_pong_received:59501</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:121256</span><br></pre></td></tr></table></figure>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>CLUSTER INFO</code></td>
<td>打印集群信息</td>
</tr>
<tr>
<td><code>CLUSTER NODES</code></td>
<td>列出集群当前已知的所有节点信息</td>
</tr>
<tr>
<td><code>CLUSTER MEET &lt;ip&gt; &lt;port&gt;</code></td>
<td>将 <code>ip</code> 和 <code>port</code> 所指定的节点添加到集群当中</td>
</tr>
<tr>
<td><code>CLUSTER FORGET &lt;node_id&gt;</code></td>
<td>从集群中移除 <code>node_id</code> 指定的节点</td>
</tr>
<tr>
<td><code>CLUSTER REPLICATE &lt;node_id&gt;</code></td>
<td>将当前节点设置为 <code>node_id</code> 指定的节点的从节点</td>
</tr>
<tr>
<td><code>CLUSTER SAVECONFIG</code></td>
<td>将节点的配置文件保存到硬盘里面</td>
</tr>
<tr>
<td><code>CLUSTER ADDSLOTS &lt;slot&gt; [slot ...]</code></td>
<td>将一个或多个槽（<code>slot</code>）指派（<code>assign</code>）给当前节点</td>
</tr>
<tr>
<td><code>CLUSTER DELSLOTS &lt;slot&gt; [slot ...]</code></td>
<td>移除一个或多个槽对当前节点的指派</td>
</tr>
<tr>
<td><code>CLUSTER FLUSHSLOTS</code></td>
<td>移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点</td>
</tr>
<tr>
<td><code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;node_id&gt;</code></td>
<td>将槽 <code>slot</code> 指派给 <code>node_id</code> 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽，然后再进行指派</td>
</tr>
<tr>
<td><code>CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;node_id&gt;</code></td>
<td>将本节点的槽 <code>slot</code> 迁移到 <code>node_id</code> 指定的节点中</td>
</tr>
<tr>
<td><code>CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;node_id&gt;</code></td>
<td>从 <code>node_id</code> 指定的节点中导入槽 <code>slot</code> 到本节点</td>
</tr>
<tr>
<td><code>CLUSTER SETSLOT &lt;slot&gt; STABLE</code></td>
<td>取消对槽 <code>slot</code> 的导入（<code>import</code>）或者迁移（<code>migrate</code>）</td>
</tr>
<tr>
<td><code>CLUSTER KEYSLOT &lt;key&gt;</code></td>
<td>计算键 <code>key</code> 应该被放置在哪个槽上</td>
</tr>
<tr>
<td><code>CLUSTER COUNTKEYSINSLOT &lt;slot&gt;</code></td>
<td>返回槽 <code>slot</code> 目前包含的键值对数量</td>
</tr>
<tr>
<td><code>CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt;</code></td>
<td>返回 <code>count</code> 个 <code>slot</code> 槽中的键</td>
</tr>
</tbody>
</table>
<h2 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h2><h3 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 从某个节点设置值后，去不同的节点获取设置的值</span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7001</span><br><span class="line">192.168.33.110:7001&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">-&gt; Redirected to slot [12182] located at 192.168.33.110:7003</span><br><span class="line">OK</span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7001</span><br><span class="line">192.168.33.110:7001&gt; get foo</span><br><span class="line">-&gt; Redirected to slot [12182] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7002</span><br><span class="line">192.168.33.110:7002&gt; get foo</span><br><span class="line">-&gt; Redirected to slot [12182] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7003</span><br><span class="line">192.168.33.110:7003&gt; get foo</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7004</span><br><span class="line">192.168.33.110:7004&gt; get foo</span><br><span class="line">-&gt; Redirected to slot [12182] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7005</span><br><span class="line">192.168.33.110:7005&gt; get foo</span><br><span class="line">-&gt; Redirected to slot [12182] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7006</span><br><span class="line">192.168.33.110:7006&gt; get foo</span><br><span class="line">-&gt; Redirected to slot [12182] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="程序操作"><a href="#程序操作" class="headerlink" title="程序操作"></a>程序操作</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><blockquote>
<ul>
<li><a href="https://github.com/nrk/predis">Flexible and feature-complete Redis client for PHP and HHVM</a></li>
<li><a href="https://github.com/nrk/predis/wiki/Quick-tour">Quick tour</a></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">$ composer init</span><br><span class="line">$ composer install</span><br><span class="line">$ composer require predis/predis</span><br></pre></td></tr></table></figure>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">6</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$parameters</span>[] = [</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>               =&gt; <span class="string">&#x27;192.168.33.110&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;port&#x27;</span>               =&gt; <span class="string">&#x27;700&#x27;</span> . <span class="variable">$i</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>           =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;database&#x27;</span>           =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;timeout&#x27;</span>            =&gt; <span class="number">5</span>,</span><br><span class="line">        <span class="string">&#x27;read_write_timeout&#x27;</span> =&gt; <span class="number">5</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$options</span> = [<span class="string">&#x27;cluster&#x27;</span> =&gt; <span class="string">&#x27;redis&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$cluster</span> = <span class="keyword">new</span> \Predis\Client(<span class="variable">$parameters</span>, <span class="variable">$options</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (\Predis\PredisException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">100</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$format</span> = <span class="string">&#x27;No.%s is a RedisCluster test.&#x27;</span>;</span><br><span class="line">    <span class="variable">$cluster</span>-&gt;set(<span class="string">&quot;<span class="subst">$i</span>&quot;</span>, sprintf(<span class="variable">$format</span>, <span class="variable">$i</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$cluster</span>-&gt;get(<span class="string">&quot;<span class="subst">$i</span>&quot;</span>) . PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php cluster.php</span><br><span class="line">No.1 is a Redis cluster <span class="built_in">test</span>.</span><br><span class="line">No.2 is a Redis cluster <span class="built_in">test</span>.</span><br><span class="line">No.3 is a Redis cluster <span class="built_in">test</span>.</span><br><span class="line">...</span><br><span class="line">No.99 is a Redis cluster <span class="built_in">test</span>.</span><br><span class="line"></span><br><span class="line">$ /usr/<span class="built_in">local</span>/redis-cluster/bin/redis-cli -c -h 192.168.33.110 -p 7001</span><br><span class="line">192.168.33.110:7001&gt; get 11</span><br><span class="line"><span class="string">&quot;No.11 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7001&gt; get 23</span><br><span class="line">-&gt; Redirected to slot [9671] located at 192.168.33.110:7002</span><br><span class="line"><span class="string">&quot;No.23 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7002&gt; get 33</span><br><span class="line"><span class="string">&quot;No.33 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7002&gt; get 67</span><br><span class="line"><span class="string">&quot;No.67 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7002&gt; get 88</span><br><span class="line">-&gt; Redirected to slot [15207] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;No.88 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7003&gt; get 99</span><br><span class="line">-&gt; Redirected to slot [6263] located at 192.168.33.110:7002</span><br><span class="line"><span class="string">&quot;No.99 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7002&gt; get 100</span><br><span class="line">-&gt; Redirected to slot [339] located at 192.168.33.110:7001</span><br><span class="line">(nil)</span><br><span class="line">192.168.33.110:7001&gt; get 17</span><br><span class="line">-&gt; Redirected to slot [12304] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;No.17 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7003&gt; get 42</span><br><span class="line">-&gt; Redirected to slot [8000] located at 192.168.33.110:7002</span><br><span class="line"><span class="string">&quot;No.42 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7002&gt; get 56</span><br><span class="line">-&gt; Redirected to slot [11509] located at 192.168.33.110:7003</span><br><span class="line"><span class="string">&quot;No.56 is a RedisCluster test.&quot;</span></span><br><span class="line">192.168.33.110:7003&gt; get 61</span><br><span class="line">-&gt; Redirected to slot [2369] located at 192.168.33.110:7001</span><br><span class="line"><span class="string">&quot;No.61 is a RedisCluster test.&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 常用命令操作</title>
    <url>/2019/11/06/redis-command-operation/</url>
    <content><![CDATA[<p><img src="/images/2019/201911071247.png" alt="201911071247.png"></p>
<p>🧃 Redis 和其他很多 key-value 数据库的不同之处在于，Redis 不仅支持简单的字符串键值对，它还提供了一系列数据结构类型值，比如列表、哈希、集合和有序集，并在这些数据结构类型上定义了一套强大的 API。通过对不同类型的值进行操作，Redis 可以很轻易地完成其他只支持字符串键值对的 key-value 数据库很难（或者无法）完成的任务。在 Redis 的内部，数据结构类型值由高效的数据结构和算法进行支持，并且在 Redis 自身的构建当中，也大量用到了这些数据结构。</p>
<span id="more"></span>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul>
<li>字符串：String</li>
<li>哈希或散列：Hash</li>
<li>列表：List</li>
<li>集合：Set</li>
<li>有序集合：Sorted Set</li>
</ul>
<h1 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote>
<p>Redis 数据库是以无序的方式存放数据库键的，一个新加入的键可能会出现在数据库的任何位置上。因此我们在使用 Redis 的过程中不应该对键在数据库中的摆放位置做任何假设，以免造成错误。</p>
</blockquote>
<ul>
<li>设置字符串键值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET phone 10086</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<ul>
<li>获取字符串键值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET phone</span><br><span class="line"><span class="string">&quot;10086&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>覆盖字符串键值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET redis <span class="string">&quot;Redis is an in-memory database that persists on disk&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET redis</span><br><span class="line"><span class="string">&quot;Redis is an in-memory database that persists on disk&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SET redis <span class="string">&quot;Redis is often referred as a data structures server&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET redis</span><br><span class="line"><span class="string">&quot;Redis is often referred as a data structures server&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>仅在键没有值时进行设置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET password</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; SET password <span class="string">&quot;password&quot;</span> NX</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET password</span><br><span class="line"><span class="string">&quot;password&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SET password <span class="string">&quot;123456&quot;</span> NX</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GET password</span><br><span class="line"><span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>仅在键已有值时进行设置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET redis:password</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; SET redis:password <span class="string">&quot;redis.io&quot;</span> XX</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GET redis:password</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; SET redis:password <span class="string">&quot;redis.io&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET redis:password <span class="string">&quot;Redis.IO&quot;</span> XX</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<ul>
<li>获取键目前的值，然后为键设置新值，最后把之前获取到的旧值返回：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET phone</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GETSET phone 10086</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; SET phone 10086</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GETSET phone 10001</span><br><span class="line"><span class="string">&quot;10086&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET phone</span><br><span class="line"><span class="string">&quot;10001&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>一次为多个字符串键设置值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET a hello b world c 10086</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MGET a</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MGET b</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MGET c</span><br><span class="line">1) <span class="string">&quot;10086&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MSET a redis b memory c 10001</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MGET a</span><br><span class="line">1) <span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MGET b</span><br><span class="line">1) <span class="string">&quot;memory&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MGET c</span><br><span class="line">1) <span class="string">&quot;10001&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>一次获取多个字符串键的值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET a <span class="string">&quot;Hello World&quot;</span> b 10086</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MGET a b</span><br><span class="line">1) <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">2) <span class="string">&quot;10086&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>仅在键不存在时，一次为多个字符串键设置值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET a hello b world c 10086</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MSETNX a 1 b 2 c 3 d 4</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; MGET a b c d</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;10086&quot;</span></span><br><span class="line">4) (nil)</span><br><span class="line">127.0.0.1:6379&gt; MSETNX d 4</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; MGET a b c d</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;10086&quot;</span></span><br><span class="line">4) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取字符串值的字节长度：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET org <span class="string">&quot;中国人民解放军&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; STRLEN org</span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; SET str <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; STRLEN str</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br></pre></td></tr></table></figure>
<ul>
<li>获取字符串值指定索引范围上的内容：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET org Microsoft</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE org 0 4</span><br><span class="line"><span class="string">&quot;Micro&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对字符串的指定索引范围进行设置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET message <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE message 6 Redis</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line"><span class="string">&quot;Hello Redis&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>自动扩展被修改的字符串：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET message <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line"><span class="string">&quot;Hello World&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETRANGE message 6 <span class="string">&quot;Redis, Hello World&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line"><span class="string">&quot;Hello Redis, Hello World&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在值里面填充空字节：</li>
</ul>
<blockquote>
<p><code>\x00</code> 符号代表一个空字符。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET message Hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get message</span><br><span class="line"><span class="string">&quot;Hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETRANGE message 10 Redis</span><br><span class="line">(<span class="built_in">integer</span>) 15</span><br><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line"><span class="string">&quot;Hello\x00\x00\x00\x00\x00Redis&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>追加新内容到值的末尾：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET message Hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; APPEND message <span class="string">&quot; Redis&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line"><span class="string">&quot;Hello Redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; APPEND message <span class="string">&quot;, Hello World&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line"><span class="string">&quot;Hello Redis, Hello World&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不存在的键追加内容：</li>
</ul>
<blockquote>
<p>效果等同于 <code>SET</code> 命令。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; APPEND message <span class="string">&quot;Hello Redis&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; APPEND message <span class="string">&quot;, Hello World&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; GET message</span><br><span class="line"><span class="string">&quot;Hello Redis, Hello World&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>整数值的加法、减法操作：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET number 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET number</span><br><span class="line"><span class="string">&quot;1000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBY number 100</span><br><span class="line">(<span class="built_in">integer</span>) 1100</span><br><span class="line">127.0.0.1:6379&gt; INCRBY number 300</span><br><span class="line">(<span class="built_in">integer</span>) 1400</span><br><span class="line">127.0.0.1:6379&gt; GET number</span><br><span class="line"><span class="string">&quot;1400&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; DECRBY number 300</span><br><span class="line">(<span class="built_in">integer</span>) 1100</span><br><span class="line">127.0.0.1:6379&gt; DECRBY number 100</span><br><span class="line">(<span class="built_in">integer</span>) 1000</span><br><span class="line">127.0.0.1:6379&gt; get number</span><br><span class="line"><span class="string">&quot;1000&quot;</span></span><br></pre></td></tr></table></figure>
<p>错误的实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET number 1.105</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCRBY number 1</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; SET message Hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY message 2</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; SET bignumber 123456789123456789123456789</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCRBY bignumber 3</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br></pre></td></tr></table></figure>
<ul>
<li>不存在键的加法、减法运算：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET a</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; INCRBY a 10</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; DECRBY b 10</span><br><span class="line">(<span class="built_in">integer</span>) -10</span><br><span class="line">127.0.0.1:6379&gt; GET a</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET b</span><br><span class="line"><span class="string">&quot;-10&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>整数的自增、自减操作：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET x</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; INCR x</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; INCR y</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; DECR x</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; DECR y</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; GET x</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET y</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>浮点数的加法、减法及不存在键的操作：</li>
</ul>
<blockquote>
<p><code>INCRBYFLOAT</code> 只会保留计算结果小数点后 17 位数字。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET decimal 3.1415</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET decimal</span><br><span class="line"><span class="string">&quot;3.1415&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT decimal 2.55</span><br><span class="line"><span class="string">&quot;5.6915&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET decimal</span><br><span class="line"><span class="string">&quot;5.6915&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT decimal -2.55</span><br><span class="line"><span class="string">&quot;3.1415&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET decimal</span><br><span class="line"><span class="string">&quot;3.1415&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET point</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; SET point 1.12345</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET point</span><br><span class="line"><span class="string">&quot;1.12345&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET x</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT x 0.123456789123456789123456789</span><br><span class="line"><span class="string">&quot;0.12345678912345679&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET x</span><br><span class="line"><span class="string">&quot;0.12345678912345679&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="哈希或散列"><a href="#哈希或散列" class="headerlink" title="哈希或散列"></a>哈希或散列</h2><ul>
<li>为字段设置值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET user:1001 name imajinyun age 18</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; HSET user:1001 gender male</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET user:1001 created_at 1573036176</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:1001</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;imajinyun&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">5) <span class="string">&quot;gender&quot;</span></span><br><span class="line">6) <span class="string">&quot;male&quot;</span></span><br><span class="line">7) <span class="string">&quot;created_at&quot;</span></span><br><span class="line">8) <span class="string">&quot;1573036176&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用新值覆盖旧值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET user:1001 name iphone</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET user:1001 name imajinyun</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; HGET user:1001 name</span><br><span class="line"><span class="string">&quot;imajinyun&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>仅在字段不存在的情况下为它设置值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSETNX user:1001 name peter</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSETNX user:1001 name imajinyun</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; HGET user:1001 name</span><br><span class="line"><span class="string">&quot;peter&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HSETNX user:1001 age 18</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:1001</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;peter&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取单个、多个字段的值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET user:1001 name imajinyun age 18</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; HGET user:1001 name</span><br><span class="line"><span class="string">&quot;imajinyun&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGET user:1001 age</span><br><span class="line"><span class="string">&quot;18&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:1001</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;imajinyun&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取不存在的字段或者不存在的哈希：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET user:1001 name imajinyun</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGET user:1001 age</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; HGET user:1002 age</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:1002</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>对字段存储的整数值进行加法或减法操作：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h2 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h2><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>未完待续。。。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 源码学习二</title>
    <url>/2021/09/13/php-src-learning2/</url>
    <content><![CDATA[<p>🍟 通过 GDB 跟踪调试来了解一下 <code>Zend String</code> 和 <code>Zend Array</code>。</p>
<span id="more"></span>
<ul>
<li><a href="https://imajinyun.xyz/2021/09/12/php-src-learning1/"><code>PHP 源码学习一</code></a></li>
<li><a href="https://imajinyun.xyz/2021/09/13/php-src-learning2/"><strong>PHP 源码学习二</strong></a></li>
</ul>
<h1 id="Zend-String"><a href="#Zend-String" class="headerlink" title="Zend String"></a>Zend String</h1><h2 id="Zend-String-Struct"><a href="#Zend-String-Struct" class="headerlink" title="Zend String Struct"></a>Zend String Struct</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_string</span> &#123;</span></span><br><span class="line">	zend_refcounted_h gc;</span><br><span class="line">	zend_ulong        h;                <span class="comment">/* hash value */</span></span><br><span class="line">	<span class="keyword">size_t</span>            len;</span><br><span class="line">	<span class="keyword">char</span>              val[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_refcounted_h</span> &#123;</span></span><br><span class="line">	<span class="keyword">uint32_t</span>         refcount;			<span class="comment">/* reference counter 32-bit */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="keyword">uint32_t</span> type_info;</span><br><span class="line">	&#125; u;</span><br><span class="line">&#125; zend_refcounted_h;</span><br></pre></td></tr></table></figure>
<h2 id="Copy-on-write"><a href="#Copy-on-write" class="headerlink" title="Copy-on-write"></a>Copy-on-write</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = time() . <span class="string">&#x27;String&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy-on-write</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gdb /home/vagrant/codes/php80/bin/php</span></span><br><span class="line">(gdb) b ZEND_ECHO_SPEC_CV_HANDLER</span><br><span class="line">Breakpoint 1 at 0x5c96a8: file /vagrant/php-8.0.10/Zend/zend_vm_execute.h, line 37184.</span><br><span class="line">(gdb) r copy-on-write.php</span><br><span class="line">Starting program: /home/vagrant/codes/php80/bin/php copy-on-write.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$1</span> = (zval *) 0x7ffff3814070</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$2</span> = &#123;value = &#123;lval = 140737278651680, dval = 6.9533454470981759e-310, counted = 0x7ffff3802d20, str = 0x7ffff3802d20, arr = 0x7ffff3802d20, obj = 0x7ffff3802d20, res = 0x7ffff3802d20, ref = 0x7ffff3802d20,</span><br><span class="line">    ast = 0x7ffff3802d20, zv = 0x7ffff3802d20, ptr = 0x7ffff3802d20, ce = 0x7ffff3802d20, func = 0x7ffff3802d20, ww = &#123;w1 = 4085263648, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>,</span><br><span class="line">      type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p <span class="variable">$2</span>.value.str</span><br><span class="line"><span class="variable">$3</span> = (zend_string *) 0x7ffff3802d20</span><br><span class="line">(gdb) p *<span class="variable">$2</span>.value.str</span><br><span class="line"><span class="variable">$4</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 13594750393630990530, len = 12, val = <span class="string">&quot;H&quot;</span>&#125;</span><br><span class="line">(gdb) p *<span class="variable">$2</span>.value.str.val@12</span><br><span class="line"><span class="variable">$5</span> = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Hello World!</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$6</span> = (zval *) 0x7ffff3814080</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$7</span> = &#123;value = &#123;lval = 140737278651760, dval = 6.9533454471021284e-310, counted = 0x7ffff3802d70, str = 0x7ffff3802d70, arr = 0x7ffff3802d70, obj = 0x7ffff3802d70, res = 0x7ffff3802d70, ref = 0x7ffff3802d70,</span><br><span class="line">    ast = 0x7ffff3802d70, zv = 0x7ffff3802d70, ptr = 0x7ffff3802d70, ce = 0x7ffff3802d70, func = 0x7ffff3802d70, ww = &#123;w1 = 4085263728, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 262, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>,</span><br><span class="line">      type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.str</span><br><span class="line"><span class="variable">$8</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 22&#125;&#125;, h = 0, len = 16, val = <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.str.val@16</span><br><span class="line"><span class="variable">$9</span> = <span class="string">&quot;1631431095String&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">1631431095String</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$10</span> = (zval *) 0x7ffff3814080</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$11</span> = &#123;value = &#123;lval = 140737278651760, dval = 6.9533454471021284e-310, counted = 0x7ffff3802d70, str = 0x7ffff3802d70, arr = 0x7ffff3802d70, obj = 0x7ffff3802d70, res = 0x7ffff3802d70,</span><br><span class="line">    ref = 0x7ffff3802d70, ast = 0x7ffff3802d70, zv = 0x7ffff3802d70, ptr = 0x7ffff3802d70, ce = 0x7ffff3802d70, func = 0x7ffff3802d70, ww = &#123;w1 = 4085263728, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 262, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.str</span><br><span class="line"><span class="variable">$12</span> = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 22&#125;&#125;, h = 0, len = 16, val = <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.str.val@16</span><br><span class="line"><span class="variable">$13</span> = <span class="string">&quot;1631431095String&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">1631431095String</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$14</span> = (zval *) 0x7ffff3814090</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$15</span> = &#123;value = &#123;lval = 140737278651760, dval = 6.9533454471021284e-310, counted = 0x7ffff3802d70, str = 0x7ffff3802d70, arr = 0x7ffff3802d70, obj = 0x7ffff3802d70, res = 0x7ffff3802d70,</span><br><span class="line">    ref = 0x7ffff3802d70, ast = 0x7ffff3802d70, zv = 0x7ffff3802d70, ptr = 0x7ffff3802d70, ce = 0x7ffff3802d70, func = 0x7ffff3802d70, ww = &#123;w1 = 4085263728, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 262, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.str</span><br><span class="line"><span class="variable">$16</span> = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 22&#125;&#125;, h = 0, len = 16, val = <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.str.val@16</span><br><span class="line"><span class="variable">$17</span> = <span class="string">&quot;1631431095String&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">1631431095String</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$18</span> = (zval *) 0x7ffff3814080</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$19</span> = &#123;value = &#123;lval = 140737278651760, dval = 6.9533454471021284e-310, counted = 0x7ffff3802d70, str = 0x7ffff3802d70, arr = 0x7ffff3802d70, obj = 0x7ffff3802d70, res = 0x7ffff3802d70,</span><br><span class="line">    ref = 0x7ffff3802d70, ast = 0x7ffff3802d70, zv = 0x7ffff3802d70, ptr = 0x7ffff3802d70, ce = 0x7ffff3802d70, func = 0x7ffff3802d70, ww = &#123;w1 = 4085263728, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 262, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.str</span><br><span class="line"><span class="variable">$20</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 22&#125;&#125;, h = 0, len = 16, val = <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.str.val@16</span><br><span class="line"><span class="variable">$21</span> = <span class="string">&quot;1631431095String&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">1631431095String</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$22</span> = (zval *) 0x7ffff3814090</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$23</span> = &#123;value = &#123;lval = 140737278646144, dval = 6.9533454468246611e-310, counted = 0x7ffff3801780, str = 0x7ffff3801780, arr = 0x7ffff3801780, obj = 0x7ffff3801780, res = 0x7ffff3801780,</span><br><span class="line">    ref = 0x7ffff3801780, ast = 0x7ffff3801780, zv = 0x7ffff3801780, ptr = 0x7ffff3801780, ce = 0x7ffff3801780, func = 0x7ffff3801780, ww = &#123;w1 = 4085258112, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.str</span><br><span class="line"><span class="variable">$24</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372247531462777, len = 5, val = <span class="string">&quot;H&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.str.val@5</span><br><span class="line"><span class="variable">$25</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;String&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> . <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gdb /home/vagrant/codes/php80/bin/php</span></span><br><span class="line">(gdb) b ZEND_ECHO_SPEC_CV_HANDLER</span><br><span class="line">Breakpoint 1 at 0x5c96a8: file /vagrant/php-8.0.10/Zend/zend_vm_execute.h, line 37184.</span><br><span class="line">(gdb) r reference.php</span><br><span class="line">Starting program: /home/vagrant/codes/php80/bin/php reference.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$1</span> = (zval *) 0x7ffff3814070</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$2</span> = &#123;value = &#123;lval = 140737278645952, dval = 6.9533454468151751e-310, counted = 0x7ffff38016c0, str = 0x7ffff38016c0, arr = 0x7ffff38016c0, obj = 0x7ffff38016c0, res = 0x7ffff38016c0, ref = 0x7ffff38016c0,</span><br><span class="line">    ast = 0x7ffff38016c0, zv = 0x7ffff38016c0, ptr = 0x7ffff38016c0, ce = 0x7ffff38016c0, func = 0x7ffff38016c0, ww = &#123;w1 = 4085257920, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 266, v = &#123;<span class="built_in">type</span> = 10 <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">      type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">String</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$3</span> = (zval *) 0x7ffff3814080</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$4</span> = &#123;value = &#123;lval = 140737278645952, dval = 6.9533454468151751e-310, counted = 0x7ffff38016c0, str = 0x7ffff38016c0, arr = 0x7ffff38016c0, obj = 0x7ffff38016c0, res = 0x7ffff38016c0, ref = 0x7ffff38016c0,</span><br><span class="line">    ast = 0x7ffff38016c0, zv = 0x7ffff38016c0, ptr = 0x7ffff38016c0, ce = 0x7ffff38016c0, func = 0x7ffff38016c0, ww = &#123;w1 = 4085257920, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 266, v = &#123;<span class="built_in">type</span> = 10 <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">      type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p <span class="variable">$4</span>.value.ref</span><br><span class="line"><span class="variable">$5</span> = (zend_reference *) 0x7ffff38016c0</span><br><span class="line">(gdb) p *<span class="variable">$4</span>.value.ref</span><br><span class="line"><span class="variable">$6</span> = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 26&#125;&#125;, val = &#123;value = &#123;lval = 140737278646080, dval = 6.9533454468214991e-310, counted = 0x7ffff3801740, str = 0x7ffff3801740, arr = 0x7ffff3801740,</span><br><span class="line">      obj = 0x7ffff3801740, res = 0x7ffff3801740, ref = 0x7ffff3801740, ast = 0x7ffff3801740, zv = 0x7ffff3801740, ptr = 0x7ffff3801740, ce = 0x7ffff3801740, func = 0x7ffff3801740, ww = &#123;w1 = 4085258048,</span><br><span class="line">        w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0,</span><br><span class="line">      fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;, sources = &#123;ptr = 0x0, list = 0&#125;&#125;</span><br><span class="line">(gdb) p *<span class="variable">$4</span>.value.ref.val.value.str</span><br><span class="line"><span class="variable">$7</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223378989633936348, len = 6, val = <span class="string">&quot;S&quot;</span>&#125;</span><br><span class="line">(gdb) p *<span class="variable">$4</span>.value.ref.val.value.str.val@6</span><br><span class="line"><span class="variable">$8</span> = <span class="string">&quot;String&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">String</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$9</span> = (zval *) 0x7ffff3814070</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$10</span> = &#123;value = &#123;lval = 140737278645952, dval = 6.9533454468151751e-310, counted = 0x7ffff38016c0, str = 0x7ffff38016c0, arr = 0x7ffff38016c0, obj = 0x7ffff38016c0, res = 0x7ffff38016c0,</span><br><span class="line">    ref = 0x7ffff38016c0, ast = 0x7ffff38016c0, zv = 0x7ffff38016c0, ptr = 0x7ffff38016c0, ce = 0x7ffff38016c0, func = 0x7ffff38016c0, ww = &#123;w1 = 4085257920, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 266, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 10 <span class="string">&#x27;\n&#x27;</span>, type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref</span><br><span class="line"><span class="variable">$11</span> = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 26&#125;&#125;, val = &#123;value = &#123;lval = 140737278646144, dval = 6.9533454468246611e-310, counted = 0x7ffff3801780, str = 0x7ffff3801780, arr = 0x7ffff3801780,</span><br><span class="line">      obj = 0x7ffff3801780, res = 0x7ffff3801780, ref = 0x7ffff3801780, ast = 0x7ffff3801780, zv = 0x7ffff3801780, ptr = 0x7ffff3801780, ce = 0x7ffff3801780, func = 0x7ffff3801780, ww = &#123;w1 = 4085258112,</span><br><span class="line">        w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0,</span><br><span class="line">      fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;, sources = &#123;ptr = 0x0, list = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref.val.value.str</span><br><span class="line"><span class="variable">$12</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372247531462777, len = 5, val = <span class="string">&quot;H&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.ref.val.value.str.val@5</span><br><span class="line"><span class="variable">$13</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Hello</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$14</span> = (zval *) 0x7ffff3814080</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$15</span> = &#123;value = &#123;lval = 140737278645952, dval = 6.9533454468151751e-310, counted = 0x7ffff38016c0, str = 0x7ffff38016c0, arr = 0x7ffff38016c0, obj = 0x7ffff38016c0, res = 0x7ffff38016c0,</span><br><span class="line">    ref = 0x7ffff38016c0, ast = 0x7ffff38016c0, zv = 0x7ffff38016c0, ptr = 0x7ffff38016c0, ce = 0x7ffff38016c0, func = 0x7ffff38016c0, ww = &#123;w1 = 4085257920, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 266, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 10 <span class="string">&#x27;\n&#x27;</span>, type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref</span><br><span class="line"><span class="variable">$16</span> = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 26&#125;&#125;, val = &#123;value = &#123;lval = 140737278646144, dval = 6.9533454468246611e-310, counted = 0x7ffff3801780, str = 0x7ffff3801780, arr = 0x7ffff3801780,</span><br><span class="line">      obj = 0x7ffff3801780, res = 0x7ffff3801780, ref = 0x7ffff3801780, ast = 0x7ffff3801780, zv = 0x7ffff3801780, ptr = 0x7ffff3801780, ce = 0x7ffff3801780, func = 0x7ffff3801780, ww = &#123;w1 = 4085258112,</span><br><span class="line">        w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0,</span><br><span class="line">      fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;, sources = &#123;ptr = 0x0, list = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref.val.value.str</span><br><span class="line"><span class="variable">$17</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372247531462777, len = 5, val = <span class="string">&quot;H&quot;</span>&#125;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Hello</span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$18</span> = (zval *) 0x7ffff3814080</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$19</span> = &#123;value = &#123;lval = 140737278645952, dval = 6.9533454468151751e-310, counted = 0x7ffff38016c0, str = 0x7ffff38016c0, arr = 0x7ffff38016c0, obj = 0x7ffff38016c0, res = 0x7ffff38016c0,</span><br><span class="line">    ref = 0x7ffff38016c0, ast = 0x7ffff38016c0, zv = 0x7ffff38016c0, ptr = 0x7ffff38016c0, ce = 0x7ffff38016c0, func = 0x7ffff38016c0, ww = &#123;w1 = 4085257920, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 0, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 0 <span class="string">&#x27;\000&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref</span><br><span class="line"><span class="variable">$20</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 26&#125;&#125;, val = &#123;value = &#123;lval = 140737278646144, dval = 6.9533454468246611e-310, counted = 0x7ffff3801780, str = 0x7ffff3801780, arr = 0x7ffff3801780,</span><br><span class="line">      obj = 0x7ffff3801780, res = 0x7ffff3801780, ref = 0x7ffff3801780, ast = 0x7ffff3801780, zv = 0x7ffff3801780, ptr = 0x7ffff3801780, ce = 0x7ffff3801780, func = 0x7ffff3801780, ww = &#123;w1 = 4085258112,</span><br><span class="line">        w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0,</span><br><span class="line">      fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;, sources = &#123;ptr = 0x0, list = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref.val.value.str</span><br><span class="line"><span class="variable">$21</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372247531462777, len = 5, val = <span class="string">&quot;H&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.ref.val.value.str.val@5</span><br><span class="line"><span class="variable">$22</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Warning: Undefined variable <span class="variable">$b</span> <span class="keyword">in</span> /home/vagrant/codes/tests/reference.php on line 13</span><br><span class="line"></span><br><span class="line">Breakpoint 1, ZEND_ECHO_SPEC_CV_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:37184</span><br><span class="line">37184		SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line">37185		z = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line">37187		<span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line"><span class="variable">$23</span> = (zval *) 0x7ffff3814070</span><br><span class="line">(gdb) p *z</span><br><span class="line"><span class="variable">$24</span> = &#123;value = &#123;lval = 140737278645952, dval = 6.9533454468151751e-310, counted = 0x7ffff38016c0, str = 0x7ffff38016c0, arr = 0x7ffff38016c0, obj = 0x7ffff38016c0, res = 0x7ffff38016c0,</span><br><span class="line">    ref = 0x7ffff38016c0, ast = 0x7ffff38016c0, zv = 0x7ffff38016c0, ptr = 0x7ffff38016c0, ce = 0x7ffff38016c0, func = 0x7ffff38016c0, ww = &#123;w1 = 4085257920, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 266, v = &#123;</span><br><span class="line">      <span class="built_in">type</span> = 10 <span class="string">&#x27;\n&#x27;</span>, type_flags = 1 <span class="string">&#x27;\001&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span><br><span class="line">    constant_flags = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref</span><br><span class="line"><span class="variable">$25</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 26&#125;&#125;, val = &#123;value = &#123;lval = 140737278646144, dval = 6.9533454468246611e-310, counted = 0x7ffff3801780, str = 0x7ffff3801780, arr = 0x7ffff3801780,</span><br><span class="line">      obj = 0x7ffff3801780, res = 0x7ffff3801780, ref = 0x7ffff3801780, ast = 0x7ffff3801780, zv = 0x7ffff3801780, ptr = 0x7ffff3801780, ce = 0x7ffff3801780, func = 0x7ffff3801780, ww = &#123;w1 = 4085258112,</span><br><span class="line">        w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;<span class="built_in">type</span> = 6 <span class="string">&#x27;\006&#x27;</span>, type_flags = 0 <span class="string">&#x27;\000&#x27;</span>, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0,</span><br><span class="line">      fe_iter_idx = 0, access_flags = 0, property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;, sources = &#123;ptr = 0x0, list = 0&#125;&#125;</span><br><span class="line">(gdb) p *z.value.ref.val.value.str</span><br><span class="line"><span class="variable">$26</span> = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372247531462777, len = 5, val = <span class="string">&quot;H&quot;</span>&#125;</span><br><span class="line">(gdb) p *z.value.ref.val.value.str.val@5</span><br><span class="line"><span class="variable">$27</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<h1 id="Zend-Array"><a href="#Zend-Array" class="headerlink" title="Zend Array"></a>Zend Array</h1><h2 id="Zend-Array-结构体"><a href="#Zend-Array-结构体" class="headerlink" title="Zend Array 结构体"></a>Zend Array 结构体</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> <span class="title">HashTable</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> &#123;</span></span><br><span class="line">	zend_refcounted_h gc;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">			<span class="built_in">ZEND_ENDIAN_LOHI_4</span>(</span><br><span class="line">				zend_uchar    flags,</span><br><span class="line">				zend_uchar    _unused,</span><br><span class="line">				zend_uchar    nIteratorsCount,</span><br><span class="line">				zend_uchar    _unused2)</span><br><span class="line">		&#125; v;</span><br><span class="line">		<span class="keyword">uint32_t</span> flags;</span><br><span class="line">	&#125; u;</span><br><span class="line">	<span class="keyword">uint32_t</span>          nTableMask;</span><br><span class="line">	Bucket            *arData;</span><br><span class="line">	<span class="keyword">uint32_t</span>          nNumUsed;</span><br><span class="line">	<span class="keyword">uint32_t</span>          nNumOfElements;</span><br><span class="line">	<span class="keyword">uint32_t</span>          nTableSize;</span><br><span class="line">	<span class="keyword">uint32_t</span>          nInternalPointer;</span><br><span class="line">	zend_long         nNextFreeElement;</span><br><span class="line">	<span class="keyword">dtor_func_t</span>       pDestructor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * HashTable Data Layout</span></span><br><span class="line"><span class="comment"> * =====================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *                 +=============================+</span></span><br><span class="line"><span class="comment"> *                 | HT_HASH(ht, ht-&gt;nTableMask) |</span></span><br><span class="line"><span class="comment"> *                 | ...                         |</span></span><br><span class="line"><span class="comment"> *                 | HT_HASH(ht, -1)             |</span></span><br><span class="line"><span class="comment"> *                 +-----------------------------+</span></span><br><span class="line"><span class="comment"> * ht-&gt;arData ---&gt; | Bucket[0]                   |</span></span><br><span class="line"><span class="comment"> *                 | ...                         |</span></span><br><span class="line"><span class="comment"> *                 | Bucket[ht-&gt;nTableSize-1]    |</span></span><br><span class="line"><span class="comment"> *                 +=============================+</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="Zend-Array-运行调试"><a href="#Zend-Array-运行调试" class="headerlink" title="Zend Array 运行调试"></a>Zend Array 运行调试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gdb /home/vagrant/codes/php80/bin/php</span></span><br><span class="line">(gdb) b zend_compile</span><br><span class="line">Breakpoint 1 at 0x4deed8: file /vagrant/php-8.0.10/Zend/zend_language_scanner.c, line 603.</span><br><span class="line">(gdb) r array.php</span><br><span class="line">Starting program: /home/vagrant/codes/php80/bin/php array.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, zend_compile (<span class="built_in">type</span>=2) at /vagrant/php-8.0.10/Zend/zend_language_scanner.c:603</span><br><span class="line">603	&#123;</span><br><span class="line">(gdb) s</span><br><span class="line">604		zend_op_array *op_array = NULL;</span><br><span class="line">(gdb) b _zend_hash_init</span><br><span class="line">Breakpoint 2 at 0x555555aa768c: file /vagrant/php-8.0.10/Zend/zend_hash.c, line 266.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, _zend_hash_init (ht=0x555556773ab0 &lt;compiler_globals+272&gt;, nSize=8, pDestructor=0x0, persistent=<span class="literal">false</span>) at /vagrant/php-8.0.10/Zend/zend_hash.c:266</span><br><span class="line">266		_zend_hash_init_int(ht, nSize, pDestructor, persistent);</span><br><span class="line">(gdb) s</span><br><span class="line">_zend_hash_init_int (ht=0x555556773ab0 &lt;compiler_globals+272&gt;, nSize=8, pDestructor=0x0, persistent=<span class="literal">false</span>) at /vagrant/php-8.0.10/Zend/zend_hash.c:251</span><br><span class="line">251		GC_SET_REFCOUNT(ht, 1);</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  _zend_hash_init_int (ht=0x555556773ab0 &lt;compiler_globals+272&gt;, nSize=8, pDestructor=0x0, persistent=false) at /vagrant/php-8.0.10/Zend/zend_hash.c:251</span></span><br><span class="line"><span class="comment">#1  0x0000555555aa76a3 in _zend_hash_init (ht=0x555556773ab0 &lt;compiler_globals+272&gt;, nSize=8, pDestructor=0x0, persistent=false) at /vagrant/php-8.0.10/Zend/zend_hash.c:266</span></span><br><span class="line"><span class="comment">#2  0x0000555555a5c950 in zend_file_context_begin (prev_context=0x7fffffffa940) at /vagrant/php-8.0.10/Zend/zend_compile.c:358</span></span><br><span class="line"><span class="comment">#3  0x0000555555a32fe4 in zend_compile (type=2) at /vagrant/php-8.0.10/Zend/zend_language_scanner.c:628</span></span><br><span class="line"><span class="comment">#4  0x0000555555a3316e in compile_file (file_handle=0x7fffffffd1d0, type=8) at /vagrant/php-8.0.10/Zend/zend_language_scanner.c:665</span></span><br><span class="line"><span class="comment">#5  0x000055555585b013 in phar_compile_file (file_handle=0x7fffffffd1d0, type=8) at /vagrant/php-8.0.10/ext/phar/phar.c:3364</span></span><br><span class="line"><span class="comment">#6  0x0000555555a94ae5 in zend_execute_scripts (type=8, retval=0x0, file_count=3) at /vagrant/php-8.0.10/Zend/zend.c:1674</span></span><br><span class="line"><span class="comment">#7  0x00005555559f740c in php_execute_script (primary_file=0x7fffffffd1d0) at /vagrant/php-8.0.10/main/main.c:2524</span></span><br><span class="line"><span class="comment">#8  0x0000555555b81550 in do_cli (argc=2, argv=0x55555678a980) at /vagrant/php-8.0.10/sapi/cli/php_cli.c:949</span></span><br><span class="line"><span class="comment">#9  0x0000555555b82596 in main (argc=2, argv=0x55555678a980) at /vagrant/php-8.0.10/sapi/cli/php_cli.c:1337</span></span><br><span class="line">(gdb) n</span><br><span class="line">252		GC_TYPE_INFO(ht) = GC_ARRAY | (persistent ? ((GC_PERSISTENT|GC_NOT_COLLECTABLE) &lt;&lt; <span class="string">GC_FLAGS_SHIFT) : 0);</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$1 = (HashTable *) 0x555556773ab0 &lt;compiler_globals+272&gt;</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$2 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 0&#125;&#125;, u = &#123;v = &#123;flags = 0 &#x27;\000&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 0&#125;, nTableMask = 0, arData = 0x0, nNumUsed = 0,</span></span><br><span class="line"><span class="string">  nNumOfElements = 0, nTableSize = 0, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">253		HT_FLAGS(ht) = HASH_FLAG_UNINITIALIZED;</span></span><br><span class="line"><span class="string">(gdb) p HASH_FLAG_UNINITIALIZED</span></span><br><span class="line"><span class="string">No symbol &quot;HASH_FLAG_UNINITIALIZED&quot; in current context.</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$3 = (HashTable *) 0x555556773ab0 &lt;compiler_globals+272&gt;</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$4 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 0 &#x27;\000&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 0&#125;, nTableMask = 0, arData = 0x0, nNumUsed = 0,</span></span><br><span class="line"><span class="string">  nNumOfElements = 0, nTableSize = 0, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">254		ht-&gt;nTableMask = HT_MIN_MASK;</span></span><br><span class="line"><span class="string">(gdb) p HT_MIN_MASK</span></span><br><span class="line"><span class="string">No symbol &quot;HT_MIN_MASK&quot; in current context.</span></span><br><span class="line"><span class="string">(gdb) p ht-&gt;nTableMask</span></span><br><span class="line"><span class="string">$5 = 0</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">255		HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$6 = (HashTable *) 0x555556773ab0 &lt;compiler_globals+272&gt;</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$7 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294, arData = 0x0,</span></span><br><span class="line"><span class="string">  nNumUsed = 0, nNumOfElements = 0, nTableSize = 0, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) p (int32_t)4294967294</span></span><br><span class="line"><span class="string">$8 = -2</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">256		ht-&gt;nNumUsed = 0;</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$9 = (HashTable *) 0x555556773ab0 &lt;compiler_globals+272&gt;</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$10 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294, arData = 0x5555563477f8,</span></span><br><span class="line"><span class="string">  nNumUsed = 0, nNumOfElements = 0, nTableSize = 0, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">257		ht-&gt;nNumOfElements = 0;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">258		ht-&gt;nInternalPointer = 0;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">259		ht-&gt;nNextFreeElement = ZEND_LONG_MIN;</span></span><br><span class="line"><span class="string">(gdb) p ZEND_LONG_MIN</span></span><br><span class="line"><span class="string">No symbol &quot;ZEND_LONG_MIN&quot; in current context.</span></span><br><span class="line"><span class="string">(gdb) p ht-&gt;nNextFreeElement</span></span><br><span class="line"><span class="string">$11 = 0</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$12 = (HashTable *) 0x555556773ab0 &lt;compiler_globals+272&gt;</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$13 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294, arData = 0x5555563477f8,</span></span><br><span class="line"><span class="string">  nNumUsed = 0, nNumOfElements = 0, nTableSize = 0, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">260		ht-&gt;pDestructor = pDestructor;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">261		ht-&gt;nTableSize = zend_hash_check_size(nSize);</span></span><br><span class="line"><span class="string">(gdb) p nSize</span></span><br><span class="line"><span class="string">$14 = 8</span></span><br><span class="line"><span class="string">(gdb) p ht-&gt;nTableSize</span></span><br><span class="line"><span class="string">$15 = 0</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">262	&#125;</span></span><br><span class="line"><span class="string">(gdb) p ht-&gt;nTableSize</span></span><br><span class="line"><span class="string">$16 = 8</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$17 = (HashTable *) 0x555556773ab0 &lt;compiler_globals+272&gt;</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$18 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294, arData = 0x5555563477f8,</span></span><br><span class="line"><span class="string">  nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = -9223372036854775808, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">$19 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294, arData = 0x5555563477f8,</span></span><br><span class="line"><span class="string">  nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = -9223372036854775808, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) b zend_execute</span></span><br><span class="line"><span class="string">Breakpoint 3 at 0x555555b40f86: file /vagrant/php-8.0.10/Zend/zend_vm_execute.h, line 58454.</span></span><br><span class="line"><span class="string">(gdb) c</span></span><br><span class="line"><span class="string">Continuing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Breakpoint 3, zend_execute (op_array=0x7ffff385c280, return_value=0x0) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:58454</span></span><br><span class="line"><span class="string">58454		if (EG(exception) != NULL) &#123;</span></span><br><span class="line"><span class="string">(gdb) p op_array</span></span><br><span class="line"><span class="string">$20 = (zend_op_array *) 0x7ffff385c280</span></span><br><span class="line"><span class="string">(gdb) p *op_array</span></span><br><span class="line"><span class="string">$21 = &#123;type = 2 &#x27;\002&#x27;, arg_flags = &quot;\000\000&quot;, fn_flags = 100663296, function_name = 0x0, scope = 0x0, prototype = 0x0, num_args = 0, required_num_args = 0, arg_info = 0x0, attributes = 0x0,</span></span><br><span class="line"><span class="string">  cache_size = 0, last_var = 1, T = 7, last = 15, opcodes = 0x7ffff3877000, run_time_cache__ptr = 0x0, static_variables_ptr__ptr = 0x7ffff385c2e0, static_variables = 0x0, vars = 0x7ffff388b028,</span></span><br><span class="line"><span class="string">  refcount = 0x7ffff388b000, last_live_range = 0, last_try_catch = 0, live_range = 0x0, try_catch_array = 0x0, filename = 0x7ffff3858300, line_start = 1, line_end = 16, doc_comment = 0x0, last_literal = 13,</span></span><br><span class="line"><span class="string">  literals = 0x7ffff38771e0, reserved = &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p $21.opcodes[0]</span></span><br><span class="line"><span class="string">$22 = &#123;handler = 0x555555b4047e &lt;execute_ex+17348&gt;, op1 = &#123;constant = 80, var = 80, num = 80, opline_num = 80, jmp_offset = 80&#125;, op2 = &#123;constant = 480, var = 480, num = 480, opline_num = 480,</span></span><br><span class="line"><span class="string">    jmp_offset = 480&#125;, result = &#123;constant = 0, var = 0, num = 0, opline_num = 0, jmp_offset = 0&#125;, extended_value = 0, lineno = 3, opcode = 22 &#x27;\026&#x27;, op1_type = 8 &#x27;\b&#x27;, op2_type = 1 &#x27;\001&#x27;,</span></span><br><span class="line"><span class="string">  result_type = 0 &#x27;\000&#x27;&#125;</span></span><br><span class="line"><span class="string">(gdb) p $21.opcodes[1]</span></span><br><span class="line"><span class="string">$23 = &#123;handler = 0x555555b4043e &lt;execute_ex+17284&gt;, op1 = &#123;constant = 80, var = 80, num = 80, opline_num = 80, jmp_offset = 80&#125;, op2 = &#123;constant = 464, var = 464, num = 464, opline_num = 464,</span></span><br><span class="line"><span class="string">    jmp_offset = 464&#125;, result = &#123;constant = 1, var = 1, num = 1, opline_num = 1, jmp_offset = 1&#125;, extended_value = 0, lineno = 4, opcode = 23 &#x27;\027&#x27;, op1_type = 8 &#x27;\b&#x27;, op2_type = 1 &#x27;\001&#x27;,</span></span><br><span class="line"><span class="string">  result_type = 0 &#x27;\000&#x27;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">58458		object_or_called_scope = zend_get_this_object(EG(current_execute_data));</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58459		if (EXPECTED(!object_or_called_scope)) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58460			object_or_called_scope = zend_get_called_scope(EG(current_execute_data));</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58461			call_info = ZEND_CALL_TOP_CODE | ZEND_CALL_HAS_SYMBOL_TABLE;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58465		execute_data = zend_vm_stack_push_call_frame(call_info,</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58467		if (EG(current_execute_data)) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58470			execute_data-&gt;symbol_table = &amp;EG(symbol_table);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58472		EX(prev_execute_data) = EG(current_execute_data);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58473		i_init_code_execute_data(execute_data, op_array, return_value);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58474		ZEND_OBSERVER_FCALL_BEGIN(execute_data);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58475		zend_execute_ex(execute_data);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:50426</span></span><br><span class="line"><span class="string">50426	&#123;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">50443		vm_stack_data.orig_opline = opline;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">50446		vm_stack_data.orig_execute_data = execute_data;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">50447		execute_data = ex;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">50452		memset(vm_stack_data.hybrid_jit_red_zone, 0, ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">50453		if (zend_touch_vm_stack_data) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">50459		if (UNEXPECTED(execute_data == NULL)) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">53921		LOAD_OPLINE();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">53922		ZEND_VM_LOOP_INTERRUPT_CHECK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">53929			HYBRID_SWITCH() &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">57722					ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:40834</span></span><br><span class="line"><span class="string">40834		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40835		value = RT_CONSTANT(opline, opline-&gt;op2);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40836		variable_ptr = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb) p value</span></span><br><span class="line"><span class="string">$24 = (zval *) 0x7ffff38771e0</span></span><br><span class="line"><span class="string">(gdb) p *value</span></span><br><span class="line"><span class="string">$25 = &#123;value = &#123;lval = 93825011099008, dval = 4.6355714704693513e-310, counted = 0x555556752580 &lt;zend_empty_array&gt;, str = 0x555556752580 &lt;zend_empty_array&gt;, arr = 0x555556752580 &lt;zend_empty_array&gt;,</span></span><br><span class="line"><span class="string">    obj = 0x555556752580 &lt;zend_empty_array&gt;, res = 0x555556752580 &lt;zend_empty_array&gt;, ref = 0x555556752580 &lt;zend_empty_array&gt;, ast = 0x555556752580 &lt;zend_empty_array&gt;,</span></span><br><span class="line"><span class="string">    zv = 0x555556752580 &lt;zend_empty_array&gt;, ptr = 0x555556752580 &lt;zend_empty_array&gt;, ce = 0x555556752580 &lt;zend_empty_array&gt;, func = 0x555556752580 &lt;zend_empty_array&gt;, ww = &#123;w1 = 1450517888, w2 = 21845&#125;&#125;,</span></span><br><span class="line"><span class="string">  u1 = &#123;type_info = 7, v = &#123;type = 7 &#x27;\a&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0,</span></span><br><span class="line"><span class="string">    property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p $25.value.arr</span></span><br><span class="line"><span class="string">$26 = (zend_array *) 0x555556752580 &lt;zend_empty_array&gt;</span></span><br><span class="line"><span class="string">(gdb) p *$25.value.arr</span></span><br><span class="line"><span class="string">$27 = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 71&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x5555563477f8, nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40838		value = zend_assign_to_variable(variable_ptr, value, IS_CONST, EX_USES_STRICT_TYPES());</span></span><br><span class="line"><span class="string">(gdb) p variable_ptr</span></span><br><span class="line"><span class="string">$28 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *variable_ptr</span></span><br><span class="line"><span class="string">$29 = &#123;value = &#123;lval = 0, dval = 0, counted = 0x0, str = 0x0, arr = 0x0, obj = 0x0, res = 0x0, ref = 0x0, ast = 0x0, zv = 0x0, ptr = 0x0, ce = 0x0, func = 0x0, ww = &#123;w1 = 0, w2 = 0&#125;&#125;, u1 = &#123;type_info = 0,</span></span><br><span class="line"><span class="string">    v = &#123;type = 0 &#x27;\000&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0,</span></span><br><span class="line"><span class="string">    property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40845		ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40846	&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:57723</span></span><br><span class="line"><span class="string">57723					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">57706					ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:40386</span></span><br><span class="line"><span class="string">40386		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40387		orig_object_ptr = object_ptr = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40389		if (EXPECTED(Z_TYPE_P(object_ptr) == IS_ARRAY)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p orig_object_ptr</span></span><br><span class="line"><span class="string">$30 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *orig_object_ptr</span></span><br><span class="line"><span class="string">$31 = &#123;value = &#123;lval = 93825011099008, dval = 4.6355714704693513e-310, counted = 0x555556752580 &lt;zend_empty_array&gt;, str = 0x555556752580 &lt;zend_empty_array&gt;, arr = 0x555556752580 &lt;zend_empty_array&gt;,</span></span><br><span class="line"><span class="string">    obj = 0x555556752580 &lt;zend_empty_array&gt;, res = 0x555556752580 &lt;zend_empty_array&gt;, ref = 0x555556752580 &lt;zend_empty_array&gt;, ast = 0x555556752580 &lt;zend_empty_array&gt;,</span></span><br><span class="line"><span class="string">    zv = 0x555556752580 &lt;zend_empty_array&gt;, ptr = 0x555556752580 &lt;zend_empty_array&gt;, ce = 0x555556752580 &lt;zend_empty_array&gt;, func = 0x555556752580 &lt;zend_empty_array&gt;, ww = &#123;w1 = 1450517888, w2 = 21845&#125;&#125;,</span></span><br><span class="line"><span class="string">  u1 = &#123;type_info = 7, v = &#123;type = 7 &#x27;\a&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0,</span></span><br><span class="line"><span class="string">    property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *orig_object_ptr.value.arr</span></span><br><span class="line"><span class="string">$32 = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 71&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x5555563477f8, nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p object_ptr</span></span><br><span class="line"><span class="string">$33 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$34 = &#123;value = &#123;lval = 93825011099008, dval = 4.6355714704693513e-310, counted = 0x555556752580 &lt;zend_empty_array&gt;, str = 0x555556752580 &lt;zend_empty_array&gt;, arr = 0x555556752580 &lt;zend_empty_array&gt;,</span></span><br><span class="line"><span class="string">    obj = 0x555556752580 &lt;zend_empty_array&gt;, res = 0x555556752580 &lt;zend_empty_array&gt;, ref = 0x555556752580 &lt;zend_empty_array&gt;, ast = 0x555556752580 &lt;zend_empty_array&gt;,</span></span><br><span class="line"><span class="string">    zv = 0x555556752580 &lt;zend_empty_array&gt;, ptr = 0x555556752580 &lt;zend_empty_array&gt;, ce = 0x555556752580 &lt;zend_empty_array&gt;, func = 0x555556752580 &lt;zend_empty_array&gt;, ww = &#123;w1 = 1450517888, w2 = 21845&#125;&#125;,</span></span><br><span class="line"><span class="string">  u1 = &#123;type_info = 7, v = &#123;type = 7 &#x27;\a&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0,</span></span><br><span class="line"><span class="string">    property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.arr</span></span><br><span class="line"><span class="string">$35 = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 71&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x5555563477f8, nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40390	try_assign_dim_array:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40391			SEPARATE_ARRAY(object_ptr);</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40419				dim = RT_CONSTANT(opline, opline-&gt;op2);</span></span><br><span class="line"><span class="string">(gdb) p object_ptr</span></span><br><span class="line"><span class="string">$36 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$37 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb)  p *object_ptr.value.arr</span></span><br><span class="line"><span class="string">$38 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294, arData = 0x5555563477f8,</span></span><br><span class="line"><span class="string">  nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x555556752580</span></span><br><span class="line"><span class="string">$39 = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 71&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x5555563477f8, nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x7ffff3858360</span></span><br><span class="line"><span class="string">$40 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294, arData = 0x5555563477f8,</span></span><br><span class="line"><span class="string">  nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40421					variable_ptr = zend_fetch_dimension_address_inner_W_CONST(Z_ARRVAL_P(object_ptr), dim EXECUTE_DATA_CC);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40425				if (UNEXPECTED(variable_ptr == NULL)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p *variable_ptr</span></span><br><span class="line"><span class="string">$41 = &#123;value = &#123;lval = 0, dval = 0, counted = 0x0, str = 0x0, arr = 0x0, obj = 0x0, res = 0x0, ref = 0x0, ast = 0x0, zv = 0x0, ptr = 0x0, ce = 0x0, func = 0x0, ww = &#123;w1 = 0, w2 = 0&#125;&#125;, u1 = &#123;type_info = 1,</span></span><br><span class="line"><span class="string">    v = &#123;type = 1 &#x27;\001&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 21845, cache_slot = 21845, opline_num = 21845, lineno = 21845, num_args = 21845, fe_pos = 21845, fe_iter_idx = 21845,</span></span><br><span class="line"><span class="string">    access_flags = 21845, property_guard = 21845, constant_flags = 21845, extra = 21845&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40428				value = RT_CONSTANT((opline+1), (opline+1)-&gt;op1);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40429				value = zend_assign_to_variable(variable_ptr, value, IS_CONST, EX_USES_STRICT_TYPES());</span></span><br><span class="line"><span class="string">(gdb) p value</span></span><br><span class="line"><span class="string">$42 = (zval *) 0x7ffff3877200</span></span><br><span class="line"><span class="string">(gdb) p *value</span></span><br><span class="line"><span class="string">$43 = &#123;value = &#123;lval = 93825011376272, dval = 4.635571484168013e-310, counted = 0x555556796090, str = 0x555556796090, arr = 0x555556796090, obj = 0x555556796090, res = 0x555556796090, ref = 0x555556796090,</span></span><br><span class="line"><span class="string">    ast = 0x555556796090, zv = 0x555556796090, ptr = 0x555556796090, ce = 0x555556796090, func = 0x555556796090, ww = &#123;w1 = 1450795152, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;type = 6 &#x27;\006&#x27;,</span></span><br><span class="line"><span class="string">      type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str</span></span><br><span class="line"><span class="string">$44 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 470&#125;&#125;, h = 9223372036854953478, len = 1, val = &quot;a&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str.val@1</span></span><br><span class="line"><span class="string">$45 = &quot;a&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40431			if (UNEXPECTED(RETURN_VALUE_USED(opline))) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40487		ZEND_VM_NEXT_OPCODE_EX(1, 2);</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x555556752580</span></span><br><span class="line"><span class="string">$46 = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 71&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x5555563477f8, nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x7ffff3858360</span></span><br><span class="line"><span class="string">$47 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 20 &#x27;\024&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 20&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff385c3c8, nNumUsed = 2, nNumOfElements = 1, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 2, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40488	&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:57707</span></span><br><span class="line"><span class="string">57707					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">58090					ZEND_ASSIGN_DIM_SPEC_CV_UNUSED_OP_DATA_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_ASSIGN_DIM_SPEC_CV_UNUSED_OP_DATA_CONST_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:45781</span></span><br><span class="line"><span class="string">45781		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">45782		orig_object_ptr = object_ptr = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb) p orig_object_ptr</span></span><br><span class="line"><span class="string">$48 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *orig_object_ptr</span></span><br><span class="line"><span class="string">$49 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *orig_object_ptr.value.arr</span></span><br><span class="line"><span class="string">$50 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 20 &#x27;\024&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 20&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff385c3c8, nNumUsed = 2, nNumOfElements = 1, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 2, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p object_ptr</span></span><br><span class="line"><span class="string">$51 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$52 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.arr</span></span><br><span class="line"><span class="string">$53 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 20 &#x27;\024&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 20&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff385c3c8, nNumUsed = 2, nNumOfElements = 1, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 2, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">45784		if (EXPECTED(Z_TYPE_P(object_ptr) == IS_ARRAY)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p object_ptr</span></span><br><span class="line"><span class="string">$54 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$55 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.arr</span></span><br><span class="line"><span class="string">$56 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 20 &#x27;\024&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 20&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff385c3c8, nNumUsed = 2, nNumOfElements = 1, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 2, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">45785	try_assign_dim_array:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">45786			SEPARATE_ARRAY(object_ptr);</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.arr</span></span><br><span class="line"><span class="string">$57 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 20 &#x27;\024&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 20&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff385c3c8, nNumUsed = 2, nNumOfElements = 1, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 2, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">45788				value = RT_CONSTANT((opline+1), (opline+1)-&gt;op1);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">45792				variable_ptr = zend_hash_next_index_insert(Z_ARRVAL_P(object_ptr), value);</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">45793				if (UNEXPECTED(variable_ptr == NULL)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p variable_ptr</span></span><br><span class="line"><span class="string">$58 = (zval *) 0x7ffff385c408</span></span><br><span class="line"><span class="string">(gdb) p *variable_ptr</span></span><br><span class="line"><span class="string">$59 = &#123;value = &#123;lval = 93825011376320, dval = 4.6355714841703845e-310, counted = 0x5555567960c0, str = 0x5555567960c0, arr = 0x5555567960c0, obj = 0x5555567960c0, res = 0x5555567960c0, ref = 0x5555567960c0,</span></span><br><span class="line"><span class="string">    ast = 0x5555567960c0, zv = 0x5555567960c0, ptr = 0x5555567960c0, ce = 0x5555567960c0, func = 0x5555567960c0, ww = &#123;w1 = 1450795200, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;type = 6 &#x27;\006&#x27;,</span></span><br><span class="line"><span class="string">      type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 32767, cache_slot = 32767, opline_num = 32767, lineno = 32767, num_args = 32767, fe_pos = 32767, fe_iter_idx = 32767, access_flags = 32767,</span></span><br><span class="line"><span class="string">    property_guard = 32767, constant_flags = 32767, extra = 32767&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">45809					if (UNEXPECTED(Z_REFCOUNTED_P(value))) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">45826			if (UNEXPECTED(RETURN_VALUE_USED(opline))) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">45882		ZEND_VM_NEXT_OPCODE_EX(1, 2);</span></span><br><span class="line"><span class="string">(gdb) p value</span></span><br><span class="line"><span class="string">$60 = (zval *) 0x7ffff3877210</span></span><br><span class="line"><span class="string">(gdb) p *value</span></span><br><span class="line"><span class="string">$61 = &#123;value = &#123;lval = 93825011376320, dval = 4.6355714841703845e-310, counted = 0x5555567960c0, str = 0x5555567960c0, arr = 0x5555567960c0, obj = 0x5555567960c0, res = 0x5555567960c0, ref = 0x5555567960c0,</span></span><br><span class="line"><span class="string">    ast = 0x5555567960c0, zv = 0x5555567960c0, ptr = 0x5555567960c0, ce = 0x5555567960c0, func = 0x5555567960c0, ww = &#123;w1 = 1450795200, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;type = 6 &#x27;\006&#x27;,</span></span><br><span class="line"><span class="string">      type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str</span></span><br><span class="line"><span class="string">$62 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 470&#125;&#125;, h = 9223372036854953479, len = 1, val = &quot;b&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x555556752580</span></span><br><span class="line"><span class="string">$63 = &#123;gc = &#123;refcount = 2, u = &#123;type_info = 71&#125;&#125;, u = &#123;v = &#123;flags = 8 &#x27;\b&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 8&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x5555563477f8, nNumUsed = 0, nNumOfElements = 0, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 0, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x7ffff3858360</span></span><br><span class="line"><span class="string">$64 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 20 &#x27;\024&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 20&#125;, nTableMask = 4294967294,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff385c3c8, nNumUsed = 3, nNumOfElements = 2, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p (int32_t)4294967294</span></span><br><span class="line"><span class="string">$65 = -2</span></span><br><span class="line"><span class="string">(gdb) p $64.arData[2]</span></span><br><span class="line"><span class="string">$66 = &#123;val = &#123;value = &#123;lval = 93825011376320, dval = 4.6355714841703845e-310, counted = 0x5555567960c0, str = 0x5555567960c0, arr = 0x5555567960c0, obj = 0x5555567960c0, res = 0x5555567960c0,</span></span><br><span class="line"><span class="string">      ref = 0x5555567960c0, ast = 0x5555567960c0, zv = 0x5555567960c0, ptr = 0x5555567960c0, ce = 0x5555567960c0, func = 0x5555567960c0, ww = &#123;w1 = 1450795200, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">        type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 32767, cache_slot = 32767, opline_num = 32767, lineno = 32767, num_args = 32767, fe_pos = 32767, fe_iter_idx = 32767,</span></span><br><span class="line"><span class="string">      access_flags = 32767, property_guard = 32767, constant_flags = 32767, extra = 32767&#125;&#125;, h = 2, key = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) p $64.arData[2].val.value.str</span></span><br><span class="line"><span class="string">$67 = (zend_string *) 0x5555567960c0</span></span><br><span class="line"><span class="string">(gdb) p *$64.arData[2].val.value.str</span></span><br><span class="line"><span class="string">$68 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 470&#125;&#125;, h = 9223372036854953479, len = 1, val = &quot;b&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *$64.arData[2].val.value.str.val@1</span></span><br><span class="line"><span class="string">$69 = &quot;b&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">45883	&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:58091</span></span><br><span class="line"><span class="string">58091					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">57706					ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:40386</span></span><br><span class="line"><span class="string">40386		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40387		orig_object_ptr = object_ptr = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40389		if (EXPECTED(Z_TYPE_P(object_ptr) == IS_ARRAY)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p object_ptr</span></span><br><span class="line"><span class="string">$70 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$71 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40390	try_assign_dim_array:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40391			SEPARATE_ARRAY(object_ptr);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40419				dim = RT_CONSTANT(opline, opline-&gt;op2);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40421					variable_ptr = zend_fetch_dimension_address_inner_W_CONST(Z_ARRVAL_P(object_ptr), dim EXECUTE_DATA_CC);</span></span><br><span class="line"><span class="string">(gdb) p dim</span></span><br><span class="line"><span class="string">$72 = (zval *) 0x7ffff3877220</span></span><br><span class="line"><span class="string">(gdb) p *dim</span></span><br><span class="line"><span class="string">$73 = &#123;value = &#123;lval = 140737278646400, dval = 6.9533454468373092e-310, counted = 0x7ffff3801880, str = 0x7ffff3801880, arr = 0x7ffff3801880, obj = 0x7ffff3801880, res = 0x7ffff3801880,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3801880, ast = 0x7ffff3801880, zv = 0x7ffff3801880, ptr = 0x7ffff3801880, ce = 0x7ffff3801880, func = 0x7ffff3801880, ww = &#123;w1 = 4085258368, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str</span></span><br><span class="line"><span class="string">$74 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639297, len = 2, val = &quot;k&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str.val@2</span></span><br><span class="line"><span class="string">$75 = &quot;k1&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40425				if (UNEXPECTED(variable_ptr == NULL)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p *variable_ptr</span></span><br><span class="line"><span class="string">$76 = &#123;value = &#123;lval = 0, dval = 0, counted = 0x0, str = 0x0, arr = 0x0, obj = 0x0, res = 0x0, ref = 0x0, ast = 0x0, zv = 0x0, ptr = 0x0, ce = 0x0, func = 0x0, ww = &#123;w1 = 0, w2 = 0&#125;&#125;, u1 = &#123;type_info = 1,</span></span><br><span class="line"><span class="string">    v = &#123;type = 1 &#x27;\001&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0,</span></span><br><span class="line"><span class="string">    property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40428				value = RT_CONSTANT((opline+1), (opline+1)-&gt;op1);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40429				value = zend_assign_to_variable(variable_ptr, value, IS_CONST, EX_USES_STRICT_TYPES());</span></span><br><span class="line"><span class="string">(gdb) p value</span></span><br><span class="line"><span class="string">$77 = (zval *) 0x7ffff3877230</span></span><br><span class="line"><span class="string">(gdb) p *value</span></span><br><span class="line"><span class="string">$78 = &#123;value = &#123;lval = 140737278646464, dval = 6.9533454468404712e-310, counted = 0x7ffff38018c0, str = 0x7ffff38018c0, arr = 0x7ffff38018c0, obj = 0x7ffff38018c0, res = 0x7ffff38018c0,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff38018c0, ast = 0x7ffff38018c0, zv = 0x7ffff38018c0, ptr = 0x7ffff38018c0, ce = 0x7ffff38018c0, func = 0x7ffff38018c0, ww = &#123;w1 = 4085258432, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str</span></span><br><span class="line"><span class="string">$79 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639660, len = 2, val = &quot;v&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str.val@2</span></span><br><span class="line"><span class="string">$80 = &quot;v1&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40431			if (UNEXPECTED(RETURN_VALUE_USED(opline))) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40487		ZEND_VM_NEXT_OPCODE_EX(1, 2);</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x7ffff3858360</span></span><br><span class="line"><span class="string">$81 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 16 &#x27;\020&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 16&#125;, nTableMask = 4294967280,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff3874340, nNumUsed = 3, nNumOfElements = 3, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p (int32_t)4294967280</span></span><br><span class="line"><span class="string">$82 = -16</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40488	&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:57707</span></span><br><span class="line"><span class="string">57707					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">57706					ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:40386</span></span><br><span class="line"><span class="string">40386		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40387		orig_object_ptr = object_ptr = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40389		if (EXPECTED(Z_TYPE_P(object_ptr) == IS_ARRAY)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$83 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.arr</span></span><br><span class="line"><span class="string">$84 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 16 &#x27;\020&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 16&#125;, nTableMask = 4294967280,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff3874340, nNumUsed = 3, nNumOfElements = 3, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40390	try_assign_dim_array:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40391			SEPARATE_ARRAY(object_ptr);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40419				dim = RT_CONSTANT(opline, opline-&gt;op2);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40421					variable_ptr = zend_fetch_dimension_address_inner_W_CONST(Z_ARRVAL_P(object_ptr), dim EXECUTE_DATA_CC);</span></span><br><span class="line"><span class="string">(gdb) p *dim</span></span><br><span class="line"><span class="string">$85 = &#123;value = &#123;lval = 140737278646528, dval = 6.9533454468436333e-310, counted = 0x7ffff3801900, str = 0x7ffff3801900, arr = 0x7ffff3801900, obj = 0x7ffff3801900, res = 0x7ffff3801900,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3801900, ast = 0x7ffff3801900, zv = 0x7ffff3801900, ptr = 0x7ffff3801900, ce = 0x7ffff3801900, func = 0x7ffff3801900, ww = &#123;w1 = 4085258496, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40425				if (UNEXPECTED(variable_ptr == NULL)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p *variable_ptr</span></span><br><span class="line"><span class="string">$86 = &#123;value = &#123;lval = 0, dval = 0, counted = 0x0, str = 0x0, arr = 0x0, obj = 0x0, res = 0x0, ref = 0x0, ast = 0x0, zv = 0x0, ptr = 0x0, ce = 0x0, func = 0x0, ww = &#123;w1 = 0, w2 = 0&#125;&#125;, u1 = &#123;type_info = 1,</span></span><br><span class="line"><span class="string">    v = &#123;type = 1 &#x27;\001&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 1, cache_slot = 1, opline_num = 1, lineno = 1, num_args = 1, fe_pos = 1, fe_iter_idx = 1, access_flags = 1,</span></span><br><span class="line"><span class="string">    property_guard = 1, constant_flags = 1, extra = 1&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40428				value = RT_CONSTANT((opline+1), (opline+1)-&gt;op1);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40429				value = zend_assign_to_variable(variable_ptr, value, IS_CONST, EX_USES_STRICT_TYPES());</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40431			if (UNEXPECTED(RETURN_VALUE_USED(opline))) &#123;</span></span><br><span class="line"><span class="string">(gdb) p *value</span></span><br><span class="line"><span class="string">$87 = &#123;value = &#123;lval = 140737278646592, dval = 6.9533454468467953e-310, counted = 0x7ffff3801940, str = 0x7ffff3801940, arr = 0x7ffff3801940, obj = 0x7ffff3801940, res = 0x7ffff3801940,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3801940, ast = 0x7ffff3801940, zv = 0x7ffff3801940, ptr = 0x7ffff3801940, ce = 0x7ffff3801940, func = 0x7ffff3801940, ww = &#123;w1 = 4085258560, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 1, cache_slot = 1, opline_num = 1, lineno = 1, num_args = 1, fe_pos = 1, fe_iter_idx = 1, access_flags = 1, property_guard = 1,</span></span><br><span class="line"><span class="string">    constant_flags = 1, extra = 1&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p value</span></span><br><span class="line"><span class="string">$88 = (zval *) 0x7ffff38743a0</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40487		ZEND_VM_NEXT_OPCODE_EX(1, 2);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40488	&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:57707</span></span><br><span class="line"><span class="string">57707					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">57642					ZEND_FETCH_DIM_R_SPEC_CV_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_FETCH_DIM_R_SPEC_CV_CONST_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:39426</span></span><br><span class="line"><span class="string">39426		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">39427		container = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">39428		dim = RT_CONSTANT(opline, opline-&gt;op2);</span></span><br><span class="line"><span class="string">(gdb) p container</span></span><br><span class="line"><span class="string">$89 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *container</span></span><br><span class="line"><span class="string">$90 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p dim</span></span><br><span class="line"><span class="string">$91 = (zval *) 0x7ffff3858360</span></span><br><span class="line"><span class="string">(gdb) p *dim</span></span><br><span class="line"><span class="string">$92 = &#123;value = &#123;lval = 30064771073, dval = 1.4853970537250972e-313, counted = 0x700000001, str = 0x700000001, arr = 0x700000001, obj = 0x700000001, res = 0x700000001, ref = 0x700000001, ast = 0x700000001,</span></span><br><span class="line"><span class="string">    zv = 0x700000001, ptr = 0x700000001, ce = 0x700000001, func = 0x700000001, ww = &#123;w1 = 1, w2 = 7&#125;&#125;, u1 = &#123;type_info = 16, v = &#123;type = 16 &#x27;\020&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;</span></span><br><span class="line"><span class="string">    next = 4294967280, cache_slot = 4294967280, opline_num = 4294967280, lineno = 4294967280, num_args = 4294967280, fe_pos = 4294967280, fe_iter_idx = 4294967280, access_flags = 4294967280,</span></span><br><span class="line"><span class="string">    property_guard = 4294967280, constant_flags = 4294967280, extra = 4294967280&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str</span></span><br><span class="line"><span class="string">Cannot access memory at address 0x700000001</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str.val@2</span></span><br><span class="line"><span class="string">Cannot access memory at address 0x700000019</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">Cannot access memory at address 0x700000019</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">39430			if (EXPECTED(Z_TYPE_P(container) == IS_ARRAY)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p dim</span></span><br><span class="line"><span class="string">$93 = (zval *) 0x7ffff3877260</span></span><br><span class="line"><span class="string">(gdb) p *dim</span></span><br><span class="line"><span class="string">$94 = &#123;value = &#123;lval = 140737278646400, dval = 6.9533454468373092e-310, counted = 0x7ffff3801880, str = 0x7ffff3801880, arr = 0x7ffff3801880, obj = 0x7ffff3801880, res = 0x7ffff3801880,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3801880, ast = 0x7ffff3801880, zv = 0x7ffff3801880, ptr = 0x7ffff3801880, ce = 0x7ffff3801880, func = 0x7ffff3801880, ww = &#123;w1 = 4085258368, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *dim.value</span></span><br><span class="line"><span class="string">Attempt to take contents of a non-pointer value.</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str</span></span><br><span class="line"><span class="string">$95 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639297, len = 2, val = &quot;k&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str.val@2</span></span><br><span class="line"><span class="string">$96 = &quot;k1&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">39431	fetch_dim_r_array:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">39432				value = zend_fetch_dimension_address_inner(Z_ARRVAL_P(container), dim, IS_CONST, BP_VAR_R EXECUTE_DATA_CC);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">39433				ZVAL_COPY_DEREF(EX_VAR(opline-&gt;result.var), value);</span></span><br><span class="line"><span class="string">(gdb) p value</span></span><br><span class="line"><span class="string">$97 = (zval *) 0x7ffff3874380</span></span><br><span class="line"><span class="string">(gdb) p *value</span></span><br><span class="line"><span class="string">$98 = &#123;value = &#123;lval = 140737278646464, dval = 6.9533454468404712e-310, counted = 0x7ffff38018c0, str = 0x7ffff38018c0, arr = 0x7ffff38018c0, obj = 0x7ffff38018c0, res = 0x7ffff38018c0,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff38018c0, ast = 0x7ffff38018c0, zv = 0x7ffff38018c0, ptr = 0x7ffff38018c0, ce = 0x7ffff38018c0, func = 0x7ffff38018c0, ww = &#123;w1 = 4085258432, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str</span></span><br><span class="line"><span class="string">$99 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639660, len = 2, val = &quot;v&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str.val@2</span></span><br><span class="line"><span class="string">$100 = &quot;v1&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">39453		ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">39454	&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:57643</span></span><br><span class="line"><span class="string">57643					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">55595					ZEND_ECHO_SPEC_TMPVAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_ECHO_SPEC_TMPVAR_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:13883</span></span><br><span class="line"><span class="string">13883		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">13884		z = _get_zval_ptr_var(opline-&gt;op1.var EXECUTE_DATA_CC);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">13886		if (Z_TYPE_P(z) == IS_STRING) &#123;</span></span><br><span class="line"><span class="string">(gdb) p z</span></span><br><span class="line"><span class="string">$101 = (zval *) 0x7ffff38140d0</span></span><br><span class="line"><span class="string">(gdb) p *z</span></span><br><span class="line"><span class="string">$102 = &#123;value = &#123;lval = 140737278646464, dval = 6.9533454468404712e-310, counted = 0x7ffff38018c0, str = 0x7ffff38018c0, arr = 0x7ffff38018c0, obj = 0x7ffff38018c0, res = 0x7ffff38018c0,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff38018c0, ast = 0x7ffff38018c0, zv = 0x7ffff38018c0, ptr = 0x7ffff38018c0, ce = 0x7ffff38018c0, func = 0x7ffff38018c0, ww = &#123;w1 = 4085258432, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *z.value.arr</span></span><br><span class="line"><span class="string">$103 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, u = &#123;v = &#123;flags = 172 &#x27;\254&#x27;, _unused = 121 &#x27;y&#x27;, nIteratorsCount = 89 &#x27;Y&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 5863852&#125;, nTableMask = 2147483648, arData = 0x2,</span></span><br><span class="line"><span class="string">  nNumUsed = 12662, nNumOfElements = 0, nTableSize = 32, nInternalPointer = 0, nNextFreeElement = 93825006918352, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">13887			zend_string *str = Z_STR_P(z);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">13889			if (ZSTR_LEN(str) != 0) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">13890				zend_write(ZSTR_VAL(str), ZSTR_LEN(str));</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">v113903		zval_ptr_dtor_nogc(EX_VAR(opline-&gt;op1.var));</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">13904		ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">13905	&#125;</span></span><br><span class="line"><span class="string">(gdb) p z</span></span><br><span class="line"><span class="string">$104 = (zval *) 0x7ffff38140d0</span></span><br><span class="line"><span class="string">(gdb) p *z</span></span><br><span class="line"><span class="string">$105 = &#123;value = &#123;lval = 140737278646464, dval = 6.9533454468404712e-310, counted = 0x7ffff38018c0, str = 0x7ffff38018c0, arr = 0x7ffff38018c0, obj = 0x7ffff38018c0, res = 0x7ffff38018c0,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff38018c0, ast = 0x7ffff38018c0, zv = 0x7ffff38018c0, ptr = 0x7ffff38018c0, ce = 0x7ffff38018c0, func = 0x7ffff38018c0, ww = &#123;w1 = 4085258432, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *z.value.arr</span></span><br><span class="line"><span class="string">$106 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, u = &#123;v = &#123;flags = 172 &#x27;\254&#x27;, _unused = 121 &#x27;y&#x27;, nIteratorsCount = 89 &#x27;Y&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 5863852&#125;, nTableMask = 2147483648, arData = 0x2,</span></span><br><span class="line"><span class="string">  nNumUsed = 12662, nNumOfElements = 0, nTableSize = 32, nInternalPointer = 0, nNextFreeElement = 93825006918352, pDestructor = 0x0&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:55596</span></span><br><span class="line"><span class="string">55596					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">57706					ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_ASSIGN_DIM_SPEC_CV_CONST_OP_DATA_CONST_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:40386</span></span><br><span class="line"><span class="string">40386		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40387		orig_object_ptr = object_ptr = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40389		if (EXPECTED(Z_TYPE_P(object_ptr) == IS_ARRAY)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p object_ptr</span></span><br><span class="line"><span class="string">$107 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$108 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.arr</span></span><br><span class="line"><span class="string">$109 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 16 &#x27;\020&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 16&#125;, nTableMask = 4294967280,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff3874340, nNumUsed = 4, nNumOfElements = 4, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40390	try_assign_dim_array:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40391			SEPARATE_ARRAY(object_ptr);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40419				dim = RT_CONSTANT(opline, opline-&gt;op2);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40421					variable_ptr = zend_fetch_dimension_address_inner_W_CONST(Z_ARRVAL_P(object_ptr), dim EXECUTE_DATA_CC);</span></span><br><span class="line"><span class="string">(gdb) p dim</span></span><br><span class="line"><span class="string">$110 = (zval *) 0x7ffff3877270</span></span><br><span class="line"><span class="string">(gdb) p *dim</span></span><br><span class="line"><span class="string">$111 = &#123;value = &#123;lval = 140737278646400, dval = 6.9533454468373092e-310, counted = 0x7ffff3801880, str = 0x7ffff3801880, arr = 0x7ffff3801880, obj = 0x7ffff3801880, res = 0x7ffff3801880,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3801880, ast = 0x7ffff3801880, zv = 0x7ffff3801880, ptr = 0x7ffff3801880, ce = 0x7ffff3801880, func = 0x7ffff3801880, ww = &#123;w1 = 4085258368, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str</span></span><br><span class="line"><span class="string">$112 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639297, len = 2, val = &quot;k&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *dim.value.str.val@2</span></span><br><span class="line"><span class="string">$113 = &quot;k1&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40425				if (UNEXPECTED(variable_ptr == NULL)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p object_ptr</span></span><br><span class="line"><span class="string">$114 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr</span></span><br><span class="line"><span class="string">$115 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.str</span></span><br><span class="line"><span class="string">$116 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, h = 18446744004990074896, len = 140737279116096, val = &quot;\004&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *object_ptr.value.str.val@2</span></span><br><span class="line"><span class="string">$117 = &quot;\004&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40428				value = RT_CONSTANT((opline+1), (opline+1)-&gt;op1);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40429				value = zend_assign_to_variable(variable_ptr, value, IS_CONST, EX_USES_STRICT_TYPES());</span></span><br><span class="line"><span class="string">(gdb) p *value</span></span><br><span class="line"><span class="string">$118 = &#123;value = &#123;lval = 93825011376368, dval = 4.635571484172756e-310, counted = 0x5555567960f0, str = 0x5555567960f0, arr = 0x5555567960f0, obj = 0x5555567960f0, res = 0x5555567960f0, ref = 0x5555567960f0,</span></span><br><span class="line"><span class="string">    ast = 0x5555567960f0, zv = 0x5555567960f0, ptr = 0x5555567960f0, ce = 0x5555567960f0, func = 0x5555567960f0, ww = &#123;w1 = 1450795248, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;type = 6 &#x27;\006&#x27;,</span></span><br><span class="line"><span class="string">      type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str</span></span><br><span class="line"><span class="string">$119 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 470&#125;&#125;, h = 9223372036854953480, len = 1, val = &quot;c&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *value.value.str.val@1</span></span><br><span class="line"><span class="string">$120 = &quot;c&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40431			if (UNEXPECTED(RETURN_VALUE_USED(opline))) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">40487		ZEND_VM_NEXT_OPCODE_EX(1, 2);</span></span><br><span class="line"><span class="string">(gdb) p *(HashTable*)0x7ffff3858360</span></span><br><span class="line"><span class="string">$121 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 16 &#x27;\020&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 16&#125;, nTableMask = 4294967280,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff3874340, nNumUsed = 4, nNumOfElements = 4, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p $121.arData[3]</span></span><br><span class="line"><span class="string">$122 = &#123;val = &#123;value = &#123;lval = 140737278646592, dval = 6.9533454468467953e-310, counted = 0x7ffff3801940, str = 0x7ffff3801940, arr = 0x7ffff3801940, obj = 0x7ffff3801940, res = 0x7ffff3801940,</span></span><br><span class="line"><span class="string">      ref = 0x7ffff3801940, ast = 0x7ffff3801940, zv = 0x7ffff3801940, ptr = 0x7ffff3801940, ce = 0x7ffff3801940, func = 0x7ffff3801940, ww = &#123;w1 = 4085258560, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">        type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 1, cache_slot = 1, opline_num = 1, lineno = 1, num_args = 1, fe_pos = 1, fe_iter_idx = 1, access_flags = 1,</span></span><br><span class="line"><span class="string">      property_guard = 1, constant_flags = 1, extra = 1&#125;&#125;, h = 9223372036860639298, key = 0x7ffff3801900&#125;</span></span><br><span class="line"><span class="string">(gdb) p $121.arData[3].key</span></span><br><span class="line"><span class="string">$123 = (zend_string *) 0x7ffff3801900</span></span><br><span class="line"><span class="string">(gdb) p *$121.arData[3].key</span></span><br><span class="line"><span class="string">$124 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639298, len = 2, val = &quot;k&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *$121.arData[3].key.val@2</span></span><br><span class="line"><span class="string">$125 = &quot;k2&quot;</span></span><br><span class="line"><span class="string">(gdb) p *$121.arData[2].key.val@2</span></span><br><span class="line"><span class="string">$126 = &quot;k1&quot;</span></span><br><span class="line"><span class="string">(gdb) p $121.arData[2]</span></span><br><span class="line"><span class="string">$127 = &#123;val = &#123;value = &#123;lval = 93825011376368, dval = 4.635571484172756e-310, counted = 0x5555567960f0, str = 0x5555567960f0, arr = 0x5555567960f0, obj = 0x5555567960f0, res = 0x5555567960f0,</span></span><br><span class="line"><span class="string">      ref = 0x5555567960f0, ast = 0x5555567960f0, zv = 0x5555567960f0, ptr = 0x5555567960f0, ce = 0x5555567960f0, func = 0x5555567960f0, ww = &#123;w1 = 1450795248, w2 = 21845&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">        type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0,</span></span><br><span class="line"><span class="string">      property_guard = 0, constant_flags = 0, extra = 0&#125;&#125;, h = 9223372036860639297, key = 0x7ffff3801880&#125;</span></span><br><span class="line"><span class="string">(gdb) p $121.arData[2].val.value.str</span></span><br><span class="line"><span class="string">$128 = (zend_string *) 0x5555567960f0</span></span><br><span class="line"><span class="string">(gdb) p *$121.arData[2].val.value.str</span></span><br><span class="line"><span class="string">$129 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 470&#125;&#125;, h = 9223372036854953480, len = 1, val = &quot;c&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *$121.arData[2].val.value.str.val@1</span></span><br><span class="line"><span class="string">$130 = &quot;c&quot;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">40488	&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">execute_ex (ex=0x7ffff3814020) at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:57707</span></span><br><span class="line"><span class="string">57707					HYBRID_BREAK();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">57766					ZEND_UNSET_DIM_SPEC_CV_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span></span><br><span class="line"><span class="string">(gdb) s</span></span><br><span class="line"><span class="string">ZEND_UNSET_DIM_SPEC_CV_CONST_HANDLER () at /vagrant/php-8.0.10/Zend/zend_vm_execute.h:41474</span></span><br><span class="line"><span class="string">41474	&#123;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">41481		SAVE_OPLINE();</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41482		container = EX_VAR(opline-&gt;op1.var);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41483		offset = RT_CONSTANT(opline, opline-&gt;op2);</span></span><br><span class="line"><span class="string">(gdb) p container</span></span><br><span class="line"><span class="string">$131 = (zval *) 0x7ffff3814070</span></span><br><span class="line"><span class="string">(gdb) p *container</span></span><br><span class="line"><span class="string">$132 = &#123;value = &#123;lval = 140737279001440, dval = 6.9533454643786159e-310, counted = 0x7ffff3858360, str = 0x7ffff3858360, arr = 0x7ffff3858360, obj = 0x7ffff3858360, res = 0x7ffff3858360,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3858360, ast = 0x7ffff3858360, zv = 0x7ffff3858360, ptr = 0x7ffff3858360, ce = 0x7ffff3858360, func = 0x7ffff3858360, ww = &#123;w1 = 4085613408, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 775, v = &#123;</span></span><br><span class="line"><span class="string">      type = 7 &#x27;\a&#x27;, type_flags = 3 &#x27;\003&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">41486			if (EXPECTED(Z_TYPE_P(container) == IS_ARRAY)) &#123;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41489	unset_dim_array:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41490				SEPARATE_ARRAY(container);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41491				ht = Z_ARRVAL_P(container);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41493				if (EXPECTED(Z_TYPE_P(offset) == IS_STRING)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$133 = (HashTable *) 0x7ffff3858360</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$134 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 16 &#x27;\020&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 16&#125;, nTableMask = 4294967280,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff3874340, nNumUsed = 4, nNumOfElements = 4, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb) p offset</span></span><br><span class="line"><span class="string">$135 = (zval *) 0x7ffff3877290</span></span><br><span class="line"><span class="string">(gdb) p *offset</span></span><br><span class="line"><span class="string">$136 = &#123;value = &#123;lval = 140737278646528, dval = 6.9533454468436333e-310, counted = 0x7ffff3801900, str = 0x7ffff3801900, arr = 0x7ffff3801900, obj = 0x7ffff3801900, res = 0x7ffff3801900,</span></span><br><span class="line"><span class="string">    ref = 0x7ffff3801900, ast = 0x7ffff3801900, zv = 0x7ffff3801900, ptr = 0x7ffff3801900, ce = 0x7ffff3801900, func = 0x7ffff3801900, ww = &#123;w1 = 4085258496, w2 = 32767&#125;&#125;, u1 = &#123;type_info = 6, v = &#123;</span></span><br><span class="line"><span class="string">      type = 6 &#x27;\006&#x27;, type_flags = 0 &#x27;\000&#x27;, u = &#123;extra = 0&#125;&#125;&#125;, u2 = &#123;next = 0, cache_slot = 0, opline_num = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, property_guard = 0,</span></span><br><span class="line"><span class="string">    constant_flags = 0, extra = 0&#125;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *offset.value.str</span></span><br><span class="line"><span class="string">$137 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639298, len = 2, val = &quot;k&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *offset.value.str.val@2</span></span><br><span class="line"><span class="string">$138 = &quot;k2&quot;</span></span><br><span class="line"><span class="string">(gdb) p key</span></span><br><span class="line"><span class="string">$139 = (zend_string *) 0x7ffff3874380</span></span><br><span class="line"><span class="string">(gdb) p *key</span></span><br><span class="line"><span class="string">$140 = &#123;gc = &#123;refcount = 1450795248, u = &#123;type_info = 21845&#125;&#125;, h = 6, len = 9223372036860639297, val = &quot;\200&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">$141 = &#123;gc = &#123;refcount = 1450795248, u = &#123;type_info = 21845&#125;&#125;, h = 6, len = 9223372036860639297, val = &quot;\200&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">41494					key = Z_STR_P(offset);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41500	str_index_dim:</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41501					if (ht == &amp;EG(symbol_table)) &#123;</span></span><br><span class="line"><span class="string">(gdb) p key</span></span><br><span class="line"><span class="string">$142 = (zend_string *) 0x7ffff3801900</span></span><br><span class="line"><span class="string">(gdb) p *key</span></span><br><span class="line"><span class="string">$143 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 86&#125;&#125;, h = 9223372036860639298, len = 2, val = &quot;k&quot;&#125;</span></span><br><span class="line"><span class="string">(gdb) p *key.value.str.val@2</span></span><br><span class="line"><span class="string">There is no member named value.</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">41504						zend_hash_del(ht, key);</span></span><br><span class="line"><span class="string">(gdb)</span></span><br><span class="line"><span class="string">41535				break;</span></span><br><span class="line"><span class="string">(gdb) p ht</span></span><br><span class="line"><span class="string">$144 = (HashTable *) 0x7ffff3858360</span></span><br><span class="line"><span class="string">(gdb) p *ht</span></span><br><span class="line"><span class="string">$145 = &#123;gc = &#123;refcount = 1, u = &#123;type_info = 7&#125;&#125;, u = &#123;v = &#123;flags = 16 &#x27;\020&#x27;, _unused = 0 &#x27;\000&#x27;, nIteratorsCount = 0 &#x27;\000&#x27;, _unused2 = 0 &#x27;\000&#x27;&#125;, flags = 16&#125;, nTableMask = 4294967280,</span></span><br><span class="line"><span class="string">  arData = 0x7ffff3874340, nNumUsed = 3, nNumOfElements = 3, nTableSize = 8, nInternalPointer = 0, nNextFreeElement = 3, pDestructor = 0x555555a909a5 &lt;zval_ptr_dtor&gt;&#125;</span></span><br><span class="line"><span class="string">(gdb)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 打造 PHP 开发环境</title>
    <url>/2018/10/12/win-wamp/</url>
    <content><![CDATA[<p><img src="/images/2019/201904101011.jpg" alt="201904101011.jpg"></p>
<p>🤙在 Windows 上开发 PHP，一般情况下我们会直接安装 <a href="http://phpstudy.php.cn/download.html"><code>PhpStudy</code></a>、<a href="http://www.wampserver.com/cn/#download-wrapper"><code>WampServer</code></a> 或者 <a href="https://www.apachefriends.org/index.html"><code>XAMPP</code></a> 等集成开发环境。当然作为一名有逼格的开发者，我们还会自己动手丰衣足食，毕竟这个门槛不高，搭不上怎么能证明你是个有节操的 PHPer 呢。</p>
<span id="more"></span>
<blockquote>
<p><code>WAMP</code>：Windows &amp; Apache &amp; MySQL &amp; PHP 组合，即在 Windows 下搭建的 Web 运行环境。在以下的操作中，我顺便把 Nginx 的安装配置也加上了，Windows 环境还是比较建议使用 Apache，减少不必要的折腾。</p>
</blockquote>
<div class="note danger">
            <p>友情提示：以下操作皆在本人 Win10 32 位操作系统上折腾，64 位系统未做尝试。</p>
          </div>
<h1 id="关于-TS-amp-NTS"><a href="#关于-TS-amp-NTS" class="headerlink" title="关于 TS &amp; NTS"></a>关于 TS &amp; NTS</h1><ul>
<li><code>TS - Thread-Safety</code>：即线程安全，多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。PHP 以 ISAPI 方式加载的时候选择这个版本；</li>
<li><code>NTS - None-Thread Safe</code>：即非线程安全，就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的是脏数据。PHP 以 FastCGI 方式运行的时候选择这个版本，具有更好的性能；</li>
</ul>
<p>在以下的配置方式中，笔者使用 PHP-TS &amp; Apache、PHP-NTS &amp; Nginx 的方式来搭建，指定 <code>G:\</code> 为代码目录、<code>D:\Wamp</code> 为软件安装目录，相关的配置文件在安装的具体软件目录中。</p>
<h1 id="关于-VC6-amp-VC9-amp-VC11"><a href="#关于-VC6-amp-VC9-amp-VC11" class="headerlink" title="关于 VC6 &amp; VC9 &amp; VC11"></a>关于 VC6 &amp; VC9 &amp; VC11</h1><ul>
<li><code>VC6</code>：使用 Legacy Visual Studio 6 Compiler 编译器编译的；</li>
<li><code>VC9</code>：使用 Visual Studio 2008 Compiler 编译器编译的，VC9 版本要求用户安装 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=5582">Microsoft Visual C++ 2008 SP1 Redistributable Package (x86)</a> 或者 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=15336">Microsoft Visual C++ 2008 Redistributable Package (x64)</a>；</li>
<li><code>VC11</code>：使用 Visual Studio 2012 Compiler 编译器编译的，VC11 版本要求用户安装 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=30679">Visual C++ Redistributable for Visual Studio 2012 Update 4</a>；</li>
</ul>
<h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h2 id="下载-Apache"><a href="#下载-Apache" class="headerlink" title="下载 Apache"></a>下载 Apache</h2><p><a href="http://httpd.apache.org/download.cgi#apache24">下载官方 Apache</a> 或者 <a href="https://www.apachelounge.com/download/">下载 Apache Lounge</a>，找对应版本下载。</p>
<h2 id="解压-Apache"><a href="#解压-Apache" class="headerlink" title="解压 Apache"></a>解压 Apache</h2><p>将 httpd-2.4.35-win32-VC15.zip 解压到 httpd-2.4.35 文件夹下并移动到 C:\Wamp 目录下。</p>
<h2 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h2><p>打开 httpd.conf 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改服务器根路径</span></span><br><span class="line">ServerRoot <span class="string">&quot;C:/Wamp/httpd-2.4.35&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开重写模块</span></span><br><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改服务器名称</span></span><br><span class="line">ServerName 127.0.0.1:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开路径重写</span></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置项目根路径和打开根路径重写</span></span><br><span class="line">DocumentRoot <span class="string">&quot;G:/&quot;</span></span><br><span class="line">&lt;Directory <span class="string">&quot;G:/&quot;</span>&gt;</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Possible values for the Options directive are &quot;None&quot;, &quot;All&quot;,</span></span><br><span class="line">    <span class="comment"># or any combination of:</span></span><br><span class="line">    <span class="comment">#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Note that &quot;MultiViews&quot; must be named *explicitly* --- &quot;Options All&quot;</span></span><br><span class="line">    <span class="comment"># doesn&#x27;t give it to you.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The Options directive is both complicated and important.  Please see</span></span><br><span class="line">    <span class="comment"># http://httpd.apache.org/docs/2.4/mod/core.html#options</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># AllowOverride controls what directives may be placed in .htaccess files.</span></span><br><span class="line">    <span class="comment"># It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:</span></span><br><span class="line">    <span class="comment">#   AllowOverride FileInfo AuthConfig Limit</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    AllowOverride All</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Controls who can get stuff from this server.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加默认处理文件</span></span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启虚拟主机模式</span></span><br><span class="line">Include conf/extratpd-vhosts.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Apache 处理 PHP 扩展和配置</span></span><br><span class="line">LoadModule php5_module <span class="string">&quot;C:/Wamp/php-7.2.11-ts/php5apache2_4.dll&quot;</span></span><br><span class="line">AddHandler application/x-httpd-php .php</span><br><span class="line">PHPIniDir <span class="string">&quot;C:/Wamp/php-7.2.11-ts&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="下载-Nginx"><a href="#下载-Nginx" class="headerlink" title="下载 Nginx"></a>下载 Nginx</h2><p><a href="http://nginx.org/en/download.html">下载 Nginx</a>，找对应版本下载。</p>
<h2 id="解压-Nginx"><a href="#解压-Nginx" class="headerlink" title="解压 Nginx"></a>解压 Nginx</h2><p>将 nginx-1.15.5.zip 解压到 nginx-1.15.5 文件夹下并移动到 D:\Wamp 目录下</p>
<h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><ul>
<li>编辑 <code>nginx.conf</code> 文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    fastcgi_connect_timeout       300;</span><br><span class="line">    fastcgi_send_timeout          300;</span><br><span class="line">    fastcgi_read_timeout          300;</span><br><span class="line">    fastcgi_buffer_size           128k;</span><br><span class="line">    fastcgi_buffers               4  128k;</span><br><span class="line">    fastcgi_busy_buffers_size     256k;</span><br><span class="line">    fastcgi_temp_file_write_size  256k;</span><br><span class="line"></span><br><span class="line">    gzip               on;</span><br><span class="line">    gzip_min_length    1k;</span><br><span class="line">    gzip_buffers       4  32k;</span><br><span class="line">    gzip_http_version  1.1;</span><br><span class="line">    gzip_comp_level    2;</span><br><span class="line">    gzip_types         text/plain text/css text/javascrip text/xml application/javascript application/x-javascript application/json application/xml;</span><br><span class="line">    gzip_vary          on;</span><br><span class="line">    gzip_disable       <span class="string">&quot;MSIE [1-6].&quot;</span>;</span><br><span class="line"></span><br><span class="line">    server_names_hash_bucket_size  128;</span><br><span class="line">    client_max_body_size           100m;</span><br><span class="line">    client_header_buffer_size      256k;</span><br><span class="line">    large_client_header_buffers    4  256k;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        charset  utf-8;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root       G:/;</span><br><span class="line">            autoindex  on;</span><br><span class="line">            index      index.html index.htm index.php;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root                     G:/;</span><br><span class="line">            fastcgi_pass             127.0.0.1:9000;</span><br><span class="line">            fastcgi_index            index.php;</span><br><span class="line">            fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;</span><br><span class="line">            fastcgi_param            PATH_INFO  <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">            fastcgi_param            PATH_TRANSLATED  $document_root<span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">            fastcgi_param            SCRIPT_FILENAME  $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            include                  fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">            deny  all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    include  vhosts/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 conf 目录下新建 vhosts 目录，进入该目录，新建 sample.conf 文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    root    G:/Sample/www.sample.com;</span><br><span class="line"></span><br><span class="line">    server_name              www.sample.com;</span><br><span class="line">    server_name_in_redirect  off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        autoindex  on;</span><br><span class="line">        index      index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass             127.0.0.1:9000;</span><br><span class="line">        fastcgi_index            index.php;</span><br><span class="line">        fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;</span><br><span class="line">        fastcgi_param            PATH_INFO  <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param            PATH_TRANSLATED  $document_root<span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param            SCRIPT_FILENAME  $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include                  fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /favicon.con &#123;</span><br><span class="line">        log_not_found  off;</span><br><span class="line">        access_log     off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /(\.ht|\.git|\.svn) &#123;</span><br><span class="line">        deny  all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><blockquote>
<p>详情请参阅 <a href="https://dev.mysql.com/doc/refman/8.0/en/windows-install-archive.html">Installing MySQL on Microsoft Windows Using a noinstall ZIP Archive</a> 文档。</p>
</blockquote>
<h2 id="下载-MySQL"><a href="#下载-MySQL" class="headerlink" title="下载 MySQL"></a>下载 MySQL</h2><p><a href="https://dev.mysql.com/downloads/mysql/">下载 MySQL</a>，找对应版本下载。</p>
<h2 id="解压-MySQL"><a href="#解压-MySQL" class="headerlink" title="解压 MySQL"></a>解压 MySQL</h2><p>将 mysql-8.0.12-winx64.zip 解压到 mysql-8.0.12-winx64.zip 文件夹下并移动到 D:\Wamp 目录下。</p>
<h2 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h2><ul>
<li>编辑 MySQL 配置文件 my.ini：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">basedir = D:/Wamp/mysql-8.0.12</span><br><span class="line">datadir = D:/Wamp/mysql-8.0.12/data</span><br><span class="line">socket = D:/Wamp/mysql-8.0.12/tmp/mysql.sock</span><br><span class="line">default_authentication_plugin = mysql_native_password</span><br><span class="line">character_set_server = utf8mb4</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">server_id = 1</span><br><span class="line"></span><br><span class="line">max_connections = 100</span><br><span class="line">table_open_cache = 256</span><br><span class="line">query_cache_size = 1M</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error = D:/Wamp/mysql-8.0.12/logs/mysql-error.log</span><br><span class="line">pid-file = D:/Wamp/mysql-8.0.12/run/mysql.pid</span><br><span class="line"></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>
<ul>
<li>MySQL 操作：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 配置（需要在管理员命令行下操作）</span><br><span class="line">D:\Wamp\mysql-8.0.12\bin&gt; mysqld --defaults-file=<span class="string">&quot;D:/Wamp/mysql-8.0.12/my.ini&quot;</span> --initialize-insecure --explicit_defaults_for_timestamp=<span class="literal">true</span> --user=mysql --console</span><br><span class="line"></span><br><span class="line">// 安装服务</span><br><span class="line">D:\Wamp\mysql-8.0.12\bin&gt; mysqld --install mysql --defaults-file=<span class="string">&quot;D:/Wamp/mysql-8.0.12/my.ini&quot;</span></span><br><span class="line"></span><br><span class="line">// 启动服务</span><br><span class="line">D:\Wamp\mysql-8.0.12\bin&gt; net start mysql</span><br><span class="line"></span><br><span class="line">// 停止服务</span><br><span class="line">D:\Wamp\mysql-8.0.12\bin&gt; net stop mysql</span><br><span class="line"></span><br><span class="line">// 移除服务</span><br><span class="line">D:\Wamp\mysql-8.0.12\bin&gt; sc delete mysql</span><br><span class="line">或者</span><br><span class="line">D:\Wamp\mysql-8.0.12\bin&gt; mysqld --remove</span><br></pre></td></tr></table></figure>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="下载-PHP"><a href="#下载-PHP" class="headerlink" title="下载 PHP"></a>下载 PHP</h2><p><a href="https://windows.php.net/download/">下载 PHP</a>，找对应版本下载。</p>
<h2 id="解压-PHP"><a href="#解压-PHP" class="headerlink" title="解压 PHP"></a>解压 PHP</h2><blockquote>
<p>根据上面的约定，在安装 Apache 时我们安装 TS 版本的 PHP，安装 Nginx 时我们安装 NTS 版本的 PHP。</p>
</blockquote>
<ul>
<li>安装 Apache 情况下，将 php-7.2.11-ts-Win32-VC15-x64.zip 解压到 php-7.2.11-ts 文件夹下并移动到 D:\Wamp 目录下；</li>
<li>安装 Nginx 情况下，将 php-7.2.11-nts-Win32-VC15-x64.zip 解压到 php-7.2.11-nts 文件夹下并移动到 D:\Wamp 目录下；</li>
</ul>
<h2 id="配置-PHP"><a href="#配置-PHP" class="headerlink" title="配置 PHP"></a>配置 PHP</h2><blockquote>
<p>相关的 PHP 模块需要酌情开启。</p>
</blockquote>
<p>将 php.ini-development 重命名为 php.ini。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置模块加载路径</span><br><span class="line">; Directory <span class="keyword">in</span> <span class="built_in">which</span> the loadable extensions (modules) reside.</span><br><span class="line">; http://php.net/extension-dir</span><br><span class="line">; extension_dir = <span class="string">&quot;./&quot;</span></span><br><span class="line">; On windows:</span><br><span class="line">; extension_dir = <span class="string">&quot;ext&quot;</span></span><br><span class="line"></span><br><span class="line">// 注意 Apache 与 Nginx 的 PHP 目录</span><br><span class="line">extension_dir = <span class="string">&quot;D:/Wamp/php-7.2.11-nts/ext&quot;</span></span><br><span class="line"></span><br><span class="line">// 开启需要的模块</span><br><span class="line">extension=php_bz2.dll</span><br><span class="line">extension=php_curl.dll</span><br><span class="line">extension=php_fileinfo.dll</span><br><span class="line">extension=php_gd2.dll</span><br><span class="line">;extension=php_gettext.dll</span><br><span class="line">;extension=php_gmp.dll</span><br><span class="line">extension=php_intl.dll</span><br><span class="line">;extension=php_imap.dll</span><br><span class="line">;extension=php_interbase.dll</span><br><span class="line">;extension=php_ldap.dll</span><br><span class="line">extension=php_mbstring.dll</span><br><span class="line">extension=php_exif.dll      ; Must be after mbstring as it depends on it</span><br><span class="line">extension=php_mysqli.dll</span><br><span class="line">;extension=php_oci8_12c.dll  ; Use with Oracle Database 12c Instant Client</span><br><span class="line">extension=php_openssl.dll</span><br><span class="line">;extension=php_pdo_firebird.dll</span><br><span class="line">extension=php_pdo_mysql.dll</span><br><span class="line">;extension=php_pdo_oci.dll</span><br><span class="line">;extension=php_pdo_odbc.dll</span><br><span class="line">;extension=php_pdo_pgsql.dll</span><br><span class="line">;extension=php_pdo_sqlite.dll</span><br><span class="line">;extension=php_pgsql.dll</span><br><span class="line">;extension=php_shmop.dll</span><br><span class="line"></span><br><span class="line">; The MIBS data available <span class="keyword">in</span> the PHP distribution must be installed.</span><br><span class="line">; See http://www.php.net/manual/en/snmp.installation.php</span><br><span class="line">;extension=php_snmp.dll</span><br><span class="line"></span><br><span class="line">extension=php_soap.dll</span><br><span class="line">extension=php_sockets.dll</span><br><span class="line">;extension=php_sqlite3.dll</span><br><span class="line">;extension=php_tidy.dll</span><br><span class="line">extension=php_xmlrpc.dll</span><br><span class="line">extension=php_xsl.dll</span><br><span class="line"></span><br><span class="line">// 设置时区</span><br><span class="line">[Date]</span><br><span class="line">; Defines the default timezone used by the date <span class="built_in">functions</span></span><br><span class="line">; http://php.net/date.timezone</span><br><span class="line">date.timezone = PRC</span><br></pre></td></tr></table></figure>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p><code>RunHiddenConsole.exe</code> 的作用是在执行完命令行脚本后可以自动关闭脚本，而从脚本中开启的进程不被关闭，<a href="http://redmine.lighttpd.net/attachments/660/RunHiddenConsole.zip">RunHiddenConsole.exe 下载地址</a>。</p>
<h2 id="Apache-脚本"><a href="#Apache-脚本" class="headerlink" title="Apache 脚本"></a>Apache 脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cls</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> APACHE_PATH=D:</span><br><span class="line"><span class="built_in">set</span> APACHE_DIR=D:/Wamp/httpd-2.4.35/bin/</span><br><span class="line">color 0a</span><br><span class="line">title Apache Management Process Power By Yun</span><br><span class="line">goto MENU</span><br><span class="line">:MENU</span><br><span class="line"></span><br><span class="line">cls</span><br><span class="line"><span class="built_in">echo</span> ====================== Begin ======================</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>. **************************************************</span><br><span class="line"><span class="built_in">echo</span>. --Apache Management Process Power By Yun</span><br><span class="line"><span class="built_in">echo</span>. **************************************************</span><br><span class="line"><span class="built_in">echo</span>. ┏━━━━━━━━━━━━━━━━━━━━━━━┓</span><br><span class="line"><span class="built_in">echo</span>. ┃ 1：Apache install  ┃ 2：Apache start        ┃</span><br><span class="line"><span class="built_in">echo</span>. ┣━━━━━━━━━━╋━━━━━━━━━━━━┫</span><br><span class="line"><span class="built_in">echo</span>. ┃ 3：Apache restart  ┃ 4：Apache stop         ┃</span><br><span class="line"><span class="built_in">echo</span>. ┣━━━━━━━━━━╋━━━━━━━━━━━━┫</span><br><span class="line"><span class="built_in">echo</span>. ┃ 5：Apache uninstall┃ 6：Apache extension    ┃</span><br><span class="line"><span class="built_in">echo</span>. ┗━━━━━━━━━━━━━━━━━━━━━━━┛</span><br><span class="line"><span class="built_in">echo</span>. **************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>. Please select a item number input:</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p id=</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;1&quot;</span> goto cmd1</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;2&quot;</span> goto cmd2</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;3&quot;</span> goto cmd3</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;4&quot;</span> goto cmd4</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;5&quot;</span> goto cmd5</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">exit</span></span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">:cmd1</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Apache is installing......</span><br><span class="line">    <span class="keyword">if</span> not exist %APACHE_DIR%httpd.exe <span class="built_in">echo</span> %APACHE_DIR%httpd.exe不存在</span><br><span class="line">        %APACHE_PATH%</span><br><span class="line">        <span class="built_in">cd</span> %APACHE_DIR%</span><br><span class="line">        <span class="keyword">if</span> exist %APACHE_DIR%httpd.exe %APACHE_DIR%httpd.exe -k install</span><br><span class="line">            <span class="built_in">echo</span>. Apache Server install successful!</span><br><span class="line">            <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:cmd2</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Apache is starting......</span><br><span class="line">    <span class="keyword">if</span> not exist %APACHE_DIR%httpd.exe <span class="built_in">echo</span> %APACHE_DIR%httpd.exe不存在</span><br><span class="line">        %APACHE_PATH%</span><br><span class="line">        <span class="built_in">cd</span> %APACHE_DIR%</span><br><span class="line">        <span class="keyword">if</span> exist %APACHE_DIR%httpd.exe %APACHE_DIR%httpd.exe -k start</span><br><span class="line">            <span class="built_in">echo</span>. Apache start successful!</span><br><span class="line">            <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:cmd3</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Apache is restarting......</span><br><span class="line">    <span class="keyword">if</span> not exist %APACHE_DIR%httpd.exe <span class="built_in">echo</span> %APACHE_DIR%httpd.exe不存在</span><br><span class="line">        %APACHE_PATH%</span><br><span class="line">        <span class="built_in">cd</span> %APACHE_DIR%</span><br><span class="line">        <span class="keyword">if</span> exist %APACHE_DIR%httpd.exe %APACHE_DIR%httpd.exe -k restart</span><br><span class="line">            <span class="built_in">echo</span>. Apache is restarting successful!</span><br><span class="line">            <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:cmd4</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Apache is stoping......</span><br><span class="line">    <span class="keyword">if</span> not exist %APACHE_DIR%httpd.exe <span class="built_in">echo</span> %APACHE_DIR%httpd.exe不存在</span><br><span class="line">        %APACHE_PATH%</span><br><span class="line">        <span class="built_in">cd</span> %APACHE_DIR%</span><br><span class="line">        <span class="keyword">if</span> exist %APACHE_DIR%httpd.exe %APACHE_DIR%httpd.exe -k stop</span><br><span class="line">            <span class="built_in">echo</span>. Apache is stoping successful!</span><br><span class="line">            <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:cmd5</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Apache is uninstalling......</span><br><span class="line">    <span class="keyword">if</span> not exist %APACHE_DIR%httpd.exe <span class="built_in">echo</span> %APACHE_DIR%httpd.exe不存在</span><br><span class="line">        %APACHE_PATH%</span><br><span class="line">        <span class="built_in">cd</span> %APACHE_DIR%</span><br><span class="line">        <span class="keyword">if</span> exist %APACHE_DIR%httpd.exe %APACHE_DIR%httpd.exe -k uninstall</span><br><span class="line">            <span class="built_in">echo</span>. Apache is uninstalling successful！</span><br><span class="line">            <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br></pre></td></tr></table></figure>
<h2 id="Nginx-脚本"><a href="#Nginx-脚本" class="headerlink" title="Nginx 脚本"></a>Nginx 脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cls</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> NGINX_PATH=D:</span><br><span class="line"><span class="built_in">set</span> NGINX_DIR=D:/Wamp/nginx-1.15.5/</span><br><span class="line">color 0a</span><br><span class="line">title Nginx Management Process Power By Yun</span><br><span class="line">goto MENU</span><br><span class="line">:MENU</span><br><span class="line"></span><br><span class="line">cls</span><br><span class="line"><span class="built_in">echo</span> ====================== Begin ======================</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>. **************************************************</span><br><span class="line"><span class="built_in">echo</span>. --Nginx Management Process Power By Yun</span><br><span class="line"><span class="built_in">echo</span>. **************************************************</span><br><span class="line"><span class="built_in">echo</span>. ┏━━━━━━━━━━━━━━━━━━━━━━━┓</span><br><span class="line"><span class="built_in">echo</span>. ┃ 1：Nginx start     ┃ 2：Nginx stop          ┃</span><br><span class="line"><span class="built_in">echo</span>. ┣━━━━━━━━━━╋━━━━━━━━━━━━┫</span><br><span class="line"><span class="built_in">echo</span>. ┃ 3：Nginx reload    ┃ 4：Nginx quit          ┃</span><br><span class="line"><span class="built_in">echo</span>. ┗━━━━━━━━━━━━━━━━━━━━━━━┛</span><br><span class="line"><span class="built_in">echo</span>. **************************************************</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>. Please select a item number input:</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p id=</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;1&quot;</span> goto cmd1</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;2&quot;</span> goto cmd2</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;3&quot;</span> goto cmd3</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;%id%&quot;</span>==<span class="string">&quot;4&quot;</span> goto cmd4</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">exit</span></span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">:cmd1</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Nginx is starting......</span><br><span class="line">    <span class="keyword">if</span> not exist %NGINX_DIR%nginx.exe <span class="built_in">echo</span> %NGINX_DIR%nginx.exe不存在</span><br><span class="line">        %NGINX_PATH%</span><br><span class="line">        <span class="built_in">cd</span> %NGINX_DIR%</span><br><span class="line">        <span class="keyword">if</span> exist %NGINX_DIR%nginx.exe start %NGINX_DIR%nginx.exe</span><br><span class="line">            <span class="built_in">echo</span>. Nginx start successful!</span><br><span class="line">            <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:cmd2</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Nginx正在关闭中......</span><br><span class="line">    taskkill /f /im nginx.exe &gt; nul</span><br><span class="line">    <span class="built_in">echo</span>. Nginx is stop successful!</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:cmd3</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Nginx is reloading......</span><br><span class="line">    <span class="keyword">if</span> not exist %NGINX_DIR%nginx.exe <span class="built_in">echo</span> %NGINX_DIR%nginx.exe不存在</span><br><span class="line">        %NGINX_PATH%</span><br><span class="line">        <span class="built_in">cd</span> %NGINX_DIR%</span><br><span class="line">        <span class="keyword">if</span> exist %NGINX_DIR%nginx.exe %NGINX_DIR%nginx.exe -s reload</span><br><span class="line">            <span class="built_in">echo</span>. Nginx is reloadding successful!</span><br><span class="line">            <span class="built_in">echo</span>.</span><br><span class="line">    pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:cmd4</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="built_in">echo</span>. Nginx is quitting......</span><br><span class="line">    taskkill /f /im %NGINX_DIR%nginx.exe &gt; nul</span><br><span class="line">    <span class="built_in">echo</span>. Nginx is quitting successful!</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h2 id="PHP-脚本"><a href="#PHP-脚本" class="headerlink" title="PHP 脚本"></a>PHP 脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> PHP FastCGI is starting......</span><br><span class="line">RunHiddenConsole.exe D:/Wamp/php-7.2.11-nts/php-cgi.exe -b 127.0.0.1:9000 -c D:/Wamp/php-7.2.11-nts/php.ini</span><br></pre></td></tr></table></figure>
<p>到了这里我只能说，你已经拥有一个基本的 PHP 开发环境而已，因为要配合 Redis、Memcached、MongoDB 之类的软件，还得安装相应的 PHP 扩展，在这些过程中奇葩的问题层出不穷，像缺个 *.dll 文件之类的。因此在 Windows 上手工搭建环境的成本是比较高的，话又说回来，不折腾一下，怎么能知道呢？所以，我换了 Mac。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Neovim + SpaceVim 起步</title>
    <url>/2019/09/28/vim-neovim-spacevim/</url>
    <content><![CDATA[<p><img src="/images/2019/201909291120.jpg" alt="201909291120.jpg"></p>
<p>🚀 Neovim 专注于后端和控制台，而 Vim 是一个 TUI 和 GUI 兼顾的编辑器。如果你穿梭于 GVim 的康庄大道，那么本文也许不太对你胃口。当然，时不时折腾折腾也是一个程序员固有的癖好，咱就好这口。这不，SpaceVim 加持的 Neovim 来了。</p>
<span id="more"></span>
<h2 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h2><p>Vim 8 的推出，很大程度上是受了 Neovim 的影响，对于异步通信和内置终端，都是在 Neovim 中首先实现的。总之，在编辑器的开发上面，Neovim 是领先于 Vim 的。</p>
<ul>
<li><a href="https://neovim.io/">Neovim</a></li>
<li><a href="https://neovim.io/doc/">Neovim 文档</a></li>
<li><a href="https://github.com/neovim/neovim">Neovim GitHub</a></li>
<li><a href="https://geoff.greer.fm/2015/01/15/why-neovim-is-better-than-vim/">Why Neovim is Better than Vim</a></li>
</ul>
<h3 id="安装-Neovim"><a href="#安装-Neovim" class="headerlink" title="安装 Neovim"></a>安装 Neovim</h3><p>清理配置（慎重：最好进行备份）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.vim</span><br><span class="line">rm -rf ~/.vim*</span><br></pre></td></tr></table></figure>
<p>安装 neovim，稳定版和开发版选一个就好，其它的安装方式请参考官网文档：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 稳定版</span><br><span class="line">brew install neovim</span><br><span class="line"></span><br><span class="line">// 开发版</span><br><span class="line">brew install --HEAD neovim</span><br></pre></td></tr></table></figure>
<h2 id="SpaceVim"><a href="#SpaceVim" class="headerlink" title="SpaceVim"></a>SpaceVim</h2><blockquote>
<p>SpaceVim 是一个社区驱动的模块化的 Vim IDE，以模块的方式组织管理插件以及相关配置，为不同的语言开发量身定制了相关的开发模块，该模块提供代码自动补全，语法检查、格式化、调试、REPL 等特性。用户仅需载入相关语言的模块即可得到一个开箱即用的 Vim IDE。</p>
</blockquote>
<ul>
<li><a href="https://spacevim.org/cn/documentation/">中文文档</a></li>
<li><a href="https://spacevim.org/cn/quick-start-guide/">快速开始</a></li>
<li><a href="https://everettjf.gitbooks.io/spacevimtutorial/content/">入门教程</a></li>
<li><a href="https://gitter.im/SpaceVim/cn">SpaceVim 中文聊天室</a></li>
<li><a href="https://github.com/SpaceVim/SpaceVim">SpaceVim GitHub</a></li>
</ul>
<p>SpaceVim 也列出了它的受众用户，对于 Vim ，本人一直处于新手状态，所有我觉得它适合我，高手请忽略：</p>
<ul>
<li>初级 Vim 用户</li>
<li>追求优雅界面的 Vim 用户</li>
<li>追求更少肌肉损伤的 Vim 用户</li>
<li>想要学习一种不一样的编辑文件方式的 Vim 用户</li>
<li>追求简单但是可高度配置系统的 Vim 用户</li>
</ul>
<h3 id="安装-SpaceVim"><a href="#安装-SpaceVim" class="headerlink" title="安装 SpaceVim"></a>安装 SpaceVim</h3><p>获取安装脚本的帮助信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sLf https://spacevim.org/cn/install.sh | bash -s -- -h</span><br></pre></td></tr></table></figure>
<p>Linux 或 macOS 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sLf https://spacevim.org/cn/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>配置输入 vi 或 vim 时用 Neovim 打开：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">&#x27;nvim&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> vim=<span class="string">&#x27;nvim&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="更新自身和插件"><a href="#更新自身和插件" class="headerlink" title="更新自身和插件"></a>更新自身和插件</h3><ul>
<li>更新自身：在命令模式下输入 <code>:SPUpdate SpaceVim</code></li>
<li>更新插件：在命令模式下输入 <code>:SPUpdate</code></li>
<li>获取日志：在命令模式下输入：<code>:SPDebugInfo!</code></li>
</ul>
<h3 id="修正字段乱码"><a href="#修正字段乱码" class="headerlink" title="修正字段乱码"></a>修正字段乱码</h3><ul>
<li><a href="https://github.com/ryanoasis/vim-devicons">VimDevicons</a></li>
<li><a href="https://github.com/ryanoasis/vim-devicons/wiki">VimDevicons 文档</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap caskroom/fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure>
<p>如果出现以下报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: Cask font-hack-nerd-font exists <span class="keyword">in</span> multiple taps:</span><br><span class="line">homebrew/cask-fonts/font-hack-nerd-font</span><br><span class="line">caskroom/fonts/font-hack-nerd-font</span><br></pre></td></tr></table></figure>
<p>顺序运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew untap caskroom/fonts</span><br><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure>
<h3 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h3><p>SpaceVim 将自动在用户的 HOME 目录生成 <code>~/.SpaceVim.d/init.toml</code>，并且所有的用户脚本存储在 <code>~/.SpaceVim.d/</code> 目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.SpaceVim.d/init.toml</span><br><span class="line"><span class="comment">#=============================================================================</span></span><br><span class="line"><span class="comment"># dark_powered.toml --- dark powered configuration example for SpaceVim</span></span><br><span class="line"><span class="comment"># Copyright (c) 2016-2017 Wang Shidong &amp; Contributors</span></span><br><span class="line"><span class="comment"># Author: Wang Shidong &lt; wsdjeg at 163.com &gt;</span></span><br><span class="line"><span class="comment"># URL: https://spacevim.org</span></span><br><span class="line"><span class="comment"># License: GPLv3</span></span><br><span class="line"><span class="comment">#=============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All SpaceVim option below [option] section</span></span><br><span class="line">[options]</span><br><span class="line">    <span class="comment"># set spacevim theme. by default colorscheme layer is not loaded,</span></span><br><span class="line">    <span class="comment"># if you want to use more colorscheme, please load the colorscheme</span></span><br><span class="line">    <span class="comment"># layer</span></span><br><span class="line">    colorscheme = <span class="string">&quot;gruvbox&quot;</span></span><br><span class="line">    background = <span class="string">&quot;dark&quot;</span></span><br><span class="line">    <span class="comment"># Disable guicolors in basic mode, many terminal do not support 24bit</span></span><br><span class="line">    <span class="comment"># true colors</span></span><br><span class="line">    enable_guicolors = <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Disable statusline separator, if you want to use other value, please</span></span><br><span class="line">    <span class="comment"># install nerd fonts</span></span><br><span class="line">    statusline_separator = <span class="string">&quot;arrow&quot;</span></span><br><span class="line">    statusline_inactive_separator = <span class="string">&quot;arrow&quot;</span></span><br><span class="line">    buffer_index_type = 4</span><br><span class="line">    enable_tabline_filetype_icon = <span class="literal">true</span></span><br><span class="line">    enable_statusline_display_mode = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable autocomplete layer</span></span><br><span class="line">[[layers]]</span><br><span class="line">name = <span class="string">&#x27;autocomplete&#x27;</span></span><br><span class="line">auto-completion-return-key-behavior = <span class="string">&quot;complete&quot;</span></span><br><span class="line">auto-completion-tab-key-behavior = <span class="string">&quot;smart&quot;</span></span><br><span class="line"></span><br><span class="line">[[layers]]</span><br><span class="line">name = <span class="string">&#x27;shell&#x27;</span></span><br><span class="line">default_position = <span class="string">&#x27;top&#x27;</span></span><br><span class="line">default_height = 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义主题（可选）：https://github.com/mhartington/oceanic-next</span></span><br><span class="line">[[custom_plugins]]</span><br><span class="line">name = <span class="string">&quot;mhartington/oceanic-next&quot;</span></span><br><span class="line">merged = 0</span><br></pre></td></tr></table></figure>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
