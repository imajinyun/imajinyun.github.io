<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Jinyun&#39;s Notes</title>
        <link>https://imajinyun.xyz/</link>
        <description>进一寸有进一寸的欢喜，退一步有退一步的从容</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 14 May 2022 11:31:12 &#43;0800</lastBuildDate>
            <atom:link href="https://imajinyun.xyz/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>栈和队列</title>
    <link>https://imajinyun.xyz/posts/ds-stack-queue/</link>
    <pubDate>Sat, 14 May 2022 11:31:12 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/ds-stack-queue/</guid>
    <description><![CDATA[<p>栈和队列可看作是特殊的线性表。它们的特殊性表现在它们的基本运算是线性表运算的子集，它们是运算受限的线性表。</p>]]></description>
</item>
<item>
    <title>线性表</title>
    <link>https://imajinyun.xyz/posts/ds-linear-list/</link>
    <pubDate>Wed, 04 May 2022 11:56:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/ds-linear-list/</guid>
    <description><![CDATA[<p>线性表是最基本、最简单、也是最常用的一种数据结构。线性表（linear list）是数据结构的一种，一个线性表是 <strong>n</strong> 个具有相同特性的数据元素的有限序列。</p>]]></description>
</item>
<item>
    <title>数据结构与算法起步</title>
    <link>https://imajinyun.xyz/posts/ds-get-started/</link>
    <pubDate>Wed, 04 May 2022 11:32:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/ds-get-started/</guid>
    <description><![CDATA[<p>整理一下数据结构与算法方面的概念和代码。</p>]]></description>
</item>
<item>
    <title>AWS Get Started</title>
    <link>https://imajinyun.xyz/posts/aws-get-started/</link>
    <pubDate>Mon, 17 Jan 2022 18:25:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/aws-get-started/</guid>
    <description><![CDATA[<p>AWS 在部署容器时提供了很多选项。但是知道哪种服务能做什么，即使是经验丰富的专业人士也会感到头痛。</p>]]></description>
</item>
<item>
    <title>PHP 源码学习二</title>
    <link>https://imajinyun.xyz/posts/php-src-learning2/</link>
    <pubDate>Mon, 13 Sep 2021 08:52:15 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/php-src-learning2/</guid>
    <description><![CDATA[<p>通过 GDB 跟踪调试来了解一下 <code>Zend String</code> 和 <code>Zend Array</code>。</p>]]></description>
</item>
<item>
    <title>PHP 源码学习一</title>
    <link>https://imajinyun.xyz/posts/php-src-learning1/</link>
    <pubDate>Sun, 12 Sep 2021 13:02:17 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/php-src-learning1/</guid>
    <description><![CDATA[<p>看到慕课网有大佬讲解 PHP 源码，既然来了，那就看看吧，以下为整理的笔记。</p>]]></description>
</item>
<item>
    <title>Go 连接字符串</title>
    <link>https://imajinyun.xyz/posts/go-concat-string/</link>
    <pubDate>Sun, 25 Jul 2021 20:41:09 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/go-concat-string/</guid>
    <description><![CDATA[<p>Go 中连接字符串的方法有很多种，其实掌握一两种较为高效的方法就足够了，其它权当看热闹。</p>]]></description>
</item>
<item>
    <title>Go 正确姿势</title>
    <link>https://imajinyun.xyz/posts/go-correct-posture/</link>
    <pubDate>Sat, 24 Jul 2021 22:28:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/go-correct-posture/</guid>
    <description><![CDATA[<p>在编写 Go 代码之时，我跟很多新手一样踩了不少坑，感觉非常有必要将那些踩过的坑记录下来以避免下次犯错。很多人说 Go 简单易学，上手容易，可惜我不是那些很多人中的一个，天资愚钝如此，我只能反复学习了。</p>]]></description>
</item>
<item>
    <title>Go 其它测试</title>
    <link>https://imajinyun.xyz/posts/go-other-test/</link>
    <pubDate>Thu, 22 Jul 2021 08:43:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/go-other-test/</guid>
    <description><![CDATA[<p>Go 的 testing 包除了测试，还提供了运行并验证示例的功能。一方面是文档的效果，是关于某个功能的使用例子；另一方面，可以被当做测试运行。</p>]]></description>
</item>
<item>
    <title>Go 基准测试</title>
    <link>https://imajinyun.xyz/posts/go-benchmark-test/</link>
    <pubDate>Sat, 17 Jul 2021 10:28:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://imajinyun.xyz/posts/go-benchmark-test/</guid>
    <description><![CDATA[<p>Go 语言标准库内置的 <code>testing</code> 测试框架提供了基准测试（benchmark）的能力，能让我们很容易地对某一段代码进行性能测试。基准测试主要是通过测试 CPU 和 Memory 的效率问题，来评估被测试代码的性能，进而找到更好的解决方案。</p>]]></description>
</item>
</channel>
</rss>
