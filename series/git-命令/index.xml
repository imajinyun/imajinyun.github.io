<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Git 命令 - series - Jinyun's Notes</title><link>https://imajinyun.xyz/series/git-%E5%91%BD%E4%BB%A4/</link><description>Git 命令 - series - Jinyun's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 07 Sep 2020 14:16:28 +0800</lastBuildDate><atom:link href="https://imajinyun.xyz/series/git-%E5%91%BD%E4%BB%A4/" rel="self" type="application/rss+xml"/><item><title>Git 命令大全</title><link>https://imajinyun.xyz/post/git-collection-command/</link><pubDate>Mon, 07 Sep 2020 14:16:28 +0800</pubDate><author>作者</author><guid>https://imajinyun.xyz/post/git-collection-command/</guid><description>&lt;p>通往 Git 的路上并不总是那么一帆风顺，你是否和我一样总是为了那么一条应景的命令抓狂，貌似记得大概是这么操作的，但总是敲不对头，在披荆斩棘的千钧一发利刃竟然还没出鞘，真特么气人，为了解燃眉之急，我垫了一块超大的 Git 命令大全，但那是别人家的，我要的是自己收集整理的这种，还好，我整理了一份，总算是出了口恶气。&lt;/p></description></item><item><title>Git Workflow</title><link>https://imajinyun.xyz/post/git-workflow/</link><pubDate>Tue, 01 May 2018 21:16:45 +0800</pubDate><author>作者</author><guid>https://imajinyun.xyz/post/git-workflow/</guid><description>&lt;p>工作流 - &lt;code>Workflow&lt;/code>：是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则，在计算机中以恰当的模型表达并对其实施计算。工作流要解决的主要问题是：为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。&lt;/p></description></item><item><title>Git 中一个客户端设置多个账号</title><link>https://imajinyun.xyz/post/git-multiple-accounts/</link><pubDate>Sat, 27 Jan 2018 10:15:52 +0800</pubDate><author>作者</author><guid>https://imajinyun.xyz/post/git-multiple-accounts/</guid><description>&lt;p>最近遇到这样的需求，需要在一台电脑上同时使用两个 &lt;code>github&lt;/code> 账号，负责不同的用途，比如：一个用来写个人项目，一个用来写公司的项目。&lt;/p></description></item><item><title>Git 分支</title><link>https://imajinyun.xyz/post/git-branch/</link><pubDate>Thu, 25 Jan 2018 08:01:32 +0800</pubDate><author>作者</author><guid>https://imajinyun.xyz/post/git-branch/</guid><description>&lt;p>分支几乎是 Git 的必杀技，倒不是说其他的版本控制没有分支这个特性，而是 Git 分支早已把其它的版本控制系统分支功能甩了好几条街。这么说不是夸张，因为 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息，将来要合并分支时，寻找恰当的合并基础的工作其实已经很显然的摆在那里，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是仗着这些特性作保障。&lt;/p></description></item><item><title>Git 查看日志</title><link>https://imajinyun.xyz/post/git-log/</link><pubDate>Wed, 24 Jan 2018 12:09:32 +0800</pubDate><author>作者</author><guid>https://imajinyun.xyz/post/git-log/</guid><description>&lt;p>在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 &lt;code>git log&lt;/code> 命令查看。&lt;/p></description></item><item><title>Git 基本操作</title><link>https://imajinyun.xyz/post/git-basic/</link><pubDate>Tue, 23 Jan 2018 10:39:29 +0800</pubDate><author>作者</author><guid>https://imajinyun.xyz/post/git-basic/</guid><description>&lt;p>通过一顿操作来熟悉 Git 是不二法门。&lt;/p></description></item><item><title>Git 起步</title><link>https://imajinyun.xyz/post/git-get-started/</link><pubDate>Mon, 22 Jan 2018 21:49:31 +0800</pubDate><author>作者</author><guid>https://imajinyun.xyz/post/git-get-started/</guid><description>&lt;p>Git 是一种在全球范围都广受欢迎的版本控制系统。在开发过程中，为了跟踪代码，文档，项目等信息中的变化，版本控制变得前所未有的重要。但跟踪变化远远不能满足现代软件开发行业的协同需求，基于 Git 的 Workflow 满足了合作编程的需求，让开发从此变得更加高效和有趣。相比集中式版本控制系统如 SVN ，分布式版本控制系统 Git 拥有更强大的分支管理与合并能力，支持离线开发，并良好地保留了提交过程，让您和您的团队在开发过程中如虎添翼。&lt;/p></description></item></channel></rss>